const {
    success,
    unknownError,
    serverValidation,
    badRequest,
  } = require("../../../../../globalHelper/response.globalHelper");
  const PDFDocument = require("pdfkit");
  const path = require("path");
  const fs = require("fs");
  const moment = require("moment");
  const { validationResult } = require("express-validator");
  const stream = require('stream')
  //   const { uploadToSpaces } = require("../../services/spaces.service.js")
  const uploadToSpaces = require("../../services/spaces.service.js");
  const numberToWords = require('number-to-words');



  
    const { EventEmitter } = require('events');
  const myEmitter = new EventEmitter();  
  const pdfLogo = path.join(
    __dirname,
    "../../../../../assets/image/image_1727359738344.file_1727075312891.ratnaafin (1).png"
  );
  const CheckedLogo = path.join( __dirname,
        "../../../../../assets/image/checkbox-checked.png")
  const unCheckedLogo = path.join( __dirname,
      "../../../../../assets/image/checkbox-unchecked.256x256.png")
  const watermarklogo = path.join(
    __dirname,
    "../../../../../assets/image/watermarklogo.png"
  );
  const mongoose = require("mongoose");


const customerModel = require('../../model/customer.model')
const coApplicantModel = require('../../model/co-Applicant.model')
const guarantorModel = require('../../model/guarantorDetail.model')
const applicantModel = require('../../model/applicant.model')
const technicalModel = require('../../model/branchPendency/approverTechnicalFormModel')
const appPdcModel = require('../../model/branchPendency/appPdc.model')
const disbursementModel =require('../../model/fileProcess/disbursement.model')
const finalSanctionModel = require('../../model/finalSanction/finalSnction.model')
const gtrPdcModel = require('../../model/branchPendency/gurrantorbankStatment.model')
const sanctionPendency = require('../../model/finalApproval/sanctionPendency.model.js')
const tvrModel = require('../../model/fileProcess/tvr.model.js')
// const creditPdModel = require('../../model/credit.Pd.model')
const sanctionModel =  require('../../model/finalApproval/sanctionPendency.model')
const finalsanctionModel =  require('../../model/finalSanction/finalSnction.model')
const cibilModel = require('../../model/cibilDetail.model')
const externalBranchModel = require("../../model/adminMaster/newBranch.model.js");
const creditPdModel = require('../../model/credit.Pd.model')
const bankDeatilsKycs = require('../../model/branchPendency/bankStatementKyc.model')
const gtrbankModel = require('../../model/branchPendency/gurrantorbankStatment.model')
const internalLegalModel = require("../../model/finalApproval/internalLegal.model.js");
const endUseOfLoanModeldata = require('../../model/endUseOfLoan.model.js');




  // Helper function to capitalize the first letter of each word in a name
function capitalizeFirstLetter(name) {
    return name
      .split(" ")
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(" ");
  }

  async function  RcplLdAndPgDeedpdf(allPerameters) {

    const font = "assets/font/Cambria.ttf";
    const fontBold = "assets/font/Cambria-Bold.ttf";
    const fontKerlaTamil = "assets/font/KarlaTamilUpright-Regular.ttf"
    const fontUrdu = "assets/font/IBMPlexSansArabic-Regular.ttf"
    const fontTelugu = "assets/font/TiroTelugu-Regular.ttf"
    const fontPanjabi = "assets/font/BalooPaaji2-VariableFont_wght.ttf"
    const fontMalayam = "assets/font/AnekMalayalam-VariableFont_wdth.ttf"
    const fontKannada = "assets/font/NotoSansKannada-VariableFont_wdth.ttf"
    const fontGujarati = "assets/font/Rasa-VariableFont_wght.ttf"
    const fontHindi = "assets/font/Mukta-Regular.ttf"
    const fontOriya = 'assets/font/BalooBhaina2-VariableFont_wght.ttf'
    const fontMarathi = 'assets/font/Hind-Regular.ttf'
    const fontBengali = 'assets/font/NotoSansBengali-VariableFont_wdth.ttf'
    // const baseDir = path.join("./uploads/");
    // const outputDir = path.join(baseDir, "pdf/");
    const PDFDocument = require('pdfkit');
  const doc = new PDFDocument({ margin: 50, size: "A4" });

  // Buffer to hold the PDF content
  const buffers = [];
  doc.on('data', (chunk) => buffers.push(chunk));
  doc.on('end', () => console.log('PDF generated successfully!'));
//fontKerlaTamil,fontUrdu,fontTelugu,fontSans,fontGurmukhi,fontMalayam
    // draw a border around the page
    function drawBorder() {
      const pageWidth = doc.page.width;
      const pageHeight = doc.page.height;
      const margin = 30;
      const lineWidth = 2;
  
      // Draw a simple border rectangle
      doc.lineWidth(lineWidth);
      doc
        .rect(margin, margin, pageWidth - 2 * margin, pageHeight - 2 * margin)
        .strokeColor("#324e98") // Set the color of the border
        .stroke();
    }
  
    // add logo to every page
    function addLogo() {
        // doc.moveDown(-5)
        if (fs.existsSync(pdfLogo)) {
          doc.image(pdfLogo, 400, 9, {
            fit: [160, 140],
            align: "right",
            valign: "bottom",
          });
        } else {
          console.error(`Logo file not found at: ${pdfLogo}`);
        }
      }
  
    // watermark function
    function addWatermark() {
      if (fs.existsSync(watermarklogo)) {
        doc.save();
        doc.rotate(-45, { origin: [doc.page.width / 2, doc.page.height / 2] });
  
        doc.image(
          watermarklogo,
          doc.page.width / 2 - 200,
          doc.page.height / 2 - 200,
          {
            fit: [450, 400],
            opacity: 0.05,
            align: "center",
            valign: "center",
          }
        );
  
        doc.restore();
      } else {
        console.error(`Logo file not found at: ${watermarklogo}`);
      }
    }
  
    // Footer with border and stylized text
    // Footer with border and stylized text
    function addFooter() {
      const pageWidth = doc.page.margins.left;
      const pageHeight = doc.page.height;
  
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#324e98")
        .text("RatnaaFin Capital Pvt Ltd", pageWidth, pageHeight - 80, {
          align: "center",
        });
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#000000")
        .text("Registered Office: 174/3, Nehru Nagar, Indore-452011 (M.P.)", {
          align: "center",
        });
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#000000")
        .text("CIN: 67120MP1994PTC008686", { align: "center" });
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#000000")
        .text("Phone: +91 7374911911 | Email: hr@fincoopers.com", {
          align: "center",
        });
  
      // Add a separator line above the footer
      doc
        .moveTo(50, doc.page.height - 100)
        .lineTo(doc.page.width - 50, doc.page.height - 100)
        .strokeColor("#324e98")
        .lineWidth(1)
        .stroke();
    }
    // if (!fs.existsSync(outputDir)) {
    //   fs.mkdirSync(outputDir, { recursive: true });
    // }
  
    const timestamp = Date.now();
    // const candidateName = 
    // (`${candidateDetails.name}`); // Capitalize name
    // const pdfFilename = `LdAndPgDeed.pdf`;
    // const pdfPath = path.join(outputDir, pdfFilename);
  
    // const doc = new PDFDocument({ margin: 50, size: "A4" });
    // const stream = fs.createWriteStream(pdfPath);
  
    // doc.pipe(stream);
  
    // Add logo and border to the first page
    // addLogo();
    //   addWatermark();
    // //drawBorder();
    // Title styling for OFFER LETTER in uppercase and underlined
    doc.moveDown(2);
    const yPosition = doc.y; // Get the current y position

    doc.moveDown(2); 
    doc
    .fontSize(10)
    .font(fontBold)
    .text("FACILITY AGREEMENT", { align: "center" });
  doc.moveDown(1);

  
doc.fontSize(9).font('Helvetica-Bold').text(`THIS FACILITY AGREEMENT (“Agreement”)`, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica').text(` is made at the place and on the date as set out in the Schedule.`)
doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("BETWEEN", { align: "center" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`RATNAAFIN CAPITAL PRIVATE LIMITED,`, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica').text(`is a Non-Banking Financial Company incorporated under the provisions of the Companies Act, 2013, having its registered office at 402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place Near Hyatt Hotel, New Delhi-110066, Delhi, India and corporate office at 2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India-380060 acting in these presents through its branch office located in the city/ town as mentioned in`,{
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica-Bold').text(` the Schedule("RCPL" `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`or the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`"Lender", `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`which expression shall, unless repugnant to the context, include its successors and assigns) of the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`FIRST PART`)

doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("AND", { align: "center" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`The `, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica-Bold').text(`Borrower(s) or Co-Borrower(s), `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`details where of are described and set out in `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`the Schedule, `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`of the `, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica-Bold').text(`OTHER PART. `)

doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`The term `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`“Borrower(s)”, `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`which expression unless repugnant to the context or meaning thereof be deemed to include (i) where the Borrower(s) is/are an individual, his/her heirs, executors, and administrators; (ii) where the Borrower(s) is/are a sole proprietorship concern, the person whose name appears as sole proprietor and shall include his/her heirs, executors, and administrators; (iii)where the Borrower(s) is/are a partnership firm under Indian Partnership Act, 1932, any and eachof the partner, and their survivor(s) or the partner(s) from time to time and their respective heirs, legal representatives, executors and administrators; (iv) where the Borrower(s) is a Hindu Undivided Family (HUF), the Karta and any or each of the adult member of the HUF and their survivor(s) and his /her/ their respective heirs, executors and administrators.(v) where the Borrower(s) is/are a Company or Society or Limited Liability Partnership(LLP), its successors andpermitted assigns; (vi) where the Borrower(s) is/are an unincorporated body, all members thereofand their respective successors; (vii) where the Borrower(s) is /are a Trust, the trustee/s for timebeing thereof and the successors of the trust / trustees). `)
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower(s) and the Co-Borrower(s) (if any) are here in after referred to as the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`“Borrower”. `)

doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`Lender and Borrower are hereinafter collectively referred to as `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`"Parties" `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`and individually as `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(` "Party".`)

doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("W H E R E A S", { align: "left", underline:"true" });
doc.moveDown(1);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(
    `A. The Borrower(s) has approached the Lender for availing a loan/advance of the amount as more particularly mentioned in Schedule I for the purpose as specified in Schedule I here to. \n\n` +
    `B. The Borrower(s) has proposed to create security over the Immovable Properties (hereinafter defined) by executing the Security Documents (hereinafter defined) as the principal and primary instrument for availing of the Loan. \n\n` +
    `C. At the request of the Borrower(s) and relying upon the representations, warranties, undertakings and covenants made by the Borrower(s), the Lender has agreed to advance/grant such loan for the aforesaid purpose, upon the terms and conditions set forth herein and other loan and security documents.`
  );
doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("NOW IT IS AGREED BY AND BETWEEN THE PARTIES HERETO AS FOLLOWS: ", { align: "left" });
doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("1. DFINITION AND INTERPRETATION ", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`In this Agreement, unless the context otherwise requires: `)
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. “Applicable Laws” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`means any act, statute, law, regulation, enactment, ordinance, treaty, rule, judgment, order, award, decree, bye-laws, rule of common law, Clearances, directions, directives, guidelines policy, licenses, requirement or any governmental restriction or condition including any similar form of decision of, or determination, application or execution by or any interpretation or pronouncement having the force of law of, any government authority having jurisdiction over the matter in question. `)

//---------------------------------------------new page -------------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica-Bold').text(`b. “CIBIL” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean Credit Information Bureau (India) Limited `)

doc.fontSize(9).font('Helvetica-Bold').text(`c. “Due Date” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean the date(s) on which any amount in respect of the Outstanding Obligations falls due as specified in this Agreement.`)

doc.fontSize(9).font('Helvetica-Bold').text(`d. “Event of Default” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean any event or circumstance specified as such in Clause13.a`)

doc.fontSize(9).font('Helvetica-Bold').text(`e. “Installment(s)” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall have the meaning ascribed to it in Clause 6.a`)

doc.fontSize(9).font('Helvetica-Bold').text(`f. “Immovable Properties” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean residential/commercial immovable properties as more particularly described in the Schedule III hereto, on the security of which the Lender has agreed to advance the Loan.`,{lineGap: 1})

doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`Without prejudice to the generality of the above “Immovable Properties” shall also include:\n\n i. In the case of part of a building, the entire built-up area (and any additions there to), the proportionate share in the common areas of the building and the proportionate undivided share in the land on which the said building is situated or is being built / will be built or \n\n ii. in the case of a flat, the entire built-up area (and any additions thereto), the proportionate share in the common areas of the building in which such flat is / will be situated and the proportionate undivided share in the land on which the said building is situated or is being built / will be built; or \n\n iii. In the case of an independent structure, the structure and entire plot of land on which the structure is situated or is being built / will be built or\n\n iv. In the case of an individual house, the house and entire plot of land on which the house will be built.`,{lineGap: 1})
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`g. “Loan” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall have the meaning ascribed to in Clause 0`)

doc.fontSize(9).font('Helvetica-Bold').text(`h. “Material Terms and Conditions” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean all terms and conditions mentioned in the sanction letter/s/ Transaction Documents.`)

doc.fontSize(9).font('Helvetica-Bold').text(`i. “Outstanding dues / Obligations” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean at any time the entire outstanding amount due in respect of the Loan, including but not limited to the present and future obligations and liabilities of the Borrower to pay/repay the principal amount of the Loan, Interest, Penal Charges, prepayment charges, other fees, liquidated damages, costs, charges and expenses(including any fees payable to the Lender) and other amounts, taxes, payable in respect of under the Transaction Documents.`)

doc.fontSize(9).font('Helvetica-Bold').text(`j. “Penal Charges” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean such charges as specified in the Schedule to this Agreement applicable in the event of default in repayment of loan instalments or non-compliance of agreed terms and conditions mentioned in the Sanction Letter.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`k. “Repayment Schedule” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall have the meaning ascribed to it in Clause 6.a`)

doc.fontSize(9).font('Helvetica-Bold').text(`l. “RBI” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(` shall mean the Reserve Bank of India`)

doc.fontSize(9).font('Helvetica-Bold').text(`m. “Security Documents” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean all documents, undertakings, agreements, deeds, declarations, undertakings, indemnities, affidavits, writings, certificates, no-objections, letters, filings, forms, towards or in relation to creation, perfection, filing, registering, etc. of Security Interest and/or issue of a guarantee, as part of the Security, and whether executed bythe Borrower, Security Providers, Lender or the Borrower or any third party, as per the requirement of the Lender and as may be amended, confirmed or restated from time to time, as per the requirement of the Lender.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`n. “Security Provider” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean any person whose property or assets /any part thereofare/shall be charged and/or who creates/is required to create any Security Interest in favour of the Lender, to secure the Outstanding Obligation or any part thereof.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`o. “Transaction Documents” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(` shall mean this Agreement, Security Documents and include all writings and other documents executed or entered into or to be executed or entered into, by the Borrower or any other Person, in relation to or pertaining to the Loan and each such transaction document as amended from time to time.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`p. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`a reference to the singular includes the plural (and vice versa)`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`q. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`the headings in this Agreement are inserted for convenience of reference only and are to beignored in construing and interpreting this Agreement.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`r. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`reference to the words “include” or “including” shall be construed without limitation.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`s. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`reference to a gender shall include references to the female and male gender`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`t. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`all approvals, permissions, consents or acceptance required from Lender for any matter shall require the “prior”, “written” approval, permission, consent or acceptance of Lender and`,{lineGap: 1})


//---------------------------------- new page ---------------------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica-Bold').text(`u. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`in the event of any disagreement or dispute between Lender and the Borrower/s regarding themateriality of any matter including of any event, occurrence, circumstance, change, fact, information, document, authorization, proceeding, act, omission, claims, breach, default orotherwise, the opinion of Lender as to the materiality of any of the foregoing shall be final and binding on the Borrowers`,{lineGap: 1})

doc.moveDown(1);
doc
.fontSize(10)
.font(fontBold)
.text("2. LOAN FACILITY", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Based on the Borrower's request, representations, warranties, covenants and under takings as contained herein, the Lender hereby agrees to grant to the Borrower and the Borrower hereby agrees to avail from the Lender, a secured loan facility in the aggregate amount asmentioned in the Schedule I here to (“Loan”) on the terms and conditions containedherein in this Agreement.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The relationship between the Lender and the Borrower shall commence from the date ofthis Agreement and subsist until all the Outstanding Obligations payable by the Borrowerto the Lender under this Agreement and in all other Transaction Documents shall have been fully paid to and received by the Lender.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`It is hereby agreed between the Parties that the Lender may, at its sole and absolute discretion, cancel and/or withdraw the undrawn limit of the Loan as sanctioned by the Lender. The said withdrawal shall not absolve the Borrower of any of its liability to repay the Outstanding Obligations.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`d. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The term or tenor of the Loan shall be as set out in the Schedule I hereto.`,{lineGap: 1})

doc.moveDown(1);
doc
.fontSize(10)
.font(fontBold)
.text("3. DISBURSEMENT", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Upon the request of the Borrower, the Lender shall, at its sole discretion, disbursethe Loan in lumpsum or suitable installments having regard to the need of the Borrower. The decision of the Lender in this regard, shall be final and binding onthe Borrower.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The amount of the Loan will be disbursed by the Lender subject to compliance by the Borrower with the terms and conditions provided in this Agreement. The Loan amount shall be disbursed to the Borrower net of all initial payments towards documentation charges, loan processing charges, premium for insurance (if applicable) and such other charges as specified in the Schedule I here to.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Interest on the Loan will begin to accrue in favour of the Lender as and from the date of disbursement of the Loan.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`d. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Not with standing anything contained in this Agreement, the Lender may terminatethe right of the Borrower to disbursements under the Loan, if the request for suchdisbursement shall not have been made within 30 days from the date of this Agreement or by such extended date as may be agreed upon by the Lender in writing.`,{lineGap: 1})

doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`4. INTEREST RATES AND PENAL CHARGES `)
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall be liable to pay interest on the Loan from time to time at the rateas specified in the Schedule I here to (“Interest”). The Lender in its sole discretion would be entitled to modify and vary the said rate of Interest from time to time a sper its policy, market conditions and/or applicable laws including on account of changes in interest rates made by the RBI from time to time. In the event rate of Interest is modified, then in such event interest would be payable by the Borrower at the revised rate of interest.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Interest will be calculated on the basis of rate of Interest mentioned in the Schedule I hereto and is rounded off to the next rupee calculated on monthly rests and any other charges shall be computed on the basis of a year of three hundred and sixty-Five (365) days.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`In the event of the Borrower committing a default or delay in the repayment of any Instalment on the Due Date, in full or in part, the borrower shall pay penal chargesat the rate specified in the Schedule I hereto on the overdue amount from the date ofdefault till the date of payment or the Borrower committing any breach or default ofagreed terms and conditions mentioned in the Sanction Letter or under any otherTransaction Documents, the Borrower shall, in respect of the OutstandingObligations, pay the Penal charges as the rate specified in the Schedule I hereto, onthe outstanding loan amount from the date of default till such time that the breach iscured. The Borrower expressly agrees that the rate of such Penal charge is a fairestimate of the loss likely to be suffered by the Lender by reason of such delay/ default on the part of the Borrower. The payment of Penal charges shall not absolvethe Borrower of the other obligations including to make timely payments and/or inrespect of such default or affect any of the other rights of the Lender including inrespect of the default. It is expressly specified that the Lender expressly reserves all the other rights that may accrue to it on any default by the Borrower.`,{lineGap: 1})

//-------------------------------------------- new page --------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc
.fontSize(10)
.font(fontBold)
.text("5. FEES, CHARGES, COSTS AND CLAIMS", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower undertakes to pay forthwith on demand to the Lender and in no caselater than 30 (Thirty) calendar days from the date on which demand being made all costs and expenses including cost and expenses for investigation of title to any immovable property offered/proposed to be offered as security and for the preparation, execution, preservation, performance, enforcement and realization ofthe Outstanding Obligations, Security Documents and other instruments creating and/or evidencing the creation of any security for the Loan as also any other instruments required in connection with the Loan.`,{lineGap: 1})
   
doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall bear the service charges, processing fee, stamp duty, cheque bouncing charges, cheque swapping charges, loan cancellation/re-booking charges, and any other fees as more particularly detailed in the Schedule I hereto in relationto the Loan`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall during the tenure of the Loan bear all taxes (including interest tax and GST) as may be applicable or as may be levied by any government body orauthority in relation to the Loan.`,{lineGap: 1})

doc
.fontSize(10)
.font(fontBold)
.text("6. REPAYMENT", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a.`,{continued: true,lineGap: 1})

doc.fontSize(9).font('Helvetica').text(`The Borrower shall repay the Loan together with interest, penal charges and other charges thereo n in such number of installments, of such amounts, and on such Due Dates `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`(“Installments”),`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`as mentioned in the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`Schedule II`,{continued: true,lineGap: 1})

doc.fontSize(9).font('Helvetica').text(` here to `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(` (“Repayment Schedule”).`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Repayment Schedule is without prejudice to the right of the Lender to recompute the interest in case of variation and on such re-computation, payment shall be made by the Borrower in accordance with such varied Repayment Schedule. Not with standing anything to the contrary contained in this Agreement, the Loan shall be repayable on demand and the Lender shall have the right to be paid forth with on demand the entire Outstanding Obligations in respect of the Loan. The Borrower hereby agree that the time is the essence of the contract.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If such Due Date falls on a day which is not a business day at the place where the payment is to be made, the Borrower shall pay the Instalment on the business day preceding the said Due Date for such repayment. All payments to be made by the Borrower to the Lender shall be made free and clear of and without any deductionfor on account of any taxes. If the Borrower is required to make such deduction, then, in such case, the sum payable to the Lender shall be increased to the extent necessary to ensure that, after making such deduction, the Lender receives and retains (without any liability for such deduction) a sum equal to the sum which it would have received had such deduction not been made or required to be made.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Lender shall have the right at any time or from time to time to review and reschedule the Repayment Schedule in such manner and to such an extent as the Lender may, in its sole discretion, decide and the repayment will there upon be made as per the revised Repayment Schedule.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower agrees declares and confirms that not with standing any of the provisions of any applicable law or any of the terms and conditions contained in the Agreement and or any Transaction Documents, any payment(s) shall unless otherwise agreed to by the Lender in writing be appropriated in the manner following: \n\n i. Firstly, towards costs, charges, expenses and other monies, due and payableto the Lender. \n\n ii. Secondly, towards the Interest due and payable and / or becoming due andpayable to the Lender.\n\n iii. Thirdly, towards repayment of the amount of the principal sums due andpayable or becoming due and payable to Lender and\n\n iv. Lastly, towards any other amount due and payable to the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Provided however that the Lender reserves the right to appropriate the moneys received in any other manner as it may deem appropriate at its sole discretion.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`e.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall repay / pay the Installments and other monies to the Lenderthrough any one of the following: (i) by postdated cheques. (ii) by Electronic Version 1.3 6of66Clearing System (Debit Clearing) as notified by RBI (ECS), (iii) by directly payingamounts by cheque / draft issued in the name of “RATNAAFIN CAPITAL PRIVATE LIMITED”. (iv) NACH or (v) by any other method provided the same isapproved by the Lender. The method for payment shall be as selected by the Borrower in Schedule I.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`f.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall not be entitled to cancel or issue stop- payment instructionswith respect to the postdated cheques / ECS / NACH mandates for so long as anypart of the Outstanding Obligations is pending.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower hereby unconditionally and irrevocably authorizes the Lender, acting through its officers, authorized agents to fill necessary details in the cheque/s delivered to the Lender for an amount not exceeding the maximum amount due by the Borrower to the Lender under the terms and conditions of this Agreement without notice to the Borrower in his behalf. The Borrower hereby confirm and agree that the Lender is entitled in its sole discretion to use one or more such cheques or ECS or NACH for the regularization/settlement of repayment of theLoan.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(``,{continued: true,lineGap: 1})



//------------------------------------------------------------new page 5 ------------------------------------------------------
doc.addPage();
// addLogo();
doc.moveDown();

doc.fontSize(9).font('Helvetica-Bold').text(`h.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall at all times maintain sufficient funds in its bank account to ensure that the ECS, post-dated cheques, or NACH, if any, issued by the Borrower are not dishonored and the Instalments are received / realized by the Lender on or before the applicable Due Dates.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Not with standing the mode of repayment / payment, the Borrower shall continue toremain at all times liable and responsible for ensuring the payment / repayment ofall Instalments and all other monies in respect of the Loan to the Lender on or before the relevant Due Dates without any further notice / intimation being given by the Lender and all such amounts payable by the Borrower to the Lender shall be paid without any deductions whatsoever so as to enable the Lender to fully realize the amounts due on or before the respective Due Date(s). Credit for payments by any method will be given only on realization of payments. The acceptance by the Lender of any payment which is less than the full Instalment or other amounts due and owing at such time shall not constitute a waiver of the Lender’s right to receive payment in full at such time or at any subsequent time or a waiver of any other rights whatsoever of the Lender under this Agreement.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`j.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall obtain the Lender’s prior written consent for changes in authorised signatory who has signed the post dated cheques /ECS/NACH which have been submitted to the Lender at the time of disbursal of this Loan. The Lender may permit the Borrower to swap / exchange the post dated cheques/ECS/NACH issued to the Lender with alternate post dated cheques/ ECS/NACH drawn on another bank(as approved by the Lender). In such an event, the Borrower shall promptly replace the post dated cheques and/ or the ECS or NACH mandates, agreements and/or other documents executed for payment of the Instalments and issue fresh post dated cheques, ECS or NACH mandates in lieu thereof to the satisfaction of the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`k.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Without prejudice to any other rights or remedies the Lender may have under thisAgreement and/or under the applicable law, the Borrower shall be liable to pay a flat charge as stated in the Schedule I hereto in case of dishonour of the cheques or dishonour of ECS or NACH mandates or any other recognized mode by Lender onthe first presentation. In case of dishonour on the second presentation, a furthercharge, as stated in the Schedule I, would be levied in respect of such dishonoured cheques. The levy of charge upon dishonour is without prejudice to the other rights which the Lender has under this Agreement or under law or equity.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`l.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower may prepay the entire Outstanding Obligations at any time by giving one-month prior notice in writing to the Lender. In the event the Borrower exercises its right to prepay, the Lender will be entitled to charge prepayment charges at therate as set out in the Schedule I here to. No amount that has been prepaid shall be reborrowed by the Borrower.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`m.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`In case of two or more Borrowers, the liability of the co-borrower(s) to repay theLoan together with interest, etc, and to observe the terms and conditions of thisAgreement and any other Transaction Documents shall be is joint and several andconsequently the Lender shall have a sole discretion to proceed against all or any ofthe co-borrower(s) to recover the Loan and other charges payable by under this Agreement.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(10).font('Helvetica-Bold').text(`7. LOCK IN PERIOD`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`7.1.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrowers shall not repay/ prepay/ foreclose any portion of the outstanding loan amount either in part or in full during the Lock-in period (“Lock-in Period”) as described in Schedule – I of this agreement.\n `,{lineGap: 1})   

doc.fontSize(9).font('Helvetica-Bold').text(`7.2.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrowers may exercise the option of pre-payment/repayment/foreclosure post Lockin-period, where applicable, subject to the Borrowers and/or the guarantor(s) complying with the following conditions and at the absolute discretion of the Lender. After the expiry of Lock-in Period as provided in Schedule - I here under, the Borrowers shall givethe Lender a notice of 45 days intimating his desire to repay/ prepay/ foreclose the loan and the Lender may accept repayment/ prepayment/ foreclosure together with prepayment charges/ fore closure charges as specified in Schedule -I, hereto and such charges is payable by the Borrower together with applicable taxes.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`7.3.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica')
   .text(`The amount repaid/prepaid shall first:\n\n`, { lineGap: 1 })
   .text(
      `7.3.1. Be used to credit the penal charges, charges, legal expenses if any, Arrears of installments, interest due up to date for the current month, The current month EMI, foreclosure / pre-payment charges and other expenses and taxes due as mentioned in this agreement.\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `7.3.2. If any amount remains after meeting the charges, then it shall be adjusted towards the principal amount. If the entire amount due for prepayment is not remitted then the amount so received by the Lender would be treated as an advance payment of future EMI and will be adjusted to EMI month on month, as and when the EMI falls due for payment.\n\n`, 
      { lineGap: 1, indent: 20 }
   )
   .text(
    `7.3.3. The Borrowers here by agrees that the Lender is not obliged to reverse the interest that may accrue on account of advance payment. The amount due under fore closure should be paid in full by the Borrower to the Lender to qualify the account foreclosure.\n\n`, 
    { lineGap: 1, indent: 20 }
 );


//------------------------------------------------new page 5 -------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica-Bold').text(`7.4.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Not with standing anything contained the Borrowers shall remit the monthly instalments without any default in terms of the Agreement. The Option to accept repayment/ prepayment or decline the request for repayment/prepayment during the Lock-in period is at the sole discretion of the Lender.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`7.5.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If the loan is being foreclosed by the Borrowers by obtaining financial assistance from any other financial institution/ Bank/ NBFC/ Third party, the Borrower shall be charged additional prepayment/foreclosure charges at the rate specified in Schedule - I herein, which is payable together with applicable Goods and Service Tax (GST) by the Borrower in addition to the applicable foreclosure charges. Furthermore, the Borrower undertakesand agrees to execute such documents as the company may require and abide by such amended/altered repayment schedule as specified by the company.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`7.6.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If the Borrowers requests for repayment/ prepayment/ foreclosure during the Lock-inperiod, then the Lender is at liberty to refuse the repayment/prepayment or in the alternative lay down conditions for acceptance at its discretion which the Borrower is at liberty to accept or otherwise.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(10).font('Helvetica-Bold').text(`8. CONDITIONS PRECEDENT TO DISBURSEMENT OF LOAN`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica').text(`The obligation of the Lender to make the disbursement of the Loan shall be subject to the condition that:\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower meets the Lender’s requirement of creditworthiness. The Lender shall be entitled to make or cause to be made inquiries of such nature as the Lender may deem fit for the creditworthiness of the Borrower. The Lender shall be further entitled to call for such credentials from the Borrower as may be required to prove the creditworthiness of the Borrower.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No Events of Default as stated in Clause 13.a shall have happened and be continuing.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower or Security Provider (as the case may be) shall have absolute, clear and marketable title to the said Immovable Property and the said Immovable Property is absolutely unencumbered and free from prior charges/lien whatsoever.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No extraordinary circumstances shall have occurred which shall make it improbable for the purpose for which Loan is provided to be carried out and/or for the Borrower to fulfill its obligations under this Agreement;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower or the security provider shall have created and perfected security andor guarantees for the repayment of the Loan with interest in favour of the Lender asmay be required by the Lender and execute all necessary documents as may be stipulated by the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall have satisfied the Lender to the effect that there is no action, suit, proceedings or investigation pending or to the knowledge of the Borrower or is threatened by or against the Borrower, before any court of law or tribunal or anyother competent Government Authority which might have a effect on the financial and other affairs of the Borrower or which might put into question the validity or performance of this Agreement and/or other Transaction Documents executed by the Borrower in favour of the Lender`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Such other conditions precedents as may be detailed in the sanction letter.`,{lineGap: 1})

doc.moveDown(1)
doc.fontSize(10).font('Helvetica-Bold').text(`9. SECURITY`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`In consideration of Lender having granted/agreed to grant to the Borrower the Loan, the Borrower shall create and/or cause to create such security interest in such form and manner and of such nature as may be required by the Lender and also as provided in the Schedule here to to secure the Borrower's Outstanding Obligations`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`(“Security Interest”).`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower agrees with, and undertakes that the Lender, shall have a first and exclusive charge over the said Immovable Property as more particularly describe inthe Schedule III hereto and that the Borrower/Security Provider shall not create anyother encumbrance, charge or security interest in the Immovable Properties in favour of any other Person or body, except with the prior written consent of the Lender.\n\n `,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica')
   .text(`In addition to the above, the Borrower do the following:\n`, { lineGap: 1 })
   .text(
      `i. The Borrower shall execute money bond or a demand promissory note and a letter of continuity in favour of the Lender for the Loan;\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `ii. The Borrower shall or cause the Security Provider to execute any such agreement/s, document/s, undertaking/s, declaration/s that may be required now or here after at any time during the pendency of this Loan/or any other loan/sgranted by the Lender hereafter\n\n`, 
      { lineGap: 1, indent: 20 }
   )


//--------------------------------------------------new page 7 ----------------------------------

doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica')
   .text(
      `iii. The Borrower shall ensure that the deed of mortgage to be executed by the Borrower/Security Provider for creation of the mortgage over the immovable  property, be duly registered with the relevant Sub-Registrar of Assurances. Further, in case of equitable mortgage, the Borrower/Security Provider shall ensure that an intimation/notice is provided to the Sub-Registrar of Assurances informing him/her that a charge by way of equitable mortgage has been createdover the said Immovable Property, within the timelines and in the manner as provided for in the applicable law.\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `iv. The Borrower shall or cause the Security Provider to file all forms and make all filings as may be required under Applicable Law including, without limitation, the filing of Form CHG-1 under the Companies Act, 2013 with the applicable Registrar of Companies (if applicable), in respect of creation of charge as above with in 30 (Thirty) days from the date of creation of security.\n\n`, 
      { lineGap: 1, indent: 20 }
   )
   .text(
    `v. The Borrower shall or ensure that the Security Provider shall provide all cooperation and assistance that the Lender may require in relation to any filings required to be made with the Central Registry of Securitisation Asset Reconstruction and Security Interest and shall bear all cost, charges and expenses which may be incurred by the Lender in relation to such filings.\n\n`, 
    { lineGap: 1, indent: 20 }
 )
 doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall submit such number of advance Instalments as mentioned in the Schedule as a security deposit with the Lender towards the security for the repayment of the Outstanding Obligations`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`(“Security Deposit”).`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Security Deposit shall be returned/ refunded by the Lender to the Borrower only after there payment of entire Outstanding Obligations. The Security Deposit shall carry the interest at the rate specified in the Schedule hereto from the date of making such Security Deposit till the last Repayment and after which the Security Deposit shall cease to carry interest thereon. The Borrower shall not be entitled to withdraw or seek refund of the Security Deposit or any part there of till any amount payable to the Lender is due and pending. In the Event of Default as mentioned in this Agreement, the Lender shall be entitled to for feit the Security Deposit and interest there on andt he same shall be utilized towards the repayment of the Outstanding Obligations. Any amount of the Outstanding Obligations remaining unpaid to the Lender after such adjustment shall be paid by the Borrower immediately on such demand by the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall furnish such additional securities including additional guarantee(s), as the Lender may deem fit, in its sole discretion. In such an event the Borrower shall provide such additional security and in this regard execute such agreements, undertakings, documents, power of attorney/s that may be required by the Lender, failing with the Loan may be recalled/Repayment of the Loan may be accelerated by the Lender with immediate effect.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The security interest created in favour of the Lender shall continue in full force till all the Outstanding Obligation have been fully paid or discharged by the Borrower(s) to the Lender and until the Lender issues a ‘No Objection Certificate’ in this regard. The Security Interest of the Lender and the obligation of the Borrower shall not be affected, impaired or discharged by the winding up, or insolvency or by merger, amalgamation, reconstruction, or takeover of the management, dissolution or appropriation of the business or assets of the Borrower /Security Provider (as thecase may be).`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If at any time during the subsistence of the Agreement, the Lender is of the opinion that any of the security provided by the Borrower has become inadequate to cover the balance of the Outstanding Obligations, then the Borrower shall provide and furnish such additional security including hypothecation and/or mortgage of or charge over such of the Borrower’s movable or immovable properties as may beacceptable to the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`h.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall, until the full repayment of the Outstanding Obligations, fully insure, and keep the Immovable Property and all other properties over which the Security Interest are created in favour of the Lender so insured against all comprehensive risks and assign the benefits of such policy/ies in with the name of the Lender appropriately endorsed and recorded as 'Assignee' in such insurance policy/ies, for a value as required by the Lender and produce evidence there of to the Lender from time to time and wherever called upon to do so.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall, until the full repayment of the Outstanding Obligations ensuresthat the above-mentioned insurance policy/ies are valid, subsisting and operative and shall make timely payments of the premium. The Lender reserves the right to pay the pay the premium on behalf of the Borrower and reimburse the same from the Borrower.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`j.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Lender shall have the right to receive and adjust any payment that it may receive in connection with any insurance policy / policies against the Loan and alter the repayment schedule as set out in Schedule II here under in any manner as it may deem fit not with standing anything to the contrary contained in this Agreement or any other document.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`k.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower here by irrevocably authorizes the Lender to act on the Borrower’s behalf, at the Borrower’s sole risks and costs and to take all necessary steps, actions and proceedings as the Lender deems fit to safeguard its interests: (i) to adjust, settle, compromise or refer to arbitration any dispute arising under or in connection withany insurance and such adjustment, settlement, compromise, and any award made on such arbitration shall be valid and binding on the Borrower, and (ii) to receive all monies payable under any such insurance or under any claim made there under and to give a valid receipt there for and apply such proceeds in accordance with the terms here of or in such other manner as deemed fit by the Lender.`,{lineGap: 1})


//--------------------------------------------------new page 8 ----------------------------------
doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica-Bold').text(`l.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall not be entitled to raise any claim against the Lender, in case the Lender chooses not to take any action in relation to the insurance claims or proceedings and/or on the grounds that a larger sum or amount of claims / settlement might or ought to have been received or be entitled to dispute the liability of the Borrower for the balance amount of Outstanding Obligations remaining due after such adjustment.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`m.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall permit the Lender, its employee, representative or its agents at all times, to have free access of the Immovable Property to inspect, view or examine the state and condition of the Immovable Property.`,{lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`10. BORROWER’S REPRESENTATIONS, WARRANTIES AND COVENANTS`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower here by represents, warrants and undertakers to the Lender that:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All the particulars and details provided by the Borrower to the Lender in this or any other Transaction Documents submitted are true correct, complete and up to date in all respect and no material details have been concealed which would have an effect on the decision of grant of the Loan`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower has full power, capacity, and authority to execute, deliver and perform the Transaction Documents and have taken all necessary action (corporate, statutory or otherwise) for the authorization, execution, delivery, and performance of this Agreement and Transaction Documents.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`It has not taken any corporate action nor has any steps been taken or legal proceeding been initiated or threatened against the Borrower for its winding up, insolvency, dissolution, administration, reorganization or for appointment of receiver, administrator of the Borrower or all or any of its assets or undertakings`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`As of the date of this Agreement, there are no litigation, proceedings or disputes pending or threatened against or affecting the Borrower which could have as ubstantially adverse effect on the Borrower, its business or operations, its assets orits ability to perform its obligations under this Agreement and other Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`the Borrower or the Security Provider (as the case may be) has absolute clear and marketable title to the Immovable Property and that the Immovable Property is absolutely unencumbered and free from any liability whatsoever`,{continued: false,lineGap: 1})
// doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
// doc.fontSize(9).font('Helvetica').text(`The Borrower or the Security Provider (as the case may be) shall continue to remainin occupation/possession of the Immovable Property and shall not part with thepossession thereof either partly or wholly until the entire Loan with interest has beenrepaid to the Lender.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower or the Security Provider (as the case may be) shall continue to remainin occupation/possession of the Immovable Property and shall not part with the possession thereof either partly or wholly until the entire Loan with interest has been repaid to the Lender.`,{lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`11. AFFIRMATIVE COVENANTS`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower covenants and undertakes that at so long as the amounts due under this Agreement shall remain outstanding and until the full and final payment of all the Outstanding Obligations, it shall, unless the Lender waives compliance in writing:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Utilize the Loan solely for the purpose stated by it to the Lender`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Maintain the Immovable Property in good order and condition and all necessary repairs, additions and improvements there to will be made during the currency of the Loan and that the Borrower will ensure that the value of the Property does not diminish`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. The Borrower shall notify the Lender of any change in the Borrower's employment, business or profession. In the event the Borrower is self-employed, the Borrower hereby undertakes to keep the Lender informed about the financials of his business on a regular basis as may be notified to him by the Lender. In the event the Borrower is a company, partnership or sole proprietary, the Borrower shall provide the Lender such information and/or documents as may be required by the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Comply with all the terms and conditions of holding the Immovable Property and all the rules, regulations, bye-laws, etc., of the concerned co-operative society,association, company or any other competent government authority and pay maintenance charges, municipal tax and other charges in relation to the Immovable Property as also any other dues, etc., as may be payable in respect of the Immovable Property and/or of the use thereo.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Promptly inform the Lender of any loss or damage to Property due to any act of God or damage or other risks against which the Property may not have been insured.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Regularly and punctually repay and discharge all the Outstanding Obligations in the manner set out herein. Not with standing the Repayment Schedule here under, the Borrower agrees that the Lender shall have the right to be paid on demand the entire Outstanding Obligations.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Maintain its corporate existence and obtain, comply with the terms of and do all that is necessary to maintain in full force and effect all authorisation, approvals, licenses and consents required to enable it to law fully carry on its business`,{lineGap: 1})


//-----------------------------------------------------new page 9 ------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica-Bold').text(`h.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Obtain, comply with the terms of and do all that is necessary to maintain in full force and effect all authorization, approvals, licenses and consents required to enable it to enter into and perform its obligation under this Agreement and to ensurelegality validity, enforceability or admissibility in evidence of any of the Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Inform the Lender of any material litigation, arbitration or other proceedings which affect the Borrower and/or the Immovable Property, forthwith upon such proceedings being instituted or threatened by any persons making a claim for money against the Borrower and/or the Immovable Property;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`j.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Promptly inform the Lender of any occurrence of which it becomes aware which might adversely affect the Borrower or affect its ability to perform its obligations under any of the Transaction Documents;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`k.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Promptly inform the Lender of the occurrence of any Event of Default and of the steps being taken to remedy the same and will from time to time, if so requested by the Lender, confirm to the Lender in writing that save as otherwise stated in such confirmation, no other Event of Default has occurred and is continuing`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`l.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`appraise the Lender of the occurrence or likely occurrence of any event which is likely to affect the capacity of the Borrower(s) to repay the Outstanding Obligations or likely to affect the security for the said Loan or the obligations of the Borrower to FICCL in respect of the said Loan`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`m.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. forth with inform the Lender on the occurrence or likely occurrence of, inter alia, any of the following events, namely, the occurrence of any event which is likely to affect the Borrower(s) business, steps taken by authorities for recovery of statutory,dues, etc.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`n.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`pay regularly all taxes, assessment dues, duties and impositions as may, from time to time, be payable to any Government body or authority`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`o.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`pay and reimburse to the Lender all governmental charges, taxes or penalties imposed on or in pursuance of this Agreement or on any instruments issued here under;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`p.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`bear all costs of making good any deficit in stamp duty on the documents executedby the Borrower or any other person in relation to the Loan and/or security createdby the Borrower in favour of the Lender; and`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`q.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`perform and execute, on request of the Lender, such acts and deeds, as may be necessary to carry out the intent of this Agreement.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`12. NEGATIVE COVENANTS`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica').text(`The Borrower covenants and undertakes that at so long as the amounts due under this Agreement shall remain outstanding and until the full and final payment of all the Outstanding Obligations, it shall not, unless previously approved by the Lender in writing:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Make any changes in its constitution, business management, ownership or control and shall not alter its constitutional / incorporation documents (as applicable)`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Undertake or permit any merger, de-merger, consolidation, reorganization, scheme of arrangement or compromise with its creditors or shareholders or effect any scheme of amalgamation or reconstruction`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Create any encumbrance or lien of any nature whatsoever over the ImmovableProperty;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Sell, transfer, lease, give on leave and license basis, alienate, or otherwise part with the possession of the Immovable Property or any part thereof`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Enter into any agreement or arrangement with any Person, institution or local or Government body for the use, occupation or disposal of the Immovable Property or any part there of.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Stand surety for anybody or guarantee the repayment of any loan or the purchase price of any asset`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Execute any document, such as power of attorney, or any other similar or other deed, in favour of any Person to deal with the Immovable Property in any manner`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`h.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Effect any oral or other partition of the immoveable Property or enter into any family arrangement in this regard.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Borrow from any source or charge any property until the Borrower's Outstanding Obligations are paid in full.`,{continued: false,lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`13. EVENT OF DEFAULT`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(` The occurrence of any one or more of the following events or events similar there to, shall each constitute an event of default`,{lineGap: 1,continued: true})
doc.fontSize(9).
font('Helvetica-Bold')
   .text(`(“Event of Default”):\n`, { lineGap: 1 });
doc.fontSize(9).
font('Helvetica')
   .text(
      `i. Default or delay in payment/repayment of any Instalment or any part there of, whether for principal or interest or otherwise due and payable from the Borrower under this Agreement, within the time stipulated here under and/or other Transaction Documents\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )


//---------------------------------------------- new page 10 ---------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica')
   .text(
      `ii. Any breach or omission or default (other than a payment default) in performance of any covenant, condition, obligations or undertaking under this Agreement or the Transaction Documents by the Borrower, guarantor or any other person (as the case may be) and such default has continued for a period of 7 (seven) days after the notice in writing there of has been given to the Borrower or as the case may be to any other person by the Lender(except where the Lender is of the opinion that such default is incapable of remedy, in which case, no notice shall be required);\n\n`, 
      { lineGap: 1, indent: 20 }
   )

doc.fontSize(9).font('Helvetica')
   .text(`iii. Any representation or warranty or covenant on the part of the Borrower made or deemed to be made in or pursuant to the Transaction Documents is or proves to be incorrect, incomplete or misleading in any material respect;\n\n`, { lineGap: 1,indent: 20  })
   .text(
      `iv. Failure by the Borrower to keep the immovable property full and comprehensively insured from time to time and punctually pay the insurance premium on such policies as and when due;\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `v. Failure by the Borrower to provide the insurance policies of the Immovable Property with endorsement of hypothecation in favour of the Lender as per Clause 9.h of the Agreement;\n\n`, 
      { lineGap: 1, indent: 20 }
   )
   .text(
    `vi. The Immovable Property or any part there of is let out, given on leave and Version 1.3 14of66license, sold, disposed of, charged, encumbered or otherwise alienated in anymanner whatsoever without written approval of the Lender\n\n`, 
    { lineGap: 1, indent: 20 }
 )
 .text(
  `vii. The Borrower or guarantors, if any (in case of either of them being acorporation or partnership firm) takes any action or other steps are taken or legal proceedings are started for insolvency, winding up, dissolution or reorganization or for the appointment of a liquidator, receiver, trustee or similar officer on its assets\n\n`, 
  { lineGap: 1, indent: 20 }
)
.text(
  `viii. The Borrower or guarantors, if any (in case of being an individual) dies or takes any steps or any steps are taken with a view to his being made in solvent in any jurisdiction or with a view to the appointment of a receiver, trustee or similar officer of any of his assets\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `ix. if the Borrower ceases or threatens to cease to carry on any of its businesses or gives notice of its intention to do so or if all or any part of the assets of the Borrower required or essential for its business or operations are damaged or destroyed or there occurs any change from the date of this Agreement in thegeneral nature or scope of the business, operations, management, orownership of the Borrower, which could have a material adverse effect\n\n `, 
  { lineGap: 1, indent: 20 }
) .text(
  `x. The Immoveable Property or any part there of is (or sought to be) attached, taken into custody by any official, authority or any other person or made the subject of any legal or execution proceedings\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `xi. The Immoveable Property depreciate in value to such an extent that the Lender is of the opinion that further security should be given and such further security is not given on written demand\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `xii. An event of default howsoever described (or any event which with the giving of notice, lapse of time, determination of materiality, or fulfilment of any other applicable condition or any combination of the foregoing would constitute an event of default) occurs under any agreement or document relating to any in debtedness of the Borrower or if any other financial institutions or banks with whom the Borrower has entered into agreements for financial assistance have recalled its assistance or any part there of\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `xiii. The Borrower is unable or has admitted in writing its inability to pay any of its Borrower(s) Dues as they mature or when due and /or demanded by the Lender\n\n`, 
  { lineGap: 1, indent: 20 }
)
.text(
  `xiv. One or more events, conditions or circumstances (including any change in law) occur or exist, which in the sole opinion of the Lender, could have a material adverse effect on the ability of the Borrower to pay / repay the Loan or`, 
  { lineGap: 1, indent: 20 }
)
.text(
  `xv. The Borrower fails to inform the Lender of the occurrence of any Event of Default or any event which after the notice or lapse of time, or both, would become an Event of Default.\n\n`, 
  { lineGap: 1, indent: 20 }
)

doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall promptly notify the Lender in writing upon becoming aware of any default and any event which constitutes an Event of Default and the steps, if any, being taken to remedy it. The decision of the Lender as to whether or not an Event of Default has occurred shall be final and binding upon the Borrower.`,{lineGap: 1})


//--------------------------------------------------new page 11 ----------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica-Bold').text(`14. EFFECT OF EVENT OF DEFAULT`,{align:"true",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`With out prejudice to the other rights or remedies available to the Lender under Applicable Law, on the occurrence of an Event of Default, the Lender shall been titled to exercise any or all of the following rights (whether simultaneously orother wise), at the sole discretion of the Lender:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica')
   .text(`i. Declare that the obligation of the Lender to make or continue to make the Loan available, stands terminated`, { lineGap: 1,indent: 20  })
   .text(
      `ii. Declare that the entire Outstanding Obligation is immediately due and payable to the Lender, where upon the same shall become immediately due and payable by the Borrower and the Borrower shall pay the entire Outstanding Obligation in accordance with the terms of the notice without any further notice or other legal formalities of any kind;\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
    `iii. Invoke the guarantee, if any for payment of the Outstanding Obligations and/or\n\n`, 
    { lineGap: 1, indent: 20 } // Adjust `indent` as needed
 )
 .text(
  `iv. Exercise any right, power or remedy permitted to it by law, including by suit, in equity or by action at law, or both, or otherwise (including appointment of receiver), whether for specific performance of any covenant, condition or term contained in this Agreement or for an injunction against a violation of any of the terms and conditions of this Agreement, or in aid of the exercise ofany power or right granted in this Agreement.\n\n`, 
  { lineGap: 1, indent: 20 } // Adjust `indent` as needed
)
 
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(` If the Borrower defaults in the repayment of the Outstanding Obligation any part there of, as stated in the Clause a.ii, on the notified date, the Lender shall have the right to enter upon and take possession of the Immovable Property or any part of it and enforce its security interest over the Immovable Property and exercise such other rights and remedies as permitted or available under Applicable Law.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall pay all costs/ expenses/ charges / fees in connection with the enforcement of the Lender’s rights including cheque bouncing charges, possession charges, legal charges, charges of agencies hired for disposal of the Immovable Property auction charges, expenses for making the Immovable Property market able or for its preservation (including insurance, taxes etc.), if incurred, or any expense other wise how so ever incurred in relation to the Immovable Property and other miscellaneous charges either due to default of the Borrower(s), or at the time of enforcement of the security interest over the Immoveable Property.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`15. INDEMNITY`,{align:"left",lineGap: 1})
doc.moveDown(1)

doc.fontSize(9).font('Helvetica').text(`The Borrower shall, without prejudice any right of the Lender, indemnify and hold harmless the Lender, its directors, officers, employees, consultants, agencies, appointees or representatives against all costs (including advocates’ fee), expenses, penalties, losses, compensation, damage, damages, suits, actions, proceedings, claims, liabilities, consequences of whatsoever nature arising from:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Occurrence of Events of Default or`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any failure by any of the Borrower to comply with the provisions of this Agreement and/or other Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any acts of omission and commission or breach of this Agreement or theTransaction Documents or any representation, warranty, covenant being false, misleading, untrue or incorrect or`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Enforcement of its rights in relation to the Immovable Property`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`non-payment or insufficient payment of stamp duty by the Borrower on thisAgreement or any other Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Borrower failing to take necessary action to protect the interest of the Lender andwhole or any part of the Immovable Property`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`16. ASSIGNMENT/TRANSFER/SECURITISATION`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower expressly recognizes and accepts that the Lender shall be absolutely entitled to, and has full power and authority to sell, assign or otherwise transfer in Version 1.3 16of66any manner whatsoever, in whole or in part, and in such manner and on such terms as the Lender may decide (including if deemed appropriate by the Lender reserving a right to retain its power to proceed against the Borrower on behalf of the purchaser, assignee or transferee) any or all outstanding and dues of the Borrower, to any third party of the Lender’s choice without any further reference or intimation or notice tothe Borrower, and without seeking any consent of the Borrower. Any such action and any such sale, assignment or transfer shall bind the Borrower to accept such third party as creditor exclusively or as a joint creditor with the Lender or any other person, as the case may be. Any costs in this behalf, whether on account of such sale, assignment or transfer or enforcement of rights and recovery of outstanding and dues, shall be to the account of the Borrower.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall not assign this Agreement or any of the rights, duties or obligations of the Borrower here under, except with prior written consent of the Lender.`,{lineGap: 1})


//------------------------------------------new page -----------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(10).font('Helvetica-Bold').text(`17. CROSS COLLATERAL`,{align:"left",lineGap: 1})
doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`The Borrower acknowledges that in the event of repayment by the Borrower of the Outstanding Obligation under this Agreement but there being any outstanding by the Borrower under any other financial facility availed by the Borrower or its affiliates from the Lender, then in such event the Lender shall not be obliged to release the securitycreated by the Borrower under this Agreement/Transaction Documents and the Borrower hereby authorizes the Lender to extend the security to cover such outstanding financial facility. Likewise, in the event of there being any outstanding by the Borrower under this Agreement, the Lender shall not be obliged to release the security created by the Borrower for any other financial facility availed of by the Borrower from the Lender and the Borrower undertakes to extend such security to cover the outstanding due under this Agreement.`,{lineGap: 1})
doc.moveDown(1);
doc.fontSize(10).font('Helvetica-Bold').text(`18. SUBORDINATE DEBT`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower does hereby agree declare confirm and undertake that all loans, advances, and other monies advanced by its group companies/ associates/ the directors, partners, and/or their friends and relatives or any of them shall stand and be regarded as subordinate debt in comparison with the Loan hereby granted. The Borrower does here by further declare and undertake that the Borrower shall not repay any of such loans and advances in whole or in part or pay any interest thereon until such time as the entire Outstanding Obligation of the Lender under and in pursuance of the Loan and/or this Agreement are repaid in full.`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(10).font('Helvetica-Bold').text(`19. DISCLOSURE OF INFORMATION`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`a.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Lender shall, as it may deem appropriate and necessary, be entitled to disclose all or any: (i) information and data relating to the Borrower; (ii) information or data relating to the Loan / Transaction Documents; (iii) obligations assumed / to be assumed by the Borrower in relation to the Loan under this Agreement and other Transaction Documents; (iv) default, if any, committed by the Borrower of the a fore said obligations, to the CIBIL and any other agency authorized in this behalf bythe RBI. The CIBIL and/or any other agency so authorized may use and/or processthe aforesaid information and data disclosed by the Lender in any manner as deemedfit by them. The CIBIL and/or any other agency so authorized may furnish for consideration, the processed information and data or products thereof prepared by them, to Lender / financial institutions and other credit grantors or registered users, as may be specified by RBI in this behalf.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`In case the Borrower commits any default in payment or repayment of the Outstanding Obligations, the Lender and/or the RBI will have an unqualified right to disclose or publish the details of such default along with the name of the Borrower and/or its directors / partners / co-applicants, as applicable, as defaulters in such manner as the Lender and/or RBI may, in their absolute discretion, think fit. The Borrower shall not hold the Lender responsible for sharing and/or disclosing the information now or in the future and also for any consequences suffered by the Borrowers and/or others by reason thereof. The provisions of this clause shall survive ever after the termination of this Agreement and the repayment of the Borrower’s Outstanding Obligations`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(10).font('Helvetica-Bold').text(`20. DISPUTE RESOLUTION`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`a.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All disputes, differences and / or claims arising out of this Agreement including constructions, meaning or effect hereof or as to the right and liabilities of the parties here under shall be settled by arbitration to be held in accordance with the provisions of the Arbitration and Conciliation Act, 1996 or any statutory amendments or reenactments there of and shall be referred to a sole arbitrator to be nominated by the Lender. In the event of death, refusal, neglect, inability or incapability of a person soappointed to act as an arbitrator, the Lender shall appoint another person in his placeas the arbitrator. The venue and seat of the arbitration shall be Ahmedabad. The award of the arbitrator shall be final and binding on all parties concerned.\n\n`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All legal actions and/or proceedings arising out of / in connection with this Agreement and the Transaction Documents shall be brought in / before the courts or tribunals at Ahmedabad and the Borrower irrevocably submits itself in the jurisdiction of such courts and tribunals. The Lender may, however, in its absolute discretion commence any legal action or proceedings arising out of the Agreement in any other court, tribunal or other appropriate forum and Borrower(s) here by consents to that jurisdiction.`,{align:"left",lineGap: 1})


//--------------------------------------------------new page 13--------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(10).font('Helvetica-Bold').text(`21. NOTICES`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All notices or other communications under this Agreement or the Transaction Documents shall be given by the Borrower to the Lender in writing at the addresses specified in the Schedule I hereto. Such notice, demand, request or other communication shall be deemed to have been duly given or made when it shall be (a)delivered personally or (b) sent by facsimile; or (c) sent by registered mail with acknowledgement due, postage prepaid or courier; or (d) sent by email.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any communication or document made or delivered by one person to another under or in connection with the Finance Documents will be effective:\n\n`,{align:"left",lineGap: 1})

doc.fontSize(9).font('Helvetica')
   .text(
      `i. if delivered personally, on delivery; or\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
    `ii. if by way of facsimile, when received in legible form; or\n`, 
    { lineGap: 1, indent: 20 } // Adjust `indent` as needed
 )
 .text(
  `iii. if by way of registered mail/courier, the date of receipt of such registered mail/courier (as demonstrated by the acknowledgement); or\n`, 
  { lineGap: 1, indent: 20 } // Adjust `indent` as needed
)
.text(
  `iv. if by way of email, as soon as the email leaves the system of the sender to be transmitted to the addressee.`, 
  { lineGap: 1, indent: 20 } // Adjust `indent` as needed
)
doc.fontSize(9).font('Helvetica-Bold').text(`c.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any notice given or communication made under any Finance Document must be in English Language.`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`22. MISCELLANEOUS`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The entries made in the account books/ record of the Lender maintained in accordance with its usual practice and in compliance with statutory requirements and / or a statement signed by a designated officer of the Lender, shall be final and binding on the Borrower. Such entries and / or statement shall be prima facie conclusive evidence of the existence and amount of obligations of the Borrower recorded in respect of the Loan.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`This Agreement and any other Transaction Documents integrate all the terms and conditions mentioned here in or incidental hereto, and supersede all oral negotiations and prior writings in respect of the subject matter hereof, except for those provisions of the Sanction Letter issued prior to this Agreement which are in addition to and complement, and are not in conflict with the terms of this Agreement. In the event ofany conflict between the terms and conditions of this Agreement and any agreement or documents, then in such event the terms and conditions of this Agreement shall prevail.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. The Lender reserves the right to use the information provided by the Borrower in this Agreement and the Transaction Documents and during surveys, informationfrom external sources, including consumer reports, for marketing activities carried out by the Lender / its affiliates/group companies. The Lender may use this information to develop mailing lists that may be used by companies with whom the Lender shall work to develop marketing offers for the Borrower`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any provision of this Agreement or any other Transaction Document, which is prohibited or unenforceable in any jurisdiction, shall, as to such jurisdiction, beineffective to the extent of the prohibition or unenforceability but that shall not invalidate the remaining provisions of this Agreement or such other Transaction Document or affect such provision in any other jurisdiction.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No delay in exercising or omission to exercise any right, power, or remedy accruing to the Lender under this Agreement or the other Transaction Documents shall impair any such right, power, or remedy or shall be construed to be a waiver there of or any acquiescence in such default, nor shall the action or inaction of the Lender in respect of any default or any acquiescence by it in any default, affect or impair any right, power, or remedy of the Lender in respect of any other default. The rights of the Lender under this Agreement and the other Transaction Documents may be exercised as often as necessary, are cumulative and not exclusive of their rights under the general law and may be waived only in writing and specifically and at the Lender’s sole discretion.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No suit, action, prosecution, or other legal action shall lie against the Lender or anyof its directors, officers, employees, consultants, appraisers, valuers, auditors, Version 1.3 19of66agencies for any act done in good faith or intended to be done in pursuance of thisAgreement or any Transaction Documents.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower acknowledges that he/authorizedx representative has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower in the language understood by the Borrower and the Borrower has understood the entire meaning of the terms and conditions and has affixed its signature after verifying and understanding the contents of this Agreement.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`h.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. Nothing herein contained shall prejudice or adversely affect any general or special lien or right to set-off to which the Lender is or may by law or otherwise be entitled or any rights or remedies of the Lender including in respect of any present or future security, guarantee, obligations of the Borrower.`,{align:"left",lineGap: 1})



// -------------------------------------------- new page --------------------------------------  
 
 doc.addPage();
 // addLogo();
 //drawBorder();
 doc.moveDown(2);

    function DRAWTABLE(tableTitle, tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
      // Draw table title with a colored header
      doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
      doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5)
          .text(tableTitle, startX + 5, startY + 5, { align: 'center' });
    
      startY += 20; // Move down for the first row
    
      let sectionIndex = null; // Track the section index to span the column
      
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
    
          // Calculate row height based on the tallest content
          const rowHeight = Math.max(20, field1Height, value1Height) + 10; // Adding padding for better spacing
    
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
    
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Stroke color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
    
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
    
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
    
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
    }
    
    
    function DrawTablewithoutHeader(tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
      let sectionIndex = null; // Track the section index to span the column
      
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
    
          // Calculate row height based on the taller content
          const rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding
    
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
    
           if (["penal Charges"].includes(row.field1)) {
            rowHeight = Math.max(rowHeight, 38.5); 
                   }
    
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Line color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
    
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
    
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
    
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
    }
    
    
    // function DRawTable(tableTitle, tableData, spanIndex) {
    //   const startX = 50;
    //   let startY = doc.y + 10;
    //   const columnWidths = [500];
    //   const indexWidth = 30;
    //   const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
    //   const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
    //   // Add table title
    //   doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
    //   doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5).text(tableTitle, startX + 5, startY + 5, { align: 'center' });
    
    //   startY += 20; // Move down for the first row
    
    //   let sectionIndex = null;
    
    //   // Helper function to calculate the height of the text
    //   function calculateTextHeight(text, width) {
    //     return doc.font('Helvetica').fontSize(8.3).heightOfString(text, { width });
    //   }
    
    //   // Render each row in the table
    //   tableData.forEach((row, rowIndex) => {
    //       // Calculate the height needed for each cell's text
    //       const field1Height = calculateTextHeight(row.field1, keyWidth);
    //       const value1Height = calculateTextHeight(row.value1, valueWidth);
    //       const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
    
    //       // Display the index only once if it matches a section needing a span
    //       const indexLabel = row.index && spanIndex ? row.index : '';
    
    //       if (row.index) {
    //           sectionIndex = row.index;
    //       }
    
    //       // Draw the index in the first column (only once if spanIndex is true)
    //       if (indexLabel) {
    //           doc.fillColor('#ffffff')
    //               .rect(startX, startY, indexWidth, rowHeight * tableData.length).stroke().fill(); // Span vertically for entire section
    //           doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //               .text(indexLabel, startX + 5, startY + 5, { width: indexWidth - 10, height: rowHeight * tableData.length });
    //       }
    
    //       // Draw the key in the second column
    //       doc.fillColor('#f5f5f5')
    //           .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
    //       doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //           .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
    
    //       // Draw the value in the third column
    //       doc.fillColor('#ffffff')
    //           .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
    //       doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //           .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
    
    //       startY += rowHeight; // Move down to the next row, based on dynamic height
    //   });
    // }
    function DRawTable(tableTitle, tableData, spanIndex) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
      // Add table title
      doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
      doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5).text(tableTitle, startX + 5, startY + 5, { align: 'center' });
  
      startY += 20; // Move down for the first row
  
      let sectionIndex = null;
      let totalSectionHeight = 0;
  
      // Calculate total height needed for all rows if spanIndex is true
      tableData.forEach(row => {
          const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth - 10 });
          const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth - 10 });
          totalSectionHeight += Math.max(field1Height, value1Height) + 10;
      });
  
      // Draw the index as a single cell spanning the full height if spanIndex is true
      if (spanIndex && tableData[0].index) {
          sectionIndex = tableData[0].index;
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, totalSectionHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(sectionIndex, startX + 5, startY + (totalSectionHeight / 2) - 5, {
                  width: indexWidth - 10,
                  align: 'center',
                  height: totalSectionHeight
              });
      }
  
      // Render each row in the table without the index label
      tableData.forEach(row => {
          // Calculate the height needed for each cell's text
          const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth - 10 });
          const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth - 10 });
          const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
  
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
  
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
  
          startY += rowHeight; // Move down to the next row, based on dynamic height
      });
  }
  

  //   function DRawTable(tableTitle, tableData, spanIndex) {
  //     const startX = 50;
  //     let startY = doc.y + 10;
  //     const columnWidths = [500];
  //     const indexWidth = 30;
  //     const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
  //     const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
  //     // Add table title
  //     doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
  //     doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5).text(tableTitle, startX + 5, startY + 5, { align: 'center' });
  
  //     startY += 20; // Move down for the first row
  
  //     let sectionIndex = null;
  //     let totalSectionHeight = 0;
  
  //     // Calculate total height needed for all rows if spanIndex is true
  //     tableData.forEach(row => {
  //         const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth });
  //         const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth });
  //         totalSectionHeight += Math.max(field1Height, value1Height) + 10;
  //     });
  
  //     // Draw the index as a single cell spanning the full height if spanIndex is true
  //     if (spanIndex && tableData[0].index) {
  //         sectionIndex = tableData[0].index;
  //         doc.fillColor('#ffffff')
  //             .rect(startX, startY, indexWidth, totalSectionHeight).stroke().fill();
  //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
  //             .text(sectionIndex, startX + 5, startY + (totalSectionHeight / 2) - 5, {
  //                 width: indexWidth - 10,
  //                 align: 'center',
  //                 height: totalSectionHeight
  //             });
  //     }
  
  //     // Render each row in the table without the index label
  //     tableData.forEach(row => {
  //         // Calculate the height needed for each cell's text
  //         const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth });
  //         const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth });
  //         const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
  
  //         // Draw the key in the second column
  //         doc.fillColor('#f5f5f5')
  //             .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
  //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
  //             .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
  
  //         // Draw the value in the third column
  //         doc.fillColor('#ffffff')
  //             .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
  //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
  //             .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
  
  //         startY += rowHeight; // Move down to the next row, based on dynamic height
  //     });
  // }
   
    function DRAWTable(tableData, spanIndex) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
      doc.strokeColor('#000000'); // Set border line color to black for the entire table
    
    
      let sectionIndex = null;
    
      // Helper function to calculate the height of the text
      function calculateTextHeight(text, width) {
        return doc.font('Helvetica').fontSize(8.3).heightOfString(text, { width });
      }
    
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Calculate the height needed for each cell's text
          const field1Height = calculateTextHeight(row.field1, keyWidth);
          const value1Height = calculateTextHeight(row.value1, valueWidth);
          const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
    
          // Display the index only once if it matches a section needing a span
          const indexLabel = row.index && spanIndex ? row.index : '';
    
          if (row.index) {
              sectionIndex = row.index;
          }
    
          // Draw the index in the first column (only once if spanIndex is true)
          if (indexLabel) {
              doc.fillColor('#ffffff')
                  .rect(startX, startY, indexWidth, rowHeight * tableData.length).stroke().fill(); // Span vertically for entire section
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                  .text(indexLabel, startX + 5, startY + 5, { width: indexWidth - 10, height: rowHeight * tableData.length });
          }
    
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
    
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
    
          startY += rowHeight; // Move down to the next row, based on dynamic height
      });
    }

  doc
    .fontSize(12)
    .font(fontBold)
    .text("Schedule I", { align: "center", underline: true });
  doc.moveDown(0.6);

  // Format the borrower details to the left side
  doc
    .font(fontBold)
    .fontSize(12)
    .fillColor("black")
    .text(
      "Details of the Loan",
        
      {
        lineGap: 1,
        align: "center",
         underline: true
      }
    );
    doc.moveDown(1);
    
//  unworked
    const AgreementDetails = [
      {index: '1',field1:"Date of the Agreement",value1:`${allPerameters.agreementdate}` },
      {index: '2',field1: "Place of Execution ",value1: `${allPerameters.placeOfExecution}` },
    ];
    DRAWTABLE("Agreement Details", AgreementDetails,false)
    doc.moveDown();

      const DetailsoftheBorrower = [
        {index: '3', field1: "Name of the Borrower(s)", value1: `${allPerameters.borrowerName}` },
        { field1: 'Constitution of the Borrower(s) ', value1: `${allPerameters?.constitutionBorrower}` },
        { field1: 'PAN/TAN/CIN of the Borrower(s)', value1: `${allPerameters.borrowerpanNo}` }, //unworked constitution
        { field1: 'Address of the Borrower(s)', value1: `${allPerameters.borroewraddress}` },
        { field1: 'Email – address(es)', value1: `${allPerameters.borroweremail}` },
        { field1: 'Phone No. (s)', value1: `${allPerameters.borrwermobileNo}` },
        {field1: 'Attention: Mr./Ms.', value1: `${allPerameters.borrowerName}` },// unworked mr/ms
    ];
    DRawTable("Details of the Borrower",DetailsoftheBorrower,true)
    
    doc.moveDown();
    
    const DetailsoftheCoBorrower = [
      { index: '4',field1: 'Name of the Borrower(s)', value1: `${allPerameters.coBorrowername}` },
      { field1: 'Constitution of the Co-Borrower(s) ', value1: `${allPerameters.constitutionCoBorrower}` },
      { field1: 'PAN/TAN/CIN of the Co-Borrower(s)', value1: `${allPerameters.panTanCin}` },
      { field1: 'Address of the Co-Borrower(s)', value1: `${allPerameters.coBorroweraddress}` },
      { field1: 'Email – address(es)', value1: `${allPerameters.coBorroeremail}` },
      { field1: 'Phone No. (s)', value1:  `${allPerameters.coBorrowerphoneNo}` },
      { field1: 'Attention: Mr./Ms.', value1: `${allPerameters.coBorrowername}` },
    ];
    
    DRawTable("Details of the Co-Borrower", DetailsoftheCoBorrower,true);
    doc.moveDown();

    const DetailsoftheCoBorrower2 = [
      { index: '4',field1: 'Name of the 2nd Borrower(s)', value1: `${allPerameters.coBorrowername2}` },
      { field1: 'Constitution of the 2nd Co-Borrower(s) ', value1: `${allPerameters.constitutionCoBorrower2}` },
      { field1: 'PAN/TAN/CIN ', value1: `${allPerameters.panTanCin2}` },
      { field1: 'Address of the 2nd Co-Borrower(s)', value1: `${allPerameters.coBorroweraddress2}` },
      { field1: 'Email – address(es)', value1: `${allPerameters.coBorroeremail2}` },
      { field1: 'Phone No. (s)', value1:  `${allPerameters.coBorrowerphoneNo2}` },
      { field1: 'Attention: Mr./Ms.', value1: `${allPerameters.coBorrowername2}` },
    ];
    
    DRawTable("Details of the 2nd Co-Borrower", DetailsoftheCoBorrower2,true);
    doc.moveDown();
    
    // const DetailsoftheGuarantor = [
    //   { index: '5', field1: "Name of the Guarantor", value1: `${allPerameters.guarantorname}` },
    //   { field1: 'Constitution of the Guarantor', value1:  `${allPerameters.constitutionGuarentor}` },
    //   { field1: 'PAN/TAN/CIN of the Guarantor', value1: `${allPerameters.guarantorpanTanCin}` },
    //   { field1: 'Address of the Guarantor', value1:  `${allPerameters.guarantoraddress}` },
    //   // { field1: 'Email – address(es)', value1: `${req.body.detailsoftheGuarantor?.email}` },
    
    //   // { field1: 'Phone No. (s)', value1: `${req.body.detailsoftheGuarantor?.phoneNo}` },
    //   // { field1: 'Attention: Mr./Ms', value1: `${req.body.detailsoftheGuarantor?.attentioMrMs}`},
    
    
    // ];
    // DRawTable("Details of the Guarantor", DetailsoftheGuarantor, true);
    
    
    
      ////addFooter();
    
//       //---------------------------------NEW PAGE ------------------------------------------------
      
    
//       // //---------------------------------------------------new page---------------------------------------------------------------
      doc.addPage();
      // addLogo();
      //drawBorder();
    
      doc.moveDown(2);

      const DetailsoftheGuarantor = [
        { index: '5', field1: "Name of the Guarantor", value1: `${allPerameters.guarantorname}` },
        { field1: 'Constitution of the Guarantor', value1:  `${allPerameters.constitutionGuarentor}` },
        { field1: 'PAN/TAN/CIN of the Guarantor', value1: `${allPerameters.guarantorpanTanCin}` },
        { field1: 'Address of the Guarantor', value1:  `${allPerameters.guarantoraddress}` },
        { field1: 'Email – address(es)', value1: `${allPerameters.guarantoremail}` },
      
        { field1: 'Phone No. (s)', value1: `${allPerameters.guarantorphoneNo}` },
        { field1: 'Attention: Mr./Ms', value1: `${allPerameters.guarantorname}`},
      
      
      ];
      DRawTable("Details of the Guarantor", DetailsoftheGuarantor, true);
    
      // const DetailsoftheGuarantorr = [
        
      //   { index:'.',field1: 'Email – address(es)', value1: `${allPerameters.guarantoremail}` },
      
      //   { field1: 'Phone No. (s)', value1: `${allPerameters.guarantorphoneNo}` },
      //   { field1: 'Attention: Mr./Ms', value1: `${allPerameters.guarantorname}`},
      
      
      // ];
      // DRAWTable( DetailsoftheGuarantorr, true);
    
      const DetailsoftheBranch = [
        {index: '6', field1: 'Place of the Branch ', value1: `${allPerameters.branchplace}` },
        { field1: 'Address of the Branch', value1: `${allPerameters.branchaddress}` },
        { field1: 'Email – address(es)', value1: `${allPerameters.branchemail}` },
        { field1: 'Phone No. (s)', value1: `${allPerameters.branchphoneNo}` },
        { field1: 'Attention: Mr./Ms.', value1: `${allPerameters.attentionMrMs}` },
      ];
    
      DRawTable("Details of the Branch", DetailsoftheBranch,true);
    
      doc.moveDown();
    
    
      const DetailsoftheLoan = [
        { index: '7',field1: 'Sanction Letter No.', value1: `${allPerameters.sanctionLetterNo}` },
        {index: '8', field1: 'Date of Sanction Letter', value1: `${allPerameters.sanctionLetterDate}` },
      
        { index: '9',field1: 'Facility Type ', value1: `${allPerameters.facilityType}` },
        { index: '10',field1: 'Specified Purpose ', value1: `${allPerameters.specifiedPurpose}` },
        {index: '11', field1: 'Amount of Loan', value1: `${allPerameters.amountOfLoan}/-(${allPerameters.loanAmountInWord})`},
        {index: '12', field1: 'Rate of Interest', value1: `${allPerameters.rateOfInterest}% Per Annum (FRR – 19.20% + ${allPerameters.interestType1}%)` },
        // {index: '13', field1: 'Login Fees .', value1: `${allPerameters.loginFees}` },
        { index: '13',field1: 'Loan Processing fee', value1: `${allPerameters.loanProcessingFees}` },
        // { index: '15',field1: 'Documentation Charges', value1: `${allPerameters.documentCharges}` },
        { index: '14',field1: 'Tenure of Loan ', value1: `${allPerameters.tenureOfLoan} months` },
        {index: '15', field1: 'Penal charges', value1: `${allPerameters.penalCharges}`},
        {index: '16', field1: 'Repayment Method ', value1: `${allPerameters.repaymentMethod}` },
        // { index: '19',field1: 'Monthly Installment Date ', value1: '10th of the month' },
        // { index: '20',field1: `Repayment Date of all Outstanding Obligations\n(End date of loan Tenure)`, value1: 'As per Repayment Schedule' },
        // { index: '21',field1: 'Number of Installments', value1: '60 months' },
        // {index: '22', field1: 'Foreclosure of Loan ', value1: 'No Foreclosure allowed till completion of 12 months from the date of 1st disbursement.After completion of 12 months from the date of 1st disbursement, Foreclosure from personal funds may be made without incurring any fees.In case of balance transfer, 4% charges will be applicable.' },
        // {index: '23', field1: 'Taxes', value1: 'Goods and Services tax (GST) will be charged extra as per the applicable rates, on interest, penal charges,other charges and fees (wherever GST is applicable)' },
    //     {index: '24', field1: 'Security', value1: `1. Personal guarantee of PAWAN NAGAR ) \n 2. Corporate guarantee of NA \n 3. Demand Promissory Notes \n 4. Cheques as per UDC Covering Letter. \n 5. First and exclusive charge over the Immovable Property as mentioned in Schedule III.`},
    //     { index: '25',field1: 'Security Deposit/DSRA ', value1: 'NIL' },
    //     { index: '26',field1: 'Lock–in Period  ', value1: `The borrower shall not repay/prepay/foreclose any portion of the outstanding loan amount
    //   either in part or in full within 1 year completion of loan tenure from the date of 1st
    // disbursement of the loan.` },
    
      ];
      
      DRAWTABLE("Details of the Loan", DetailsoftheLoan);
      
      
      
      //addFooter();
    //=================-------------------------------------------------------
      doc.addPage();
      // addLogo();
      //drawBorder();
      // Add title and content from the image
      doc.moveDown(2);

    //   function DrawTablewithoutHeaderpenal(tableData) {
    //     const startX = 50;
    //     let startY = doc.y + 10;
    //     const columnWidths = [500];
    //     const indexWidth = 30;
    //     const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
    //     const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
      
    //     let sectionIndex = null; // Track the section index to span the column
        
    //     // Render each row in the table
    //     tableData.forEach((row, rowIndex) => {
    //         // Measure text height for row.field1 and row.value1
    //         const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
    //         const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
      
    //         // Calculate row height based on the taller content
    //         let rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding

    //         if (rowIndex === 0) { // Example for a specific row index
    //           rowHeight = Math.max(rowHeight, 50); // Custom height for row at index 5
    //       }

    //       else if (rowIndex === 1) { // Example for a specific row index
    //         rowHeight = Math.max(rowHeight, 10); // Custom height for row at index 5
    //     }

    //     else if (rowIndex === 2) { // Example for a specific row index
    //       rowHeight = Math.max(rowHeight, 10); // Custom height for row at index 5
    //   }

    //   else if (rowIndex === 8) { // Example for a specific row index
    //     rowHeight = Math.max(rowHeight, 10); // Custom height for row at index 5
    // }
      
    //         // Only display the index once per section, in the first row
    //         const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
    //         if (row.index) {
    //             sectionIndex = row.index; // Set current section index
    //         }
      
    //          if (["penal Charges"].includes(row.field1)) {
    //           rowHeight = Math.max(rowHeight, 45.5); 
    //                  }
      
    //         // Draw the index in the first column (only for the first row of each section)
    //         doc.fillColor('#ffffff')
    //             .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Line color set to black
    //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //             .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
      
    //         // Draw the key in the second column
    //         doc.fillColor('#f5f5f5')
    //             .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
    //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //             .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
      
    //         // Draw the value in the third column
    //         doc.fillColor('#ffffff')
    //             .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
    //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //             .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
      
    //         // Move startY down by rowHeight for the next row
    //         startY += rowHeight;
    //     });
    //   }
    function DrawTablewithoutHeaderpenal(tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
      let sectionIndex = null; // Track the section index to span the column
  
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
  
          // Calculate row height based on the taller content
          let rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding
  
          // Custom adjustments for specific rows (if any)
          if (["penal Charges"].includes(row.field1)) {
              rowHeight = Math.max(rowHeight, 45.5);
          }
  
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
  
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Line color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
  
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
  
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3);
  
          if (row.field1 === 'Monthly Installment Date' && row.value1.includes('10th')) {
              const mainText = '10'; // The main numeric part
              const superscriptText = 'th'; // The superscript part
              const remainder = ' of the month'; // The rest of the string
  
              // Render "10"
              doc.text(mainText, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, {
                  continued: true, // Indicate that the next text is part of the same line
              });
  
              // Render "th" as superscript
              doc.fontSize(6).text(superscriptText, {
                  baseline: 'top', // Adjust baseline for superscript effect
                  continued: true,
              });
  
              // Render the remainder
              doc.fontSize(8.3).text(remainder);
          } else {
              // Default rendering for other rows
              doc.text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, {
                  width: valueWidth - 10,
              });
          }
  
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
  }
  
    
      const DetailsoftheBranchh =[
        // {index: '15', field1: 'Penal charges', value1: `${allPerameters.penalCharges}`},
        // {index: '16', field1: 'Repayment Method ', value1: `${allPerameters.repaymentMethod}` },
        { index: '17',field1: 'Monthly Installment Date', value1: `10th of the month` },
        { index: '18',field1: `Repayment Date of all Outstanding Obligations\n(End date of loan Tenure)`, value1: `${allPerameters.endDateOfLoanTenure}` },
        { index: '19',field1: 'Number of Installments', value1:`${allPerameters.tenureOfLoan} months` },
        {index: '20', field1: 'Foreclosure of Loan ', value1: `${allPerameters.foreClosereOfLoan}` },
        {index: '21', field1: 'Taxes', value1: `${allPerameters.taxes}` },
        
        {index: '22', field1: 'Security', value1: `1. Personal guarantee of ${allPerameters.guarantorname} ) \n 2. Corporate guarantee of NA \n 3. Demand Promissory Notes \n 4. Cheques as per UDC Covering Letter. \n 5. First and exclusive charge over the Immovable Property as mentioned in Schedule III.`},
        { index: '23',field1: 'Security Deposit/DSRA ', value1: `${allPerameters.securityDepositOrDsra}` },
        { index: '24',field1: 'Lock–in Period  ', value1: `${allPerameters.lockPeriod}` },
    
      ];
      
      DrawTablewithoutHeaderpenal(DetailsoftheBranchh);

    
    
    function DrawCombinedTable(doc, sections) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const keyWidth = Math.round(columnWidths[0] * 1 / 3);
      const valueWidth = Math.round(columnWidths[0] * 2 / 3);
    
      sections.forEach(section => {
        // Section Header
        doc.rect(startX, startY, columnWidths.reduce((a, b) => a + b), 20)
            .fillAndStroke('#00a7ff', "#000000");
        doc.font(fontBold).fillColor('black').fontSize(9.5)
            .text(section.title, startX + 5, startY + 5, { baseline: 'hanging', align: 'center' });
    
        startY += 20;
    
        section.data.forEach((row, rowIndex) => {
            let valueRowHeight = 22;
    
            // Calculate dynamic row height
            const field1TextHeight = doc.heightOfString(row.field1, { width: keyWidth - 10 });
            const value1TextHeight = doc.heightOfString(row.value1, { width: valueWidth - 10 });
            valueRowHeight = Math.max(valueRowHeight, field1TextHeight, value1TextHeight);
    
            const backgroundColor = rowIndex % 2 === 0 ? '#f5f5f5' : '#ffffff';
    
            if (["Prepayment Charges"].includes(row.field1)) {
                       valueRowHeight = Math.max(valueRowHeight, 38.5); 
                   }

             if (["Installment Amount"].includes(row.field1)) {
                    valueRowHeight = Math.max(valueRowHeight, 38.5); 
                }
    
            // Render field and value cells
            doc.fillColor(backgroundColor).rect(startX, startY, keyWidth, valueRowHeight).stroke().fill();
            doc.font(font).fillColor('black').fontSize(8.3)
                .text(row.field1, startX + 5, startY + 5, { width: keyWidth - 10 });
    
            doc.fillColor(backgroundColor).rect(startX + keyWidth, startY, valueWidth, valueRowHeight).stroke().fill();
            doc.font(font).fillColor('black').fontSize(7.2)
                .text(row.value1, startX + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
    
            startY += valueRowHeight;
    
      });
    
        // Additional spacing between sections
        startY += 15;
      });
    
     
    }

    function DrawCombinedTable1(doc, sections) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const keyWidth = Math.round(columnWidths[0] * 1 / 3);
      const valueWidth = Math.round(columnWidths[0] * 2 / 3);
  
      sections.forEach(section => {
          // Section Header
          doc.rect(startX, startY, columnWidths.reduce((a, b) => a + b), 20)
              .fillAndStroke('#00a7ff', "#000000");
          doc.font(fontBold).fillColor('black').fontSize(9.5)
              .text(section.title, startX + 5, startY + 5, { baseline: 'hanging', align: 'center' });
  
          startY += 20;
  
          section.data.forEach((row, rowIndex) => {
              let valueRowHeight = 22;
  
              // Calculate dynamic row height
              const field1TextHeight = doc.heightOfString(row.field1, { width: keyWidth - 10 });
              const value1TextHeight = doc.heightOfString(row.value1, { width: valueWidth - 10 });
              valueRowHeight = Math.max(valueRowHeight, field1TextHeight, value1TextHeight);
  
              const backgroundColor = rowIndex % 2 === 0 ? '#f5f5f5' : '#ffffff';
  
              if (["Prepayment Charges"].includes(row.field1)) {
                  valueRowHeight = Math.max(valueRowHeight, 38.5);
              }
  
              if (["Installment Amount"].includes(row.field1)) {
                  valueRowHeight = Math.max(valueRowHeight, 38.5);
              }
  
              // Render field and value cells
              doc.fillColor(backgroundColor).rect(startX, startY, keyWidth, valueRowHeight).stroke().fill();
              doc.font(font).fillColor('black').fontSize(8.3)
                  .text(row.field1, startX + 5, startY + 5, { width: keyWidth - 10 });
  
              doc.fillColor(backgroundColor).rect(startX + keyWidth, startY, valueWidth, valueRowHeight).stroke().fill();
              doc.font(font).fillColor('black').fontSize(7.2)
                  .text(row.value1, startX + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
  
              startY += valueRowHeight;
          });
  
          // Add blank row and custom content
          const blankRowHeight = 38.5; // Adjust height as needed
          doc.fillColor('#ffffff').rect(startX, startY, columnWidths[0], blankRowHeight).stroke().fill();
          doc.font(font).fillColor('black').fontSize(8)
              .text(
                  "NOTE: Goods and Services tax (GST) will be charged extra as per the applicable rates, on all the charges and fees (wherever GST is applicable). The aforementioned charges/fees may be modified by Ratnaafin Capital Private Limited from time to time upon prior intimation via acceptable modes of communication from Ratnaafin Capital Private Limited in this regard.",
                  startX + 5, startY + 5, { width: columnWidths[0] - 10, align: 'justify' }
              );
  
          startY += blankRowHeight;
  
          // Additional spacing between sections
          startY += 15;
      });
  }
  
  
    
    // Define data for each section
    const charges = {
      title: "CHARGES",
      data: [
        { field1: "Details", value1: `Particulars` },
        { field1: 'Processing Fees ', value1: `${allPerameters.processingFees}` },
        { field1: 'Document Processing Charges', value1: `${allPerameters.documentProcessingCharges}(For under construction cases 3% of loan amount + Applicable taxes)` },
        { field1: 'Prepayment Charges', value1: `${allPerameters.prepaymentCharges}` },
        { field1: 'Bounce Charges', value1: `${allPerameters.bounceCharges}` },
        { field1: 'Outstation Collection Charges', value1: `${allPerameters.outstationCollectionCharges}` },
        { field1: 'Cheque Swap Charges', value1: `${allPerameters.chequeSwapCharges}` },
        { field1: 'Stamp Duty', value1: `${allPerameters.stampDuety}` },
        { field1: 'Duplicate NOC charges', value1: `${allPerameters.duplicateNocCharges}` },
        
      ]
    };
    
    

    // Draw combined table
    DrawCombinedTable1(doc, [charges]);

    // doc.font(fontBold).fontSize(10)
    // .text(, 50, doc.y + 10);    
    
    //addFooter();
    
    doc.addPage();
      // addLogo();
      //drawBorder();
      // Add title and content from the image
      doc.moveDown(2);
      
      const chequeDetails = {   
        title: "CHEQUE DETAILS",
        data: [
            { field1: "Bank Name", value1: `${allPerameters.bankDetail}` },
            //accountNumber
            { field1: "Bank Account Number", value1: `${allPerameters.chequebankaccountNumber}` },
            { field1: "Number of Cheques", value1: `5` },
            { field1: "Chq S.N. (From-To)", value1: `${allPerameters.chequeNo1}-${allPerameters.chequeNo5}` },
            { field1: "Amount (in INR)", value1: `${allPerameters.chequeaccountInINR}` },
            { field1: "Local/Outstation", value1: `${allPerameters.chequelocalOutstation} ` }
        ]
      };
      
      const ecsNachDetails = {
        title: "DETAILS OF ECS/NACH",
        data: [
            { field1: "Bank Name", value1: `${allPerameters.bankDetail}` },
            { field1: "Bank Account Number", value1: `${allPerameters.chequebankaccountNumber}` },
            { field1: "Installment Amount", value1: `Rs.${allPerameters.ecsNachinstallmentAmounts}/-(if Applicable for the said case:-Interest & EMI has been Charged as Per Disbursement Amount. Once Your Case Gets Fully Disbursed EMI will be revised as per Principal Outstanding which may vary to the EMI as per sanction Letter.)` }
        ]
      };
    
      DrawCombinedTable(doc, [ chequeDetails, ecsNachDetails]);
    
    
    doc.moveDown()
    
    const sections = [
      {
        title: "LOAN DISBURSEMENT MODE",
        data: [
          {
            col1: "Account Transfer Type",
            col2: [
              { text: "Bank Name" },
              { text: "Type of Account (Savings/ Current)" }
            ],
            col3: [
              { text: `${allPerameters.bankDetail}` },
              { text: `${allPerameters.accTransfertypeOfAccount}` }
            ]
          },
          {
            col1: "RTGS/NEFT/IMPS",
            col2: [
              { text: "IFSC Code" },
              { text: "Bank Account Number" }
            ],
            col3: [
              { text: `${allPerameters.rtgifscCode}` },
              { text: `${allPerameters.chequebankaccountNumber}` }
            ]
          },
          {
           col1: "Use of Existing\nECS/NACH",  // Added gap with double newlines
            col2: [
              // { text: "e A/c Holder Name as per Bank Account" },
              // { text: "Cheque in favour of" },
              { text: `(yes/No)[Use]`}
            ],
            col3: [
              // { text: `${allPerameters.accountHolderName}` },
              // { text: `${allPerameters.inFavorOf}` },
              { text: "Cheque in favor of: Sheetal Kulkarni" }
            ],
            col3Split: {  // Split last row in col3 into two parts
              part1: "Use of Existing KYC documents",
              part2: `(yes/No)[Use]`
            }
          },
        ]
      }
    ];

    
    
    
    function DrawCTable(doc, sections) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [160, 160, 160];
    
      sections.forEach(section => {
        // Section Header
        doc.rect(startX, startY, columnWidths.reduce((a, b) => a + b), 20)
          .fillAndStroke('#00a7ff', "#000000");
        doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5)
          .text(section.title, startX + 5, startY + 5, { baseline: 'hanging', align: 'center' });
    
        startY += 20;
    
        section.data.forEach((row, index) => {
          let rowHeight = 22;
          const backgroundColor = index % 2 === 0 ? '#f5f5f5' : '#ffffff';
    
          // Calculate the height of col1 and check if nested rows exist in col2 and col3
          const col1Height = doc.heightOfString(row.col1, { width: columnWidths[0] - 10 });
          const maxRowHeight = Math.max(col1Height, rowHeight * row.col2.length);
    
          // Column 1 - Render with gap between lines
          doc.fillColor(backgroundColor).rect(startX, startY, columnWidths[0], maxRowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
            .text(row.col1, startX + 5, startY + 5, { width: columnWidths[0] - 10, lineBreak: true });
    
          // Column 2 - Nested rows
          let nestedY = startY;
          row.col2.forEach(nestedRow => {
            doc.fillColor(backgroundColor).rect(startX + columnWidths[0], nestedY, columnWidths[1], rowHeight).stroke().fill();
            doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(nestedRow.text, startX + columnWidths[0] + 5, nestedY + 5, { width: columnWidths[1] - 10 });
            nestedY += rowHeight;
          });
    
          // Column 3 - Nested rows with last row split into two columns
          nestedY = startY;
          row.col3.forEach((nestedRow, rowIndex) => {
            if (rowIndex === row.col3.length - 1 && row.col3Split) {
              // Split the last row in col3 into two parts
              const halfWidth = columnWidths[2] / 2;
    
              // Part 1
              doc.fillColor(backgroundColor).rect(startX + columnWidths[0] + columnWidths[1], nestedY, halfWidth, rowHeight).stroke().fill();
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                .text(row.col3Split.part1, startX + columnWidths[0] + columnWidths[1] + 5, nestedY + 5, { width: halfWidth - 10 });
    
              // Part 2
              doc.fillColor(backgroundColor).rect(startX + columnWidths[0] + columnWidths[1] + halfWidth, nestedY, halfWidth, rowHeight).stroke().fill();
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                .text(row.col3Split.part2, startX + columnWidths[0] + columnWidths[1] + halfWidth + 5, nestedY + 5, { width: halfWidth - 10 });
            } else {
              // Regular nested row in col3
              doc.fillColor(backgroundColor).rect(startX + columnWidths[0] + columnWidths[1], nestedY, columnWidths[2], rowHeight).stroke().fill();
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                .text(nestedRow.text, startX + columnWidths[0] + columnWidths[1] + 5, nestedY + 5, { width: columnWidths[2] - 10 });
            }
            nestedY += rowHeight;
          });
    
          startY += maxRowHeight;
        });
    
        startY += 15;
      });
    };
    
    DrawCTable(doc, sections);

    const pageWidth = doc.page.width;
    doc.moveDown(2);

    
    doc
       .fontSize(12) 
       .text("Schedule II", (pageWidth / 2) - (doc.widthOfString("Schedule II") / 2), doc.y, {
           baseline: 'hanging'
       });
    
    doc.moveDown(1);
    
    // Center "Repayment Schedule"
    doc.fontSize(12)
       .text("Repayment Schedule", (pageWidth / 2) - (doc.widthOfString("Repayment Schedule") / 2), doc.y);
    
    doc.moveDown(1);
    
    // Center "As Separately Provided"
    doc
       .fontSize(12)
       .text("As Separately Provided", (pageWidth / 2) - (doc.widthOfString("As Separately Provided") / 2), doc.y, {
           lineGap: 1
       });
    
    doc.moveDown(1);

  //   function tableFunction1(tableData) {
  //     const startX = 53; // Starting X position
  //     let startY = doc.y + 10; // Starting Y position
  //     const boxWidth = 500; // Total width of the box
  //     const numFields = 7; // Fixed to 7 columns
  //     const fieldWidth = boxWidth / numFields; // Width per column
    
  //     let totalHeight = 0;
    
  //     // Calculate total height for the first 6 rows
  //     tableData.slice(0, 6).forEach((row) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
  //         let rowHeight = 0;
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }
  //         totalHeight += rowHeight;
  //     });
  
  //     // Add height for the 7th row (text-only, no columns)
  //     const finalRowHeight = doc
  //         .font('Helvetica')
  //         .fontSize(7.2)
  //         .heightOfString("As Separately Provided", { width: boxWidth }) + 10;
  //     totalHeight += finalRowHeight;
    
  //     // Draw the outer box
  //     doc.fillColor("#f0f0f0")
  //         .rect(startX, startY, boxWidth, totalHeight)
  //         .stroke("black")
  //         .fill();
    
  //     // Draw table content for the first 6 rows
  //     tableData.slice(0, 6).forEach((row, rowIndex) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
  //         let currentX = startX;
  //         let rowHeight = 0;
    
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10;
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }
  
  //         for (let field in row) {
  //             doc.fillColor("#f5f5f5")
  //                 .rect(currentX, startY, fieldWidth, rowHeight)
  //                 .stroke("black")
  //                 .fill();
    
  //             const isHeader = rowIndex === 0;
  //             doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
  //                 .fillColor("black")
  //                 .fontSize(7.2)
  //                 .text(row[field], currentX + 5, startY + 5, {
  //                     baseline: "hanging",
  //                     width: fieldWidth - 10,
  //                     align: 'left',
  //                 });
    
  //             currentX += fieldWidth;
  //         }
    
  //         startY += rowHeight; // Move to next row
  //     });
  
  //     // Draw the 7th row with no columns
  //     doc.font('Helvetica-Bold')
  //         .fillColor("black")
  //         .fontSize(7.2)
  //         .text("As Separately Provided", startX + 5, startY + 5, {
  //             width: boxWidth - 10,
  //             align: 'center',
  //         });
    
  //     // Adjust starting Y for the final row
  //     startY += finalRowHeight;
  // }
  function tableFunction1(tableData) {
    const startX = 53; // Starting X position
    let startY = doc.y + 10; // Starting Y position
    const boxWidth = 500; // Total width of the box
    const numFields = 7; // Fixed to 7 columns
    const fieldWidth = boxWidth / numFields; // Width per column
    const padding = 5; // Padding between text and cell boundaries
  
    let totalHeight = 0;
  
    // Calculate total height for the first 6 rows
    tableData.slice(0, 6).forEach((row) => {
      if (Object.values(row).every((value) => !value || value.trim() === "")) return;
  
      let rowHeight = 0;
      for (let field in row) {
        const fieldTextHeight = doc
          .font("Helvetica")
          .fontSize(7.2)
          .heightOfString(row[field] || "", { width: fieldWidth - 2 * padding }) + 2 * padding; // Add padding
        rowHeight = Math.max(rowHeight, fieldTextHeight);
      }
      totalHeight += rowHeight;
    });
  
    // Add height for the 7th row (text-only, no columns)
    const finalRowHeight =
      doc
        .font("Helvetica")
        .fontSize(7.2)
        .heightOfString("As Separately Provided", { width: boxWidth - 2 * padding }) +
      2 * padding;
    totalHeight += finalRowHeight;
  
    // Draw the outer box
    doc
      .fillColor("#f0f0f0")
      .rect(startX, startY, boxWidth, totalHeight)
      .stroke("black")
      .fill();
  
    // Draw table content for the first 6 rows
    tableData.slice(0, 6).forEach((row, rowIndex) => {
      if (Object.values(row).every((value) => !value || value.trim() === "")) return;
  
      let currentX = startX;
      let rowHeight = 0;
  
      for (let field in row) {
        const fieldTextHeight =
          doc
            .font("Helvetica")
            .fontSize(7.2)
            .heightOfString(row[field] || "", { width: fieldWidth - 2 * padding }) + 2 * padding;
        rowHeight = Math.max(rowHeight, fieldTextHeight);
      }
  
      for (let field in row) {
        doc
          .fillColor("#f5f5f5")
          .rect(currentX, startY, fieldWidth, rowHeight)
          .stroke("black")
          .fill();
  
        const isHeader = rowIndex === 0;
        doc
          .font(isHeader ? "Helvetica-Bold" : "Helvetica")
          .fillColor("black")
          .fontSize(7.2)
          .text(row[field], currentX + padding, startY + padding, {
            baseline: "hanging",
            width: fieldWidth - 2 * padding,
            align: "left",
          });
  
        currentX += fieldWidth;
      }
  
      startY += rowHeight; // Move to next row
    });
  
    // Draw the 7th row with no columns
    doc
      .font("Helvetica-Bold")
      .fillColor("black")
      .fontSize(7.2)
      .text("As Separately Provided", startX + padding, startY + padding, {
        width: boxWidth - 2 * padding,
        align: "center",
      });
  
    // Adjust starting Y for the final row
    startY += finalRowHeight;
  }
  

  const tableData1 = [
    {
      installmentNo: "Installment No.",
      dueDate: "Due Date",
      installmentAmount: "Installment Amount",
      openingPrincipal: "Opening Principal",
      interestComponent: "Interest Component",
      principalComponent: "Principal Component",
      outstandingPrincipal: "Outstanding Principal",
  },
    {
        installmentNo: "1st",
        dueDate: "_ _/_ _/_ _",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "2nd",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "3rd",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "4th",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "5th",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "",
        dueDate: "",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    // 7th Row: No columns, text only
    {
        text: "As Separately Provided"
    }
];

tableFunction1(tableData1);

    // doc.addPage();
    // // addLogo();
    
    // doc.moveDown(2);

    
    
//     const pageWidth = doc.page.width;
    
//     doc
//        .fontSize(12) 
//        .text("Schedule II", (pageWidth / 2) - (doc.widthOfString("Schedule II") / 2), doc.y, {
//            baseline: 'hanging'
//        });
    
//     doc.moveDown(1);
    
//     // Center "Repayment Schedule"
//     doc.fontSize(12)
//        .text("Repayment Schedule", (pageWidth / 2) - (doc.widthOfString("Repayment Schedule") / 2), doc.y);
    
//     doc.moveDown(1);
    
//     // Center "As Separately Provided"
//     doc
//        .fontSize(12)
//        .text("As Separately Provided", (pageWidth / 2) - (doc.widthOfString("As Separately Provided") / 2), doc.y, {
//            lineGap: 1
//        });
    
//     doc.moveDown(1);

//     function tableFunction1(tableData) {
//       const startX = 53; // Starting X position
//       let startY = doc.y + 10; // Starting Y position
//       const boxWidth = 500; // Total width of the box
//       const numFields = 7; // Fixed to 7 columns
//       const fieldWidth = boxWidth / numFields; // Width per column
    
//       let totalHeight = 0;
    
//       // Calculate total height for the first 6 rows
//       tableData.slice(0, 6).forEach((row) => {
//           if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
//           let rowHeight = 0;
//           for (let field in row) {
//               const fieldTextHeight = doc
//                   .font('Helvetica')
//                   .fontSize(7.2)
//                   .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
//               rowHeight = Math.max(rowHeight, fieldTextHeight);
//           }
//           totalHeight += rowHeight;
//       });
  
//       // Add height for the 7th row (text-only, no columns)
//       const finalRowHeight = doc
//           .font('Helvetica')
//           .fontSize(7.2)
//           .heightOfString("As Separately Provided", { width: boxWidth }) + 10;
//       totalHeight += finalRowHeight;
    
//       // Draw the outer box
//       doc.fillColor("#f0f0f0")
//           .rect(startX, startY, boxWidth, totalHeight)
//           .stroke("black")
//           .fill();
    
//       // Draw table content for the first 6 rows
//       tableData.slice(0, 6).forEach((row, rowIndex) => {
//           if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
//           let currentX = startX;
//           let rowHeight = 0;
    
//           for (let field in row) {
//               const fieldTextHeight = doc
//                   .font('Helvetica')
//                   .fontSize(7.2)
//                   .heightOfString(row[field] || '', { width: fieldWidth }) + 10;
//               rowHeight = Math.max(rowHeight, fieldTextHeight);
//           }
  
//           for (let field in row) {
//               doc.fillColor("#f5f5f5")
//                   .rect(currentX, startY, fieldWidth, rowHeight)
//                   .stroke("black")
//                   .fill();
    
//               const isHeader = rowIndex === 0;
//               doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
//                   .fillColor("black")
//                   .fontSize(7.2)
//                   .text(row[field], currentX + 5, startY + 5, {
//                       baseline: "hanging",
//                       width: fieldWidth - 10,
//                       align: 'left',
//                   });
    
//               currentX += fieldWidth;
//           }
    
//           startY += rowHeight; // Move to next row
//       });
  
//       // Draw the 7th row with no columns
//       doc.font('Helvetica-Bold')
//           .fillColor("black")
//           .fontSize(7.2)
//           .text("As Separately Provided", startX + 5, startY + 5, {
//               width: boxWidth - 10,
//               align: 'center',
//           });
    
//       // Adjust starting Y for the final row
//       startY += finalRowHeight;
//   }

//   const tableData1 = [
//     {
//       installmentNo: "Installment No.",
//       dueDate: "Due Date",
//       installmentAmount: "Installment Amount",
//       openingPrincipal: "Opening Principal",
//       interestComponent: "Interest Component",
//       principalComponent: "Principal Component",
//       outstandingPrincipal: "Outstanding Principal",
//   },
//     {
//         installmentNo: "1st",
//         dueDate: "_ _/_ _/_ _",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "2nd",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "3rd",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "4th",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "5th",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "",
//         dueDate: "",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     // 7th Row: No columns, text only
//     {
//         text: "As Separately Provided"
//     }
// ];

// tableFunction1(tableData1);


  
    
    

    
      
    
      //addFooter();
    
//       //------------------------------------------------------------new page----------------------------------------------
      doc.addPage();
      // addLogo();
      //drawBorder();
      // Add title and content from the image
      doc.moveDown(2);
    
      doc
      .fontSize(7)
      .font(fontBold)
      .text("Schedule III", { align: "center" })
      .text("Description of Immovable Property", { align: "center" })
      .moveDown(0.5)
      .text("Property 1:", { align: "center" })
      .moveDown(0.5)
      .text(`${allPerameters.techfullAdress}`, { align: "center" })
      // .moveDown(0.5)
      // .text("Gram Panchyat Sikandari Tehsil Khilchipur District Rajgarh", { align: "center" })
      // .moveDown(0.5)
      // .text("State Madhya Pradesh Pin Code 465687", { align: "center" })
      .fontSize(9)
      .moveDown(0.5)
      .text("SCHEDULE OF CHARGES", { align: "center" });
    
    doc.moveDown(1);
    // Add a function to draw black table borders
    // function drawTable(tableData) {
    //     // Add Table Header
    //     const startX = 50;
    //     let startY = doc.y + 10;
    //     const columnWidths = [50, 150, 150, 150]; // Adjust column widths as needed
    //     const totalWidth = columnWidths.reduce((a, b) => a + b, 0);
    
    //     // Draw the title row (first row)
    //     const titleRow = tableData[0];
    //     const titleWidth = totalWidth; // Span all columns
    
    //     // Calculate title row height based on text height
    //     const titleHeight = doc
    //         .font(font)
    //         .fontSize(7.2)
    //         .heightOfString(titleRow.field1, { width: titleWidth });
    
    //     // Draw a single rectangle for the title row
    //     doc
    //         .fillColor("blue") // Light sky blue color
    //         .rect(startX, startY, titleWidth, titleHeight + 10) // Height adjusted for title text
    //         .stroke("black")
    //         .fill();
    
    //     // Draw the title text centered and bold
    //     doc
    //         .font('Helvetica-Bold') // Make title bold
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(titleRow.field1, startX, startY + 5, {
    //             baseline: "hanging",
    //             width: titleWidth,
    //             align: "center" // Center align the title text
    //         });
    
    //     // Move startY down for the next row
    //     startY += titleHeight + 10;
    
    //     // Draw column headers (second row)
    //     const headers = tableData[1];
    //     const headerHeight = 15; // Fixed height for headers
    
    //     columnWidths.forEach((colWidth, index) => {
    //         const headerX = startX + columnWidths.slice(0, index).reduce((a, b) => a + b, 0);
    //         doc
    //             .fillColor("#f5f5f5")
    //             .rect(headerX, startY, colWidth, headerHeight)
    //             .stroke("black") // Draw border around header cell
    //             .fill();
    
    //         // Draw header text centered and bold
    //         const headerText = headers[`field${index + 1}`]; // Adjust index for field names
    //         doc
    //             .font('Helvetica-Bold') // Make header bold
    //             .fillColor("black")
    //             .fontSize(7.2)
    //             .text(headerText, headerX, startY + 5, {
    //                 baseline: "hanging",
    //                 width: colWidth,
    //                 align: "center" // Center align header text
    //             });
    //     });
    
    //     // Move startY down for the next row
    //     startY += headerHeight;
    
    //     // Draw data rows (starting from the third row)
    //     for (let i = 2; i < tableData.length; i++) {
    //         const row = tableData[i];
    
    //         // Calculate row height based on the cell contents
    //         const rowHeight = Math.max(
    //             doc.font(font).fontSize(7.2).heightOfString(row.value1 || "", { width: columnWidths[0] }),
    //             doc.font(font).fontSize(7.2).heightOfString(row.value2 || "", { width: columnWidths[1] }),
    //             doc.font(font).fontSize(7.2).heightOfString(row.value3 || "", { width: columnWidths[2] }),
    //             doc.font(font).fontSize(7.2).heightOfString(row.value4 || "", { width: columnWidths[3] })
    //         ) + 10; // Additional space for padding
    
    //         // Alternate row background color
    //         doc.fillColor(i % 2 === 0 ? "#f5f5f5" : "#ffffff");
    //         doc.rect(startX, startY, totalWidth, rowHeight).stroke("black").fill();
    
    //         // Draw cells normally
    //         doc.fillColor("#ffffff"); // Ensure cell background is white for content
    
    //         // Check if value4 is missing and determine how to draw the cells
    //         if (!row.value4) {
    //             // If value4 is missing, span value3 across the last two columns
    //             const spanWidth = columnWidths[2] + columnWidths[3]; // Combine width of value3 and value4
    //             const cellX = startX + columnWidths[0] + columnWidths[1]; // Starting position for value3
    
    //             doc.rect(cellX, startY, spanWidth, rowHeight).stroke("black").fill();
    //             doc.font('Helvetica-Bold').fillColor("black").fontSize(7.2)
    //                 .text(row.value3 || "", cellX, startY + 5, {
    //                     baseline: "hanging",
    //                     width: spanWidth,
    //                     align: "center" // Center align cell text
    //                 });
    
    //             // Draw value1, value2 normally
    //             columnWidths.slice(0, 2).forEach((colWidth, index) => {
    //                 const cellText = row[`value${index + 1}`] || ""; // Adjust index for value names
    //                 const cellX = startX + columnWidths.slice(0, index).reduce((a, b) => a + b, 0);
    
    //                 doc.rect(cellX, startY, colWidth, rowHeight).stroke("black").fill();
    //                 doc.font('Helvetica-Bold').fillColor("black").fontSize(7.2)
    //                     .text(cellText, cellX, startY + 5, {
    //                         baseline: "hanging",
    //                         width: colWidth,
    //                         align: "center" // Center align cell text
    //                     });
    //             });
    //         } else {
    //             // Draw each column in the row normally
    //             columnWidths.forEach((colWidth, index) => {
    //                 const cellText = row[`value${index + 1}`] || ""; // Adjust index for value names
    //                 const cellX = startX + columnWidths.slice(0, index).reduce((a, b) => a + b, 0);
    
    //                 doc.rect(cellX, startY, colWidth, rowHeight).stroke("black").fill();
    //                 doc.font('Helvetica-Bold').fillColor("black").fontSize(7.2)
    //                     .text(cellText, cellX, startY + 5, {
    //                         baseline: "hanging",
    //                         width: colWidth,
    //                         align: "center" // Center align cell text
    //                     });
    //             });
    //         }
    
    //         startY += rowHeight;
    //     }
    // }
    
    // const loanTableData = [
    //     { field1: "Other Charges during the term of loan" },
    //     { field1: "Sr. No.", field2: "Particulars of Charges", field3: "Charges (In Rs./%)", field4: "Charge Details" },
    //     { value1: "1", value2: "Repayment Instruction / Instrument Return Charge", value3: `Rs. 750`, value4: "Per Instance of dishonor of cheque / ECS debit instruction + GST as Applicable" },
    //     { value1: "2", value2: "Repayment mode Swap Charges", value3:  `Rs. 750`, value4: "Per occasion of swapping of the PDCs / ECS mandate + GST as Applicable" },
    //     { value1: "3", value2: "Penal Charges", value3:`- 2% per month on the overdue amount plus applicable taxes in the event of default in repayment of loan instalments \n\n - 2 % per month on the outstanding loan facility amount plus applicable taxes for non-compliance of agreed terms and conditions mentioned in the Sanction Letter`},
    //     { value1: "4", value2: "Duplicate statement issuance charges", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable" },
    //     { value1: "5", value2: "Cheque re-presentation charges", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable" },
    //     { value1: "6", value2: "Duplicate Amortization schedule issuance charges", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable" },
    //     { value1: "7", value2: "Document Retrieval Charges", value3: `Rs.500`, value4: "Per Instance per set + GST as Applicable"},
    //     { value1: "8", value2: "Charges for subsequent set of Photocopy of loan agreement/documents were requested by Borrower", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable"},
    //     { value1: "9", value2: "Stamp Duty Charges", value3:`As applicable in the state stamp act`},
    //     { value1: "10", value2: "Prepayment/Pre-loan closure charges (including part payment) ", value3: `As per Sanction Terms and Conditions`},
    //     { value1: "11", value2: "Administrative Charges/Processing Fees & Other Charges", value3: `As per Sanction Terms and Conditions`},
    //     { value1: "12", value2: "Charges for duplicate NOC / No due certificate", value3:`Rs. 250`, value4: "Per Instance per set + GST as Applicable"},
    //     { value1: "13", value2: "Charges for revalidation NOC", value3:`Rs. 250`, value4: "Per Instance per set + GST as Applicable"}, 
    // ];
      
    // drawTable(loanTableData);

    function DRAWTABLE123(tableTitle, tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
      // Draw table title with a colored header
      doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
      doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5)
          .text(tableTitle, startX + 5, startY + 5, { align: 'center' });
  
      startY += 20; // Move down for the first row
  
      let sectionIndex = null; // Track the section index to span the column
  
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Apply custom style for row 1 (title2)
          
  
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
  
          // Calculate row height based on the tallest content
          const rowHeight = Math.max(20, field1Height, value1Height) + 10; // Adding padding for better spacing
  
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
  
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Stroke color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
  
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
  
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
  
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
  }
 



  const scheduleOfCharges = [
    { index: "sr.No", field1: "Particulars of Charges", value1: "Charge Details" },

    { index: "1", field1: "Repayment Instruction / Instrument Return Charges / PDC / ECS / NACH Bounce Charges", value1: "Rs 750/- Per Instance (Plus GST as applicable)" },
    { index: "2", field1: "Repayment Mode Swap Charges", value1: "Rs 750/- Per Instance (Plus GST as applicable)" },
    { index: "3", field1: "Penal Charges", value1: " 2% per month on the overdue amount plus applicable taxes in the event of default in repayment of loan installments\n 2% per month on the outstanding loan facility amount plus applicable taxes for non-compliance of agreed terms and conditions mentioned in the Sanction Letter" },
    { index: "4", field1: "Duplicate Statement Issuance Charges (SOA / RPS)", value1: "Free once in a Financial Year.Thereafter Rs 250/- (Plus GST as applicable)" },
    { index: "5", field1: "Cheque / NACH Representation Charges", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "6", field1: "Duplicate Amortization Schedule Issuance Charges", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "7", field1: "Document Retrieval Charges", value1: "Rs 500/- Per Instance per set (Plus GST as applicable)" },
    { index: "8", field1: "Charges for Subsequent Set of Photocopy of Loan Agreement/Documents Were Requested by Borrower", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "9", field1: "Stamp Duty Charges", value1: "As applicable in the state stamp act" },
    { index: "10", field1: "Prepayment Charges", value1: "No prepayment allowed till completion of 12 months from the date of 1st disbursement. After completion of 12 months from the date of 1st disbursement, prepayment from personal funds may be made without incurring any fees. In case of balance transfer, 4% charges will be applicable." },
    { index: "11", field1: "Foreclosure Charges", value1: "In case of foreclosure of Loan from Owned Funds, no Foreclosure Charges will be applicable. In case of balance transfer, 4% of the Outstanding Principal Amount will be applicable." },
    { index: "12", field1: "Administrative Charges / Processing Fees & Other Charges", value1: "Nil" },
    { index: "13", field1: "Charges for Duplicate NOC / No Due Certificate", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "14", field1: "Charges for Revalidation NOC", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "15", field1: "Cersai Charge", value1: "- When facility amount is equal to Rs 5 Lacs or lesser, Rs 50 plus GST\n- When facility amount is greater than Rs 5 Lacs, Rs 100 plus GST" },
    // { index: "16", field1: "Login Fees", value1: "₹1950/- (Inclusive of all Applicable Taxes)" },
    // { index: "17", field1: "Processing Fees", value1: "2% of loan amount + Applicable taxes" },
    // { index: "18", field1: "Documentation Charges", value1: "2% of loan amount + Applicable taxes (For under construction cases 3% of loan amount + Applicable taxes)" },
    // { index: "19", field1: "Issuance of Duplicate Income Tax Certificate", value1: "NIL" },
    // { index: "20", field1: "Legal / Collections / Vehicle Storage / Repossession and Incidental Charges", value1: "As per Actuals" }
  ];

  DRAWTABLE123("Schedule of Charges (MITC)", scheduleOfCharges);
  doc.addPage();
  // addLogo();
  //drawBorder();
  doc.moveDown(6);
  const scheduleOfCharges1 = [
   
    { index: "16", field1: "Login Fees", value1: "Rs 1950/- (Inclusive of all Applicable Taxes)" },
    { index: "17", field1: "Processing Fees", value1: "2% of loan amount + Applicable taxes" },
    { index: "18", field1: "Documentation Charges", value1: "2% of loan amount + Applicable taxes (For under construction cases 3% of loan amount + Applicable taxes)" },
    { index: "19", field1: "Issuance of Duplicate Income Tax Certificate", value1: "NIL" },
    { index: "20", field1: "Legal / Collections / Vehicle Storage / Repossession and Incidental Charges", value1: "As per Actuals" }
  ];

    DRAWTABLE123("Schedule of Charges (MITC)", scheduleOfCharges1);


  
  
    
    doc.moveDown(2);
    const startX = 50; // Starting position for text from the left (adjust as per your margins)
    
    doc
    .font(fontBold) // Ensure bold font is applied
    .fontSize(8)
    .fillColor("black")
    .text(
    `IN WITNESS WHEREOF the Parties have executed this Agreement on the day and the year as mentioned in the Schedule,\n`,
    startX, // Start from the left position (left margin)
    doc.y, // Current vertical position (doc.y)
    {
      align: 'left', // Align the text to the left (default)
      align: "justify",
      width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    }
    ).moveDown()
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
    `SIGNED AND DELIVERED BY WITHIN NAMED BORROWER/ CO-BORROWER \n`,
    startX, // Start from the left position (left margin)
    doc.y, // Current vertical position (doc.y)
    {
      align: 'left', // Align the text to the left (default)
      align: "justify",
      width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    }
    ).moveDown()
    .font(fontBold)
    .fontSize(8)
    .fillColor("black")
    .text(
    `If Company/Trust/Society, by its Authorized Signatory with its seal/stamp OR If Limited Liability Partnership, by its Designated Partner and Authorized Signatory seal/stamp OR If Partnership Firm, by its Designated Partner and Authorized Signatory seal/stamp OR If HUF, through its Karta or If Individual, by the individual Borrower; AND by the Co-Borrower (if applicable)\n
    SIGNED AND DELIVERED BY WITHIN NAMED GUARANTOR(s)\n
    If Company, by its Authorized Signatory OR If Limited Liability Partnership, by its Designated Partner and Authorized Signatory OR If Partnership Firm, by its Designated Partner and Authorized Signatory OR If HUF, through its Karta Or If Individual, by the individual Borrower`,
    startX, // Start from the left position (left margin)
    doc.y, // Current vertical position (doc.y)
    {
      align: 'left', // Align the text to the left (default)
      align: "justify",
      width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    }
    );
    
    
    doc.moveDown(2);

    function firstBoxTable(tableData) {
      // Add Table Header
      const startX = 50; // Starting X position for the box
      let startY = doc.y + 10; // Starting Y position for the box
      const boxWidth = 500; // Adjust the width of the box as per your need
    
      // Calculate the total height needed for the entire box
      let totalHeight = 0;
    
      // Calculate the height for each row and determine the total height of the box
      tableData.forEach((row) => {
        const rowHeight = doc
          .font(font)
          .fontSize(7.2)
          .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
    
        totalHeight += rowHeight; // Accumulate the total height
      });
    
      // Draw the outer rectangle for the box
      doc
        .fillColor("#f0f0f0") // Box background color
        .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
        .stroke("black") // Border color
        .fill();
    
      // Loop through the data and draw the text inside the box
      tableData.forEach((row, rowIndex) => {
        // Calculate row height based on the content
        const rowHeight = doc
          .font(font)
          .fontSize(7.2)
          .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
    
        // Alternate row background color (optional)
        doc
          .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff") // Alternate row colors
          .rect(startX, startY, boxWidth, rowHeight) // Draw rectangle for each row
          .stroke("black") // Border color for each row
          .fill();
    
        // Draw the text in the box
        doc
          .font(font)
          .font('Helvetica-Bold')
          .fillColor("black")
          .fontSize(7.2)
          .text(row.field1, startX + 5, startY + 5, {
            baseline: "hanging",
            width: boxWidth - 10, // Adjust width to provide padding inside the box
            align: "left", // Align text to the left
          });
    
        // Move to the next row
        startY += rowHeight;
      });
    }
    
    const firstBoxLine = [
      { field1: `BORROWER'S NAME : ${allPerameters.borrowerName}` },
      { field1: `CO-APPLICANT'S NAME : ${allPerameters.coBorrowername}` },
      { field1: `2nd CO-APPLICANT'S NAME : ${allPerameters.coBorrowername2}` },
      { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
    ];
    
    firstBoxTable(firstBoxLine);
    //addFooter();
    
//     //---------------------------------------------------new page---------------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(2);
    
    // function firstBoxTable(tableData) {
    //     // Add Table Header
    //     const startX = 50; // Starting X position for the box
    //     let startY = doc.y + 10; // Starting Y position for the box
    //     const boxWidth = 500; // Adjust the width of the box as per your need
      
    //     // Calculate the total height needed for the entire box
    //     let totalHeight = 0;
      
    //     // Calculate the height for each row and determine the total height of the box
    //     tableData.forEach((row) => {
    //       const rowHeight = doc
    //         .font(font)
    //         .fontSize(7.2)
    //         .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
      
    //       totalHeight += rowHeight; // Accumulate the total height
    //     });
      
    //     // Draw the outer rectangle for the box
    //     doc
    //       .fillColor("#f0f0f0") // Box background color
    //       .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    //       .stroke("black") // Border color
    //       .fill();
      
    //     // Loop through the data and draw the text inside the box
    //     tableData.forEach((row, rowIndex) => {
    //       // Calculate row height based on the content
    //       const rowHeight = doc
    //         .font(font)
    //         .fontSize(7.2)
    //         .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
      
    //       // Alternate row background color (optional)
    //       doc
    //         .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff") // Alternate row colors
    //         .rect(startX, startY, boxWidth, rowHeight) // Draw rectangle for each row
    //         .stroke("black") // Border color for each row
    //         .fill();
      
    //       // Draw the text in the box
    //       doc
    //         .font(font)
    //         .font('Helvetica-Bold')
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(row.field1, startX + 5, startY + 5, {
    //           baseline: "hanging",
    //           width: boxWidth - 10, // Adjust width to provide padding inside the box
    //           align: "left", // Align text to the left
    //         });
      
    //       // Move to the next row
    //       startY += rowHeight;
    //     });
    //   }
      
    //   const firstBoxLine = [
    //     { field1: `BORROWER'S NAME : ${allPerameters.borrowerName}` },
    //     { field1: `CO-APPLICANT'S NAME : ${allPerameters.coBorrowername}` },
    //     { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
    //   ];
      
    //   firstBoxTable(firstBoxLine);
    //   doc.moveDown(1);
    //   doc
    //   .font(fontBold) // Ensure bold font is applied
    //   .fontSize(8)
    //   .fillColor("black")
    //   .text(
    //     `AND SIGNED AND DELIVERED BY THE WITHIN NAMED LENDER,\n
    //     Ratnaa fin Capital Private Limited, by the hands of pls confirm authorized name its authorized official.`,
    //     startX, // Start from the left position (left margin)
    //     doc.y, // Current vertical position (doc.y)
    //     {
    //       align: 'left', // Align the text to the left (default)
    //       align: "justify",
    //       width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    //     }
    //   );
    
    //   function secondBoxLine(tableData) {
    //     // Add Table Header
    //     const startX = 50; // Starting X position for the box
    //     let startY = doc.y + 10; // Starting Y position for the box
    //     const boxWidth = 500; // Total width of the box
    //     const field1Width = 100; // Width for the field1 column
    //     const valueWidth = boxWidth - field1Width; // Width for the value column
        
    //     // Calculate the total height needed for the entire box
    //     let totalHeight = 0;
      
    //     // Calculate the height for each row and determine the total height of the box
    //     tableData.forEach((row) => {
    //       // Calculate row height based on the content in the value field
    //       const valueTextHeight = doc
    //         .font('Helvetica') // Regular font for calculating height
    //         .fontSize(7.2)
    //         .heightOfString(row.value || '', { width: valueWidth }) + 10; // Add padding
      
    //       totalHeight += valueTextHeight; // Accumulate the total height
    //     });
      
    //     // Draw the outer rectangle for the box
    //     doc
    //       .fillColor("#f0f0f0") // Box background color
    //       .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    //       .stroke("black") // Border color
    //       .fill();
      
    //     // Loop through the data and draw the text inside the box
    //     tableData.forEach((row) => {
    //       // Calculate row height based on the content in value field
    //       const valueTextHeight = doc
    //         .font('Helvetica') // Regular font for calculating height
    //         .fontSize(7.2)
    //         .heightOfString(row.value || '', { width: valueWidth }) + 10; // Add padding
      
    //       // Draw rectangle for the field1 box
    //       doc
    //         .fillColor("#f5f5f5") // Background color for field1 (empty box)
    //         .rect(startX, startY, field1Width, valueTextHeight)
    //         .stroke("black") // Border for field1 box
    //         .fill();
      
    //       // Draw rectangle for the value box
    //       doc
    //         .fillColor("#ffffff") // Background color for value
    //         .rect(startX + field1Width, startY, valueWidth, valueTextHeight)
    //         .stroke("black") // Border for value box
    //         .fill();
      
    //       // Draw the field1 text in the left column (in bold)
    //       doc
    //         .font('Helvetica-Bold') // Set font to bold for field1
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(row.field1, startX + 5, startY + 5, {
    //           baseline: "hanging",
    //           width: field1Width - 10, // Adjust width to provide padding inside the box
    //           align: "left", // Align text to the left
    //         });
      
    //       // Draw the value text in the right column (regular font)
    //       doc
    //         .font('Helvetica') // Set font back to regular for value
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(row.value, startX + field1Width + 5, startY + 5, {
    //           baseline: "hanging",
    //           width: valueWidth - 10, // Adjust width to provide padding inside the box
    //           align: "left", // Align text to the left
    //         });
      
    //       // Move to the next row
    //       startY += valueTextHeight;
    //     });
    //   }
      
    //   const secondBox = [
    //     { field1: " ", value: `Authorised official's Name: ${allPerameters.borrowerName}\n\nAuthorised official's Signature: ` }
    //   ];
    //   secondBoxLine(secondBox); 
      // doc.moveDown(6);
    
    // // Define the left margin and the width for centering
    const leftX = 50; // Left margin for left-aligned text
    const titleWidth = 400; // Width for the title text
    const centerX = (doc.page.width - titleWidth) / 2; // Calculate center position manually
    
    // Title (Centered and Bold)
    const startXX= 50; // Starting position for text from the left (adjust as per your margins)

    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`Place: ${allPerameters.placeOfExecution}`, startXX, doc.y, { align: "left", width: 470 ,continued:true});
    doc.moveDown(1);

    doc
    .fontSize(9)
    .font('Helvetica')
    .text(` Date: ${allPerameters.agreementdate}`, startXX, doc.y, { align: "right", width: 470 });
    doc.moveDown(1);
    doc
    .fontSize(9)
    .font(fontBold) // Bold for title
    .text("DECLARATIONS CUM UNDERTAKINGS CUM AUTHORITY", centerX, doc.y, { width: titleWidth, align: "center" }) // Manually centered
    .moveDown(0.7);
    
    // Left-aligned text
    doc
    .font(font) // Regular font for left-aligned text
    .fontSize(8)
    .text(`IN CONSIDERATION OF Ratnaafin Capital Private limited, (the Lender) providing or agreeing to provide the Agri Micro LOAN AGAINST PROPERTY to me/us on the terms and conditions contained in the Loan Agreement dated ${allPerameters.agreementdate} and other Transaction Documents,`, leftX, doc.y, { width: doc.page.width - 100, align: "left" })
    .moveDown(0.8);
    
    // Center-aligned bold text
    // doc
    // .font(fontBold) // Bold for center-aligned text
    // .fontSize(8)
    // .text("In case of Individual Borrower", centerX, doc.y, { width: titleWidth, align: "center", underline: true })
    // .moveDown(0.8);
    
    // Left-aligned text
    doc
    .font(font) // Regular font for left-aligned text
    .fontSize(9)
    .text(`I/We, ${allPerameters.borrowerName} residing at ${allPerameters.borroewraddress} (hereinafter referred to as “the Borrower”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" })
    .moveDown(0.4);
    
    // Center-aligned bold "AND"
    doc
    .font(fontBold) // Bold for center-aligned text
    .fontSize(9)
    .text("AND", centerX, doc.y, { width: titleWidth, align: "center" })
    .moveDown(0.4);
    
    // Left-aligned text
    doc
    .font(font) // Regular font for left-aligned text
    .text(`I/We,${allPerameters.coBorrowername} residing at ${allPerameters.coBorroweraddress} (hereinafter referred to as “the CO Borrower”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    doc
    .font(fontBold) // Bold for center-aligned text
    .fontSize(9)
    .text("AND", centerX, doc.y, { width: titleWidth, align: "center" })
    .moveDown(0.4);
    
    // .moveDown(0.8);
    
    // Center-aligned bold "AND"
    // doc
    // .font(fontBold) // Bold for center-aligned text
    // .fontSize(9)
    // .text("AND", centerX, doc.y, { width: titleWidth, align: "center" })
    // .moveDown(0.8);

    doc
    .font(font) // Regular font for left-aligned text
    .text(`I/We,${allPerameters.coBorrowername2} residing at ${allPerameters.coBorroweraddress2} (hereinafter referred to as “the CO Borrower”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    doc
    .font(fontBold) // Bold for center-aligned text
    .fontSize(9)
    .text("AND", centerX, doc.y, { width: titleWidth, align: "center" })
    .moveDown(0.4);
    
    doc
    .font(font) // Regular font for left-aligned text
    .text(`I/We,${allPerameters.guarantorname} residing at ${allPerameters.guarantoraddress} (hereinafter referred to as “the Guarantor”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    // Left-aligned text
    // doc
    // .font(fontBold) // Regular font for left-aligned text
    // .text(` ${allPerameters.guarantorname} `, leftX, doc.y, { width: doc.page.width - 100, align: "left" })
    doc.moveDown(0.8);
    
    // Final paragraph (Left-aligned)
    
    doc
    .fontSize(9)
    .text("(Hereinafter referred to as ”the Guarantors”/”Co-Borrowers”) hereby jointly and severally, agree, undertake, authorize, assure and affirm as follows:", leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    
    doc.moveDown(2);
    // Format the borrower details to the left side
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `1. I/We agree and undertake that for the credit facilities granted to the Borrowers and/or availed by the Borrowers, the Lender will be entitled/authorized/permitted to charge and/or deduct/debit/recover from my/our Accounts such sum or sums of money as the Lender may stipulate, incur or bear by way of guarantee fee, document verification fees, or any other levy or charge payable by the Borrower to the Lender for availing finance, including for verification of security documents by the Lender’s Advocate/s and other such fees as payable by the Borrower to the Lender in respect of facilities extended to the Borrowers.\n\n
       2. I/We further agree, authorize, assure and confirm that in the event of any default committed by me/us in compliance Of the terms and conditions or any of them stipulated by the Lender from time to time, the Lender shall be entitled, permitted and authorized to charge without any intimation to us penal charges at such rate and in accordance with such rules/regulation of the Lender and/or such Rules or regulations or stipulations/directives/guidelines of the Reserve Bank of India on the amount due and payable by the Borrowers to the Lender in respect of the credit facilities/financial accommodation extended to the Borrowers by the Lender.\n\n
       3. I/We further agree, authorize, assure and confirm that in the event of the Lender obtaining any insurance cover or cover for financial risk from an insurance company/ies or any other institution/firm/Body Corporate or otherwise over the assets charged/ hypothecated/ pledged or mortgaged to the Lender or otherwise taken possession of by the Lender on account of or in consideration of the dues payable by the Borrower for the facilities extended to my/our Account/s without any further formalities and intimation by the Lender of having obtained such insurance, or financial risk cover and such letter informing about the Lender having taken such insurance cover, etc., would be sufficient proof there of enabling the Lender to recover and/or charge the same to my/our accounts/s.\n\n
       4. I/We further agree, authorize, assure and confirm that the Lender shall be entitled to charge interest at the rate as may be decided by the Lender for the adhoc facility/facilities agreed to be extended/may be extended by the Lender to the Borrower and such interest may be continued to be charged to me/us by the Lender as long as the Borrower avail such adhoc facility and/or earlier, as may be decided by the Lender from time to time.\n\n
       5. I/We further agree, assure and undertake that in the event of Lender requiring any information for processing/review of my/our account including furnishing of statements of stocks/Balance Sheet (audited or otherwise), CMA Data statement of  other particulars  may be required by the Lender within the stipulated period or at the time of processing/review of my/our account, and if for any reason whatsoever I am/we are unable to furnish the same within a week or such other reasonable time as the Lender may, upon specific request by me/us, agree to in writing, then the Lender shall be entitled to charge to my/our account and/or claim penal charges at the rate of 24% P.A. on outstanding dues, not with standing the technical review of my/our account as may be otherwise carried out by the Lender in the absence of such information, submission as required by the Lender.\n\n`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    
    
    //addFooter();
    
//     //---------------------------------------------new page ------------------------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(2);
    
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `
       6. In case if the information about legal heirs is incomplete, inadequate, or not provided, I/We, the undersigned, hereby irrevocably agree, declare, undertake, assure, and confirm that the legal heirs, as mandated under the relevant applicable laws of India, represent the comprehensive enumeration of all my/our legal heirs, both known and unknown, at the time of executing this agreement. I hereby provide my irrevocable consent to the Lender, its successors, and assigns, to pursue any and all legal remedies for the recovery of any outstanding obligations, including but not limited to, the repayment of loans, accrued interest, fees, and charges, from any and all of my/our legal heirs, including those who may come into existence after the execution of this agreement, in the event of my/our demise or the demise of any and all of us during the existence or pendency of credit facilities extended by the Lender to the Borrower. Furthermore, I acknowledge that this consent shall remain in full force and effect throughout the entire term of any credit facility and beyond until all outstanding obligations to the Lender have been fully discharged and satisfied. I also undertake to promptly notify the Lender of any changes in the composition of my/our legal heirs, including additions or alterations.\n\n
       7. I/We further agree, undertake, and assure that I/We shall promptly inform you in writing of any change in the above particulars of my/our legal heirs that may be occasioned by birth, death, marriage, etc., and/or, on account of any amendment/change in the general statutes/laws of the country.\n\n
       8. . I/We also hereunder submit the particulars of immovable properties belonging to me/us, which have been charged to the Lender as security for financial assistance granted to the Borrower`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    doc.moveDown(1);
    
    // function tableFunction(tableData) {
    //     // Add Table Header
    //     const startX = 50; // Starting X position for the box
    //     let startY = doc.y + 10; // Starting Y position for the box
    //     const boxWidth = 500; // Total width of the box
    //     const numFields = Object.keys(tableData[0]).length; // Get number of fields from the first row
    //     const fieldWidth = boxWidth / numFields; // Calculate width for each column
    
    //     // Calculate the total height needed for the entire box
    //     let totalHeight = 0;
    
    //     // Calculate the height for each row and determine the total height of the box
    //     tableData.forEach((row) => {
    //         // Calculate row height based on the content in each field
    //         let rowHeight = 0;
    //         for (let field in row) {
    //             const fieldTextHeight = doc
    //                 .font('Helvetica') // Regular font for calculating height
    //                 .fontSize(7.2)
    //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
    //             rowHeight = Math.max(rowHeight, fieldTextHeight); // Get the maximum height for the row
    //         }
    //         totalHeight += rowHeight; // Accumulate the total height

           

    //     });
    
    //     // Draw the outer rectangle for the box
    //     doc
    //         .fillColor("#f0f0f0") // Box background color
    //         .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    //         .stroke("black") // Border color
    //         .fill();
    
    //     // Loop through the data and draw the text inside the box
    //     tableData.forEach((row, rowIndex) => {
    //         let currentX = startX; // Reset the starting X position for each row
    //         // Calculate row height based on the content in each field
    //         let rowHeight = 0;
    //         for (let field in row) {
    //             const fieldTextHeight = doc
    //                 .font('Helvetica') // Regular font for calculating height
    //                 .fontSize(7.2)
    //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
    //             rowHeight = Math.max(rowHeight, fieldTextHeight);

    //             // const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
    //             // const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    //             //  // Get the maximum height for the row
    //             // const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
    //             // const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
    //             // let rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding
                 

    //             if (rowIndex === 0) { // Example for a specific row index
    //               rowHeight = Math.max(rowHeight, 50); // Custom height for row at index 5
    //           }
    //           // const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
    //           // if (row.index) {
    //           //     sectionIndex = row.index; // Set current section index
    //           // }
    //           }
    
    //         // Draw rectangles for each field in the row
    //         for (let field in row) {
    //             // Draw rectangle for the field box
    //             doc
    //                 .fillColor("#f5f5f5") // Background color for field (empty box)
    //                 .rect(currentX, startY, fieldWidth, rowHeight)
    //                 .stroke("black") // Border for field box
    //                 .fill();
    
    //             // Set font style based on whether it's the header row
    //             const isHeader = rowIndex === 0; // Check if it's the header row
    //             doc
    //                 .font(isHeader ? 'Helvetica-Bold' : 'Helvetica') // Set font to bold for header
    //                 .fillColor("black")
    //                 .fontSize(7.2);
    
    //             // Determine text alignment based on field index (you can customize this as needed)
    //             const align = (field === 'field3') ? 'center' : 'left'; // Center field3, left for others
    
    //             // Draw the field text in the box
    //             doc.text(row[field], currentX + 5, startY + 5, {
    //                 baseline: "hanging",
    //                 width: fieldWidth - 10, // Adjust width to provide padding inside the box
    //                 align: align, // Align text based on content
    //             });
    
    //             // Move to the next column
    //             currentX += fieldWidth; // Update X position for the next field
    //         }
    
    //         // Move to the next row
    //         startY += rowHeight; // Update Y position for the next row
    //     });
    // }
    function tableFunction(tableData) {
      const startX = 53; // Starting X position
      let startY = doc.y + 10; // Starting Y position
      const boxWidth = 500; // Total width of the box
      const numFields = Object.keys(tableData[0]).length; // Number of columns
      const fieldWidth = boxWidth / numFields; // Width per column
  
      let totalHeight = 0;
  
      // Calculate total height
      tableData.forEach((row) => {
          if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
          let rowHeight = 0;
          for (let field in row) {
              const fieldTextHeight = doc
                  .font('Helvetica')
                  .fontSize(7.2)
                  .heightOfString(row[field] || '', { width: fieldWidth - 10 }) + 10; // Add padding
              rowHeight = Math.max(rowHeight, fieldTextHeight);
          }
          totalHeight += rowHeight;
      });
  
      // Draw the outer box
      doc.fillColor("#f0f0f0")
          .rect(startX, startY, boxWidth, totalHeight)
          .stroke("black")
          .fill();
  
      // Draw table content
      tableData.forEach((row, rowIndex) => {
          if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
          let currentX = startX;
          let rowHeight = 0;
  
          // Calculate row height for the current row
          for (let field in row) {
              const fieldTextHeight = doc
                  .font('Helvetica')
                  .fontSize(7.2)
                  .heightOfString(row[field] || '', { width: fieldWidth - 10 }) + 10; // Add padding
              rowHeight = Math.max(rowHeight, fieldTextHeight);
          }
  
          // Draw cells and their content
          for (let field in row) {
              doc.fillColor("#f5f5f5")
                  .rect(currentX, startY, fieldWidth, rowHeight)
                  .stroke("black")
                  .fill();
  
              const isHeader = rowIndex === 0;
              doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
                  .fillColor("black")
                  .fontSize(7.2)
                  .text(row[field], currentX + 5, startY + 5, { // 5px padding inside the cell
                      baseline: "hanging",
                      width: fieldWidth - 10, // Leave 5px padding on each side
                      align: 'left',
                  });
  
              currentX += fieldWidth;
          }
  
          startY += rowHeight; // Move to next row
      });
  
      // Set the `doc.y` position after the table ends
      doc.y = startY + 10; // Add extra 10 points for spacing after the table
  }
  
  
  //   function tableFunction(tableData) {
  //     const startX = 53; // Starting X position
  //     let startY = doc.y + 10; // Starting Y position
  //     const boxWidth = 500; // Total width of the box
  //     const numFields = Object.keys(tableData[0]).length; // Number of columns
  //     const fieldWidth = boxWidth / numFields; // Width per column
  
  //     let totalHeight = 0;
  
  //     // Calculate total height
  //     tableData.forEach((row) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
  //         let rowHeight = 0;
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }
  //         totalHeight += rowHeight;
  //     });
  
  //     // Draw the outer box
  //     doc.fillColor("#f0f0f0")
  //         .rect(startX, startY, boxWidth, totalHeight)
  //         .stroke("black")
  //         .fill();
  
  //     // Draw table content
  //     tableData.forEach((row, rowIndex) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
  //         let currentX = startX;
  //         let rowHeight = 0;
  
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10;
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }

          
  
  //         for (let field in row) {
  //             doc.fillColor("#f5f5f5")
  //                 .rect(currentX, startY, fieldWidth, rowHeight)
  //                 .stroke("black")
  //                 .fill();
  
  //             const isHeader = rowIndex === 0;
  //             doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
  //                 .fillColor("black")
  //                 .fontSize(7.2)
  //                 .text(row[field], currentX + 5, startY + 5, {
  //                     baseline: "hanging",
  //                     width: fieldWidth - 10,
  //                     align: 'left',
  //                 });
  
  //             currentX += fieldWidth;
  //         }
  
  //         startY += rowHeight; // Move to next row
  //     });
  //     doc.moveDown(); // Adds two lines of vertical space OR:
  // }
  
        
    const tableData = [
        { field1: "Item No.", field2: `Particulars of Immovable properties with full address (where situate, etc.)\n\n`, field3: "In whose name the property stands", field4: "Present Encumbrance", field5: "Whether leasehold or ownership", field6: "Present Market Value" },
        { field1: "1", field2: `${allPerameters.techfullAdress}\n\n`, field3:`${allPerameters.sellerName}&${allPerameters.buyerName}`, field4: `NO`, field5: `OWNERSHIP`, field6: `Rs.${allPerameters.presentMarketValue} - ${allPerameters.marketValuetowor}` }
    ];

//     const tableData = [
//     { 
//         field1: "Item No.", 
//         field2: "Particulars of Immovable properties with full address (where situate, etc.)",
//         field3: "Charges (In Rs./%)",
//         field4: "In whose name the property stands",
//         field5: "Whether leasehold or ownership",
//         field6: "Present Market Value"
//     },
//     { 
//         field1: "1",
//         field2: allPerameters.particularsImmovablePropertiesFullAddress || '',
//         field3: allPerameters.inWhoseNameThePropertyStands || '',
//         field4: allPerameters.presentEncumbrance || '',
//         field5: allPerameters.whetherLeaseholdOrOwnership || '',
//         field6: allPerameters.presentMarketValue || ''
//     }
// ].filter(row => Object.values(row).some(value => value.trim() !== '')); // Remove blank rows

    
    // Call the function to create the table
    tableFunction(tableData);   
    
    // doc.moveDown(14);
    
    
    const leftMargin = 50; // Set a custom left margin if needed
    const startY = doc.y;  // Start at the current y position
    
    doc
      .moveDown()
      .font(font)
      .fontSize(8)
      .fillColor("black")
      .text(
        `9. I/We also undertake, agree, assure and confirm that I/we shall not transfer, dispose of, alienate encumber or deal with in any manner, without prior permission in writing of the Lender, the assets, properties, tangible or intangible or immovable, as are charged or mortgaged to the Lender same in the usual course of my/our business or as provided for in documents executed in that behalf.`,
        leftMargin, // Set X position explicitly
        startY,     // Set Y position explicitly
        {
          lineGap: 2,
          width: 500, // Set a maximum width
          align: "left", // Align text to the left
          
        }
      );
    
    //addFooter();
    
//     //------------------------------------------new page ------------------------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(8);
    
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `10. I/We hereby declare further that the particulars of legal heirs, assets, etc., furnished by me/us as above are correct and complete, and that we are fully aware that the Lender will be granting credit/other facility to the Borrower inter-alia on the faith of this Undertaking-cum-Declaration-cum-authority.
        
    11. I/We also agree, undertake and assure that charging or non-charging of penal charges in terms aforesaid shall not in any way be construed as a waiver or satisfaction of any of the terms and conditions stipulated by the Lender for compliance in terms of this undertaking or otherwise howsoever.
        
    12.I/We say that I/We am/are absolutely seized and possessed of or otherwise well and suficiently entitled to the Immovable property being of (1) ${allPerameters.techfullAdress} more particularly described in the Schedule hereunder written (hereinafter referred to as the “said Immovable Property”).
        
    13. I/We declare that I/We have not created any charges or encumbrances in respect of the Immovable Property more particularly described in the Schedulehereunder.
        
    14. I/We declare that the said Immovable Property is proposed to be mortgaged and charged to `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        // width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(fontBold).text(
      `Ratnaafin Capital Private Limited, Ahmedabad Branch`,
      {
        lineGap: 2,
        align: "left",
        // align: "justify",
        // width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(font).text(
      `, to secure by way of First Charge for the due repayment and discharge of the secured Loan of Rs.`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc.font(fontBold).text(
      `, ${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord})`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc.font(font).text(
      `, granted by `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(fontBold).text(
      `, RCPL `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(font).text(
      `,to `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(fontBold).text(
      `, ${allPerameters.borrowerName}`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc.font(font).text(
      `, together with interest, penal charges, and other monies payable to Ratnaafin Capital Private Limited under their loan agreements, letter of sanction, and other transaction documents, as amended from time to time.`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
       
      }
    ).moveDown();
    doc.font(font).text(
      `15. The said `,
      {
        lineGap: 2,
        align: "left",
        // align: "justify",
        // width: 500, // Set a maximum width
        continued:true
      }
    );
    doc
    .font(fontBold)
    .fontSize(8)
    .fillColor("black")
    .text(
      ` Ratnaafin Capital Private Limited,Ahmedabad Branch `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      ` is/are hereinafter referred to as the "Lender."
        
    16. I/We say that the said Immovable Property is free from all encumbrances or charges (statutory or otherwise), claims and demands, and that the same or any of them or any part thereof are/is not subject to any Lien/Lispendens, attachment or any other process issued by any Court or Authority and that I/we have not created any Trust in respect thereof and that the said Immovable Property is/are in my/our exclusive, uninterrupted and undisturbed possession and enjoyment since the date of purchase/acquisition thereof and no adverse claims have been made against me in respect of the said Immovable Property or any of them or any part thereof and the same are not affected by any notices of acquisition or requisition, and that no proceedings are pending or initiated against me under the Income Tax Act, 1961, or under any other law in force in India for the time being and that no notice has been received by or served on me under the Income Tax Act, 1961 and/or under any law and there is no pending attachment whatsoever issued or initiated against the said Immovable Property or any of them or any part thereof.
        
    17. I/We say that I have duly paid all rents, royalties and all public demands including Income Tax, Corporation/Municipal Tax and all other taxes and revenue payable to the Government of India or to the Government of any State or to any Local Authority and that at present there are no arrears of such dues, rents, royalties, taxes and revenue dues and outstanding and that no attachments or warrants have been served on me of Income Tax, Government Revenues and other taxes.
        
    18. I/We also agree and undertake to give such declarations, undertakings and other writings as may be required by the Lender or their solicitors and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the lender.
        
    19. I/We say that I have obtained the requisite consent from the Income Tax authorities pursuant to the provisions contained in Section 281 of the Income Tax Act, 1961 for the alienation of my property in favour of the Lender.
        
    20. I/We assure, agree and declare that the security to be created in favour of the Lender shall ensure in respect of my Immovable Property, both present & future and that the documents of title, evidences, deeds and writings in relation to the said Immovable Property are the only documents of title relating to the said Immovable Property.
        
    21. I/We hereby agree and undertake that the MORTGAGOR shall, within a period of three months from the date hereof or such extended date as may be permitted by the Lender in writing:
        
    a) Perfectly assure the title to the properties comprised in the mortgage security and comply with all requisitions that may be made from time to time by or on behalf of the Lender in that regard.
    
    b) Provide such declarations, undertakings, and other writings as may be required by the Lender and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the Lender.`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    //addFooter();
    
//     // ------------------------------------------------- new page --------------------------------------------------------------------
    
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(2);
    
    
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `c) Pay all rents, rates, taxes, cesses, fees, revenues, assessments, duties, and other outgoings due in respect of the said Immovable Property. I/We shall observe and perform all the rules and regulations pertaining to the same and will not do or omit to do or suffer to be done anything whereby the mortgaged security, as proposed to be created in favor of the Lender, may be affected or prejudiced in any manner whatsoever.
    
    22. I/We further undertake that no mortgage, charge, lien or other encumbrance whatsoever will be created on the properties compromised in the mortgaged security save & except with the permission of the Lender.
    
    23. I/We are not aware of any act, deeds, matter or thing or circumstance which prevents me from charging/further charging in favour of the Lender on the said Immovable Property.
    
    24. I/We (for borrower/s) do hereby unconditionally and irrevocably agree as a condition of such loan/advances extended to the Borrower by the Lender that in case I/we commit default in the repayment of such loan/advances of in the repayment of interest thereon or any of the agreed installment of the loan on due date/the Lender and/or the Reserve Bank of India will have an unqualified right to disclose or publish my/our name or the name of the our company/firm/unit and/or its directors/partners/proprietors as defaulter/s in such manner and through such medium as the Lender or Reserve Bank of India in their absolute discretion may think fit.
    
    25. I/We further understand that as a pre-condition, relating to grant of the loans/advances/ credit facilities to the Borrower, the Lender, requires my/our consent for the disclosure by the Lender of, information and data relating to me/us, of the credit facility availed of/to be availed, by me/us, obligations assumed/to be assumed, by me/us, in relation thereto and default, if any, committed, in discharge thereof.`,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
      //  continued:true // Set a maximum width
       // Set a maximum width
     }
    ).moveDown()
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text( 
  `26. Accordingly, I/We, hereby agree and give consent of the disclosure by the Lender of all or any such:
     
  a. Information and data relating to me/us.
     
  b. The information or data relating to any credit facility availed of/to be availed, by me/ us, and;
     
  c. Default, if any, committed by me/us, in discharge of my/our such obligation, as the Lender may deem appropriate and necessary to disclose and furnish to any agency authorized by RBI.
    
  I/We declare that the information and data furnished by me/us to the Lender are true and correct.
    
  27. Further, in consideration of the Lender agreeing to grant the `,
     {
       lineGap: 2,
       align: "left",
      //  align: "justify",
       width: 500,
       continued:true // Set a maximum width
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica-Bold`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `Agri Micro Loan against Property `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       continued:true // Set a maximum width
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `and in consideration of the Lender at our request continuing and having continued the above-mentioned facilities, I/we,agree, confirm and undertake: 
    `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `
    a) To keep mortgaged security fully insured against fire and such other risks as may be required by the Lender and to submit the respective insurance policies to the Lender.
    
    b) To allow Lender to carry out inspection of the mortgaged securities at periodical intervals and to bear the inspection charges and other incidental charges incurred by the Lender in connection therewith.
    
   c) To allow Lender to charge penal charges @ 2 % P.M above the rate applicable to loan Account on the entire outstanding in `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       continued:true // Set a maximum width
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica-Bold`)
    .fontSize(8)
    .fillColor("black")
    .text(
     ` Agri Micro Loan against Property `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       continued:true // Set a maximum width
     }
    )
    // doc
    // .font(`Helvetica` )
    // .fontSize(8)
    // .fillColor("black")
    // .text(
    //  `facilities under the following circumstances:
     
    //    ● Entire overdue amount in case of default in repayment of loan installments
       
    //    ● Entire outstanding amount of loan facilities for non-compliance of agreedterms and conditions mentioned in the Sanction Letter
     
    // d) To obtain the Lender's written consent in respect of the following matters:
     
    //    ● Making investment in or giving loans to subordinates, associate concerns, individuals or other parties.
       
    //    ● Effecting mergers and acquisitions.
       
    //    ● Paying dividend other than out of current year's earnings after making due provisions.
       
    //    ● Giving guarantees on behalf of third parties.
    // `,
    //  {
    //    lineGap: 2,
    //    align: "left",
    //    align: "justify",
    //    width: 500, // Set a maximum width
    //  }
    // );
    doc
    .font(`Helvetica` )
    .fontSize(8)
    .fillColor("black")
    .text(
     `facilities under the following circumstances:`,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500, // Set a maximum width
     }
    );
    doc.moveDown(1)

    const bulletPoints = [
      'Entire overdue amount in case of default in repayment of loan installments.',
      'Entire outstanding amount of loan facilities for non-compliance of agreedterms and conditions mentioned in the Sanction Letter.',
    ];
    
    bulletPoints.forEach((point) => {
      doc.text(`• ${point}`, {
        lineGap: 2,
        indent: 20, // Indent bullet points
        align: 'left',
      });
    });
    doc
    doc.moveDown(1)

    .font(`Helvetica` )
    .fontSize(8)
    .fillColor("black")
    .text(
     ` d) To obtain the Lender's written consent in respect of the following matters:`,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500, // Set a maximum width
     }
    );
    const bulletPoints1 = [
      `Making investment in or giving loans to subordinates, associate concerns, individuals or other parties.`,
      `Effecting mergers and acquisitions`,
      `Paying dividend other than out of current year's earnings after making due provisions.`,
      `Giving guarantees on behalf of third parties.`,
      `Premature repayment of loans and discharge of other liabilities`
    ];
    
    bulletPoints1.forEach((point) => {
      doc.text(`• ${point}`, {
        lineGap: 2,
        indent: 20, // Indent bullet points
        align: 'left',
      });
    });

    
    
    

    
    
    //addFooter();
//     //-------------------------------------------- new page --------------------------------------------------------------------
    
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(8);
    
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `
    e) Not to create without Lender's prior written consent, charges on all or any of the assets and properties, other than the existing /proposed charges in favour of other Financial Institution/Banks (if any).
    
    f) That all the moneys advanced or to be advanced by the Lender under the facilities mentioned herein above shall be utilized exclusively for the purpose set-forth in our proposal and for no other purpose and if the said loan/advance is utilized or attempted to be utilized for any other purpose or if the Lender apprehends or has reasons to believe that the said loan/advance is being utilized for any other purpose, the Lender shall have the right to forthwith recall the entire or any part of the loan/advance without assigning any reason thereof.
    
    g) That notwithstanding anything to the contrary contained in any of the documents/agreements executed/to be executed by us as also in the Letter of Sanction by the Lender, the Lender shall be entitled to charge the contractual rate of interest at its own discretion without any intimation to us to bring it in conformity with the rate of interest prescribed by the Reserve Bank of India or any other eventuality such as reintroduction of Interest Tax, etc. from time to time and the same shall be binding on us as if such change were already incorporated in the documents executed by us.
    
    h) That in the event of any irregularity, the Lender at its discretion shall be entitled to charge on the entire outstanding or any portion thereof interest at such enhanced rates as it may fix during the continuance of such irregularity. We understand that it is on the faith of the aforesaid representations and express undertakings that the Lender has consented to entertain our proposal for the said facilities.

    28. I/We undertake that:
    
    a. The Credit Information Bureau (India) Ltd. and any other agency so authorized may use, process the said information and data disclosed by the Lender in the manner as deemed fit by them and;
    
    b. The Credit Information Bureau (India) Ltd. and other agency so authorized may furnish for consideration, the processed information and data or products thereof prepared by them, to Lenders/Financial Institutions and other credit grantors or registered users, as may be specified by the Reserve Bank of India in this behalf.
    
    c. I/We certify that (i) all information furnished by me/us is true, (ii) except as indicated in this application that there is no over dues/statutory dues against me/us (iii) except as indicated in this application that no legal action has been/is being taken against me/us; (iv) I/We shall furnish the details of legal action/s or recovery process, if any, initiated against me/us in future by any person/body/authority/together with the details of the liability/claim therein and the action/s taken by me/us to defend/counter the same forthwith on my/our coming to know of such litigations; (v) I/We shall furnish all other Information that may be required by you in connection with this credit facilities (vi)this may also be exchanged by you with any agency you may deem fit and you, your representatives, representatives of the Reserve Bank of India or any other agency.
    
    29. I/We, the Borrower/s, hereby declare, state and confirm as follows:
    
    a) There is no litigation, suit, recovery proceedings/execution application or any other coercive action or process issued, undertaken or adjudication or pending against us in any judicial forum/court of law/DRT/any tribunal/Revenue or other Recovery Authorities in respect of any loan, borrowing or advance availed by me/us from any Lender/FI/Co-operative Society/NBFC or any other private/government/semi government or public sector undertaking or institution. In case any such litigation/action or process is issued/field of undertaken against us in future we shall immediately arrange to intimate/furnish (i) details /particulars thereof in writing to the Lender/Branch and (ii) the details of action/s initiated/taken by me/us to counter/defend the same appropriately.
    
    b) There is litigation /insolvency proceedings/dispute/claim/coercive process /execution petition, presently pending/adjudicated though not finally, earlier against me/us the details whereof are as under:

    We further agree that it is on the faith of the above declaration/undertaking that the Lender has granted/sanctioned or proposes to sanction to the Borrowers the proposed/present/reviewed loan/advance facility(ies) and in case the above is found incomplete, in correct or false, then the Lender shall have the right to recall the advance /loan account and take/initiate any or all actions against me/us including civil or criminal action or proceedings and to enforce its rights in court of competent jurisdiction under any rules /regulations, act/s or law/s in force.
    
    `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    
    //addFooter();
    
//     // -------------------------------------------------- new page -----------------------------------------------------------------------------
    
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(8);
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
    `
    30. The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower also has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the Borrower and the Borrower has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.
    `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    
    doc
    .fontSize(9)
    .font(fontBold)
    .text("-: SCHEDULE ABOVE REFEERED TO :-", { align: "center" })
    .moveDown(0.8)
    .fontSize(8)
    .text("(Description of the Immovable Property)", { align: "center" })
    .moveDown(0.9)
    
    doc
    .font('Helvetica')
    .fontSize(8)
    .fillColor("black") // Normal text color
    .text("Address of Immovable Property - 1: ", { continued: true })  // Keep this text inline
    .text(`${allPerameters.techfullAdress}`, 
          { align: "left", indent: 235 })  // Indentation for the second line onwards
    .moveDown(0.9)
    .font(fontBold)
    .fontSize(9)
    .text("Boundaries of Property", { align: "left" });
    
    doc.moveDown(0.5);
    
    function BoundariesFunction(tableData) {
        // Add Table Header
        const startX = 50; // Starting X position for the box
        let startY = doc.y + 10; // Starting Y position for the box
        const boxWidth = 500; // Total width of the box
        const numFields = 3; // Fixed number of columns (Direction, Separator, Description)
    
        // Adjusted widths for columns: first and last wider, middle narrower
        const firstColumnWidth = boxWidth * 0.4; // 40% for the first column
        const middleColumnWidth = boxWidth * 0.2; // 20% for the middle column
        const lastColumnWidth = boxWidth * 0.4; // 40% for the last column
    
        // Calculate the total height needed for the entire box
        let totalHeight = 0;
    
        // Calculate the height for each row and determine the total height of the box
        tableData.forEach((row) => {
            let rowHeight = 0;
            Object.values(row).forEach((field) => {
                const fieldTextHeight = doc
                    .font('Helvetica') // Regular font for calculating height
                    .fontSize(7.2)
                    .heightOfString(field || '', { width: firstColumnWidth }) + 10; // Add padding
                rowHeight = Math.max(rowHeight, fieldTextHeight); // Get the maximum height for the row
            });
            totalHeight += rowHeight; // Accumulate the total height
        });
    
        // Draw the outer rectangle for the box
        doc
            .fillColor("#f0f0f0") // Box background color
            .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
            .stroke("black") // Border color (normal line)
            .fill();
    
        // Loop through the data and draw the text inside the box
        tableData.forEach((row) => {
            let currentX = startX; // Reset the starting X position for each row
            // Calculate row height based on the content in each field
            let rowHeight = 0;
            Object.values(row).forEach((field) => {
                const fieldTextHeight = doc
                    .font('Helvetica') // Regular font for calculating height
                    .fontSize(7.2)
                    .heightOfString(field || '', { width: firstColumnWidth }) + 10; // Add padding
                rowHeight = Math.max(rowHeight, fieldTextHeight); // Get the maximum height for the row
            });
    
            // Draw rectangles for each field in the row
            Object.entries(row).forEach(([key, field], fieldIndex) => {
                // Set the width for each column
                const fieldWidth = fieldIndex === 1 ? middleColumnWidth : (fieldIndex === 0 ? firstColumnWidth : lastColumnWidth);
    
                // Draw rectangle for the field box
                doc
                    .fillColor("#f5f5f5") // Background color for field (empty box)
                    .rect(currentX, startY, fieldWidth, rowHeight)
                    .stroke("black") // Normal line border for field box
                    .fill();
    
                // Set font style based on whether it's a field (bold) or value (normal)
                const isFieldValue = key === 'value'; // Check if it's the value field
                doc
                    .font(isFieldValue ? 'Helvetica' : 'Helvetica-Bold') // Bold for field, normal for value
                    .fillColor("black")
                    .fontSize(7.2);
    
                // Align text properly based on column index
                const align = fieldIndex === 1 ? 'left' : (fieldIndex === 0 ? 'left' : 'left'); // Align all to left
    
                // Draw the field text in the box
                doc.text(field, currentX + 5, startY + 5, {
                    baseline: "hanging",
                    width: fieldWidth - 10, // Adjust width to provide padding inside the box
                    align: align, // Align text based on content
                });
    
                // Move to the next column
                currentX += fieldWidth; // Update X position for the next field
            });
    
            // Move to the next row
            startY += rowHeight; // Update Y position for the next row
        });
    }
    
    const boundariesData = [
        { field1: "On or towards North", field2: ": ", value: `${allPerameters.OnOrTowardsNorth}` },
        { field1: "On or towards South", field2: ": ", value: `${allPerameters.OnOrTowardsSouth}` },
        { field1: "On or towards East",  field2: ": ", value: `${allPerameters.OnOrTowardsEast}` },
        { field1: "On or towards West",  field2: ": ", value: `${allPerameters.OnOrTowardsWest}` },
    ];
    
    // Call the function to create the table
    BoundariesFunction(boundariesData);
    
    doc.moveDown(2);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`DATE This: ${allPerameters.agreementdate}`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
    
    // Set initial font and size
    doc
    .font(font) // Assuming 'font' is defined elsewhere as your base font
    .fontSize(9)
    .fillColor("black")
    .text(`IN WITNESS WHEREOF the Borrower, Co-Borrowers & Guarantors set and subscribed their hands to these presents on the day and year first hereinabove written.\n\n`, {
    lineGap: 2,
    align: "left",
    width: 500, // Set a maximum width
    });
    
    // Bold text for "SIGNED & DELIVERED BY THE"
    doc
    .fontSize(9)
    .font('Helvetica-Bold') // Change to bold font
    .text(`SIGNED & DELIVERED BY THE`, {
    lineGap: 2,
    align: "left",
    width: 500, // Set a maximum width
    });
    
    // Change back to normal font for the rest of the text
    doc
    .fontSize(9)
    .font(font) // Switch back to normal font
    .text(`\n\nWITH IN NAMED\n\n(1) ${allPerameters.borrowerName}\n\n\[Borrower]\n\n\(2)${allPerameters.coBorrowername}\n\n\[Co-Borrower]\n\n\(3)${allPerameters.coBorrowername2}\n\n\[2nd Co-Borrower]\n\n\(4) ${allPerameters.guarantorname}\n\n\[Gaurantor Name]\n\n\n`, {
    lineGap: 2,
    align: "left",
    width: 500, // Set a maximum width
    });
    
    //addFooter();
    
//     //------------------------------------- new page -----------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(9);
    
    doc
    .fontSize(9)
    .font('Helvetica-Bold')
    .text(`DEMAND PROMISSORY NOTE`, startX, doc.y, { align: "center", width: 500 });
    doc.moveDown(1);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`Place:  ${allPerameters.placeOfExecution} \n\n Date: ${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
    doc.moveDown(2);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`ON DEMAND,I/We (1) ${allPerameters.borrowerName} (2) ${allPerameters.coBorrowername} (3) ${allPerameters.coBorrowername2} (4) ${allPerameters.guarantorname} `, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(1);
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`${allPerameters.borrowerName}, Residing At ${allPerameters.borroewraddress}`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(3);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`(Hereinafter referred to as “Borrowers”/”Co-Borrowers”/”Guarantors” which term shall, unless repugnant to the context be deemed to include in case of (a) an individual, my/ our heirs, legal representatives, executors, administrators and permitted assigns, (b) a proprietorship firm, the proprietor(ess) (both in my/our personal capacity and as proprietor(ess) of the concern) and my/our heirs, legal representatives, executors, administrators, permitted assigns and successors of the concern, (c) a company, its successors and permitted assigns, (d) a limited liability partnership, its successors and permitted assigns, (e) a partnership firm, any or each of the partners and survivor(s) of them and the partners from time to time (both in their personal capacity and as partners of the firm) and their respective heirs, legal representatives , executors, administrators, permitted assigns and successors of the firm) jointly and severally promise to pay to `,
      startX, // Starting X position
    doc.y, // Current Y position
    {
      align: "justify", // Align text for justification
      width: 500,      // Set a maximum width
      lineGap: 2,
      continued:true      // Optional line spacing
    }
    )
    .font('Helvetica-Bold')

    .text(`RATNAAFIN CAPITAL PRIVATE LIMITED,`,
      startX, // Starting X position
      doc.y, // Current Y position
      {
        align: "justify", // Align text for justification
        width: 500,      // Set a maximum width
        lineGap: 2,
        continued:true      // Optional line spacing
      }
      ) 
      .font('Helvetica')

      .text(` a company incorporated under the provisions of the Companies Act, 2013, having its registered office at 402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place Near Hyatt Hotel, New Delhi- 110066, Delhi, India and corporate office at 2nd & 3rd Floor,The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India-380060 (hereinafter referred to as the “Lender”, which expression shall, unless repugnant to the context, include its successors and assigns) the sum of Rs. `,
        startX, // Starting X position
    doc.y, // Current Y position
    {
      align: "justify", // Align text for justification
      width: 500,      // Set a maximum width
      lineGap: 2,
      continued:true
          // Optional line spacing
    }
    ) 
    .font('Helvetica-Bold')

    .text(` ${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord}) `,
        startX, // Starting X position
    doc.y, // Current Y position
    {
      align: "justify", // Align text for justification
      width: 500,      // Set a maximum width
      lineGap: 2,
      continued:true
          // Optional line spacing
    }
    )  
    .font('Helvetica')

    .text(`and with rate of interest at ${allPerameters.rateOfInterest}% Per Annum (FRR – 19.20% + ${allPerameters.interestType1}%) and/or such other rate as RCPL may ix from time to time for value received (to be paid monthly and to be calculated on the basis of 365 (three hundred and sixty five days)) and other amounts payable to the Lender in terms of the loan agreement dated ${allPerameters.agreementdate}, executed by and amongst the Borrowers and the Lender`,
      startX, // Starting X position
  doc.y, // Current Y position
  {
    align: "justify", // Align text for justification
    width: 500,      // Set a maximum width
    lineGap: 2,
        // Optional line spacing
  }
  ) ;
    
    doc.moveDown(3); // Move down after the text block
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Presentment for payment, notice of non-payment and noting and protest of the note are hereby unconditionally and irrevocably waived.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    // paymentTable
    
    function presentment(tableData) {
    // Add Table Header
    const startX = 50; // Starting X position for the box
    let startY = doc.y + 10; // Starting Y position for the box
    const boxWidth = 500; // Adjust the width of the box as per your need
    
    // Calculate the total height needed for the entire box
    let totalHeight = 0;
    
    // Calculate the height for each row and determine the total height of the box
    tableData.forEach((row) => {
    const rowHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(row.field1, { width: boxWidth }) + 40; // Add padding
    
    totalHeight += rowHeight; // Accumulate the total height
    });
    
    // Draw the outer rectangle for the box
    doc
    .fillColor("#f0f0f0") // Box background color
    .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    .stroke("black") // Border color
    .fill();
    
    // Loop through the data and draw the text inside the box
    tableData.forEach((row, rowIndex) => {
    // Calculate row height based on the content
    const rowHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(row.field1, { width: boxWidth }) + 40; // Add padding
    
    // Alternate row background color (optional)
    doc
      .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff") // Alternate row colors
      .rect(startX, startY, boxWidth, rowHeight) // Draw rectangle for each row
      .stroke("black") // Border color for each row
      .fill();
    
    // Draw the text in the box
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(row.field1, startX + 5, startY + 5, {
        baseline: "hanging",
        width: boxWidth - 10, // Adjust width to provide padding inside the box
        align: "left", // Align text to the left
      });
    
    // Move to the next row
    startY += rowHeight;
    });
    }


    
    // const presentmentpayment = [
    // { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
    // { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
    // { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
    // ];
    
    // presentment(presentmentpayment);

    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the Borrower and the Borrower has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`,{ align: "left", });
    doc.moveDown(1);
    // presentmentpayment
    //addFooter();
    
    
//     // ------------------------------------------------------ new page ------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(9);
    
    doc
    .fontSize(9)
    .font('Helvetica-Bold')
    .text(`LETTER OF CONTINUITY FOR DEMAND PROMISSORY NOTE`, startX, doc.y, { align: "center", width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`Place: ${allPerameters.placeOfExecution} \n\n  Date: ${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`To,`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Ratnaafin Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);

    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
     doc.moveDown(2)

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`Dear Sirs, \n\n\n I/We (1) ${allPerameters.borrowerName} (2)${allPerameters.coBorrowername} (3)${allPerameters.coBorrowername2} (4) ${allPerameters.guarantorname} ,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`${allPerameters.borrowerName}, Residing At ${allPerameters.borroewraddress}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(4);
    
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`(Hereinafter referred to as “Borrowers”/”Co-Borrowers”/”Guarantors” which term shall, unless repugnant to the context be deemed to include in case (a) an individual, his/her heirs, legal representatives, executors, administrators and permitted assigns, (b) a proprietorship firm, the proprietor(ess) (both in my/our personal capacity and as proprietor(ess) of the concern) and his/her heirs, legal representatives, executors, administrators, permitted assigns and successors of the concern, (c) a company, its successors and permitted assigns, (d) a limited liability partnership, its successors and permitted assigns, (e) a partnership firm, any or each of the partners and survivor(s) of them and the partners from time to time (both in their personal capacity and as partners of the firm) and their respective heirs, legal representatives, executors, administrators, permitted assigns and successors of the firm) have executed a Demand Promissory Note for Rs. `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
    .font('Helvetica-Bold')

      .text(`${allPerameters.loanAmount}/- (${allPerameters.loanAmountInWord}) `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
      .font('Helvetica')

      .text(` and with rate of interest at ${allPerameters.rateOfInterest}% Per Annum and/or such other rate as `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
      .font('Helvetica-Bold')
      .text(`RCPL `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
      .font('Helvetica')
      .text(`may fix from time to time for value received, dated ${allPerameters.agreementdate} duly signed and delivered by me/us to you, as security for the repayment of all amounts due and/or payable by us under the loan agreement dated ${allPerameters.agreementdate} and/or any amendment(s)/addendum(s) thereto (“Loan Agreement”).\n\n\nWe hereby irrevocably and unconditionally, agree, confirm and undertake that the said Demand Promissory Note shall operate as a continuing security to you to be enforceable for the repayment of the ultimate balance and/or all sums remaining unpaid under the Loan Agreement now or hereafter,including all interest to become payable under the Loan Agreement, and also all monies lent, advanced, paid or incurred in respect of/under the Loan Agreement or which may in future be advanced or incurred together with interest, discount, commission and other charges and all other costs, charges and expenses which may be or become payable in connection therewith.\n\n\nThe Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the Borrower and the
       Borrower has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.\n\n\n Thanking you `, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    
    // presentment(presentmentpayment);
    
    //addFooter();
    
    
//     // ----------------------------------------------new page ------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(9);
    
    doc
    .fontSize(9)
    .font('Helvetica-Bold')
    .text(`UDC Covering Letter (APPLICANT)`, startX, doc.y, { align: "center",underline: true, width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`To,`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Ratnaafin Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(1);

    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`Sirs, \n `, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`subject:Credit Facility of Rs. ${allPerameters.loanAmount}(${allPerameters.loanAmountInWord}) sanctioned to ${allPerameters.borrowerName}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`In consideration of and towards repayment of the aforesaid credit facilities granted/agreed to be granted by Ratnaafin Capital Pvt. Ltd (Lender)\n I/We, ${allPerameters.borrowerName} hereby inter alia deliver to the Lender the cheques (as detailed hereunder) drawn in favour of the Lender being blank as regards the date of the cheque and the amount.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    
    function chequeTable(tableData) {
    // Add Table Header
    const startX = 50; // Starting X position for the box
    let startY = doc.y + 10; // Starting Y position for the box
    
    // Define custom column widths
    const columnWidths = {
        field1: 50,   // Sr. No.
        field2: 100,  // Cheque No.
        field3: 200,  // Bank Details
        field4: 150,  // Name of the account holder
    };
    
    // Function to calculate row height dynamically based on content
    const calculateRowHeight = (row) => {
        let maxHeight = 0;
        Object.keys(row).forEach((field) => {
            const text = row[field] || ''; // Default to empty string if no value
            const columnWidth = columnWidths[field] || 100; // Default width
            const textHeight = doc
                .font('Helvetica')
                .fontSize(7.2)
                .heightOfString(text, { width: columnWidth }) + 10; // Add padding
            maxHeight = Math.max(maxHeight, textHeight);
        });
        return maxHeight;
    };
    
    // Calculate total height for the table
    let totalHeight = 0;
    tableData.forEach(row => {
        totalHeight += calculateRowHeight(row);
    });
    
    // Draw the outer rectangle for the box
    doc
        .fillColor("#f0f0f0")
        .rect(startX, startY, 500, totalHeight) // Adjust box width to the total width of columns
        .stroke("black")
        .fill();
    
    // Loop through the data and draw the text inside the box
    tableData.forEach((row, rowIndex) => {
        let currentX = startX; // Reset the starting X position for each row
        const rowHeight = calculateRowHeight(row);
    
        // Draw rectangles and fill in data
        Object.keys(columnWidths).forEach((field) => {
            const columnWidth = columnWidths[field];
            const text = row[field] || ''; // Handle blank fields
    
            // Draw rectangle for the field box
            doc
                .fillColor("#f5f5f5") // Background color for the box
                .rect(currentX, startY, columnWidth, rowHeight)
                .stroke("black")
                .fill();
    
            // Set font style for header or regular row
            const isHeader = rowIndex === 0; // Check if it's the header row
            doc
                .font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
                .fillColor("black")
                .fontSize(7.2);
    
            // Draw the field text, align left
            doc.text(text, currentX + 5, startY + 5, {
                baseline: "hanging",
                width: columnWidth - 10, // Adjust width for padding
                align: 'left', // Align text to the left
            });
    
            currentX += columnWidth; // Update X for next field
        });
    
        // Move to the next row
        startY += rowHeight;
    });
    }
    
    // Updated applicant table with dynamic fields
    const applicantTable = [
    { field1: "Sr. No.", field2: "Cheque No.", field3: "Bank Details", field4: "Name of the account holder" },
    { field1: "1", field2: `${allPerameters.table?.[0]?.appchequeNo1}`, field3: `${allPerameters.table?.[0]?.bankDetail1},A/c No.${allPerameters.table?.[0]?.bankaccNo1}`, field4: `${allPerameters.table?.[0]?.accountHolderName1}` },
    { field1: "2", field2: `${allPerameters.table?.[1]?.appchequeNo2}`, field3: `${allPerameters.table?.[1]?.bankDetail1},A/c No.${allPerameters.table?.[1]?.bankaccNo2}`, field4: `${allPerameters.table?.[1]?.accountHolderName2}` },
    { field1: "3", field2: `${allPerameters.table?.[2]?.appchequeNo3}`, field3: `${allPerameters.table?.[2]?.bankDetail1},A/c No.${allPerameters.table?.[2]?.bankaccNo3}`, field4: `${allPerameters.table?.[2]?.accountHolderName3}` },
    { field1: "4", field2: `${allPerameters.table?.[3]?.appchequeNo4}`, field3: `${allPerameters.table?.[3]?.bankDetail4},A/c No.${allPerameters.table?.[3]?.bankaccNo4}`, field4: `${allPerameters.table?.[3]?.accountHolderName4}` },
    { field1: "5", field2:`${allPerameters.table?.[4]?.appchequeNo5}`, field3: `${allPerameters.table?.[4]?.bankDetail5},A/c No.${allPerameters.table?.[4]?.bankaccNo5}`, field4: `${allPerameters.table?.[4]?.accountHolderName5}` },
    // { field1: "6", field2: `${allPerameters.table?.[5]?.appchequeNo6}`, field3: `${allPerameters.table?.[5]?.bankDetail6}`, field4: `${allPerameters.table?.[5]?.accountHolderName6}` },
    // { field1: "7", field2: `${allPerameters.table?.[6]?.appchequeNo7}`, field3: `${allPerameters.table?.[6]?.bankDetail7}`, field4: `${allPerameters.table?.[6]?.accountHolderName7}` },
    ];
    
    // Call the function to create the table
    chequeTable(applicantTable);
    doc.moveDown(2);
    doc.moveDown(2);

    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`I/we do hereby agree and acknowledge in accordance with the provisions of section 20 of the Negotiable Instruments Act ("The Act") the Lender in the present case as the holder of the said cheques shall have the authority to complete the said cheques.\n\n In addition to the express provisions of the Act as mentioned above authorizing the Lender to complete the said cheques to the extent of credit facility outstanding including any interest, penal charges , other charges, etc. that the Lender may incur I / We hereby unconditionally and irrevocably authorize and confirm the authority of the Lender to fill in the date and the amount on the said cheques and to present the same for payment.\n\nI/We hereby undertake to be absolutely bound as the drawer of the said cheques so completed by the Lender as above and shall be liable in the same manner as the said cheques were drawn and completed by me/us and shall ensure that the said cheques are honored on presentation for payment\n\nI/We agree and acknowledge that any dishonoring of the said cheques would make me/us liable including under the provisions of section 138 of the Negotiable Instruments Act,1881.\n\nFor and on behalf of:
    `, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`___________________________`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`I/we do hereby agree and acknowledge in accordance with the provisions of section 20 of the Negotiable Instruments Act ("The Act") the Lender in the present case as the holder of the said cheques shall have the authority to complete the said cheques.\n\n In addition to the express provisions of the Act as mentioned above authorizing the Lender to complete the said cheques to the extent of credit facility outstanding including any interest, penal charges , other charges, etc. that the Lender may incur I / We hereby unconditionally and irrevocably authorize and confirm the authority of the Lender to fill in the date and the amount on the said cheques and to present the same for payment.\n\nI/We hereby undertake to be absolutely bound as the drawer of the said cheques so completed by the Lender as above and shall be liable in the same manner as the said cheques were drawn and completed by me/us and shall ensure that the said cheques are honored on presentation for payment\n\nI/We agree and acknowledge that any dishonoring of the said cheques would make me/us liable including under the provisions of section 138 of the Negotiable Instruments Act,1881.\n\nFor and on behalf of:
// `, startX, doc.y, { align: "left",align: "justify", width: 500 });
//  doc.moveDown(1);

  //addFooter();

//   //------------------------------- new page 12 ----------------------------------------------

  doc.addPage();
  // addLogo();
  //drawBorder();
  doc.moveDown(9);

  doc
  .fontSize(9)
  .font('Helvetica-Bold')
  .text(`UDC Covering Letter (co-applicant/Guarantor)`, startX, doc.y, { align: "center",underline: true, width: 500 });
  doc.moveDown(2);

  doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`To,`, startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(1);

  doc
  .fontSize(8)
  .font('Helvetica-Bold')
  .text(`Ratnaafin Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(1);

  doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`Dear Madam/Sir, \n `, startX, doc.y, { align: "left",align: "justify", width: 500 });
  doc.moveDown(2);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`subject:Credit Facility of Rs. ${allPerameters.loanAmount}(${allPerameters.loanAmountInWord}) sanctioned to ${allPerameters.borrowerName}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
  doc.moveDown(1);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`In consideration of and towards repayment of the aforesaid credit facilities granted/agreed to be granted by Ratnaafin Capital Pvt. Ltd Lender I/We, ${allPerameters.guarantorname} hereby inter alia deliver to the Lender the cheques (as detailed hereunder) drawn in favour of the Lender being blank as regards the date of the cheque and the amount.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
   doc.moveDown(1);


   function ChequETaBLE(tableData) {
    // Add Table Header
    const startX = 50; // Starting X position for the box
    let startY = doc.y + 10; // Starting Y position for the box
    
    // Define custom column widths
    const columnWidths = {
        field1: 50,   // Sr. No.
        field2: 100,  // Cheque No.
        field3: 200,  // Bank Details
        field4: 150,  // Name of the account holder
    };
    
    // Function to calculate row height dynamically based on content
    const calculateRowHeight = (row) => {
        let maxHeight = 0;
        Object.keys(row).forEach((field) => {
            const text = row[field] || ''; // Default to empty string if no value
            const columnWidth = columnWidths[field] || 100; // Default width
            const textHeight = doc
                .font('Helvetica')
                .fontSize(7.2)
                .heightOfString(text, { width: columnWidth }) + 10; // Add padding
            maxHeight = Math.max(maxHeight, textHeight);
        });
        return maxHeight;
    };
    
    // Calculate total height for the table
    let totalHeight = 0;
    tableData.forEach(row => {
        totalHeight += calculateRowHeight(row);
    });
    
    // Draw the outer rectangle for the box
    doc
        .fillColor("#f0f0f0")
        .rect(startX, startY, 500, totalHeight) // Adjust box width to the total width of columns
        .stroke("black")
        .fill();
    
    // Loop through the data and draw the text inside the box
    tableData.forEach((row, rowIndex) => {
        let currentX = startX; // Reset the starting X position for each row
        const rowHeight = calculateRowHeight(row);
    
        // Draw rectangles and fill in data
        Object.keys(columnWidths).forEach((field) => {
            const columnWidth = columnWidths[field];
            const text = row[field] || ''; // Handle blank fields
    
            // Draw rectangle for the field box
            doc
                .fillColor("#f5f5f5") // Background color for the box
                .rect(currentX, startY, columnWidth, rowHeight)
                .stroke("black")
                .fill();
    
            // Set font style for header or regular row
            const isHeader = rowIndex === 0; // Check if it's the header row
            doc
                .font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
                .fillColor("black")
                .fontSize(7.2);
    
            // Draw the field text, align left
            doc.text(text, currentX + 5, startY + 5, {
                baseline: "hanging",
                width: columnWidth - 10, // Adjust width for padding
                align: 'left', // Align text to the left
            });
    
            currentX += columnWidth; // Update X for next field
        });
    
        // Move to the next row
        startY += rowHeight;
    });
    }

// Updated applicant table with dynamic fields
const guarantorTable = [
  { field1: "Sr. No.", field2: "Cheque No.", field3: "Bank Details", field4: "Name of the account holder" },
  { field1: "1", field2: `${allPerameters.tableno2?.[0]?.guchequeNo1}`, field3: `${allPerameters.tableno2?.[0]?.gubankDetail1},A/c No.${allPerameters.tableno2?.[0]?.gubankaccNo1}`, field4: `${allPerameters.tableno2?.[0]?.guaccountHolderName1}` },
  { field1: "2", field2: `${allPerameters.tableno2?.[1]?.guchequeNo2}`, field3: `${allPerameters.tableno2?.[1]?.gubankDetail2},A/c No.${allPerameters.tableno2?.[1]?.gubankaccNo2}`, field4: `${allPerameters.tableno2?.[1]?.guaccountHolderName2}` },
  { field1: "3", field2: ``, field3: ``, field4: `` },
  { field1: "4", field2: ``, field3: ``, field4: `` },
  { field1: "5", field2:``, field3: ``, field4: `` },
  // { field1: "6", field2: `${allPerameters.tableno2?.[5]?.guchequeNo6}`, field3: `${allPerameters.tableno2?.[5]?.gubankDetail6}`, field4: `${allPerameters.tableno2?.[5]?.guaccountHolderName6}` },
  // { field1: "7", field2: `${allPerameters.tableno2?.[6]?.guchequeNo7}`, field3: `${allPerameters.tableno2?.[6]?.gubankDetail7}`, field4: `${allPerameters.tableno2?.[6]?.guaccountHolderName7}` },
  ];
// Call the function to create the table
ChequETaBLE(guarantorTable);
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`I/we do hereby agree and acknowledge in accordance with the provisions of section 20 of the Negotiable Instruments Act ("The Act") the Lender in the present case as the holder of the said cheques shall have the authority to complete the said cheques.\n\n In addition to the express provisions of the Act as mentioned above authorizing the Lender to complete the said cheques to the extent of credit facility outstanding including any interest, penal charges , other charges, etc. that the Lender may incur I / We hereby unconditionally and irrevocably authorize and confirm the authority of the Lender to fill in the date and the amount on the said cheques and to present the same for payment.\n\nI/We hereby undertake to be absolutely bound as the drawer of the said cheques so completed by the Lender as above and shall be liable in the same manner as the said cheques were drawn and completed by me/us and shall ensure that the said cheques are honored on presentation for payment\n\nI/We agree and acknowledge that any dishonoring of the said cheques would make me/us liable including under the provisions of section 138 of the Negotiable Instruments Act,1881.\n\nFor and on behalf of:
`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
    .fontSize(8)
    .font('Helvetica')
    .text(`___________________________`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);

  //addFooter();

  //--------------------------------disbursment demand for our loan-------------------
  doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`DISBURSEMENT DEMAND FOR OUR LOAN`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`The Manager,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`RATNAAFIN CAPITAL PRIVATE LIMITED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });


doc.moveDown(3);


doc
.fontSize(8)
.font('Helvetica')
.text(`Dear Sir,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
 .fontSize(8)
 .font('Helvetica')
 .text(`We have been sanctioned a Loan against Property from Ratnaafin Capital Private limited for an amount of Rs. `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(`${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord}) `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica')
 .text(`for the purpose of `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(`${allPerameters.specifiedPurpose}`, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica')
 .text(`. We have accepted all terms and conditions for the Agri Micro Loan against Property against property and executed all the documents for the loan.`, startX, doc.y, { align: "left",align: "justify", width: 500 });

 doc.moveDown(3);
 
 doc
 .fontSize(8)
 .font('Helvetica')
 .text(`We request a disbursement for an amount of Rs. `, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(`${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord})`, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica')
 .text(` are deducting all the necessary fees & charges, in favour of Ratnaafin Capital Private Limited from our Loan account number`, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(` ${allPerameters.sanctionLetterNo}`, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica')
 .text(` as a full/part disbursement towards this Loan.`, startX, doc.y, { align: "left", width: 500 })
 doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`We also agree to pay interest on the amount disbursed as per our request starting from the date of disbursement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`Thanking you,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(`Yours Faithfully,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(`Primary Borrower Name :${allPerameters.borrowerName}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

// const confirmationTable = [
//   { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
//   { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
//   { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
// ];

// presentment(confirmationTable);
//addFooter();

// // -------------------------------------------new page 13 --------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`VERNACULAR CONFIRMATION LETTER`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`To,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`RATNAAFIN CAPITAL PRIVATE LIMITED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`201-202, Shilp Aperia,\n Near Ashok Vatika,\n Bopal-Ambli Road,\n Ahmedabad, Gujarat – 380054`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);


doc
.fontSize(8)
.font('Helvetica')
.text(`I/We hereby acknowledge and confirm that I/we have received the copy of the loan Agreement dated ${allPerameters.agreementdate} executed between `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
.font('Helvetica-Bold')
.text(` RCPL`, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
.font('Helvetica')
.text(`and me/us ('Loan Agreement') and the contents of the loan Agreement have been fully explained to and understood by me/us at the time of availing the loan in the language understood by me/us) \n\n I/We further confirm that am/are fully aware of and completely understand the rights and obligations contained in the loan documents mentioned below:`, startX, doc.y, { align: "left",align: "justify", width: 500 });


doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(` 1. Loan application form\n 2. KYC form\n 3. Sanction letter\n 4. DP Note\n 5. Declaration cum Undertaking Cum Authority by the Borrower,Co-Borrower & Guarantor\n 6. Guarantee Agreement \n 7. Loan Facility Agreement\n 8. Mortgage Deed \n 9. Any other document related to loan\n10. Declaration of Immoval property.\n11.Interest rate Declaration.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(3);

doc
.fontSize(8)
.font('Helvetica')
.text(`The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The the Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the the Borrower / Co-borrowers / Guarantors and the the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(3);
doc
.fontSize(8)
.font('Helvetica-Bold')
.text(
  `Name of the Borrower : ${allPerameters.borrowerName}` )
  .text(
    `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` )
    .text(
      `2nd CO-BORROWERS NAME : ${allPerameters.coBorrowername2}` )
      .text(
        `GUARANTOR'S NAME : ${allPerameters.guarantorname}` )

//addFooter();
// //---------------------------------------------------- new page 14-------------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`VERNACULAR DECLARATION FORM`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);


function declarationTableFunction(tableData) {
  const startX = 50;
  let startY = doc.y + 10;

  const columnWidths = {
    field1: 50,
    field2: 100,
    field3: 330,
  };

  // Define min and max row height to avoid extremes
  const MIN_ROW_HEIGHT = 15;
  const MAX_ROW_HEIGHT = 45;

  // Function to calculate row height based on text content
  const calculateRowHeight = (row) => {
    let maxHeight = 0;
    Object.keys(row).forEach((field) => {
      const text = row[field] || '';
      const columnWidth = columnWidths[field] || 100;

      // Calculate the text height for each field
      const textHeight = doc
        .font(field === 'field3' ? fontKerlaTamil : 'Helvetica')
        .fontSize(7.2)
        .heightOfString(text, { width: columnWidth });

      // Track the highest text height in the row
      maxHeight = Math.max(maxHeight, textHeight);
    });

    // Ensure the row height stays within the defined min and max limits
    return Math.max(MIN_ROW_HEIGHT, Math.min(maxHeight, MAX_ROW_HEIGHT));
  };

  const totalWidth = Object.values(columnWidths).reduce((sum, width) => sum + width, 0);

  tableData.forEach((row, rowIndex) => {
    let currentX = startX;
    const rowHeight = calculateRowHeight(row); // Calculate the row height based on text content

    // Set up the table border at the beginning
    doc
      .lineWidth(0.25)
      .rect(startX, startY, totalWidth, rowHeight)
      .stroke("black");

    Object.keys(columnWidths).forEach((field) => {
      const columnWidth = columnWidths[field];
      const content = row[field] || '';

      doc
        .lineWidth(0.25)
        .rect(currentX, startY, columnWidth, rowHeight)
        .stroke("black");

      const isHeader = rowIndex === 0;
      const paddingTop = 2;  // Adjust padding from the top (increase if needed)
      const textYPosition = startY + paddingTop;

      if (field === 'field1' && content) {
        doc.image(content, currentX + 5, textYPosition + (rowHeight - 8) / 2, { width: 8, height: 8 });
      } else {
        doc
          .font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
          .fillColor("black")
          .fontSize(7.2);

        const text = content || '';
        if (field === 'field3') {
          // Checking for specific languages to apply respective fonts
          if (/[\u0C00-\u0C7F]/.test(text)) {  // Telugu Unicode range
            doc.font(fontTelugu)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else if (/[\u0D00-\u0D7F]/.test(text)) {  // Malayalam Unicode range
            doc.font(fontMalayam).text(text, currentX + 3, textYPosition, {
              baseline: "top",
              width: columnWidth - 6,
              align: 'left',
            });
          } else if (/[\u0C80-\u0CFF]/.test(text)) {  // Kannada Unicode range
            doc.font(fontKannada).text(text, currentX + 3, textYPosition, {
              baseline: "top",
              width: columnWidth - 6,
              align: 'left',
            });
          } else if (/[\u0A80-\u0AFF]/.test(text)) {  // Gujarati Unicode range
            doc.font(fontGujarati)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else if (/[\u0600-\u06FF]/.test(text)) {  // Urdu Unicode range
            doc.font(fontUrdu)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'right',
               });
          } else if (/[\u0A00-\u0A7F]/.test(text)) {  // Punjabi Unicode range
            doc.font(fontPanjabi)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else if (/[\u0B80-\u0BFF]/.test(text)) {  // Tamil Unicode range
            doc.font(fontKerlaTamil).text(text, currentX + 3, textYPosition, {
                baseline: "top",
                width: columnWidth - 6,
                align: 'left',
            });
          } else if (/[\u0900-\u097F]/.test(text)) {  // Hindi Unicode range
            doc.font(fontHindi)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else  if (/[\u0B00-\u0B7F]/.test(text)) {  // Odia Unicode range
            doc.font(fontOriya)  // Make sure 'fontOdia' is defined and points to the correct font file
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
           } else if (/[\u0900-\u097F]/.test(text)) {  // Marathi (Devanagari Unicode range)
            doc.font(fontMarathi)  // Ensure you have the Marathi font file available
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
        } else if (/[\u0980-\u09FF]/.test(text)) {  // Bengali Unicode range
          doc.font(fontBengali)  // Ensure you have the Bengali font file available
             .text(text, currentX + 3, textYPosition, {
               baseline: "top",
               width: columnWidth - 6,
               align: 'left',
             });
        }else {
            doc.font('Helvetica')
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          }
        } else {
          doc.font('Helvetica')
             .text(text, currentX + 3, textYPosition, {
               baseline: "top",
               width: columnWidth - 6,
               align: 'left',
             });
        }
      }

      currentX += columnWidth;
    });

    startY += rowHeight; // Adjust to the row's actual height
  });
}

const gujratiFont = [
'આ અરજી/કરાર/પત્ર/નિયમો અને શરતોનો સામગ્રી અરજીકર્તા/ઋણગ્રાહક અને સહ-ઋણગ્રાહકને અંગ્રેજીમાં વાંચીને સમજાવી',
'  અને વ્યાખ્યા કરવામાં આવી છે અને અરજીકર્તા/ઋણગ્રાહક અને સહ-ઋણગ્રાહક દ્વારા તેને સમજવામાં આવી છે',
]

const declarationTable = [
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "English", 
    field3: "The content of this Application/ Agreement/letter/Terms and Conditions has been read out, explained and interpreted to the applicant(s)/Borrower and to the Co-Borrower(s) in English and understood by the applicant(s)/Borrower and Co-Borrower(s).",  // English text
  },
  { 
    field1: CheckedLogo,  // Path to the image file (not doc.image)
    field2: "Hindi", 
    field3: "इसआवेदन / समझौ ते / पत्र / नि यमों औमों रशर्तों की सा मग्री को आवेदक (ओं)ओं / उधा रकर्ता औरअंग्रेजीग्रे जीमेंसह-उधा रकर्ता (ओं)ओं को समझा औरसमझा यागयाहैऔहै रआवेदक (ओं)ओं याउधा रकर्ता द्वा रा समझा गया है ।",  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Punjabi", 
    field3: "ਇਸਬਿ ਨੈ-ਪੱਤਰ / ਸਮਝੌਤੇਝੌਤੇ/ ਪੱਤਰ / ਨਿ ਯਮਾਂ ਅਮਾਂ ਤੇਸ਼ਰਤਾਂ ਦੀਤਾਂ ਦੀਸਮੱਗਰੀ ਨੂੰਬਿ ਨੈਕਾ ਰ /ਉਧਾ ਰਲੈਣਵਾ ਲੇਅਤੇਅੰਗ੍ਰੇਜ਼ੀ ਵਿ ਚਸਹਿ -ਉਧਾ ਰਲੈਣਵਾ ਲੇਨੂੰਸਮਝਾ ਕੇਸਮਝਾ ਇਆਗਿ ਆਹੈਅਤੇਬਿ ਨੈਕਾ ਰਦੁਆਰਾ ਸਮਝੇਗਝੇ ਏਅਤੇਸਹਿ -ਉਧਾ ਰਲੈਣਵਾ ਲੇ।",  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Kannada", 
    field3: "ಈ ಅಪ್ಲಿಕೇ ಶನ್/ಒಪ್ಪಂ ದ/ಪತ್ರ / ನಿಯಮಗಳುಮತ್ತು ಷರತ್ತು ಗಳವಿಷಯವನ್ನು ಅರ್ಜಿ ದಾ ರ (ರು )/ ಸಾ ಲಗಾರಮತ್ತು ಇಂ ಗ್ಲಿಷ್ನಲ್ಲಿಸಹ-ಸಾ ಲಗಾರ(ಗಳು)ಗೆಓದಿ, ವಿವರಿಸಲಾ ಗಿದೆಮತ್ತು ವ್ಯಾ ಖ್ಯಾ ನಿಸಲಾ ಗಿದೆಮತ್ತು ಅರ್ಜಿ ದಾ ರರು (ಗಳು ) /ಸಾ ಲಗಾರರಿಂ ದಅರ್ಥ ಮಾ ಡಿಕೊ ಳ್ಳಲಾ ಗಿದೆಮತ್ತು ಸಹ-ಸಾ ಲಗಾ ರ (ಗಳು).  ",  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Telugu", 
    field3: "ఈ అప్లికేప్లిషన్ / ఒప్పం దం / లేఖ / నిబం ధనలుమరియుషరతులయొక్క కం టెం ట్దరట్ద ఖాస్తుదారు(లు) / రుణగ్ర హీతమరియుఆం గ్లం లోసహ-రుణగ్ర హీత (ల)కుచదవబడిం ది, వివరిం చబడిం దిమరియువివరిం చబడిం దిమరియుదరఖాస్తుదారు(లు) / రుణగ్ర హీతఅర్థం చేసుకున్నా రుమరియుసహ-రుణగ్ర హీత (లు)."
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Tamil", 
    field3: "இந்தவிண்ணப்பம் / ஒப்பந்தம் / கடிதம்வி தி முறைகள்மற்றும்நி பந்தனை களி ன்உள்ளடக்கம்விண்ணப்பதா ரர்(கள்)/கடன்வா ங்குபவர் மற்றும்இணைக்கடன்வா ங்குபவர்(கள்) ஆகி யோ ருக்குஆங்கி லத்தி ல்படித்துவி ளக்கப்பட்டுவி ளக்கம்அளி க்கப்பட்டுள்ளதுமற்றும்விண்ணப் பதா ரர்(கள்)/கடன்வா ங்குபவர்புர",  // Tamil text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Malayalam", 
    field3: 'ഈ ആപ്ലി ക്കേ ഷന്റെ ഉള്ളടക്കം / കരാ ർ / കത്ത് / നി ബന്ധനകളും വ്യ വസ്ഥകളും അപേ ക്ഷകന് / കടം വാ ങ്ങു ന്നയാ ൾക്കും ഇം ഗ്ലീ ഷി ൽ സഹ-കടം വാ ങ്ങു ന്നയാ ൾക്കും വാ യിക്കു കയും വി ശദീ കരിക്കു കയും വ്യാ ഖ്യാ നിക്കു കയും ചെ യ്തു കൂ ടാ തെ അ പേ ക്ഷകൻ (ങ്ങൾ) / കടം വാ ങ്ങു ന്നയാ ൾ മനസ്സി ലാ ക്കു കയും ചെ യ്യു ന്നു . ഒപ്പം സഹ-കടം വാ ങ്ങു ന്നവരും .',  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Oriya", 
    field3: 'ଏହିଆହି ବେ ଦନ / ଚୁକ୍ତିନା ମା / ଚିଠିଚି ଠି/ ସର୍ତ୍ତା ବଳୀ ଏବଂ ଚୁକ୍ତିନା ମା ଗୁଡିକଡି ଆବେ ଦନକା ରୀ (()) / orrଣଗ୍ରହୀ ତା ଏବଂ ସହ-orrଣଗ୍ରହୀ ତା ଙ୍କୁଇଂ ରା ଜୀ ରେ ପ read ା ଯା ଇଛି,ଛିବ୍ୟା ଖ୍ୟା କରା ଯା ଇଛିଏବଂ ଆବେ ଦନକା ରୀ (ମା ନେ ) / orrଣଦା ତା ଦ୍ୱା ରା ବୁଝିଛଝିନ୍ତିଏନ୍ତିବଂ ସହ-orrଣଦା ତା (ଗୁଡିକଡି ) |',  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Marathi", 
    field3: 'याअर्जा ची / करा रा ची / पत्रा ची / अटी व शर्तीं ची मा हि ती वा चूनका ढली गेली आहे,हेअर्जदा रा ला /कर्जदा रा ला आणि इंग्रजी मध्येसह-कर्जदा रा ला /केली आहे व अर्जदा रा ने /कर्जदा रा नेसमजूनघेतली आहे.हेआणि सह-कर्जदा र',  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Gujarati", 
    field3: gujratiFont.join('\n'),  // English text
  },
  {
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Urdu", 
    field3: "درخواست/معاہدہ/خط/شرائط و ضوابط کا مواد درخواست دہندہ/قرض دہندہ اور شریک قرض دہندہ کو انگریزی میں پڑھ کر سنایا گیا، وضاحت کی گئی اور اس کی تشریح کی گئی اور درخواست دہندہ/قرض دہندہ اور شریک قرض دہندہ نے اسے سمجھ لیا۔",  // Urdu text
  },
];

// // Call the table function to render the data
declarationTableFunction(declarationTable);
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica')
.text(`___________________________`, startX, doc.y, { align: "left",underline: true, width: 500 });
doc.moveDown(0.5);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`Lender (Authorised Signatory`, startX, doc.y, { align: "left",underline: true, width: 500 });
doc.moveDown(1);
  
//addFooter();
// // -------------------------------------- new page ------------------------------------------------------------------

// doc.addPage();
// // addLogo();
// //drawBorder();
// doc.moveDown(10);

// const lenderpayment = [
//   { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
//   { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
//   { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
// ];

// presentment(lenderpayment);

//addFooter();

// // -------------------------------------- new page ------------------------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`Annexure-I`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`The Borrower and Co-Borrower(s) (“Borrowers”) hereby accept and acknowledge that they have been made aware of the terms set out in this Annexure below in accordance with applicable provisions under Reserve Bank of India (RBI) notification and that the terms set out in this Annexure shall from an integral part of this Loan Agreement (“Agreement”) executed between Borrowers and Ratnaafin Capital Private Limited (“the Company”/ “Ratnaafin Capital Pvt Ltd”/ “Lender”) on ${allPerameters.agreementdate}. `, startX, doc.y, { align: "left", width: 500,  align: "justify", })
doc.moveDown()
.fontSize(8)
.font('Helvetica')
.text(`Please note that Clause 1 and 2 of this Annexure may be amended in the Welcome Letter or Disbursement letter and/or by such additional amendments from time to time.\n\n 1. Due Dates of Repayment\n\n The Due Date of Repayment, Frequency of Repayment, Principal and Interest Amount* shall be as per the Schedule II attached hereof.\n\n *The principal and Interest amount indicated under Schedule II attached here to may change depending on the actual disbursement terms and conditions.\n\n 2.  Repayment Due Dates, in case, payment moratorium on principle and/or interest, if any, may be changed depending on the actual disbursement terms and conditions. * \n\n *In case of Interest Moratorium Period, the principal amount will continue to be paid.`, startX, doc.y, { align: "left", width: 500,  align: "justify", });
doc.moveDown(0.5);

function dateTableFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    const rowContent = row.field1 || ""; // Fallback to an empty string if field1 is undefined
    const rowHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowContent, { width: boxWidth - 10 }) + 9; // Add padding

    // Set row color to gray for specific field values, keep border black
    const rowColor = (rowContent === "Interest Moratorium Start Date" || rowContent === "Repayment Start Date")
      ? "#d3d3d3"  // Gray for specific fields
      : (rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff"); // Alternate colors for other rows

    // Draw the background rectangle for the row with gray fill color
    doc
      .lineWidth(0.5)
      .fillColor(rowColor) // Set the fill color to gray for specific fields
      .rect(startX, startY, boxWidth, rowHeight)
      .fill(); // Only fill, no stroke yet

    // Draw the black border for the row
    doc
      .lineWidth(0.5) // Black border color
      .stroke("black") // Black border color
      .rect(startX, startY, boxWidth, rowHeight) // Apply the black border
      .stroke(); // Stroke to outline the rectangle

    // Draw the text inside the row
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(rowContent, startX + 5, startY + 5, {
        baseline: "hanging",
        width: boxWidth - 10,
        align: "left",
      });

    // Move to the next row's starting Y position
    startY += rowHeight;
  });
}

const dateTable = [
  { field1: ` Interest Moratorium Start Date` },
  { field1: ``},
  { field1:  `Repayment Start Date` },
  { field1:  `` },

];

dateTableFunction(dateTable);
doc.moveDown(2);
doc
.fontSize(8)
.font('Helvetica')
.text(`3. Consequences of delayed Repayment- Classification as Special Mention Account (SMA) and Non-Performing Asset (NPA):\n\n In addition to the consequences of delayed or defaulted repayments under the Agreement, the Borrower’s account immediately on default shall be classified as Special Mention Accounts (“SMA”) or a Non-Performing Asset (“NPA”) on the following basis in accordance with RBI notifications and regulations:\n\nClassification of Special Mention Accounts and NPAs`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(0.2);

function revolvingFacilitiesFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;  // Total table width
  const minColWidth = 150; // Minimum width for columns
  const fixedColWidth = 230; // Fixed column width (each column)

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    const rowContent = row.field1 || ""; // Fallback to an empty string if field1 is undefined
    const rowValue = row.value || ""; // Value for the second column, fallback to empty string

    // Calculate the text height based on the content for both columns
    const rowContentHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowContent, { width: fixedColWidth - 10 });
    const rowValueHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowValue, { width: fixedColWidth - 10 });

    // Maximum row height (to keep row heights uniform)
    const rowHeight = Math.max(rowContentHeight, rowValueHeight) + 10; // Add padding

    // Set row color (alternating colors)
    const rowColor = (rowIndex === 0) ? "#d3d3d3" : (rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff");

    // Draw the background rectangle for the row with fill color
    doc
      .lineWidth(0.5)
      .fillColor(rowColor)
      .rect(startX, startY, boxWidth, rowHeight)
      .fill();

    // Draw the black border for the row
    doc
      .lineWidth(0.5)
      .stroke("black")
      .rect(startX, startY, boxWidth, rowHeight)
      .stroke();

    // Draw the text for the first column
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(rowContent, startX + 5, startY + 5, {
        baseline: "hanging",
        width: fixedColWidth - 10,
        align: "left",
      });

    // If there's a value for the second column, draw it
    if (rowValue) {
      doc
        .font(font)
        .font('Helvetica-Bold')
        .fillColor("black")
        .fontSize(7.2)
        .text(rowValue, startX + fixedColWidth + 5, startY + 5, {
          baseline: "hanging",
          width: fixedColWidth - 10,
          align: "left",
        });
    }

    // Draw the vertical line between the two columns
    doc
      .lineWidth(0.5)
      .stroke("black")
      .moveTo(startX + fixedColWidth, startY)  // Position of the first vertical line
      .lineTo(startX + fixedColWidth, startY + rowHeight) // Extend the line down
      .stroke();

    // Move to the next row's starting Y position
    startY += rowHeight;
  });
}

const revolvingFacilitiesTable = [
  { field1: "Loans other than revolving facilities" },
  { field1: "SMA Sub-categories", value: "Basis for classification – Principal or interest payment or any other amount wholly or partly overdue" },
  { field1: "SMA - 0", value:  ` Upto 30 days` },
  { field1: "SMA – 1", value: ` More than 31 days and upto 60 days` },
  { field1: "SMA – 2", value: ` More than 61 days and upto 90 days` },
  { field1: "NPA", value: ` More than 90 days` },
];

revolvingFacilitiesFunction(revolvingFacilitiesTable);

doc.moveDown(3);
doc
.fontSize(8)
.font('Helvetica')
.text(`The aforesaid categorization will apply only when the time intervals are continuous.\n\n\nFurther, the classifications shall be triggered/flagged by the Lender as part of its day- end processes irrespective of the time of running such processes. Similarly, classification of Borrower accounts as SMA as well as NPA shall be done as part of the day-end process for the relevant date and the SMA or NPA classification date shall be the calendar date for which the day-end process is run. In other words, the date of SMA/NPA shall reflect the asset classification status of an account at the day-end of that calendar date.\n\n\nExample: If the due date of a loan account is March 31,2021, and full dues are not received before the lending institution runs the day-end process for this date, the date of overdue shall be March 31, 2021. If it continues to remain overdue, then this account shall get tagged as SMA-1 upon running the day-end process on April 30, 2021 i.e. upon completion of 30 days of being continuously overdue.Accordingly, the date of SM A-1 classification for that account shall be April 30, 2021.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(0.2);

//addFooter();

// // ------------------------------------------- new page ----------------------------------------------------
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(10);
 

doc
.fontSize(8)
.font('Helvetica')
.text(`Similarly, if the account continues to remain overdue, it shall get tagged as SMA- 2 upon running day-end process on May 30, 2021 and if continues to remain overdue further, it shall get classified as NPA upon running day-end process onJune 30,2021.\n\nFurther, loan accounts classified as NPAs may be upgraded as ‘standard’ assets only if entire arrears of interest and principal are paid by the Borrowers.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`Acknowledged & Signed\n${allPerameters.borrowerName}\n\n`, startX, doc.y, { align: "left",underline: true, width: 500 });
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`Annexure – II`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`1. Without prejudice to the right of the RCPL to proceed against the Borrower(s) under the civil law for recovery of the amount due, the Borrower(s) hereby give consent that the RCPL will be entitled to recover the dues under the provisions of the Securitisation and Reconstruction of Financial Assets and Enforcement of Security Interest Act, 2002 and the Borrower(s) further agree(s) that he/ she/ they will be liable to pay to the RCPL all cost, charges and expenses incurred in that score. The Borrower(s) understand that the RCPL may at its sole discretion avail services of recovery agency/ agents of RCPL’s choice for initiating and continuing the recovery proceedings against the Borrower(s) until the full amounts due to the RCPL are recovered. The Borrower(s) further agree to reimburse to the RCPL, any fees,charges, costs or expenses paid to such recovery agency engaged by the RCPL, in this regard.\n\n\n2. For any grievances in relation to the loan the customer can call / write to us at 9512011220 / grievance@ratnaafin.com. The other details and the process for the Grievance Redressal Mechanism is available on the website of the Company www.ratnaafin.com`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);

//addFooter();

// //------------------------------------------------- new page ------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(10);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`DEED OF GUARANTEE`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`This Deed of Guarantee (“`, startX, doc.y, { align: "left", width: 500,continued:true });
doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`Deed`, startX, doc.y, { align: "left", width: 500,continued:true });
doc
.fontSize(8)
.font('Helvetica')
.text(`” or “`, startX, doc.y, { align: "left", width: 500,continued:true });
doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`Guarantee`, startX, doc.y, { align: "left", width: 500,continued:true });
doc
.fontSize(8)
.font('Helvetica')
.text(`”) is executed is made at the place and on the date as set out in the Schedule.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`BY`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Guarantor(s), whose name(s), address(es) and other details are mentioned in Schedule (hereinafter referred to as the “`, startX, doc.y, { align: "left", width: 500,continued:true });
doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`Guarantor”)`, startX, doc.y, { align: "left", width: 500,continued:true});
doc
.fontSize(8)
.font('Helvetica')
.text(`”)`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`The expression “`, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`Guarantor`, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true})
.font('Helvetica')
.text(`” unless it be repugnant to the context or meaning thereof, shall mean and include, if the Guarantor is a: (a) company within the meaning of the Companies Act, 1956 / Companies Act, 2013 or an LLP incorporated under the Limited Liability Partnership Act, 2008, its successors and permitted assigns; (b) a partnership firm for the purposes of the Indian Partnership Act, 1932,the partners for the time being and from time to time and their respective legal heirs, executors and administrators; (c) a sole proprietorship, the sole proprietor and his / her legal heirs, administrators and executors; and (d) an individual, his / her legal heirs,administrators and executors.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`IN FAVOUR OF`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);

doc
  .fontSize(8)
  .font('Helvetica-Bold')
  .text('RATNAAFIN CAPITAL PRIVATE LIMITED', startX, doc.y, { align: 'left', width: 500, continued: true, bold: true })
  .fontSize(8) // Resetting font size for the following text
  .font('Helvetica')
  .text(` a company incorporated under the Companies Act, 2013, having its CIN No. U65929GJ2018PTC437822, and having its Registered Office at 402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place Near Hyatt Hotel, New Delhi- 110066, Delhi, India and corporate ofice at 2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India-380060 (hereinafter called the “Lender” which expression shall, unless it be repugnant to the context or meaning thereof, mean and include its executors, successors and assigns)`, { align: 'left', width: 500 })
  // .fontSize(8)
  // .text(' which expression shall, unless it be repugnant to the context or meaning thereof, mean and include its executors, successors and assigns)', { align: 'justify', width: 500 })
  .moveDown(2); // Maintain the same line spacing

  doc
 .fontSize(7)
 .font('Helvetica')
 .text(`(The Guarantor and the Lender are hereinafter collectively referred to as the “Parties” and individually as a “Party”).`, startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(1);

  doc
 .fontSize(8)
 .font('Helvetica-Bold')
 .text(`WHEREAS:`, startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(1);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`A. Pursuant to the loan agreement executed between the Borrower(s) (more particularly mentioned in Schedule hereunder) and the Lender for the Loan more particularly mentioned in Schedule and/or any amendment(s)/ addendum(s) thereto (“Loan Agreement”) and at the request of the Guarantor, the Lender has agreed to lend and advance / lent and advanced the Loan to the Borrower(s) and the Borrower(s) has/have agreed to borrow / have borrowed the Loan from the Lender on the terms and conditions contained in the Loan Agreement and other Loan Documents\n\n B. One of the conditions of the Lender having agreed to grant/ granted the said Loan to the Borrower(s), was that the Guarantor shall execute, in favor of the Lender, an unconditional and irrevocable continuing guarantee to secure the repayment of the Outstanding Dues and the performance by the Borrower(s) of all other present and future obligations and liabilities in relation to the Loan.\n\n C. The Guarantor, in consideration of the Lender extending the Loan to the Borrower(s) pursuant to the Loan Agreement, have agreed to give this unconditional and irrevocable Guarantee in favour of the Lender as appearing hereinafter`, startX, doc.y, { align: "left",align: "justify", width: 500 });
   doc.moveDown(1);

   doc
   .fontSize(8)
   .font('Helvetica-Bold')
   .text(`IT IS THEREFORE AGREED AS FOLLOWS:`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(1);

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`1. Terms defined in the Loan Agreement shall, unless otherwise defined in this Deed, bear the same meaning when used in this Guarantee. The rules of interpretation contained in the Loan Agreement shall apply to the construction of this Guarantee, unless the context requires otherwise.\n\n 2. For good and valuable consideration being the Lender providing the Loan to the Borrower(s) under the terms of the Loan Agreement, the receipt and sufficiency of which is hereby acknowledged, the We hereby irrevocably and unconditionally:\n\n i. Guarantees to the Lender punctual performance by the Borrower(s) of all the Borrower’s obligations under the Loan Documents including due and punctual repayment by the Borrower(s) of all the Outstanding Dues;\n\n ii. Undertakes that in the event of the Borrower(s) fails to perform any of its obligations under the Loan Documents, the Guarantor(s) shall, on first demand by the Lender (such notice to be conclusive proof of the default) and without any demur, contest or delay, shall pay to the Lender the Guarantee Amount as stipulated in Schedule of this Deed (the “Guarantee Amount”) and in addition thereto shall also pay all interest, penal charges costs, other charges, expenses payable by the Borrower(s) to the Lender under the Loan Documents or any part thereof \n\n iii. undertakes with the Lender that whenever the Borrower(s) do/does not pay any amount when due and/or payable under or in connection with the Loan Documents and/or does not comply with the terms and conditions of the Loan Documents, the Guarantor,without making any delay or demur, shall, within three (3) days of demand by the Lender, pay that amount to the Lender as if it were the principal obligor;\n\n iv. as a primary obligation, indemnifies the Lender immediately on demand against any cost, loss or liability suffered by the Lender if any obligation guaranteed by it is or becomes unenforceable, invalid or illegal. The amount of the cost, loss or liability shall be equal to the amount which the Lender would otherwise have been entitled to recover; and `, startX, doc.y, { align: "left",align: "justify", width: 500 });
     doc.moveDown(1);

//addFooter();

// // ---------------------------------------------new page 17------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

doc
.fontSize(8)
.font('Helvetica')
.text(`v. accepts and acknowledges that the obligations hereunder are joint and several and independent of the obligations of the Borrower(s) and a separate action or actions may be brought against the Guarantor alone or jointly with the Borrower(s) and other guarantors.\n\n 3. The Guarantors herby agrees and acknowledges that this guarantee shall be unconditional and irrevocable and shall extend/ cover/ secure the due observance and performance of the Loan Documents. The Guarantor(s) hereby irrevocably and unconditionally agree that this guarantee shall extend to the ultimate balance of sums payable by the Borrower(s) under the Loan Documents.\n\n 4. This Deed shall be enforceable against the Guarantor(s) notwithstanding that any security created in favour of the Lender shall, at the time when the proceedings are taken against the Guarantor on this Guarantee, be outstanding or unrealized or lost. This Deed is in addition to and without prejudice to any other guarantee or security now or subsequently held by the Lender.\n\n 5. The Lenders shall have the sole discretion to make disbursement(s) and/or interim disbursement(s) to the Borrower from out of the total sanctioned Loan amount, at such time, on such conditions and in such manner as the Lenders may decide.\n\n 6. The Guarantor shall indemnify and keep the Lenders indemnified against all losses, damages, costs, claims and expenses whatsoever which the Lenders may suffer, pay or incur by reason of or in connection with any such default on the part of the Borrower including legal proceedings taken against the Borrower and/or the Guarantor for recovery of the entire Guarantee Amounts referred to in the Schedule of this Deed.\n\n 7. The Guarantors agree and understand that the Guarantors shall not be entitled to delay the payment of the Guarantee Amount for any reason whatsoever or raise any controversy, question or dispute which may arise between the Lender and Borrower(s) as regard to the terms and conditions of the Loan Agreement or the liability and/or payment of the amounts due thereunder.\n\n 
  8. The Guarantor(s) hereby agree that, without the concurrence of the Guarantor(s), the Lender shall be at liberty to vary, alter or modify the terms and conditions of the Loan Agreement and/or the other Loan Documents and in particular to defer, postpone or revise the repayment of the Loan and/or payment of interest and other moneys payable by the Borrower(s) to the Lender on such terms and conditions as may be considered necessary by the Lender including any increase in the rate of interest. The Lender shall also be at liberty to absolutely dispense with or release all or any of the security/ securities furnished or required to be furnished by the Borrower(s) to the Lender to secure the Loan. The Guarantor agrees that the liability under this Deed shall, in no manner be affected by any such variations, alterations, modifications, waiver, dispensation with or release of security, and that no further consent of the Guarantor(s) is required for giving effect to such variation alteration, modification, waiver, dispensation with, or release of security.\n\n 9. The Guarantor expressly waives all their rights including but not limited to any right it may have of first requiring the Lender (or any trustee or agent on its behalf) to proceed against or enforce any other rights or security or claim payment from any person before claiming from the Guarantor under this Deed. This waiver applies irrespective of any law or any provision of a Loan Documents to the contrary.\n\n 10. The rights and remedies of the Lender under this Deed shall be cumulative, in addition to and independent of every other guarantee or security which the Lender may at any time hold for the obligations of the Borrower(s) under the Loan Documents or any rights, powers and remedies provided by law. To give effect to this Guarantee, the Lender may act as though the Guarantor were the principal debtors to the Lender.\n\n 11. This Deed shall remain in full force and effect as a continuing guarantee unless and until such time as all amounts due to the Lender by the Borrower(s) and all amounts
   due hereunder have been completely and duly paid to the Lender to the complete and absolute satisfaction of the Lender and the Lender has in writing discharged the Borrower(s); however, if the obligations of the Guarantor under this Deed cease to be continuing for any reason, the liability of the Guarantor at the date of such cessation shall remain, regardless of any subsequent increase or reduction in the obligations of the Borrower(s) under the Loan Documents. The Guarantors hereby agree and undertake that this guarantee is irrevocable and cannot be revoked by them under any circumstance.\n\n 12. If the Guarantors have or shall hereafter take any security from the Borrower(s) in respect of their liability under this Deed, the Guarantors shall not enforce the same in the bankruptcy or insolvency of the Borrower(s) in respect thereof to the prejudice of the Lender and such security shall stand as a security for the Lender and shall forthwith be deposited with the Lender, in case of liability of the Borrower(s) to the Lender remaining unpaid.\n\n 13. Without prejudice to any other right or remedy to the Lender, so long as any money remains owing hereunder, the Lender shall have a first and paramount lien and the right of set-off on all the Guarantors moneys standing to their credit in any account whatsoever with the Lender and/or any of its group companies and/or subsidiaries and/or affiliates and/or holding company/s etc. or to proceed against and recover from any of Guarantor’s property or security lying with the Lender and/or any of its group companies and/or subsidiaries and/or affiliates and/or holding company/s etc. in relation hereto or any other transaction notwithstanding any restrictive provision thereunder with respect to right of enforcement, any amounts due and payable by the Guarantors to the Lender pursuant hereto. In case of default in payment by the Guarantor, on first demand by the Lender, of the sum due and payable hereunder, the Lender shall be entitled and have the authority, without any further notice to the Guarantors, to adjust and/or appropriate the credit balance in such account or any other monies coming to the hands of the Lender and/or any of its group companies and/or subsidiaries and/or affiliates and/or holding company/s etc. towards liquidation of the sum due and payable by the Guarantors hereunder.
`, startX, doc.y, { align: "left", width: 500 });
 doc.moveDown(1);

//addFooter();

// //---------------------------------------------------new page 18---------------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

doc
.fontSize(8)
.font('Helvetica')
.text(`14. The Guarantors further undertake that this Deed shall be binding upon the Guarantors executors, administrators and assigns and shall not be affected by any change in constitution of the Guarantors or the Lenders or the Borrower(s) constitution or by reason of the winding up, merger or amalgamation of the Borrower(s) or the Lender or the Guarantors with any other company, firm, corporation or concern.\n\n 15. The rights of the Lender against each of the Guarantor shall remain in full force and effect notwithstanding any arrangement which may be reached between the Lender and the other guarantor(s), if any, or notwithstanding the release of that other or others from liability and notwithstanding that any time hereafter the other guarantor(s) may cease for any reason whatsoever to be liable to the Lender, the Lender shall be at liberty to require performance by the Guarantor of their obligations hereunder to the same extent in all respects as if the Guarantor had at all times been solely liable to perform the said obligations.\n\n 16. The Lenders shall have full liberty, without notice to the Guarantor and without in any way affecting this Guarantee, to exercise at any time and in any manner any power or powers reserved to the Lenders under the Loan Agreement, to enforce or forbear to enforce payment of the Loan or any part thereof or interest or other moneys due to the Lenders from the Borrower or any of the remedies or securities available to the Lenders, to enter into any composition or compound with or to grant time or any other indulgence or Loan to the Borrower and the Guarantor shall not be released by act of Lenders exercising their liberty in regard to the matters referred to above or by any act or omission on the part of the Lenders or by any other matter or thing whatsoever which under the law relating to sureties would but for this provision have the effect of so releasing the Guarantor. The Guarantor hereby waive in favor of the Lender so far as may be necessary to give effect to any of the provisions of this Guarantee, all the suretyship and other rights which the Guarantor might otherwise be entitled to enforce.\n\n 17. This Deed shall not be wholly  or partially satisfied or exhausted by any payments made to or settled with the Lenders by the Borrower and shall be valid and binding on the Guarantor and operative until repayment in full of   all moneys due to the Lenders under the Loan Agreement.\n\n 
 18. This Deed shall be irrevocable and the obligations of the Guarantor hereunder shall not be conditional on the receipt of any prior notice by the Guarantor or by the Borrower and the demand or notice by the Lenders shall be sufficient notice to or demand on the Guarantor\n\n 19. The Guarantor agrees, at the request of the Lender, to sign, seal, execute and deliver any deed or other documents that may be necessary or required by the Lender, in connection with the Guarantors liability hereunder or the enforcement thereof\n\n 20. The absence or infirmity of borrowing powers on the part of the Borrower(s) or any irregularity in the exercise thereof shall not affect the Guarantor’s liability and any moneys advanced/lent to the Borrower(s) by the Lender shall be deemed to be due and owing notwithstanding such absence, infirmity or irregularity. The liability of the Guarantor, under this Deed, shall not be affected by the absence or deficiency of powers on the part of the Guarantor to give guarantees and/or indemnities or any irregularity in the exercise of such powers.\n\n 21. The Guarantors hereby declare that the entries in the Lender’s books and other records maintained by the Lender shall be conclusive and evidence of the transactions and their correctness and matters therein appearing and any certificate, statement of account or determination signed by an Officer of the Lender stating the sum due from the Borrower(s) or the Guarantors, in the absence of any manifest clerical or arithmetical error, be conclusive and binding on the Guarantors.\n\n 22. Any demand for payment or notice under this Guarantee shall be sufficiently given in writing if sent by registered post, courier, speed post, mail, email to the address provided by the Guarantor in the Schedule of this Deed. Such demand or notice is deemed to be made or given and shall be assumed to have reached the addressee in the course of registered post or any other aforesaid mode, if given by registered post or such other aforesaid mode and no period of limitation shall commence to run in favor of the Guarantor until after demand for payment in writing shall have been made or given as aforesaid. A certificate by any of the responsible officers of the Lenders that to the best of its knowledge and belief, the envelope containing the said notice was so posted shall be conclusive as against the Guarantor, even though it was returned unserved on account of refusal of the Guarantor or otherwise.
 In case of change in address of Guarantor, the Guarantor shall duly intimate the new address to the Lender in writing within seven days of such change.\n\n 23. In the event the Borrower(s) becomes insolvent or the Borrower(s) makes any arrangement or composition with its creditors, the Lender may (notwithstanding any payment made to the Lender by the Guarantor or any other person of the whole or any part of the amount due to the Lender) rank as creditor and prove against the assets of the Borrower(s) for the full amount of Lender’s claims against the Borrower(s) and the Lender may receive and retain the whole of the payments to the exclusion of all the Guarantors rights in competition with Lender until Lender’s claims are fully satisfied. Until all amounts which may be or become payable by the Borrower(s) under or in connection with the Loan Documents have been irrevocably paid in full or unless the Lender otherwise directs, the Guarantor will not exercise any rights which it may have by reason of performance by it of its obligations under the Loan Documents: \n\n i. to be indemnified by, or to receive any collateral from the Borrower(s);\n\n ii. to claim any contribution from any other guarantor of the Borrower(s) obligation under the Loan Documents; and/or \n\n  iii. to take benefit (in whole or in part and whether by way of subrogation or otherwise) of any rights of the Lender under the Loan Documents or of any other guarantee or security taken pursuant to, or in connection with, the Loan Documents by the Lender\n\n 24. The Guarantor hereby severally represents and warrants to the Lender on a continuing basis, and undertakes during the subsistence of this Guarantee that:`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

//addFooter();

// // ----------------------------------------------------- new page 19 -------------------------------------------------------------------------
   
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

doc
.fontSize(8)
.font('Helvetica')
.text(`i. The Guarantor has the competence, necessary power and authority to execute this Guarantee and perform its obligations as Guarantor under this Guarantee;\n\n ii. The execution, delivery and performance of this Guarantee do not and will not conflict with (a) any agreement binding on him or any of its assets; or (b) any applicable laws, rules, regulations or any official or judicial order applicable to him;\n\n iii. This Guarantee will be legal, valid and binding obligations of the Guarantor and enforceable in accordance with the terms hereof;\n\n iv. Neither the Guarantor nor any of its assets enjoy any right of immunity from set-off, suit or execution in respect of its obligations under this Guarantee;\n\n v. There are no actions, suits, proceedings or investigations pending, or to the knowledge of the Guarantor threatened by or against the Guarantor or the properties of the Guarantor before any court of law or government authority or any other competent authority which might have a material effect on the validity, enforceability or performance of this Guarantee by the Guarantor;\n\n vi. Any financial projections provided by the Guarantor have been prepared on the basis of recent information and on the basis of reasonable assumptions; \n\n vii. Nothing has occurred or been omitted from any information provided to the Lender and no information has been given or withheld that results in such information being untrue or misleading in any material respect;\n\n viii. All information supplied by the Guarantor under this Guarantee is true, complete and accurate in all material respects as at the date on which it was given and is not misleading in any respect;\n\n ix. The Guarantor has not defaulted in fulfillment of its obligations towards other lenders;\n\n x. The Guarantor has filed all the tax returns as required by the Applicable Laws to be filed by him and has paid all taxes payable by him;\n\n xi. The Guarantor is not in a breach of any material agreement to which it is a party;\n\n xii. The Guarantor is not in violation of the Prevention of Money Laundering Act, 2002 or any other applicable money laundering laws; and\n\n xiii. The Guarantor has not been declared as a wilful defaulter by the RBI.\n\n 25. The Guarantor hereby agree and hereby authorize the Lender that\n\n i. The Lender shall be entitled to disclose the credit information and other related/ relevant information of the Guarantor to the Reserve Bank of India, credit information
 company (e.g. CIBIL and/or other similar entities) credit rating agencies, statutory/ regulatory/ judicial/quasi-judicial authorities/bodies, statutory auditors and other persons pursuant to/in connection with/ under, inter alia, any law, regulations, guidelines and/or circulars, legal proceedings, audit, credit rating / gradings, the provisions of the Loan Documents and/or in the ordinary course of the Lender’s business; and;\n\n ii. In case the Guarantor commit(s) default in the payment/repayment of the Guarantee Amount (or part thereof) and/or upon occurrence of an Event of Default under the Loan Documents, the Lender, the Reserve Bank of India and/or credit information company will have an unqualified right to disclose or publish the name(s) of the Guarantor and its/their partners or directors as defaulter(s) in such manner and through such medium as the Lender, the Reserve Bank of India and/or the credit information company in their absolute discretion may think fit\n\n 26. The Guarantor and Lender agree that if any dispute/ disagreement/ differences (“Dispute”) arises between the Guarantor and the Lender during the subsistence of the Loan Documents (including this Deed) in connection with any nature whatsoever, then, the Dispute shall be referred to a sole arbitrator who shall be nominated/ appointed by the Lender only. The place of the arbitration shall be Ahmedabad and the arbitration proceedings shall be governed by the Arbitration & Conciliation Act, 1996 (or any statutory re-enactment thereof, for the time being in force) and shall be in the English language.\n\n 27. The validity, interpretation, implementation and resolution of disputes arising out of or in connection with Agreement shall be governed by Applicable law. The Parties agree that all matters arising out of/in relation to Agreement shall be subject to the exclusive jurisdiction of the courts or tribunals (as the case may be) at Ahmedabad, India.
 `, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(`28. The Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Guarantors in the language understood by the Borrower and the Borrower has understood the entire meaning of the terms and conditions and has afixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.
 `, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

//addFooter();

// //-------------------------------------------------- new page 20--------------------------------------------------------------
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`SCHEDULE REFERRED HERE IN ABOVE`, startX, doc.y, { align: "center", width: 500 });
 doc.moveDown(0.5);

 function referredTableFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;  // Total table width
  const fixedColWidth = 230; // Fixed column width for regular rows with two columns

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row) => {
    const rowContent = row.field1 || ""; // Fallback to an empty string if field1 is undefined
    const rowValue = row.value || ""; // Value for the second column, fallback to empty string

    // Calculate text height based on content width; wider for single-column rows
    const contentWidth = rowValue ? fixedColWidth - 10 : boxWidth - 10;
    const rowContentHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowContent, { width: contentWidth });
    const rowValueHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowValue, { width: fixedColWidth - 10 });

    // Set row height to the maximum text height + padding
    const rowHeight = Math.max(rowContentHeight, rowValueHeight) + 10;

    // Draw the black border for the row
    doc
      .lineWidth(0.5)
      .stroke("black")
      .rect(startX, startY, boxWidth, rowHeight)
      .stroke();

    if (rowValue) {
      // Regular row with two columns
      // Draw the first column text (bold)
      doc
        .font(font)
        .font('Helvetica-Bold')
        .fillColor("black")
        .fontSize(7.2)
        .text(rowContent, startX + 5, startY + 5, {
          width: fixedColWidth - 10,
          align: "left",
        });

      // Draw the second column text (non-bold)
      doc
        .font(font)
        .font('Helvetica')
        .fillColor("black")
        .fontSize(7.2)
        .text(rowValue, startX + fixedColWidth + 5, startY + 5, {
          width: fixedColWidth - 10,
          align: "left",
        });

      // Draw vertical line between columns
      doc
        .lineWidth(0.5)
        .stroke("black")
        .moveTo(startX + fixedColWidth, startY)
        .lineTo(startX + fixedColWidth, startY + rowHeight)
        .stroke();
    } else {
      // Single-column centered row
      doc
        .font(font)
        .font('Helvetica-Bold')
        .fillColor("black")
        .fontSize(7.2)
        .text(rowContent, startX, startY + 5, {
          width: boxWidth - 10,
          align: "center",
        });
    }

    // Move Y position for the next row
    startY += rowHeight;
  });
}

const referredTable = [
  { field1: "Date of the Execution", value: ` ${allPerameters.agreementdate}` },
  { field1: "Place of Execution", value:  ` ${allPerameters.placeOfExecution}` },
  { field1: "Details of the Guarantor(s)" },
  { field1: "Name of Guarantor(s)", value:  ` ${allPerameters.guarantorname}` },
  { field1: "Constitution of the Guarantor(s)", value: ` ${allPerameters.constitutionGuarentor}` },
  { field1:  `Address of Guarantor(s) `,value:`${allPerameters.guarantoraddress}` },
  { field1: "PAN of the Guarantor(s)", value:  ` ${allPerameters.guarantorpanTanCin}` },
  { field1: "Email – address(es)", value:  ` ${allPerameters.guarantoremail}` },
  { field1: "Phone No. (s)", value:  ` ${allPerameters.guarantorphoneNo}` },
  { field1: "Details of the Borrower(s)" },
  { field1: "Name of Borrower(s)", value: ` ${allPerameters.borrowerName}` },
  { field1: "Address of Borrower", value:  ` ${allPerameters.borroewraddress}` },
  { field1: "Constitution of the Borrower(s)", value: ` ${allPerameters.constitutionBorrower}` },
  { field1: "PAN/TAN/CIN of the Borrower(s)", value:  ` ${allPerameters.borrowerpanNo}` },
  { field1: "Email – address(es)", value:  ` ${allPerameters.borroweremail}` },
  { field1: "Phone No. (s)", value:  ` ${allPerameters.borrwermobileNo}` },
  { field1: "Attention: Mr./Ms.", value:  ` ${allPerameters.borrowerName}` },
  { field1: "Loan Details" },
  { field1: `Loan Agreement`, value:`Loan Agreement dated ${allPerameters.agreementdate} relating to the Loan executed between (a) the Lenders (b) the Borrower(s) and/or any amendment(s) /addendum(s) thereof)` },
  { field1: "Loan Amount", value:  `Rs.${allPerameters.loanAmount}/-( ${allPerameters.loanAmountInWord})` },
  { field1: "Guarantee Amount", value:  `Rs.${allPerameters.loanAmount}/-( ${allPerameters.loanAmountInWord}) granted or to be granted to the Borrower(s) under the Loan . together with all interest, Penal charges,costs, other charges, expenses payable by the Borrower(s) to the Lender under Loan Documents or any part thereof.` },
];

referredTableFunction(referredTable);
doc.moveDown(2)
doc
  .fontSize(8)
  .font('Helvetica-Bold')
  .text('IN WITNESS WHEREOF', startX, doc.y, { align: 'left', width: 500, continued: true, bold: true })
  .fontSize(8) // Resetting font size for the following text
  .font('Helvetica')
  .text('this Guarantee has been signed and executed by the Guarantors and is intended to be and is hereby delivered by them as a deed on the date specified above', { align: 'left', width: 500, continued: true })
  .fontSize(8)
  .font('Helvetica-Bold')
  .text('\n\n SIGNED AND DELIVERED BY \n\n WITHINNAMED GUARANTOR(S)', { align: 'justify', width: 500 })
  .moveDown(2)
  .fontSize(8)
  .font('Helvetica')
  .text(`${allPerameters.guarantorname}`, { align: 'justify', width: 500 })
  .moveDown(2)

//addFooter();

// // -------------------------------------------new page 21 ------------------------------------------------------
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`END USE LETTER FROM THE RESIDENT INDIAN CUSTOMER`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc 
.fontSize(9)
.font('Helvetica')
.text(`Date:${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`To,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
.fontSize(8)
.font('Helvetica')
.text(`The Manager,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Ratnaain Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`Dear Madam/Sir,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Sub: Application for Loan\n\n I/We, ${allPerameters.borrowerName} refer to the Application No./Sanction Letter No.${allPerameters.sanctionLetterNo} Dated:${allPerameters.sanctionLetterDate} submitted by me/us to Ratnaafin Capital Pvt Ltd. for availing of a Loan from Ratnaafin Capital Pvt Ltd.)`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`The said Facility is for the purpose of (tick one)`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

// doc
// .fontSize(8)
// .font('Helvetica')
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Education\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Business\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Agriculture & Allied Activity O Home Repair\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Other personal need. specify:`, startX, doc.y, { align: "left", width: 500 })
// doc.moveDown(1);

// const addCheckbox = (doc, x, y, fieldName, label) => {
//   // Draw a rectangle for the checkbox
//   doc
//     .rect(x, y, 8, 8) // x, y, width, height
//     .stroke();

//   // Add label text next to the checkbox
//   doc.fontSize(8).text(label, x + 20, y - 2);

//   // Add the interactive form field annotation for the checkbox
//   doc.annotate(x, y, 8, 8, {
//     Type: 'Annot',
//     Subtype: 'Widget',
//     FT: 'Btn', // Form type is Button (used for checkboxes and radio buttons)
//     T: fieldName, // Field name for the checkbox
//     Ff: 49152, // Flags to set checkbox behavior (49152 makes it toggleable)
//     V: 'Off', // Default value (unchecked state)
//     AP: {
//       N: {
//         On: '/Yes', // Name for the "checked" state
//         Off: '/Off' // Name for the "unchecked" state
//       }
//     }
//   });
//   doc.moveDown()
// };

// Add the checkboxes with labels
// addCheckbox(doc, 50, 100, 'education', 'Education');
// addCheckbox(doc, 50, 110, 'business', 'Business');
// addCheckbox(doc, 50, 120, 'agriculture', 'Agriculture & Allied Activity');
// addCheckbox(doc, 50, 130, 'home_repair', 'Home Repair/Home Improvement/Home Renovation/Home Construction');
// addCheckbox(doc, 50, 140, 'cattle', 'Cattle Purchase');
// addCheckbox(doc, 50, 150, 'other_personal', 'Other Personal');

let currentY = doc.y;

const addCheckbox = (doc, x, y, fieldName, label) => {
  // Draw a rectangle for the checkbox
  doc
    .rect(x, y, 8, 8) // x, y, width, height
    .stroke();

  // Add label text next to the checkbox
  doc.font('Helvetica').fontSize(8).text(label, x + 20, y - 2);

  // Add the interactive form field annotation for the checkbox
  doc.annotate(x, y, 8, 8, {
    Type: 'Annot',
    Subtype: 'Widget',
    FT: 'Btn', // Form type is Button (used for checkboxes and radio buttons)
    T: fieldName, // Field name for the checkbox
    Ff: 49152, // Flags to set checkbox behavior (49152 makes it toggleable)
    V: 'Off', // Default value (unchecked state)
    AP: {
      N: {
        On: '/Yes', // Name for the "checked" state
        Off: '/Off' // Name for the "unchecked" state
      }
    }
  });
};

// Add checkboxes dynamically starting after the paragraph
const spacing = 10; // Adjust spacing between checkboxes
const startXy = 50; // X coordinate for checkboxes

addCheckbox(doc, startXy, currentY, 'education', 'Education');
currentY += spacing; // Increment y position for the next checkbox
addCheckbox(doc, startXy, currentY, 'business', 'Business');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'agriculture', 'Agriculture & Allied Activity');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'home_repair', 'Home Repair/Home Improvement/Home Renovation/Home Construction');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'cattle', 'Cattle Purchase');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'other_personal', 'Other Personal');
doc.moveDown()
currentY += spacing+spacing;


// const form = doc.form(); // Initialize form support

// const checkboxes = [
//   { name: 'education', label: 'Education', x: 50, y: 100 },
//   { name: 'business', label: 'Business', x: 50, y: 130 },
//   { name: 'agriculture', label: 'Agriculture & Allied Activity', x: 50, y: 160 },
//   { name: 'homeRepair', label: 'Home Repair / Improvement', x: 50, y: 190 },
//   { name: 'cattlePurchase', label: 'Cattle Purchase', x: 50, y: 220 },
//   { name: 'otherPersonal', label: 'Other Personal', x: 50, y: 250 },
// ];

// // Loop to add each checkbox with toggleable functionality
// checkboxes.forEach((checkbox) => {
//   doc.checkbox({
//     name: checkbox.name, // Unique field name
//     x: checkbox.x, // X position
//     y: checkbox.y, // Y position
//     width: 15, // Width of the checkbox
//     height: 15, // Height of the checkbox
//     value: 'Off', // Default value is "Off" (unchecked)
//     appearance: {
//       Off: { normal: {} }, // Define "unchecked" state
//       Yes: { normal: {} }, // Define "checked" state
//     },
//   });

//   // Add label text next to the checkbox
//   doc.text(checkbox.label, checkbox.x + 20, checkbox.y - 3);
// });


doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`If the facility is to be used for Business Purpose, then please tick one of a) OR b) the following`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
currentY += spacing+spacing;
doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`a) Investment in Plant & Machinery (only for Manufacturing industry) is:\n\n`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
currentY += spacing+spacing;


// doc
// .fontSize(8)
// .font('Helvetica')
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Less than or equal to Rs 5 lakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 5 lakh and up to Rs 25 lakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 25 lakh and up to Rs 5 Crore`, startX, doc.y, { align: "left", width: 500 })
// doc.moveDown(1);

addCheckbox(doc, startXy, currentY, 'five_lakh', 'Less than or equal to Rs 5 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'above', 'Above Rs 5 lakh and up to Rs 25 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'aboveCrore', ' Above Rs 25 lakh and up to Rs 5 Crore');
doc.moveDown(1)
currentY += spacing+spacing;


doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`b) Investment in Office Equipment (only for Service industry) is:`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
currentY += spacing+spacing;


// doc
// .fontSize(8)
// .font('Helvetica')
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Less than or equal to Rs 2 lakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 2 lakh and up to Rs 10Iakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 10 lakh and up to Rs 5 Crore`, startX, doc.y, { align: "left", width: 500 })
// doc.moveDown(1);

addCheckbox(doc, startXy, currentY, 'two_lakh', 'Less than or equal to Rs 2 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'above', 'Above Rs 2 lakh and up to Rs 10 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'aboveCrore', ' Above Rs 10 lakh and up to Rs 5 Crore');
doc.moveDown(1)

doc
.fontSize(8)
.font('Helvetica')
.text(`I/We hereby represent, warrant and confirm that the aforesaid purpose is a valid purpose and also agree and undertake to utilize the loan only for the above-mentioned purpose and that the loan shall not be used for any illegal and / or antisocial and/or speculative purposes including but not limited to participation in stock markets/IPOs.\n\nI/We further agree. confirm and undertake that the purpose of use of funds under the facility shall not be changed in any manner during the tenor of the facility or that such change in purpose shall take place only with the prior written permission of Ratnaafin Capital Pvt Ltd. I/We agree that any breach or default in complying with all or any of the aforesaid undertaking(s) will constitute an event of default under the Facility Agreement executed with the Ratnaafin Capital Pvt Ltd and accordingly the Ratnaafin Capital Pvt Ltd will have the right to initiate appropriate recovery proceedings for recovering the outstanding dues in the loan account.\n\n I/We are aware that it is on the faith representation, declaration and confirmation that you have agreed to consider my loan application for financial assistance under the category of Priority Advances defined in various circulars/guidelines of Reserve Bank Of India.\n\n The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers /Guarantors in the language understood by the Borrower / Co-borrowers / Guarantors and the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(2);
doc
.fontSize(8)
.font('Helvetica')
.text(`Thanking you\n\n\n`, startX, doc.y, { align: "left", width: 500 })
.text(`Yours Sincerely`, startX, doc.y, { align: "left", width: 500 })

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`Thanking you\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`Yours Sincerely\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`APPLICANT NAME : ${allPerameters.borrowerName}\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`CO-APPLICANT NAME : ${allPerameters.coBorrowername}`, startX, doc.y, { align: "left", width: 500 })

// doc.moveDown(1);

//addFooter();

// //------------------------------------------------------------- new page 22 -----------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`Thanking you\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`Yours Sincerely\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`APPLICANT NAME : ${allPerameters.borrowerName}\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`CO-APPLICANT NAME : ${allPerameters.coBorrowername}`, startX, doc.y, { align: "left", width: 500 })
// .text(`2nd CO-APPLICANT NAME : ${allPerameters.coBorrowername2}`, startX, doc.y, { align: "left", width: 500 })

doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`Interest Rate Declaration \n Certificate to be signed by the borrower`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(3);

function rateTableFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;  // Total table width
  const minColWidth = 150; // Minimum width for columns
  const fixedColWidth = 230; // Fixed column width (each column)

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    const rowContent = row.field1 || ""; // Fallback to an empty string if field1 is undefined
    const rowValue = row.value || ""; // Value for the second column, fallback to empty string

    // Calculate the text height based on the content for both columns
    const rowContentHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowContent, { width: fixedColWidth - 10 });
    const rowValueHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowValue, { width: fixedColWidth - 10 });

    // Maximum row height (to keep row heights uniform)
    const rowHeight = Math.max(rowContentHeight, rowValueHeight) + 10; // Add padding

    // Draw the background rectangle for the row with no fill color (no color logic)
    doc
      .lineWidth(0.5)
      .stroke("black")
      .rect(startX, startY, boxWidth, rowHeight)
      .stroke();

    // Draw the text for the first column (bold font)
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(rowContent, startX + 5, startY + 5, {
        baseline: "hanging",
        width: fixedColWidth - 10,
        align: "left",
      });

    // If there's a value for the second column, draw it in normal font
    if (rowValue) {
      doc
        .font(font)
        .font('Helvetica')  // Normal font for value
        .fillColor("black")
        .fontSize(7.2)
        .text(rowValue, startX + fixedColWidth + 5, startY + 5, {
          baseline: "hanging",
          width: fixedColWidth - 10,
          align: "left",
        });
    }

    // Draw the vertical line between the two columns
    doc
      .lineWidth(0.5)
      .stroke("black")
      .moveTo(startX + fixedColWidth, startY)  // Position of the first vertical line
      .lineTo(startX + fixedColWidth, startY + rowHeight) // Extend the line down
      .stroke();

    // Move to the next row's starting Y position
    startY += rowHeight;
  });
}

const rateTable = [
  { field1: "Name of the Borrower", value: ` ${allPerameters.borrowerName}(PAN):${allPerameters.borrowerpanNo}` },
  { field1: "Address", value:  ` ${allPerameters.borroewraddress}` },
  { field1: "Constitution", value:  ` ${allPerameters.constitutionBorrower}` },
];

rateTableFunction(rateTable);

function loanTableFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;  // Total table width
  const minColWidth = 150; // Minimum width for columns
  const numColumns = Math.max(...tableData.map(row => Object.keys(row).length)); // Get the max number of fields in any row
  const colWidth = boxWidth / numColumns; // Column width based on the number of columns

  // Define the fields to be bold in the second row
  const boldFields = ["Facility", "Limits", "Sanction Letter No.", "Sanction Date"];

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    let maxHeight = 0;
    const rowContentHeights = [];

    // For the first row, span the entire table width and center the content
    if (rowIndex === 0) {
      const rowContent = row.field1 || ""; // Fallback to empty string if field1 is undefined

      // Calculate the text height based on the content for the full-width row
      const rowContentHeight = doc
        .font(font)
        .fontSize(7.2)
        .heightOfString(rowContent, { width: boxWidth - 10 });

      // Draw the background rectangle for the row
      doc
        .lineWidth(0.5)
        .stroke("black")
        .rect(startX, startY, boxWidth, rowContentHeight + 10)  // Adjusted row height
        .stroke();

      // Draw the text for the first row (spanning full width and centered)
      doc
        .font(font)
        .font('Helvetica-Bold')
        .fillColor("black")
        .fontSize(7.2)
        .text(rowContent, startX + 5, startY + 5, {
          baseline: "hanging",
          width: boxWidth - 10,
          align: "center", // Center the text
        });

      // Move to the next row's starting Y position
      startY += rowContentHeight + 10;  // Adjusted for row height + padding
    } else {
      let maxRowHeight = 0;
      // Calculate the content heights for each column in this row
      Object.keys(row).forEach((field, colIndex) => {
        const fieldValue = row[field] || ""; // Fallback to empty string if undefined
        const fieldHeight = doc
          .font(font)
          .fontSize(7.2)
          .heightOfString(fieldValue, { width: colWidth - 10 });

        rowContentHeights.push(fieldHeight);
        maxRowHeight = Math.max(maxRowHeight, fieldHeight); // Track the max height of this row
      });

      const rowHeight = maxRowHeight + 5; // Add padding

      // Draw the background rectangle for the row
      doc
        .lineWidth(0.5)
        .stroke("black")
        .rect(startX, startY, boxWidth, rowHeight)
        .stroke();

      // Draw each column in the row
      Object.keys(row).forEach((field, colIndex) => {
        const fieldValue = row[field] || ""; // Fallback to empty string if undefined

        // Check if the field needs to be bold
        const isBold = boldFields.includes(field);

        // Draw the text for the current column, apply bold if necessary
        doc
          .font(font)
          .fontSize(7.2)
          .fillColor("black")
          .font(isBold ? 'Helvetica-Bold' : 'Helvetica') // Bold font for specified fields
          .text(fieldValue, startX + colIndex * colWidth + 5, startY + 5, {
            baseline: "hanging",
            width: colWidth - 10,
            align: "left",
          });

        // Draw the vertical line between columns
        if (colIndex < numColumns - 1) {
          doc
            .lineWidth(0.5)
            .stroke("black")
            .moveTo(startX + (colIndex + 1) * colWidth, startY)  // Position of the vertical line
            .lineTo(startX + (colIndex + 1) * colWidth, startY + rowHeight) // Extend the line down
            .stroke();
        }
      });

      // Draw the horizontal line at the bottom of the row
      doc
        .lineWidth(0.5)
        .stroke("black")
        .moveTo(startX, startY + rowHeight)
        .lineTo(startX + boxWidth, startY + rowHeight)
        .stroke();

      // Move to the next row's starting Y position
      startY += rowHeight;
    }
  });

  // Draw the horizontal line at the bottom of the table
  doc
    .lineWidth(0.5)
    .stroke("black")
    .moveTo(startX, startY)
    .lineTo(startX + boxWidth, startY)
    .stroke();
}

const loanTable = [
  { field1: "Details of Agri Micro Loan Against Property" }, // This will span full width and be centered
  { field1: "Facility", field2: "Limits", field3: "Sanction Letter No.", field4: "Sanction Date" }, // Multiple fields
  { field1:  `Agri Micro Lap`, field2: `Rs.${allPerameters.amountOfLoan}/-( ${allPerameters.loanAmountInWord})`, field3: ` ${allPerameters.sanctionLetterNo}`, field4: ` ${allPerameters.sanctionLetterDate} `}, // Multiple fields
];

loanTableFunction(loanTable);
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`RATE OF INTEREST:`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`FRR (Present FRR 19.20%) + ${allPerameters.interestType1}% (Spread) current effective ${allPerameters.rateOfInterest}% P.A @.\n\n The rate of interest shall be subject to change from time to time including on account of changes in interest rates made by the RBI from time to time.\n\nThe Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers /Guarantors in the language understood by the Borrower / Co-borrowers / Guarantors and the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has afixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`Signature of Borrower(s)`, startX, doc.y, { align: "right", width: 470 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica')
.text(`Place:   ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica')
.text(`Date: ${allPerameters.agreementdate}`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

//addFooter();

// //-------------------------------------------- new page 22 --------------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`DECLARATION FOR IMMOVABLE PROPERTY \n (for facility backed by mortgage)`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`I/We,  ${allPerameters.borrowerName} adult,Occupation ${allPerameters.appOccupatiion}  residing at ${allPerameters.borroewraddress}( hereinafter called as "MORTGAGOR")`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`AND`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica')
.text(`I/We, ${allPerameters.coBorrowername} adult,Occupation ${allPerameters.coappOccupatiion},residing at ${allPerameters.coBorroweraddress}( hereinafter called as "MORTGAGOR")`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`AND`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);
doc
.fontSize(9)
.font('Helvetica')
.text(`I/We, ${allPerameters.coBorrowername2} adult,Occupation ${allPerameters.coappOccupatiion1},residing at ${allPerameters.coBorroweraddress2}( hereinafter called as "MORTGAGOR")`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`do hereby declare and say as follows :-`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`1) I/We say that I/We am/are absolutely seized and possessed of or otherwise well and sufficiently entitled to the Immovable property being of (1) ${allPerameters.addressImmovableProperty}, more particularly described in the Schedule hereunder written (hereinafter referred to as the “said Immovable Property\n\n 2) I/We say that I/we have not created any charges or encumbrances in respect of the Immovable Property more particularly described in the Schedule hereunder.\n\n `, startX, doc.y, { align: "left", width: 500,continued:true }).moveDown()
.font('Helvetica')
.text(`3) I/We say that the said Immovable Property is proposed to be mortgaged and charged to `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`Ratnaafin Capital Private Limited, Ahmedabad Branch.`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`, to secure by way of First Charge for the due repayment and discharge of the secured Loan of Rs.`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord}) `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(` granted by `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`RCPL`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(` to `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`${allPerameters.borrowerName} `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`together with interest, Penal charges , commitment charges and other monies payable to `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(` Ratnaafin Capital Private Limited `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`under their loan agreements, letter of sanction and other transaction documents, amended from time to time.`, startX, doc.y, { align: "left", width: 500 }).moveDown()
.font('Helvetica')
.text(`The said `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`Ratnaafin Capital Private Limited, Ahmedabad Branch`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`, Ahmedabad Branch, is/are hereinafter referred to as the “Lender”.`, startX, doc.y, { align: "left", width: 500 }).moveDown()
 
 
 
 
 
 
 
 .font('Helvetica')
 .text(`4) I/We say that the said Immovable Property is free from all encumbrances or charges (statutory or otherwise), claims and demands, and that the same or any of them or any part thereof are/is not subject to any Lien/Lispendens, attachment or any other process issued by any Court or Authority and that I/we have not created any Trust in respect thereof and that the said Immovable Property is/are in my/our exclusive, uninterrupted and undisturbed possession and enjoyment since the date of purchase/acquisition thereof and no adverse claims have been made against me in respect of the said Immovable Property or any of them or any part thereof and the same are not affected by any notices of acquisition or requisition, and that no proceedings are pending or initiated against me under the Income Tax Act, 1961, or under any other law in force in India for the time being and that no notice has been received by or served on me under the Income Tax Act,
 1961 and/or under any law and there is no pending attachment whatsoever issued or initiated against the said Immovable Property or any of them or any part thereof. \n\n 5) I/We say that I have duly paid all rents, royalties and all public demands including Income Tax, Corporation/Municipal Tax and all other taxes and revenue payable to the Government of India or to the Government of any State or to any Local Authority and that at present there are no arrears of such dues, rents, royalties, taxes and revenue dues and outstanding and that no attachments or warrants have been served on me of Income Tax, Government Revenues and other taxes.\n\n 6) I/We also agree and undertake to give such declarations, undertakings and other writings as may be required by the Lender or their solicitors and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the lender.\n\n 7) I/We say that I have obtained the requisite consent from the Income Tax authorities pursuant to the provisions contained in Section 281 of the Income Tax Act, 1961 for the alienation of my property in favour of the Lender.\n\n 8) I/We assure, agree and declare that the security to be created in favour of the Lender shall ensure in respect of my Immovable Property, both present & future and that the documents of title, evidences, deeds and writings in relation to the said Immovable Property are the only documents of title relating to the said Immovable Property.\n\n 9) I/We hereby agree and undertake that MORTGAGOR shall within a period of three months from the date hereof or such extended date as may be permitted by the Lender in writing :-\n\n a) perfectly assure the title to the properties comprised in the mortgage security and to comply with all requisitions, that may be made from time to time by or on behalf of the Lender in that behalf ;\n\n b) give such declarations, undertakings and other writings as may be required by the Lender and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the Lender;`, startX, doc.y, { align: "left", width: 500 })
doc.moveDown(1);

//addFooter();

// //------------------------------------------------------------- new page ----------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

doc
.fontSize(8)
.font('Helvetica')
.text(`c) pay all rents, rates, taxes, cesses, fees, revenues, assessments, duties and other outgoings and pay other amounts due in respect of the said Immovable Property and shall observe and perform all the rules and regulations pertaining to the same will not do or omit to do or suffer to be done anything whereby the mortgaged security as proposed to be created in favour of the Lender be affected or prejudiced in any manner whatsoever.\n\n 10) I/We further undertake that no mortgage, charge, lien or other encumbrance whatsoever will be created on the properties compromised in the mortgaged security save & except with the permission of the Lender.\n\n 11) I/We are not aware of any act, deeds, matter or thing or circumstance which prevents me from charging/further charging in favour of the Lender on the said Immovable Property.\n\n12)The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers /Guarantors in the language understood by the Borrower / Co-borrowers / Guarantors and the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement. \n\nAND I/We make the aforesaid declaration solemnly and sincerely believing the same to be true and knowing full well that on the faith thereof the Lender has agreed to complete the said transaction of mortgage by legal mortgage in respect of the Immovable Property, described in the Schedule hereunder written.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`-: SCHEDULE ABOVE REFERRED TO :-\n\n (Description of the Immovable Property)`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);

doc
.fontSize(7)
.font('Helvetica-Bold')
.text(` ${allPerameters.addressImmovableProperty}`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);
doc
.fontSize(7)
.font('Helvetica-Bold')
.text(`Boundaries of Property`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

const boundariesPropertyData = [
  { field1: "On or towards North", field2: ": ", value:  ` ${allPerameters.OnOrTowardsNorth}` },
  { field1: "On or towards South", field2: ": ", value:  ` ${allPerameters.OnOrTowardsSouth} `},
  { field1: "On or towards East",  field2: ": ", value:  ` ${allPerameters.OnOrTowardsEast}` },
  { field1: "On or towards West",  field2: ": ", value:  ` ${allPerameters.OnOrTowardsWest}` },
];

// Call the function to create the table
BoundariesFunction(boundariesPropertyData);
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text( ` Date:${allPerameters.agreementdate}`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`SIGNED & DELIVERED BY THE WITH IN NAMED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(0.5);

doc
.fontSize(8)
.font('Helvetica-Bold')
  .text(`BORROWERS NAME :   ${allPerameters.borrowerName}`,
  startX, doc.y, { align: "left", width: 500 })
  .text(`CO-BORROWERS NAME :  ${allPerameters.coBorrowername}`,
    startX, doc.y, { align: "left", width: 500 })
    .text(`2nd CO-BORROWERS NAME : ${allPerameters.coBorrowername2}`,
      startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(0.5);
  


//addFooter();

//rcpl group loan secure
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`RCPL Group Loan Secure Customer Mandate`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`To,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`RATNAAFIN CAPITAL PRIVATE LIMITED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(3);


doc
.fontSize(8)
.font('Helvetica')
.text(`Dear Sir/Madam,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(3);


// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`I/We hereby acknowledge and confirm that I/we have received the copy of the loan Agreement dated ${allPerameters.agreementdate} executed between RCPL and me/us ('Loan Agreement') and the contents of the loan Agreement have been fully explained to and understood by me/us at the time of availing the loan in the language understood by me/us) \n\n I/We further confirm that am/are fully aware of and completely understand the rights and obligations contained in the loan documents mentioned below:`, startX, doc.y, { align: "left",align: "justify", width: 500 });
//  doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(`I would like to get insured with ICICI Prudenal for the loan protect policy. In case either of the following reason triggers:`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(3);

doc
.fontSize(8)
.font('Helvetica')
.text(`
1) Policy rejecon by ICICI Prudenal due to underwring reason.
2) Insured not interested in Medical.
3) Case rejected by ICICI Prudenal on the ground of Medical or income.
4) Medical is not completed by the Client ll 30 days from the Login.
5) For any other reasons not menoned above. `, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
.fontSize(8)
.font('Helvetica')
.text(`I agree to get my policy placed with`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`
1. Bajaj Allianze Life Insurance Company Limited
2. Zuno General Insurance Limited
3. Raheja QBE General Insurance Company Limited
4. Niva Bupa Health Insurance Company Limited
5. Tata AIG General Insurance Company Limited
6. Care Health Insurance Company Limited
7. Aditya Birla Health Insurance Company Limited.
`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Request to kindly note and process accordingly`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Thanking you, `, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Loanee – RCPL`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`(Signature)`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);


// const confirmationTable = [
//   { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
//   { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
//   { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
// ];

// presentment(confirmationTable);
//addFooter();
// Finalize the PDF
    doc.end();
  
    // const pdfFileUrl = `/uploads/pdf/${pdfFilename}`;
  
    // return new Promise((resolve, reject) => {
    //   stream.on("finish", () => {
    //     resolve(pdfFileUrl);
    //   });
    //   stream.on("error", reject);
    // });

    return new Promise((resolve) => {
      doc.on('end', () => resolve(Buffer.concat(buffers)));
    });
  }

  async function  RcplLdAndPgDeedpdf1(allPerameters) {

    const font = "assets/font/Cambria.ttf";
    const fontBold = "assets/font/Cambria-Bold.ttf";
    const fontKerlaTamil = "assets/font/KarlaTamilUpright-Regular.ttf"
    const fontUrdu = "assets/font/IBMPlexSansArabic-Regular.ttf"
    const fontTelugu = "assets/font/TiroTelugu-Regular.ttf"
    const fontPanjabi = "assets/font/BalooPaaji2-VariableFont_wght.ttf"
    const fontMalayam = "assets/font/AnekMalayalam-VariableFont_wdth.ttf"
    const fontKannada = "assets/font/NotoSansKannada-VariableFont_wdth.ttf"
    const fontGujarati = "assets/font/Rasa-VariableFont_wght.ttf"
    const fontHindi = "assets/font/Mukta-Regular.ttf"
    const fontOriya = 'assets/font/BalooBhaina2-VariableFont_wght.ttf'
    const fontMarathi = 'assets/font/Hind-Regular.ttf'
    const fontBengali = 'assets/font/NotoSansBengali-VariableFont_wdth.ttf'
    // const baseDir = path.join("./uploads/");
    // const outputDir = path.join(baseDir, "pdf/");
    const PDFDocument = require('pdfkit');
  const doc = new PDFDocument({ margin: 50, size: "A4" });

  // Buffer to hold the PDF content
  const buffers = [];
  doc.on('data', (chunk) => buffers.push(chunk));
  doc.on('end', () => console.log('PDF generated successfully!'));
//fontKerlaTamil,fontUrdu,fontTelugu,fontSans,fontGurmukhi,fontMalayam
    // draw a border around the page
    function drawBorder() {
      const pageWidth = doc.page.width;
      const pageHeight = doc.page.height;
      const margin = 30;
      const lineWidth = 2;
  
      // Draw a simple border rectangle
      doc.lineWidth(lineWidth);
      doc
        .rect(margin, margin, pageWidth - 2 * margin, pageHeight - 2 * margin)
        .strokeColor("#324e98") // Set the color of the border
        .stroke();
    }
  
    // add logo to every page
    function addLogo() {
        // doc.moveDown(-5)
        if (fs.existsSync(pdfLogo)) {
          doc.image(pdfLogo, 400, 9, {
            fit: [160, 140],
            align: "right",
            valign: "bottom",
          });
        } else {
          console.error(`Logo file not found at: ${pdfLogo}`);
        }
      }
  
    // watermark function
    function addWatermark() {
      if (fs.existsSync(watermarklogo)) {
        doc.save();
        doc.rotate(-45, { origin: [doc.page.width / 2, doc.page.height / 2] });
  
        doc.image(
          watermarklogo,
          doc.page.width / 2 - 200,
          doc.page.height / 2 - 200,
          {
            fit: [450, 400],
            opacity: 0.05,
            align: "center",
            valign: "center",
          }
        );
  
        doc.restore();
      } else {
        console.error(`Logo file not found at: ${watermarklogo}`);
      }
    }
  
    // Footer with border and stylized text
    // Footer with border and stylized text
    function addFooter() {
      const pageWidth = doc.page.margins.left;
      const pageHeight = doc.page.height;
  
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#324e98")
        .text("RatnaaFin Capital Pvt Ltd", pageWidth, pageHeight - 80, {
          align: "center",
        });
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#000000")
        .text("Registered Office: 174/3, Nehru Nagar, Indore-452011 (M.P.)", {
          align: "center",
        });
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#000000")
        .text("CIN: 67120MP1994PTC008686", { align: "center" });
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#000000")
        .text("Phone: +91 7374911911 | Email: hr@fincoopers.com", {
          align: "center",
        });
  
      // Add a separator line above the footer
      doc
        .moveTo(50, doc.page.height - 100)
        .lineTo(doc.page.width - 50, doc.page.height - 100)
        .strokeColor("#324e98")
        .lineWidth(1)
        .stroke();
    }
    // if (!fs.existsSync(outputDir)) {
    //   fs.mkdirSync(outputDir, { recursive: true });
    // }
  
    const timestamp = Date.now();
    // const candidateName = 
    // (`${candidateDetails.name}`); // Capitalize name
    // const pdfFilename = `LdAndPgDeed.pdf`;
    // const pdfPath = path.join(outputDir, pdfFilename);
  
    // const doc = new PDFDocument({ margin: 50, size: "A4" });
    // const stream = fs.createWriteStream(pdfPath);
  
    // doc.pipe(stream);
  
    // Add logo and border to the first page
    // addLogo();
    //   addWatermark();
    // //drawBorder();
    // Title styling for OFFER LETTER in uppercase and underlined
    doc.moveDown(2);
    const yPosition = doc.y; // Get the current y position

    doc.moveDown(2); 
    doc
    .fontSize(10)
    .font(fontBold)
    .text("FACILITY AGREEMENT", { align: "center" });
  doc.moveDown(1);

  
doc.fontSize(9).font('Helvetica-Bold').text(`THIS FACILITY AGREEMENT (“Agreement”)`, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica').text(` is made at the place and on the date as set out in the Schedule.`)
doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("BETWEEN", { align: "center" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`RATNAAFIN CAPITAL PRIVATE LIMITED,`, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica').text(`is a Non-Banking Financial Company incorporated under the provisions of the Companies Act, 2013, having its registered office at 402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place Near Hyatt Hotel, New Delhi-110066, Delhi, India and corporate office at 2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India-380060 acting in these presents through its branch office located in the city/ town as mentioned in`,{
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica-Bold').text(` the Schedule("RCPL" `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`or the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`"Lender", `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`which expression shall, unless repugnant to the context, include its successors and assigns) of the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`FIRST PART`)

doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("AND", { align: "center" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`The `, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica-Bold').text(`Borrower(s) or Co-Borrower(s), `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`details where of are described and set out in `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`the Schedule, `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`of the `, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica-Bold').text(`OTHER PART. `)

doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`The term `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`“Borrower(s)”, `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`which expression unless repugnant to the context or meaning thereof be deemed to include (i) where the Borrower(s) is/are an individual, his/her heirs, executors, and administrators; (ii) where the Borrower(s) is/are a sole proprietorship concern, the person whose name appears as sole proprietor and shall include his/her heirs, executors, and administrators; (iii)where the Borrower(s) is/are a partnership firm under Indian Partnership Act, 1932, any and eachof the partner, and their survivor(s) or the partner(s) from time to time and their respective heirs, legal representatives, executors and administrators; (iv) where the Borrower(s) is a Hindu Undivided Family (HUF), the Karta and any or each of the adult member of the HUF and their survivor(s) and his /her/ their respective heirs, executors and administrators.(v) where the Borrower(s) is/are a Company or Society or Limited Liability Partnership(LLP), its successors andpermitted assigns; (vi) where the Borrower(s) is/are an unincorporated body, all members thereofand their respective successors; (vii) where the Borrower(s) is /are a Trust, the trustee/s for timebeing thereof and the successors of the trust / trustees). `)
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower(s) and the Co-Borrower(s) (if any) are here in after referred to as the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`“Borrower”. `)

doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`Lender and Borrower are hereinafter collectively referred to as `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`"Parties" `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`and individually as `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(` "Party".`)

doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("W H E R E A S", { align: "left", underline:"true" });
doc.moveDown(1);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(
    `A. The Borrower(s) has approached the Lender for availing a loan/advance of the amount as more particularly mentioned in Schedule I for the purpose as specified in Schedule I here to. \n\n` +
    `B. The Borrower(s) has proposed to create security over the Immovable Properties (hereinafter defined) by executing the Security Documents (hereinafter defined) as the principal and primary instrument for availing of the Loan. \n\n` +
    `C. At the request of the Borrower(s) and relying upon the representations, warranties, undertakings and covenants made by the Borrower(s), the Lender has agreed to advance/grant such loan for the aforesaid purpose, upon the terms and conditions set forth herein and other loan and security documents.`
  );
doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("NOW IT IS AGREED BY AND BETWEEN THE PARTIES HERETO AS FOLLOWS: ", { align: "left" });
doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("1. DFINITION AND INTERPRETATION ", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`In this Agreement, unless the context otherwise requires: `)
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. “Applicable Laws” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`means any act, statute, law, regulation, enactment, ordinance, treaty, rule, judgment, order, award, decree, bye-laws, rule of common law, Clearances, directions, directives, guidelines policy, licenses, requirement or any governmental restriction or condition including any similar form of decision of, or determination, application or execution by or any interpretation or pronouncement having the force of law of, any government authority having jurisdiction over the matter in question. `)

//---------------------------------------------new page -------------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica-Bold').text(`b. “CIBIL” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean Credit Information Bureau (India) Limited `)

doc.fontSize(9).font('Helvetica-Bold').text(`c. “Due Date” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean the date(s) on which any amount in respect of the Outstanding Obligations falls due as specified in this Agreement.`)

doc.fontSize(9).font('Helvetica-Bold').text(`d. “Event of Default” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean any event or circumstance specified as such in Clause13.a`)

doc.fontSize(9).font('Helvetica-Bold').text(`e. “Installment(s)” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall have the meaning ascribed to it in Clause 6.a`)

doc.fontSize(9).font('Helvetica-Bold').text(`f. “Immovable Properties” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean residential/commercial immovable properties as more particularly described in the Schedule III hereto, on the security of which the Lender has agreed to advance the Loan.`,{lineGap: 1})

doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`Without prejudice to the generality of the above “Immovable Properties” shall also include:\n\n i. In the case of part of a building, the entire built-up area (and any additions there to), the proportionate share in the common areas of the building and the proportionate undivided share in the land on which the said building is situated or is being built / will be built or \n\n ii. in the case of a flat, the entire built-up area (and any additions thereto), the proportionate share in the common areas of the building in which such flat is / will be situated and the proportionate undivided share in the land on which the said building is situated or is being built / will be built; or \n\n iii. In the case of an independent structure, the structure and entire plot of land on which the structure is situated or is being built / will be built or\n\n iv. In the case of an individual house, the house and entire plot of land on which the house will be built.`,{lineGap: 1})
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`g. “Loan” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall have the meaning ascribed to in Clause 0`)

doc.fontSize(9).font('Helvetica-Bold').text(`h. “Material Terms and Conditions” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean all terms and conditions mentioned in the sanction letter/s/ Transaction Documents.`)

doc.fontSize(9).font('Helvetica-Bold').text(`i. “Outstanding dues / Obligations” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean at any time the entire outstanding amount due in respect of the Loan, including but not limited to the present and future obligations and liabilities of the Borrower to pay/repay the principal amount of the Loan, Interest, Penal Charges, prepayment charges, other fees, liquidated damages, costs, charges and expenses(including any fees payable to the Lender) and other amounts, taxes, payable in respect of under the Transaction Documents.`)

doc.fontSize(9).font('Helvetica-Bold').text(`j. “Penal Charges” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean such charges as specified in the Schedule to this Agreement applicable in the event of default in repayment of loan instalments or non-compliance of agreed terms and conditions mentioned in the Sanction Letter.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`k. “Repayment Schedule” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall have the meaning ascribed to it in Clause 6.a`)

doc.fontSize(9).font('Helvetica-Bold').text(`l. “RBI” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(` shall mean the Reserve Bank of India`)

doc.fontSize(9).font('Helvetica-Bold').text(`m. “Security Documents” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean all documents, undertakings, agreements, deeds, declarations, undertakings, indemnities, affidavits, writings, certificates, no-objections, letters, filings, forms, towards or in relation to creation, perfection, filing, registering, etc. of Security Interest and/or issue of a guarantee, as part of the Security, and whether executed bythe Borrower, Security Providers, Lender or the Borrower or any third party, as per the requirement of the Lender and as may be amended, confirmed or restated from time to time, as per the requirement of the Lender.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`n. “Security Provider” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean any person whose property or assets /any part thereofare/shall be charged and/or who creates/is required to create any Security Interest in favour of the Lender, to secure the Outstanding Obligation or any part thereof.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`o. “Transaction Documents” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(` shall mean this Agreement, Security Documents and include all writings and other documents executed or entered into or to be executed or entered into, by the Borrower or any other Person, in relation to or pertaining to the Loan and each such transaction document as amended from time to time.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`p. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`a reference to the singular includes the plural (and vice versa)`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`q. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`the headings in this Agreement are inserted for convenience of reference only and are to beignored in construing and interpreting this Agreement.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`r. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`reference to the words “include” or “including” shall be construed without limitation.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`s. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`reference to a gender shall include references to the female and male gender`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`t. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`all approvals, permissions, consents or acceptance required from Lender for any matter shall require the “prior”, “written” approval, permission, consent or acceptance of Lender and`,{lineGap: 1})


//---------------------------------- new page ---------------------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica-Bold').text(`u. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`in the event of any disagreement or dispute between Lender and the Borrower/s regarding themateriality of any matter including of any event, occurrence, circumstance, change, fact, information, document, authorization, proceeding, act, omission, claims, breach, default orotherwise, the opinion of Lender as to the materiality of any of the foregoing shall be final and binding on the Borrowers`,{lineGap: 1})

doc.moveDown(1);
doc
.fontSize(10)
.font(fontBold)
.text("2. LOAN FACILITY", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Based on the Borrower's request, representations, warranties, covenants and under takings as contained herein, the Lender hereby agrees to grant to the Borrower and the Borrower hereby agrees to avail from the Lender, a secured loan facility in the aggregate amount asmentioned in the Schedule I here to (“Loan”) on the terms and conditions containedherein in this Agreement.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The relationship between the Lender and the Borrower shall commence from the date ofthis Agreement and subsist until all the Outstanding Obligations payable by the Borrowerto the Lender under this Agreement and in all other Transaction Documents shall have been fully paid to and received by the Lender.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`It is hereby agreed between the Parties that the Lender may, at its sole and absolute discretion, cancel and/or withdraw the undrawn limit of the Loan as sanctioned by the Lender. The said withdrawal shall not absolve the Borrower of any of its liability to repay the Outstanding Obligations.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`d. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The term or tenor of the Loan shall be as set out in the Schedule I hereto.`,{lineGap: 1})

doc.moveDown(1);
doc
.fontSize(10)
.font(fontBold)
.text("3. DISBURSEMENT", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Upon the request of the Borrower, the Lender shall, at its sole discretion, disbursethe Loan in lumpsum or suitable installments having regard to the need of the Borrower. The decision of the Lender in this regard, shall be final and binding onthe Borrower.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The amount of the Loan will be disbursed by the Lender subject to compliance by the Borrower with the terms and conditions provided in this Agreement. The Loan amount shall be disbursed to the Borrower net of all initial payments towards documentation charges, loan processing charges, premium for insurance (if applicable) and such other charges as specified in the Schedule I here to.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Interest on the Loan will begin to accrue in favour of the Lender as and from the date of disbursement of the Loan.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`d. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Not with standing anything contained in this Agreement, the Lender may terminatethe right of the Borrower to disbursements under the Loan, if the request for suchdisbursement shall not have been made within 30 days from the date of this Agreement or by such extended date as may be agreed upon by the Lender in writing.`,{lineGap: 1})

doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`4. INTEREST RATES AND PENAL CHARGES `)
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall be liable to pay interest on the Loan from time to time at the rateas specified in the Schedule I here to (“Interest”). The Lender in its sole discretion would be entitled to modify and vary the said rate of Interest from time to time a sper its policy, market conditions and/or applicable laws including on account of changes in interest rates made by the RBI from time to time. In the event rate of Interest is modified, then in such event interest would be payable by the Borrower at the revised rate of interest.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Interest will be calculated on the basis of rate of Interest mentioned in the Schedule I hereto and is rounded off to the next rupee calculated on monthly rests and any other charges shall be computed on the basis of a year of three hundred and sixty-Five (365) days.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`In the event of the Borrower committing a default or delay in the repayment of any Instalment on the Due Date, in full or in part, the borrower shall pay penal chargesat the rate specified in the Schedule I hereto on the overdue amount from the date ofdefault till the date of payment or the Borrower committing any breach or default ofagreed terms and conditions mentioned in the Sanction Letter or under any otherTransaction Documents, the Borrower shall, in respect of the OutstandingObligations, pay the Penal charges as the rate specified in the Schedule I hereto, onthe outstanding loan amount from the date of default till such time that the breach iscured. The Borrower expressly agrees that the rate of such Penal charge is a fairestimate of the loss likely to be suffered by the Lender by reason of such delay/ default on the part of the Borrower. The payment of Penal charges shall not absolvethe Borrower of the other obligations including to make timely payments and/or inrespect of such default or affect any of the other rights of the Lender including inrespect of the default. It is expressly specified that the Lender expressly reserves all the other rights that may accrue to it on any default by the Borrower.`,{lineGap: 1})

//-------------------------------------------- new page --------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc
.fontSize(10)
.font(fontBold)
.text("5. FEES, CHARGES, COSTS AND CLAIMS", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower undertakes to pay forthwith on demand to the Lender and in no caselater than 30 (Thirty) calendar days from the date on which demand being made all costs and expenses including cost and expenses for investigation of title to any immovable property offered/proposed to be offered as security and for the preparation, execution, preservation, performance, enforcement and realization ofthe Outstanding Obligations, Security Documents and other instruments creating and/or evidencing the creation of any security for the Loan as also any other instruments required in connection with the Loan.`,{lineGap: 1})
   
doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall bear the service charges, processing fee, stamp duty, cheque bouncing charges, cheque swapping charges, loan cancellation/re-booking charges, and any other fees as more particularly detailed in the Schedule I hereto in relationto the Loan`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall during the tenure of the Loan bear all taxes (including interest tax and GST) as may be applicable or as may be levied by any government body orauthority in relation to the Loan.`,{lineGap: 1})

doc
.fontSize(10)
.font(fontBold)
.text("6. REPAYMENT", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a.`,{continued: true,lineGap: 1})

doc.fontSize(9).font('Helvetica').text(`The Borrower shall repay the Loan together with interest, penal charges and other charges thereo n in such number of installments, of such amounts, and on such Due Dates `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`(“Installments”),`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`as mentioned in the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`Schedule II`,{continued: true,lineGap: 1})

doc.fontSize(9).font('Helvetica').text(` here to `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(` (“Repayment Schedule”).`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Repayment Schedule is without prejudice to the right of the Lender to recompute the interest in case of variation and on such re-computation, payment shall be made by the Borrower in accordance with such varied Repayment Schedule. Not with standing anything to the contrary contained in this Agreement, the Loan shall be repayable on demand and the Lender shall have the right to be paid forth with on demand the entire Outstanding Obligations in respect of the Loan. The Borrower hereby agree that the time is the essence of the contract.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If such Due Date falls on a day which is not a business day at the place where the payment is to be made, the Borrower shall pay the Instalment on the business day preceding the said Due Date for such repayment. All payments to be made by the Borrower to the Lender shall be made free and clear of and without any deductionfor on account of any taxes. If the Borrower is required to make such deduction, then, in such case, the sum payable to the Lender shall be increased to the extent necessary to ensure that, after making such deduction, the Lender receives and retains (without any liability for such deduction) a sum equal to the sum which it would have received had such deduction not been made or required to be made.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Lender shall have the right at any time or from time to time to review and reschedule the Repayment Schedule in such manner and to such an extent as the Lender may, in its sole discretion, decide and the repayment will there upon be made as per the revised Repayment Schedule.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower agrees declares and confirms that not with standing any of the provisions of any applicable law or any of the terms and conditions contained in the Agreement and or any Transaction Documents, any payment(s) shall unless otherwise agreed to by the Lender in writing be appropriated in the manner following: \n\n i. Firstly, towards costs, charges, expenses and other monies, due and payableto the Lender. \n\n ii. Secondly, towards the Interest due and payable and / or becoming due andpayable to the Lender.\n\n iii. Thirdly, towards repayment of the amount of the principal sums due andpayable or becoming due and payable to Lender and\n\n iv. Lastly, towards any other amount due and payable to the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Provided however that the Lender reserves the right to appropriate the moneys received in any other manner as it may deem appropriate at its sole discretion.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`e.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall repay / pay the Installments and other monies to the Lenderthrough any one of the following: (i) by postdated cheques. (ii) by Electronic Version 1.3 6of66Clearing System (Debit Clearing) as notified by RBI (ECS), (iii) by directly payingamounts by cheque / draft issued in the name of “RATNAAFIN CAPITAL PRIVATE LIMITED”. (iv) NACH or (v) by any other method provided the same isapproved by the Lender. The method for payment shall be as selected by the Borrower in Schedule I.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`f.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall not be entitled to cancel or issue stop- payment instructionswith respect to the postdated cheques / ECS / NACH mandates for so long as anypart of the Outstanding Obligations is pending.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower hereby unconditionally and irrevocably authorizes the Lender, acting through its officers, authorized agents to fill necessary details in the cheque/s delivered to the Lender for an amount not exceeding the maximum amount due by the Borrower to the Lender under the terms and conditions of this Agreement without notice to the Borrower in his behalf. The Borrower hereby confirm and agree that the Lender is entitled in its sole discretion to use one or more such cheques or ECS or NACH for the regularization/settlement of repayment of theLoan.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(``,{continued: true,lineGap: 1})



//------------------------------------------------------------new page 5 ------------------------------------------------------
doc.addPage();
// addLogo();
doc.moveDown();

doc.fontSize(9).font('Helvetica-Bold').text(`h.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall at all times maintain sufficient funds in its bank account to ensure that the ECS, post-dated cheques, or NACH, if any, issued by the Borrower are not dishonored and the Instalments are received / realized by the Lender on or before the applicable Due Dates.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Not with standing the mode of repayment / payment, the Borrower shall continue toremain at all times liable and responsible for ensuring the payment / repayment ofall Instalments and all other monies in respect of the Loan to the Lender on or before the relevant Due Dates without any further notice / intimation being given by the Lender and all such amounts payable by the Borrower to the Lender shall be paid without any deductions whatsoever so as to enable the Lender to fully realize the amounts due on or before the respective Due Date(s). Credit for payments by any method will be given only on realization of payments. The acceptance by the Lender of any payment which is less than the full Instalment or other amounts due and owing at such time shall not constitute a waiver of the Lender’s right to receive payment in full at such time or at any subsequent time or a waiver of any other rights whatsoever of the Lender under this Agreement.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`j.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall obtain the Lender’s prior written consent for changes in authorised signatory who has signed the post dated cheques /ECS/NACH which have been submitted to the Lender at the time of disbursal of this Loan. The Lender may permit the Borrower to swap / exchange the post dated cheques/ECS/NACH issued to the Lender with alternate post dated cheques/ ECS/NACH drawn on another bank(as approved by the Lender). In such an event, the Borrower shall promptly replace the post dated cheques and/ or the ECS or NACH mandates, agreements and/or other documents executed for payment of the Instalments and issue fresh post dated cheques, ECS or NACH mandates in lieu thereof to the satisfaction of the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`k.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Without prejudice to any other rights or remedies the Lender may have under thisAgreement and/or under the applicable law, the Borrower shall be liable to pay a flat charge as stated in the Schedule I hereto in case of dishonour of the cheques or dishonour of ECS or NACH mandates or any other recognized mode by Lender onthe first presentation. In case of dishonour on the second presentation, a furthercharge, as stated in the Schedule I, would be levied in respect of such dishonoured cheques. The levy of charge upon dishonour is without prejudice to the other rights which the Lender has under this Agreement or under law or equity.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`l.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower may prepay the entire Outstanding Obligations at any time by giving one-month prior notice in writing to the Lender. In the event the Borrower exercises its right to prepay, the Lender will be entitled to charge prepayment charges at therate as set out in the Schedule I here to. No amount that has been prepaid shall be reborrowed by the Borrower.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`m.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`In case of two or more Borrowers, the liability of the co-borrower(s) to repay theLoan together with interest, etc, and to observe the terms and conditions of thisAgreement and any other Transaction Documents shall be is joint and several andconsequently the Lender shall have a sole discretion to proceed against all or any ofthe co-borrower(s) to recover the Loan and other charges payable by under this Agreement.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(10).font('Helvetica-Bold').text(`7. LOCK IN PERIOD`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`7.1.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrowers shall not repay/ prepay/ foreclose any portion of the outstanding loan amount either in part or in full during the Lock-in period (“Lock-in Period”) as described in Schedule – I of this agreement.\n `,{lineGap: 1})   

doc.fontSize(9).font('Helvetica-Bold').text(`7.2.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrowers may exercise the option of pre-payment/repayment/foreclosure post Lockin-period, where applicable, subject to the Borrowers and/or the guarantor(s) complying with the following conditions and at the absolute discretion of the Lender. After the expiry of Lock-in Period as provided in Schedule - I here under, the Borrowers shall givethe Lender a notice of 45 days intimating his desire to repay/ prepay/ foreclose the loan and the Lender may accept repayment/ prepayment/ foreclosure together with prepayment charges/ fore closure charges as specified in Schedule -I, hereto and such charges is payable by the Borrower together with applicable taxes.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`7.3.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica')
   .text(`The amount repaid/prepaid shall first:\n\n`, { lineGap: 1 })
   .text(
      `7.3.1. Be used to credit the penal charges, charges, legal expenses if any, Arrears of installments, interest due up to date for the current month, The current month EMI, foreclosure / pre-payment charges and other expenses and taxes due as mentioned in this agreement.\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `7.3.2. If any amount remains after meeting the charges, then it shall be adjusted towards the principal amount. If the entire amount due for prepayment is not remitted then the amount so received by the Lender would be treated as an advance payment of future EMI and will be adjusted to EMI month on month, as and when the EMI falls due for payment.\n\n`, 
      { lineGap: 1, indent: 20 }
   )
   .text(
    `7.3.3. The Borrowers here by agrees that the Lender is not obliged to reverse the interest that may accrue on account of advance payment. The amount due under fore closure should be paid in full by the Borrower to the Lender to qualify the account foreclosure.\n\n`, 
    { lineGap: 1, indent: 20 }
 );


//------------------------------------------------new page 5 -------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica-Bold').text(`7.4.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Not with standing anything contained the Borrowers shall remit the monthly instalments without any default in terms of the Agreement. The Option to accept repayment/ prepayment or decline the request for repayment/prepayment during the Lock-in period is at the sole discretion of the Lender.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`7.5.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If the loan is being foreclosed by the Borrowers by obtaining financial assistance from any other financial institution/ Bank/ NBFC/ Third party, the Borrower shall be charged additional prepayment/foreclosure charges at the rate specified in Schedule - I herein, which is payable together with applicable Goods and Service Tax (GST) by the Borrower in addition to the applicable foreclosure charges. Furthermore, the Borrower undertakesand agrees to execute such documents as the company may require and abide by such amended/altered repayment schedule as specified by the company.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`7.6.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If the Borrowers requests for repayment/ prepayment/ foreclosure during the Lock-inperiod, then the Lender is at liberty to refuse the repayment/prepayment or in the alternative lay down conditions for acceptance at its discretion which the Borrower is at liberty to accept or otherwise.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(10).font('Helvetica-Bold').text(`8. CONDITIONS PRECEDENT TO DISBURSEMENT OF LOAN`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica').text(`The obligation of the Lender to make the disbursement of the Loan shall be subject to the condition that:\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower meets the Lender’s requirement of creditworthiness. The Lender shall be entitled to make or cause to be made inquiries of such nature as the Lender may deem fit for the creditworthiness of the Borrower. The Lender shall be further entitled to call for such credentials from the Borrower as may be required to prove the creditworthiness of the Borrower.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No Events of Default as stated in Clause 13.a shall have happened and be continuing.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower or Security Provider (as the case may be) shall have absolute, clear and marketable title to the said Immovable Property and the said Immovable Property is absolutely unencumbered and free from prior charges/lien whatsoever.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No extraordinary circumstances shall have occurred which shall make it improbable for the purpose for which Loan is provided to be carried out and/or for the Borrower to fulfill its obligations under this Agreement;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower or the security provider shall have created and perfected security andor guarantees for the repayment of the Loan with interest in favour of the Lender asmay be required by the Lender and execute all necessary documents as may be stipulated by the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall have satisfied the Lender to the effect that there is no action, suit, proceedings or investigation pending or to the knowledge of the Borrower or is threatened by or against the Borrower, before any court of law or tribunal or anyother competent Government Authority which might have a effect on the financial and other affairs of the Borrower or which might put into question the validity or performance of this Agreement and/or other Transaction Documents executed by the Borrower in favour of the Lender`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Such other conditions precedents as may be detailed in the sanction letter.`,{lineGap: 1})

doc.moveDown(1)
doc.fontSize(10).font('Helvetica-Bold').text(`9. SECURITY`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`In consideration of Lender having granted/agreed to grant to the Borrower the Loan, the Borrower shall create and/or cause to create such security interest in such form and manner and of such nature as may be required by the Lender and also as provided in the Schedule here to to secure the Borrower's Outstanding Obligations`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`(“Security Interest”).`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower agrees with, and undertakes that the Lender, shall have a first and exclusive charge over the said Immovable Property as more particularly describe inthe Schedule III hereto and that the Borrower/Security Provider shall not create anyother encumbrance, charge or security interest in the Immovable Properties in favour of any other Person or body, except with the prior written consent of the Lender.\n\n `,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica')
   .text(`In addition to the above, the Borrower do the following:\n`, { lineGap: 1 })
   .text(
      `i. The Borrower shall execute money bond or a demand promissory note and a letter of continuity in favour of the Lender for the Loan;\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `ii. The Borrower shall or cause the Security Provider to execute any such agreement/s, document/s, undertaking/s, declaration/s that may be required now or here after at any time during the pendency of this Loan/or any other loan/sgranted by the Lender hereafter\n\n`, 
      { lineGap: 1, indent: 20 }
   )


//--------------------------------------------------new page 7 ----------------------------------

doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica')
   .text(
      `iii. The Borrower shall ensure that the deed of mortgage to be executed by the Borrower/Security Provider for creation of the mortgage over the immovable  property, be duly registered with the relevant Sub-Registrar of Assurances. Further, in case of equitable mortgage, the Borrower/Security Provider shall ensure that an intimation/notice is provided to the Sub-Registrar of Assurances informing him/her that a charge by way of equitable mortgage has been createdover the said Immovable Property, within the timelines and in the manner as provided for in the applicable law.\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `iv. The Borrower shall or cause the Security Provider to file all forms and make all filings as may be required under Applicable Law including, without limitation, the filing of Form CHG-1 under the Companies Act, 2013 with the applicable Registrar of Companies (if applicable), in respect of creation of charge as above with in 30 (Thirty) days from the date of creation of security.\n\n`, 
      { lineGap: 1, indent: 20 }
   )
   .text(
    `v. The Borrower shall or ensure that the Security Provider shall provide all cooperation and assistance that the Lender may require in relation to any filings required to be made with the Central Registry of Securitisation Asset Reconstruction and Security Interest and shall bear all cost, charges and expenses which may be incurred by the Lender in relation to such filings.\n\n`, 
    { lineGap: 1, indent: 20 }
 )
 doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall submit such number of advance Instalments as mentioned in the Schedule as a security deposit with the Lender towards the security for the repayment of the Outstanding Obligations`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`(“Security Deposit”).`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Security Deposit shall be returned/ refunded by the Lender to the Borrower only after there payment of entire Outstanding Obligations. The Security Deposit shall carry the interest at the rate specified in the Schedule hereto from the date of making such Security Deposit till the last Repayment and after which the Security Deposit shall cease to carry interest thereon. The Borrower shall not be entitled to withdraw or seek refund of the Security Deposit or any part there of till any amount payable to the Lender is due and pending. In the Event of Default as mentioned in this Agreement, the Lender shall be entitled to for feit the Security Deposit and interest there on andt he same shall be utilized towards the repayment of the Outstanding Obligations. Any amount of the Outstanding Obligations remaining unpaid to the Lender after such adjustment shall be paid by the Borrower immediately on such demand by the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall furnish such additional securities including additional guarantee(s), as the Lender may deem fit, in its sole discretion. In such an event the Borrower shall provide such additional security and in this regard execute such agreements, undertakings, documents, power of attorney/s that may be required by the Lender, failing with the Loan may be recalled/Repayment of the Loan may be accelerated by the Lender with immediate effect.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The security interest created in favour of the Lender shall continue in full force till all the Outstanding Obligation have been fully paid or discharged by the Borrower(s) to the Lender and until the Lender issues a ‘No Objection Certificate’ in this regard. The Security Interest of the Lender and the obligation of the Borrower shall not be affected, impaired or discharged by the winding up, or insolvency or by merger, amalgamation, reconstruction, or takeover of the management, dissolution or appropriation of the business or assets of the Borrower /Security Provider (as thecase may be).`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If at any time during the subsistence of the Agreement, the Lender is of the opinion that any of the security provided by the Borrower has become inadequate to cover the balance of the Outstanding Obligations, then the Borrower shall provide and furnish such additional security including hypothecation and/or mortgage of or charge over such of the Borrower’s movable or immovable properties as may beacceptable to the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`h.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall, until the full repayment of the Outstanding Obligations, fully insure, and keep the Immovable Property and all other properties over which the Security Interest are created in favour of the Lender so insured against all comprehensive risks and assign the benefits of such policy/ies in with the name of the Lender appropriately endorsed and recorded as 'Assignee' in such insurance policy/ies, for a value as required by the Lender and produce evidence there of to the Lender from time to time and wherever called upon to do so.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall, until the full repayment of the Outstanding Obligations ensuresthat the above-mentioned insurance policy/ies are valid, subsisting and operative and shall make timely payments of the premium. The Lender reserves the right to pay the pay the premium on behalf of the Borrower and reimburse the same from the Borrower.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`j.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Lender shall have the right to receive and adjust any payment that it may receive in connection with any insurance policy / policies against the Loan and alter the repayment schedule as set out in Schedule II here under in any manner as it may deem fit not with standing anything to the contrary contained in this Agreement or any other document.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`k.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower here by irrevocably authorizes the Lender to act on the Borrower’s behalf, at the Borrower’s sole risks and costs and to take all necessary steps, actions and proceedings as the Lender deems fit to safeguard its interests: (i) to adjust, settle, compromise or refer to arbitration any dispute arising under or in connection withany insurance and such adjustment, settlement, compromise, and any award made on such arbitration shall be valid and binding on the Borrower, and (ii) to receive all monies payable under any such insurance or under any claim made there under and to give a valid receipt there for and apply such proceeds in accordance with the terms here of or in such other manner as deemed fit by the Lender.`,{lineGap: 1})


//--------------------------------------------------new page 8 ----------------------------------
doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica-Bold').text(`l.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall not be entitled to raise any claim against the Lender, in case the Lender chooses not to take any action in relation to the insurance claims or proceedings and/or on the grounds that a larger sum or amount of claims / settlement might or ought to have been received or be entitled to dispute the liability of the Borrower for the balance amount of Outstanding Obligations remaining due after such adjustment.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`m.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall permit the Lender, its employee, representative or its agents at all times, to have free access of the Immovable Property to inspect, view or examine the state and condition of the Immovable Property.`,{lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`10. BORROWER’S REPRESENTATIONS, WARRANTIES AND COVENANTS`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower here by represents, warrants and undertakers to the Lender that:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All the particulars and details provided by the Borrower to the Lender in this or any other Transaction Documents submitted are true correct, complete and up to date in all respect and no material details have been concealed which would have an effect on the decision of grant of the Loan`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower has full power, capacity, and authority to execute, deliver and perform the Transaction Documents and have taken all necessary action (corporate, statutory or otherwise) for the authorization, execution, delivery, and performance of this Agreement and Transaction Documents.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`It has not taken any corporate action nor has any steps been taken or legal proceeding been initiated or threatened against the Borrower for its winding up, insolvency, dissolution, administration, reorganization or for appointment of receiver, administrator of the Borrower or all or any of its assets or undertakings`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`As of the date of this Agreement, there are no litigation, proceedings or disputes pending or threatened against or affecting the Borrower which could have as ubstantially adverse effect on the Borrower, its business or operations, its assets orits ability to perform its obligations under this Agreement and other Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`the Borrower or the Security Provider (as the case may be) has absolute clear and marketable title to the Immovable Property and that the Immovable Property is absolutely unencumbered and free from any liability whatsoever`,{continued: false,lineGap: 1})
// doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
// doc.fontSize(9).font('Helvetica').text(`The Borrower or the Security Provider (as the case may be) shall continue to remainin occupation/possession of the Immovable Property and shall not part with thepossession thereof either partly or wholly until the entire Loan with interest has beenrepaid to the Lender.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower or the Security Provider (as the case may be) shall continue to remainin occupation/possession of the Immovable Property and shall not part with the possession thereof either partly or wholly until the entire Loan with interest has been repaid to the Lender.`,{lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`11. AFFIRMATIVE COVENANTS`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower covenants and undertakes that at so long as the amounts due under this Agreement shall remain outstanding and until the full and final payment of all the Outstanding Obligations, it shall, unless the Lender waives compliance in writing:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Utilize the Loan solely for the purpose stated by it to the Lender`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Maintain the Immovable Property in good order and condition and all necessary repairs, additions and improvements there to will be made during the currency of the Loan and that the Borrower will ensure that the value of the Property does not diminish`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. The Borrower shall notify the Lender of any change in the Borrower's employment, business or profession. In the event the Borrower is self-employed, the Borrower hereby undertakes to keep the Lender informed about the financials of his business on a regular basis as may be notified to him by the Lender. In the event the Borrower is a company, partnership or sole proprietary, the Borrower shall provide the Lender such information and/or documents as may be required by the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Comply with all the terms and conditions of holding the Immovable Property and all the rules, regulations, bye-laws, etc., of the concerned co-operative society,association, company or any other competent government authority and pay maintenance charges, municipal tax and other charges in relation to the Immovable Property as also any other dues, etc., as may be payable in respect of the Immovable Property and/or of the use thereo.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Promptly inform the Lender of any loss or damage to Property due to any act of God or damage or other risks against which the Property may not have been insured.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Regularly and punctually repay and discharge all the Outstanding Obligations in the manner set out herein. Not with standing the Repayment Schedule here under, the Borrower agrees that the Lender shall have the right to be paid on demand the entire Outstanding Obligations.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Maintain its corporate existence and obtain, comply with the terms of and do all that is necessary to maintain in full force and effect all authorisation, approvals, licenses and consents required to enable it to law fully carry on its business`,{lineGap: 1})


//-----------------------------------------------------new page 9 ------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica-Bold').text(`h.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Obtain, comply with the terms of and do all that is necessary to maintain in full force and effect all authorization, approvals, licenses and consents required to enable it to enter into and perform its obligation under this Agreement and to ensurelegality validity, enforceability or admissibility in evidence of any of the Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Inform the Lender of any material litigation, arbitration or other proceedings which affect the Borrower and/or the Immovable Property, forthwith upon such proceedings being instituted or threatened by any persons making a claim for money against the Borrower and/or the Immovable Property;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`j.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Promptly inform the Lender of any occurrence of which it becomes aware which might adversely affect the Borrower or affect its ability to perform its obligations under any of the Transaction Documents;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`k.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Promptly inform the Lender of the occurrence of any Event of Default and of the steps being taken to remedy the same and will from time to time, if so requested by the Lender, confirm to the Lender in writing that save as otherwise stated in such confirmation, no other Event of Default has occurred and is continuing`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`l.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`appraise the Lender of the occurrence or likely occurrence of any event which is likely to affect the capacity of the Borrower(s) to repay the Outstanding Obligations or likely to affect the security for the said Loan or the obligations of the Borrower to FICCL in respect of the said Loan`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`m.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. forth with inform the Lender on the occurrence or likely occurrence of, inter alia, any of the following events, namely, the occurrence of any event which is likely to affect the Borrower(s) business, steps taken by authorities for recovery of statutory,dues, etc.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`n.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`pay regularly all taxes, assessment dues, duties and impositions as may, from time to time, be payable to any Government body or authority`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`o.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`pay and reimburse to the Lender all governmental charges, taxes or penalties imposed on or in pursuance of this Agreement or on any instruments issued here under;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`p.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`bear all costs of making good any deficit in stamp duty on the documents executedby the Borrower or any other person in relation to the Loan and/or security createdby the Borrower in favour of the Lender; and`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`q.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`perform and execute, on request of the Lender, such acts and deeds, as may be necessary to carry out the intent of this Agreement.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`12. NEGATIVE COVENANTS`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica').text(`The Borrower covenants and undertakes that at so long as the amounts due under this Agreement shall remain outstanding and until the full and final payment of all the Outstanding Obligations, it shall not, unless previously approved by the Lender in writing:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Make any changes in its constitution, business management, ownership or control and shall not alter its constitutional / incorporation documents (as applicable)`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Undertake or permit any merger, de-merger, consolidation, reorganization, scheme of arrangement or compromise with its creditors or shareholders or effect any scheme of amalgamation or reconstruction`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Create any encumbrance or lien of any nature whatsoever over the ImmovableProperty;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Sell, transfer, lease, give on leave and license basis, alienate, or otherwise part with the possession of the Immovable Property or any part thereof`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Enter into any agreement or arrangement with any Person, institution or local or Government body for the use, occupation or disposal of the Immovable Property or any part there of.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Stand surety for anybody or guarantee the repayment of any loan or the purchase price of any asset`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Execute any document, such as power of attorney, or any other similar or other deed, in favour of any Person to deal with the Immovable Property in any manner`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`h.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Effect any oral or other partition of the immoveable Property or enter into any family arrangement in this regard.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Borrow from any source or charge any property until the Borrower's Outstanding Obligations are paid in full.`,{continued: false,lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`13. EVENT OF DEFAULT`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(` The occurrence of any one or more of the following events or events similar there to, shall each constitute an event of default`,{lineGap: 1,continued: true})
doc.fontSize(9).
font('Helvetica-Bold')
   .text(`(“Event of Default”):\n`, { lineGap: 1 });
doc.fontSize(9).
font('Helvetica')
   .text(
      `i. Default or delay in payment/repayment of any Instalment or any part there of, whether for principal or interest or otherwise due and payable from the Borrower under this Agreement, within the time stipulated here under and/or other Transaction Documents\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )


//---------------------------------------------- new page 10 ---------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica')
   .text(
      `ii. Any breach or omission or default (other than a payment default) in performance of any covenant, condition, obligations or undertaking under this Agreement or the Transaction Documents by the Borrower, guarantor or any other person (as the case may be) and such default has continued for a period of 7 (seven) days after the notice in writing there of has been given to the Borrower or as the case may be to any other person by the Lender(except where the Lender is of the opinion that such default is incapable of remedy, in which case, no notice shall be required);\n\n`, 
      { lineGap: 1, indent: 20 }
   )

doc.fontSize(9).font('Helvetica')
   .text(`iii. Any representation or warranty or covenant on the part of the Borrower made or deemed to be made in or pursuant to the Transaction Documents is or proves to be incorrect, incomplete or misleading in any material respect;\n\n`, { lineGap: 1,indent: 20  })
   .text(
      `iv. Failure by the Borrower to keep the immovable property full and comprehensively insured from time to time and punctually pay the insurance premium on such policies as and when due;\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `v. Failure by the Borrower to provide the insurance policies of the Immovable Property with endorsement of hypothecation in favour of the Lender as per Clause 9.h of the Agreement;\n\n`, 
      { lineGap: 1, indent: 20 }
   )
   .text(
    `vi. The Immovable Property or any part there of is let out, given on leave and Version 1.3 14of66license, sold, disposed of, charged, encumbered or otherwise alienated in anymanner whatsoever without written approval of the Lender\n\n`, 
    { lineGap: 1, indent: 20 }
 )
 .text(
  `vii. The Borrower or guarantors, if any (in case of either of them being acorporation or partnership firm) takes any action or other steps are taken or legal proceedings are started for insolvency, winding up, dissolution or reorganization or for the appointment of a liquidator, receiver, trustee or similar officer on its assets\n\n`, 
  { lineGap: 1, indent: 20 }
)
.text(
  `viii. The Borrower or guarantors, if any (in case of being an individual) dies or takes any steps or any steps are taken with a view to his being made in solvent in any jurisdiction or with a view to the appointment of a receiver, trustee or similar officer of any of his assets\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `ix. if the Borrower ceases or threatens to cease to carry on any of its businesses or gives notice of its intention to do so or if all or any part of the assets of the Borrower required or essential for its business or operations are damaged or destroyed or there occurs any change from the date of this Agreement in thegeneral nature or scope of the business, operations, management, orownership of the Borrower, which could have a material adverse effect\n\n `, 
  { lineGap: 1, indent: 20 }
) .text(
  `x. The Immoveable Property or any part there of is (or sought to be) attached, taken into custody by any official, authority or any other person or made the subject of any legal or execution proceedings\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `xi. The Immoveable Property depreciate in value to such an extent that the Lender is of the opinion that further security should be given and such further security is not given on written demand\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `xii. An event of default howsoever described (or any event which with the giving of notice, lapse of time, determination of materiality, or fulfilment of any other applicable condition or any combination of the foregoing would constitute an event of default) occurs under any agreement or document relating to any in debtedness of the Borrower or if any other financial institutions or banks with whom the Borrower has entered into agreements for financial assistance have recalled its assistance or any part there of\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `xiii. The Borrower is unable or has admitted in writing its inability to pay any of its Borrower(s) Dues as they mature or when due and /or demanded by the Lender\n\n`, 
  { lineGap: 1, indent: 20 }
)
.text(
  `xiv. One or more events, conditions or circumstances (including any change in law) occur or exist, which in the sole opinion of the Lender, could have a material adverse effect on the ability of the Borrower to pay / repay the Loan or`, 
  { lineGap: 1, indent: 20 }
)
.text(
  `xv. The Borrower fails to inform the Lender of the occurrence of any Event of Default or any event which after the notice or lapse of time, or both, would become an Event of Default.\n\n`, 
  { lineGap: 1, indent: 20 }
)

doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall promptly notify the Lender in writing upon becoming aware of any default and any event which constitutes an Event of Default and the steps, if any, being taken to remedy it. The decision of the Lender as to whether or not an Event of Default has occurred shall be final and binding upon the Borrower.`,{lineGap: 1})


//--------------------------------------------------new page 11 ----------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica-Bold').text(`14. EFFECT OF EVENT OF DEFAULT`,{align:"true",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`With out prejudice to the other rights or remedies available to the Lender under Applicable Law, on the occurrence of an Event of Default, the Lender shall been titled to exercise any or all of the following rights (whether simultaneously orother wise), at the sole discretion of the Lender:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica')
   .text(`i. Declare that the obligation of the Lender to make or continue to make the Loan available, stands terminated`, { lineGap: 1,indent: 20  })
   .text(
      `ii. Declare that the entire Outstanding Obligation is immediately due and payable to the Lender, where upon the same shall become immediately due and payable by the Borrower and the Borrower shall pay the entire Outstanding Obligation in accordance with the terms of the notice without any further notice or other legal formalities of any kind;\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
    `iii. Invoke the guarantee, if any for payment of the Outstanding Obligations and/or\n\n`, 
    { lineGap: 1, indent: 20 } // Adjust `indent` as needed
 )
 .text(
  `iv. Exercise any right, power or remedy permitted to it by law, including by suit, in equity or by action at law, or both, or otherwise (including appointment of receiver), whether for specific performance of any covenant, condition or term contained in this Agreement or for an injunction against a violation of any of the terms and conditions of this Agreement, or in aid of the exercise ofany power or right granted in this Agreement.\n\n`, 
  { lineGap: 1, indent: 20 } // Adjust `indent` as needed
)
 
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(` If the Borrower defaults in the repayment of the Outstanding Obligation any part there of, as stated in the Clause a.ii, on the notified date, the Lender shall have the right to enter upon and take possession of the Immovable Property or any part of it and enforce its security interest over the Immovable Property and exercise such other rights and remedies as permitted or available under Applicable Law.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall pay all costs/ expenses/ charges / fees in connection with the enforcement of the Lender’s rights including cheque bouncing charges, possession charges, legal charges, charges of agencies hired for disposal of the Immovable Property auction charges, expenses for making the Immovable Property market able or for its preservation (including insurance, taxes etc.), if incurred, or any expense other wise how so ever incurred in relation to the Immovable Property and other miscellaneous charges either due to default of the Borrower(s), or at the time of enforcement of the security interest over the Immoveable Property.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`15. INDEMNITY`,{align:"left",lineGap: 1})
doc.moveDown(1)

doc.fontSize(9).font('Helvetica').text(`The Borrower shall, without prejudice any right of the Lender, indemnify and hold harmless the Lender, its directors, officers, employees, consultants, agencies, appointees or representatives against all costs (including advocates’ fee), expenses, penalties, losses, compensation, damage, damages, suits, actions, proceedings, claims, liabilities, consequences of whatsoever nature arising from:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Occurrence of Events of Default or`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any failure by any of the Borrower to comply with the provisions of this Agreement and/or other Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any acts of omission and commission or breach of this Agreement or theTransaction Documents or any representation, warranty, covenant being false, misleading, untrue or incorrect or`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Enforcement of its rights in relation to the Immovable Property`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`non-payment or insufficient payment of stamp duty by the Borrower on thisAgreement or any other Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Borrower failing to take necessary action to protect the interest of the Lender andwhole or any part of the Immovable Property`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`16. ASSIGNMENT/TRANSFER/SECURITISATION`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower expressly recognizes and accepts that the Lender shall be absolutely entitled to, and has full power and authority to sell, assign or otherwise transfer in Version 1.3 16of66any manner whatsoever, in whole or in part, and in such manner and on such terms as the Lender may decide (including if deemed appropriate by the Lender reserving a right to retain its power to proceed against the Borrower on behalf of the purchaser, assignee or transferee) any or all outstanding and dues of the Borrower, to any third party of the Lender’s choice without any further reference or intimation or notice tothe Borrower, and without seeking any consent of the Borrower. Any such action and any such sale, assignment or transfer shall bind the Borrower to accept such third party as creditor exclusively or as a joint creditor with the Lender or any other person, as the case may be. Any costs in this behalf, whether on account of such sale, assignment or transfer or enforcement of rights and recovery of outstanding and dues, shall be to the account of the Borrower.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall not assign this Agreement or any of the rights, duties or obligations of the Borrower here under, except with prior written consent of the Lender.`,{lineGap: 1})


//------------------------------------------new page -----------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(10).font('Helvetica-Bold').text(`17. CROSS COLLATERAL`,{align:"left",lineGap: 1})
doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`The Borrower acknowledges that in the event of repayment by the Borrower of the Outstanding Obligation under this Agreement but there being any outstanding by the Borrower under any other financial facility availed by the Borrower or its affiliates from the Lender, then in such event the Lender shall not be obliged to release the securitycreated by the Borrower under this Agreement/Transaction Documents and the Borrower hereby authorizes the Lender to extend the security to cover such outstanding financial facility. Likewise, in the event of there being any outstanding by the Borrower under this Agreement, the Lender shall not be obliged to release the security created by the Borrower for any other financial facility availed of by the Borrower from the Lender and the Borrower undertakes to extend such security to cover the outstanding due under this Agreement.`,{lineGap: 1})
doc.moveDown(1);
doc.fontSize(10).font('Helvetica-Bold').text(`18. SUBORDINATE DEBT`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower does hereby agree declare confirm and undertake that all loans, advances, and other monies advanced by its group companies/ associates/ the directors, partners, and/or their friends and relatives or any of them shall stand and be regarded as subordinate debt in comparison with the Loan hereby granted. The Borrower does here by further declare and undertake that the Borrower shall not repay any of such loans and advances in whole or in part or pay any interest thereon until such time as the entire Outstanding Obligation of the Lender under and in pursuance of the Loan and/or this Agreement are repaid in full.`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(10).font('Helvetica-Bold').text(`19. DISCLOSURE OF INFORMATION`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`a.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Lender shall, as it may deem appropriate and necessary, be entitled to disclose all or any: (i) information and data relating to the Borrower; (ii) information or data relating to the Loan / Transaction Documents; (iii) obligations assumed / to be assumed by the Borrower in relation to the Loan under this Agreement and other Transaction Documents; (iv) default, if any, committed by the Borrower of the a fore said obligations, to the CIBIL and any other agency authorized in this behalf bythe RBI. The CIBIL and/or any other agency so authorized may use and/or processthe aforesaid information and data disclosed by the Lender in any manner as deemedfit by them. The CIBIL and/or any other agency so authorized may furnish for consideration, the processed information and data or products thereof prepared by them, to Lender / financial institutions and other credit grantors or registered users, as may be specified by RBI in this behalf.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`In case the Borrower commits any default in payment or repayment of the Outstanding Obligations, the Lender and/or the RBI will have an unqualified right to disclose or publish the details of such default along with the name of the Borrower and/or its directors / partners / co-applicants, as applicable, as defaulters in such manner as the Lender and/or RBI may, in their absolute discretion, think fit. The Borrower shall not hold the Lender responsible for sharing and/or disclosing the information now or in the future and also for any consequences suffered by the Borrowers and/or others by reason thereof. The provisions of this clause shall survive ever after the termination of this Agreement and the repayment of the Borrower’s Outstanding Obligations`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(10).font('Helvetica-Bold').text(`20. DISPUTE RESOLUTION`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`a.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All disputes, differences and / or claims arising out of this Agreement including constructions, meaning or effect hereof or as to the right and liabilities of the parties here under shall be settled by arbitration to be held in accordance with the provisions of the Arbitration and Conciliation Act, 1996 or any statutory amendments or reenactments there of and shall be referred to a sole arbitrator to be nominated by the Lender. In the event of death, refusal, neglect, inability or incapability of a person soappointed to act as an arbitrator, the Lender shall appoint another person in his placeas the arbitrator. The venue and seat of the arbitration shall be Ahmedabad. The award of the arbitrator shall be final and binding on all parties concerned.\n\n`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All legal actions and/or proceedings arising out of / in connection with this Agreement and the Transaction Documents shall be brought in / before the courts or tribunals at Ahmedabad and the Borrower irrevocably submits itself in the jurisdiction of such courts and tribunals. The Lender may, however, in its absolute discretion commence any legal action or proceedings arising out of the Agreement in any other court, tribunal or other appropriate forum and Borrower(s) here by consents to that jurisdiction.`,{align:"left",lineGap: 1})


//--------------------------------------------------new page 13--------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(10).font('Helvetica-Bold').text(`21. NOTICES`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All notices or other communications under this Agreement or the Transaction Documents shall be given by the Borrower to the Lender in writing at the addresses specified in the Schedule I hereto. Such notice, demand, request or other communication shall be deemed to have been duly given or made when it shall be (a)delivered personally or (b) sent by facsimile; or (c) sent by registered mail with acknowledgement due, postage prepaid or courier; or (d) sent by email.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any communication or document made or delivered by one person to another under or in connection with the Finance Documents will be effective:\n\n`,{align:"left",lineGap: 1})

doc.fontSize(9).font('Helvetica')
   .text(
      `i. if delivered personally, on delivery; or\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
    `ii. if by way of facsimile, when received in legible form; or\n`, 
    { lineGap: 1, indent: 20 } // Adjust `indent` as needed
 )
 .text(
  `iii. if by way of registered mail/courier, the date of receipt of such registered mail/courier (as demonstrated by the acknowledgement); or\n`, 
  { lineGap: 1, indent: 20 } // Adjust `indent` as needed
)
.text(
  `iv. if by way of email, as soon as the email leaves the system of the sender to be transmitted to the addressee.`, 
  { lineGap: 1, indent: 20 } // Adjust `indent` as needed
)
doc.fontSize(9).font('Helvetica-Bold').text(`c.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any notice given or communication made under any Finance Document must be in English Language.`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`22. MISCELLANEOUS`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The entries made in the account books/ record of the Lender maintained in accordance with its usual practice and in compliance with statutory requirements and / or a statement signed by a designated officer of the Lender, shall be final and binding on the Borrower. Such entries and / or statement shall be prima facie conclusive evidence of the existence and amount of obligations of the Borrower recorded in respect of the Loan.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`This Agreement and any other Transaction Documents integrate all the terms and conditions mentioned here in or incidental hereto, and supersede all oral negotiations and prior writings in respect of the subject matter hereof, except for those provisions of the Sanction Letter issued prior to this Agreement which are in addition to and complement, and are not in conflict with the terms of this Agreement. In the event ofany conflict between the terms and conditions of this Agreement and any agreement or documents, then in such event the terms and conditions of this Agreement shall prevail.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. The Lender reserves the right to use the information provided by the Borrower in this Agreement and the Transaction Documents and during surveys, informationfrom external sources, including consumer reports, for marketing activities carried out by the Lender / its affiliates/group companies. The Lender may use this information to develop mailing lists that may be used by companies with whom the Lender shall work to develop marketing offers for the Borrower`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any provision of this Agreement or any other Transaction Document, which is prohibited or unenforceable in any jurisdiction, shall, as to such jurisdiction, beineffective to the extent of the prohibition or unenforceability but that shall not invalidate the remaining provisions of this Agreement or such other Transaction Document or affect such provision in any other jurisdiction.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No delay in exercising or omission to exercise any right, power, or remedy accruing to the Lender under this Agreement or the other Transaction Documents shall impair any such right, power, or remedy or shall be construed to be a waiver there of or any acquiescence in such default, nor shall the action or inaction of the Lender in respect of any default or any acquiescence by it in any default, affect or impair any right, power, or remedy of the Lender in respect of any other default. The rights of the Lender under this Agreement and the other Transaction Documents may be exercised as often as necessary, are cumulative and not exclusive of their rights under the general law and may be waived only in writing and specifically and at the Lender’s sole discretion.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No suit, action, prosecution, or other legal action shall lie against the Lender or anyof its directors, officers, employees, consultants, appraisers, valuers, auditors, Version 1.3 19of66agencies for any act done in good faith or intended to be done in pursuance of thisAgreement or any Transaction Documents.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower acknowledges that he/authorizedx representative has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower in the language understood by the Borrower and the Borrower has understood the entire meaning of the terms and conditions and has affixed its signature after verifying and understanding the contents of this Agreement.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`h.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. Nothing herein contained shall prejudice or adversely affect any general or special lien or right to set-off to which the Lender is or may by law or otherwise be entitled or any rights or remedies of the Lender including in respect of any present or future security, guarantee, obligations of the Borrower.`,{align:"left",lineGap: 1})



// -------------------------------------------- new page --------------------------------------  
 
 doc.addPage();
 // addLogo();
 //drawBorder();
 doc.moveDown(2);

    function DRAWTABLE(tableTitle, tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
      // Draw table title with a colored header
      doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
      doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5)
          .text(tableTitle, startX + 5, startY + 5, { align: 'center' });
    
      startY += 20; // Move down for the first row
    
      let sectionIndex = null; // Track the section index to span the column
      
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
    
          // Calculate row height based on the tallest content
          const rowHeight = Math.max(20, field1Height, value1Height) + 10; // Adding padding for better spacing
    
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
    
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Stroke color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
    
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
    
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
    
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
    }
    
    
    function DrawTablewithoutHeader(tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
      let sectionIndex = null; // Track the section index to span the column
      
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
    
          // Calculate row height based on the taller content
          const rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding
    
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
    
           if (["penal Charges"].includes(row.field1)) {
            rowHeight = Math.max(rowHeight, 38.5); 
                   }
    
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Line color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
    
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
    
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
    
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
    }
    
    
    // function DRawTable(tableTitle, tableData, spanIndex) {
    //   const startX = 50;
    //   let startY = doc.y + 10;
    //   const columnWidths = [500];
    //   const indexWidth = 30;
    //   const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
    //   const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
    //   // Add table title
    //   doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
    //   doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5).text(tableTitle, startX + 5, startY + 5, { align: 'center' });
    
    //   startY += 20; // Move down for the first row
    
    //   let sectionIndex = null;
    
    //   // Helper function to calculate the height of the text
    //   function calculateTextHeight(text, width) {
    //     return doc.font('Helvetica').fontSize(8.3).heightOfString(text, { width });
    //   }
    
    //   // Render each row in the table
    //   tableData.forEach((row, rowIndex) => {
    //       // Calculate the height needed for each cell's text
    //       const field1Height = calculateTextHeight(row.field1, keyWidth);
    //       const value1Height = calculateTextHeight(row.value1, valueWidth);
    //       const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
    
    //       // Display the index only once if it matches a section needing a span
    //       const indexLabel = row.index && spanIndex ? row.index : '';
    
    //       if (row.index) {
    //           sectionIndex = row.index;
    //       }
    
    //       // Draw the index in the first column (only once if spanIndex is true)
    //       if (indexLabel) {
    //           doc.fillColor('#ffffff')
    //               .rect(startX, startY, indexWidth, rowHeight * tableData.length).stroke().fill(); // Span vertically for entire section
    //           doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //               .text(indexLabel, startX + 5, startY + 5, { width: indexWidth - 10, height: rowHeight * tableData.length });
    //       }
    
    //       // Draw the key in the second column
    //       doc.fillColor('#f5f5f5')
    //           .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
    //       doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //           .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
    
    //       // Draw the value in the third column
    //       doc.fillColor('#ffffff')
    //           .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
    //       doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //           .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
    
    //       startY += rowHeight; // Move down to the next row, based on dynamic height
    //   });
    // }
    function DRawTable(tableTitle, tableData, spanIndex) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
      // Add table title
      doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
      doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5).text(tableTitle, startX + 5, startY + 5, { align: 'center' });
  
      startY += 20; // Move down for the first row
  
      let sectionIndex = null;
      let totalSectionHeight = 0;
  
      // Calculate total height needed for all rows if spanIndex is true
      tableData.forEach(row => {
          const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth - 10 });
          const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth - 10 });
          totalSectionHeight += Math.max(field1Height, value1Height) + 10;
      });
  
      // Draw the index as a single cell spanning the full height if spanIndex is true
      if (spanIndex && tableData[0].index) {
          sectionIndex = tableData[0].index;
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, totalSectionHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(sectionIndex, startX + 5, startY + (totalSectionHeight / 2) - 5, {
                  width: indexWidth - 10,
                  align: 'center',
                  height: totalSectionHeight
              });
      }
  
      // Render each row in the table without the index label
      tableData.forEach(row => {
          // Calculate the height needed for each cell's text
          const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth - 10 });
          const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth - 10 });
          const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
  
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
  
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
  
          startY += rowHeight; // Move down to the next row, based on dynamic height
      });
  }
  

  //   function DRawTable(tableTitle, tableData, spanIndex) {
  //     const startX = 50;
  //     let startY = doc.y + 10;
  //     const columnWidths = [500];
  //     const indexWidth = 30;
  //     const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
  //     const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
  //     // Add table title
  //     doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
  //     doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5).text(tableTitle, startX + 5, startY + 5, { align: 'center' });
  
  //     startY += 20; // Move down for the first row
  
  //     let sectionIndex = null;
  //     let totalSectionHeight = 0;
  
  //     // Calculate total height needed for all rows if spanIndex is true
  //     tableData.forEach(row => {
  //         const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth });
  //         const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth });
  //         totalSectionHeight += Math.max(field1Height, value1Height) + 10;
  //     });
  
  //     // Draw the index as a single cell spanning the full height if spanIndex is true
  //     if (spanIndex && tableData[0].index) {
  //         sectionIndex = tableData[0].index;
  //         doc.fillColor('#ffffff')
  //             .rect(startX, startY, indexWidth, totalSectionHeight).stroke().fill();
  //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
  //             .text(sectionIndex, startX + 5, startY + (totalSectionHeight / 2) - 5, {
  //                 width: indexWidth - 10,
  //                 align: 'center',
  //                 height: totalSectionHeight
  //             });
  //     }
  
  //     // Render each row in the table without the index label
  //     tableData.forEach(row => {
  //         // Calculate the height needed for each cell's text
  //         const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth });
  //         const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth });
  //         const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
  
  //         // Draw the key in the second column
  //         doc.fillColor('#f5f5f5')
  //             .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
  //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
  //             .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
  
  //         // Draw the value in the third column
  //         doc.fillColor('#ffffff')
  //             .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
  //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
  //             .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
  
  //         startY += rowHeight; // Move down to the next row, based on dynamic height
  //     });
  // }
   
    function DRAWTable(tableData, spanIndex) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
      doc.strokeColor('#000000'); // Set border line color to black for the entire table
    
    
      let sectionIndex = null;
    
      // Helper function to calculate the height of the text
      function calculateTextHeight(text, width) {
        return doc.font('Helvetica').fontSize(8.3).heightOfString(text, { width });
      }
    
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Calculate the height needed for each cell's text
          const field1Height = calculateTextHeight(row.field1, keyWidth);
          const value1Height = calculateTextHeight(row.value1, valueWidth);
          const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
    
          // Display the index only once if it matches a section needing a span
          const indexLabel = row.index && spanIndex ? row.index : '';
    
          if (row.index) {
              sectionIndex = row.index;
          }
    
          // Draw the index in the first column (only once if spanIndex is true)
          if (indexLabel) {
              doc.fillColor('#ffffff')
                  .rect(startX, startY, indexWidth, rowHeight * tableData.length).stroke().fill(); // Span vertically for entire section
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                  .text(indexLabel, startX + 5, startY + 5, { width: indexWidth - 10, height: rowHeight * tableData.length });
          }
    
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
    
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
    
          startY += rowHeight; // Move down to the next row, based on dynamic height
      });
    }

  doc
    .fontSize(12)
    .font(fontBold)
    .text("Schedule I", { align: "center", underline: true });
  doc.moveDown(0.6);

  // Format the borrower details to the left side
  doc
    .font(fontBold)
    .fontSize(12)
    .fillColor("black")
    .text(
      "Details of the Loan",
        
      {
        lineGap: 1,
        align: "center",
         underline: true
      }
    );
    doc.moveDown(1);
    
//  unworked
    const AgreementDetails = [
      {index: '1',field1:"Date of the Agreement",value1:`${allPerameters.agreementdate}` },
      {index: '2',field1: "Place of Execution ",value1: `${allPerameters.placeOfExecution}` },
    ];
    DRAWTABLE("Agreement Details", AgreementDetails,false)
    doc.moveDown();

      const DetailsoftheBorrower = [
        {index: '3', field1: "Name of the Borrower(s)", value1: `${allPerameters.borrowerName}` },
        { field1: 'Constitution of the Borrower(s) ', value1: `${allPerameters?.constitutionBorrower}` },
        { field1: 'PAN/TAN/CIN of the Borrower(s)', value1: `${allPerameters.borrowerpanNo}` }, //unworked constitution
        { field1: 'Address of the Borrower(s)', value1: `${allPerameters.borroewraddress}` },
        { field1: 'Email – address(es)', value1: `${allPerameters.borroweremail}` },
        { field1: 'Phone No. (s)', value1: `${allPerameters.borrwermobileNo}` },
        {field1: 'Attention: Mr./Ms.', value1: `${allPerameters.borrowerName}` },// unworked mr/ms
    ];
    DRawTable("Details of the Borrower",DetailsoftheBorrower,true)
    
    doc.moveDown();
    
    const DetailsoftheCoBorrower = [
      { index: '4',field1: 'Name of the Borrower(s)', value1: `${allPerameters.coBorrowername}` },
      { field1: 'Constitution of the Co-Borrower(s) ', value1: `${allPerameters.constitutionCoBorrower}` },
      { field1: 'PAN/TAN/CIN of the Co-Borrower(s)', value1: `${allPerameters.panTanCin}` },
      { field1: 'Address of the Co-Borrower(s)', value1: `${allPerameters.coBorroweraddress}` },
      { field1: 'Email – address(es)', value1: `${allPerameters.coBorroeremail}` },
      { field1: 'Phone No. (s)', value1:  `${allPerameters.coBorrowerphoneNo}` },
      { field1: 'Attention: Mr./Ms.', value1: `${allPerameters.coBorrowername}` },
    ];
    
    DRawTable("Details of the Co-Borrower", DetailsoftheCoBorrower,true);
    doc.moveDown();

    // const DetailsoftheCoBorrower2 = [
    //   { index: '4',field1: 'Name of the 2nd Borrower(s)', value1: `${allPerameters.coBorrowername2}` },
    //   { field1: 'Constitution of the 2nd Co-Borrower(s) ', value1: `${allPerameters.constitutionCoBorrower2}` },
    //   { field1: 'PAN/TAN/CIN ', value1: `${allPerameters.panTanCin2}` },
    //   { field1: 'Address of the 2nd Co-Borrower(s)', value1: `${allPerameters.coBorroweraddress2}` },
    //   { field1: 'Email – address(es)', value1: `${allPerameters.coBorroeremail2}` },
    //   { field1: 'Phone No. (s)', value1:  `${allPerameters.coBorrowerphoneNo2}` },
    //   { field1: 'Attention: Mr./Ms.', value1: `${allPerameters.coBorrowername2}` },
    // ];
    
    // DRawTable("Details of the 2nd Co-Borrower", DetailsoftheCoBorrower2,true);
    // doc.moveDown();
    
    // const DetailsoftheGuarantor = [
    //   { index: '5', field1: "Name of the Guarantor", value1: `${allPerameters.guarantorname}` },
    //   { field1: 'Constitution of the Guarantor', value1:  `${allPerameters.constitutionGuarentor}` },
    //   { field1: 'PAN/TAN/CIN of the Guarantor', value1: `${allPerameters.guarantorpanTanCin}` },
    //   { field1: 'Address of the Guarantor', value1:  `${allPerameters.guarantoraddress}` },
    //   // { field1: 'Email – address(es)', value1: `${req.body.detailsoftheGuarantor?.email}` },
    
    //   // { field1: 'Phone No. (s)', value1: `${req.body.detailsoftheGuarantor?.phoneNo}` },
    //   // { field1: 'Attention: Mr./Ms', value1: `${req.body.detailsoftheGuarantor?.attentioMrMs}`},
    
    
    // ];
    // DRawTable("Details of the Guarantor", DetailsoftheGuarantor, true);
    
    
    
      ////addFooter();
    
//       //---------------------------------NEW PAGE ------------------------------------------------
      
    
//       // //---------------------------------------------------new page---------------------------------------------------------------
      doc.addPage();
      // addLogo();
      //drawBorder();
    
      doc.moveDown(2);

      const DetailsoftheGuarantor = [
        { index: '5', field1: "Name of the Guarantor", value1: `${allPerameters.guarantorname}` },
        { field1: 'Constitution of the Guarantor', value1:  `${allPerameters.constitutionGuarentor}` },
        { field1: 'PAN/TAN/CIN of the Guarantor', value1: `${allPerameters.guarantorpanTanCin}` },
        { field1: 'Address of the Guarantor', value1:  `${allPerameters.guarantoraddress}` },
        { field1: 'Email – address(es)', value1: `${allPerameters.guarantoremail}` },
      
        { field1: 'Phone No. (s)', value1: `${allPerameters.guarantorphoneNo}` },
        { field1: 'Attention: Mr./Ms', value1: `${allPerameters.guarantorname}`},
      
      
      ];
      DRawTable("Details of the Guarantor", DetailsoftheGuarantor, true);
    
      // const DetailsoftheGuarantorr = [
        
      //   { index:'.',field1: 'Email – address(es)', value1: `${allPerameters.guarantoremail}` },
      
      //   { field1: 'Phone No. (s)', value1: `${allPerameters.guarantorphoneNo}` },
      //   { field1: 'Attention: Mr./Ms', value1: `${allPerameters.guarantorname}`},
      
      
      // ];
      // DRAWTable( DetailsoftheGuarantorr, true);
    
      const DetailsoftheBranch = [
        {index: '6', field1: 'Place of the Branch ', value1: `${allPerameters.branchplace}` },
        { field1: 'Address of the Branch', value1: `${allPerameters.branchaddress}` },
        { field1: 'Email – address(es)', value1: `${allPerameters.branchemail}` },
        { field1: 'Phone No. (s)', value1: `${allPerameters.branchphoneNo}` },
        { field1: 'Attention: Mr./Ms.', value1: `${allPerameters.attentionMrMs}` },
      ];
    
      DRawTable("Details of the Branch", DetailsoftheBranch,true);
    
      doc.moveDown();
    
    
      const DetailsoftheLoan = [
        { index: '7',field1: 'Sanction Letter No.', value1: `${allPerameters.sanctionLetterNo}` },
        {index: '8', field1: 'Date of Sanction Letter', value1: `${allPerameters.sanctionLetterDate}` },
      
        { index: '9',field1: 'Facility Type ', value1: `${allPerameters.facilityType}` },
        { index: '10',field1: 'Specified Purpose ', value1: `${allPerameters.specifiedPurpose}` },
        {index: '11', field1: 'Amount of Loan', value1: `${allPerameters.amountOfLoan}/-(${allPerameters.loanAmountInWord})`},
        {index: '12', field1: 'Rate of Interest', value1: `${allPerameters.rateOfInterest}% Per Annum (FRR – 19.20% + ${allPerameters.interestType1}%)` },
        // {index: '13', field1: 'Login Fees .', value1: `${allPerameters.loginFees}` },
        { index: '13',field1: 'Loan Processing fee', value1: `${allPerameters.loanProcessingFees}` },
        // { index: '15',field1: 'Documentation Charges', value1: `${allPerameters.documentCharges}` },
        { index: '14',field1: 'Tenure of Loan ', value1: `${allPerameters.tenureOfLoan} months` },
        {index: '15', field1: 'Penal charges', value1: `${allPerameters.penalCharges}`},
        {index: '16', field1: 'Repayment Method ', value1: `${allPerameters.repaymentMethod}` },
        // { index: '19',field1: 'Monthly Installment Date ', value1: '10th of the month' },
        // { index: '20',field1: `Repayment Date of all Outstanding Obligations\n(End date of loan Tenure)`, value1: 'As per Repayment Schedule' },
        // { index: '21',field1: 'Number of Installments', value1: '60 months' },
        // {index: '22', field1: 'Foreclosure of Loan ', value1: 'No Foreclosure allowed till completion of 12 months from the date of 1st disbursement.After completion of 12 months from the date of 1st disbursement, Foreclosure from personal funds may be made without incurring any fees.In case of balance transfer, 4% charges will be applicable.' },
        // {index: '23', field1: 'Taxes', value1: 'Goods and Services tax (GST) will be charged extra as per the applicable rates, on interest, penal charges,other charges and fees (wherever GST is applicable)' },
    //     {index: '24', field1: 'Security', value1: `1. Personal guarantee of PAWAN NAGAR ) \n 2. Corporate guarantee of NA \n 3. Demand Promissory Notes \n 4. Cheques as per UDC Covering Letter. \n 5. First and exclusive charge over the Immovable Property as mentioned in Schedule III.`},
    //     { index: '25',field1: 'Security Deposit/DSRA ', value1: 'NIL' },
    //     { index: '26',field1: 'Lock–in Period  ', value1: `The borrower shall not repay/prepay/foreclose any portion of the outstanding loan amount
    //   either in part or in full within 1 year completion of loan tenure from the date of 1st
    // disbursement of the loan.` },
    
      ];
      
      DRAWTABLE("Details of the Loan", DetailsoftheLoan);
      
      
      
      //addFooter();
    //=================-------------------------------------------------------
      doc.addPage();
      // addLogo();
      //drawBorder();
      // Add title and content from the image
      doc.moveDown(2);

    //   function DrawTablewithoutHeaderpenal(tableData) {
    //     const startX = 50;
    //     let startY = doc.y + 10;
    //     const columnWidths = [500];
    //     const indexWidth = 30;
    //     const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
    //     const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
      
    //     let sectionIndex = null; // Track the section index to span the column
        
    //     // Render each row in the table
    //     tableData.forEach((row, rowIndex) => {
    //         // Measure text height for row.field1 and row.value1
    //         const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
    //         const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
      
    //         // Calculate row height based on the taller content
    //         let rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding

    //         if (rowIndex === 0) { // Example for a specific row index
    //           rowHeight = Math.max(rowHeight, 50); // Custom height for row at index 5
    //       }

    //       else if (rowIndex === 1) { // Example for a specific row index
    //         rowHeight = Math.max(rowHeight, 10); // Custom height for row at index 5
    //     }

    //     else if (rowIndex === 2) { // Example for a specific row index
    //       rowHeight = Math.max(rowHeight, 10); // Custom height for row at index 5
    //   }

    //   else if (rowIndex === 8) { // Example for a specific row index
    //     rowHeight = Math.max(rowHeight, 10); // Custom height for row at index 5
    // }
      
    //         // Only display the index once per section, in the first row
    //         const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
    //         if (row.index) {
    //             sectionIndex = row.index; // Set current section index
    //         }
      
    //          if (["penal Charges"].includes(row.field1)) {
    //           rowHeight = Math.max(rowHeight, 45.5); 
    //                  }
      
    //         // Draw the index in the first column (only for the first row of each section)
    //         doc.fillColor('#ffffff')
    //             .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Line color set to black
    //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //             .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
      
    //         // Draw the key in the second column
    //         doc.fillColor('#f5f5f5')
    //             .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
    //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //             .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
      
    //         // Draw the value in the third column
    //         doc.fillColor('#ffffff')
    //             .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
    //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //             .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
      
    //         // Move startY down by rowHeight for the next row
    //         startY += rowHeight;
    //     });
    //   }
    function DrawTablewithoutHeaderpenal(tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
      let sectionIndex = null; // Track the section index to span the column
  
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
  
          // Calculate row height based on the taller content
          let rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding
  
          // Custom adjustments for specific rows (if any)
          if (["penal Charges"].includes(row.field1)) {
              rowHeight = Math.max(rowHeight, 45.5);
          }
  
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
  
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Line color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
  
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
  
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3);
  
          if (row.field1 === 'Monthly Installment Date' && row.value1.includes('10th')) {
              const mainText = '10'; // The main numeric part
              const superscriptText = 'th'; // The superscript part
              const remainder = ' of the month'; // The rest of the string
  
              // Render "10"
              doc.text(mainText, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, {
                  continued: true, // Indicate that the next text is part of the same line
              });
  
              // Render "th" as superscript
              doc.fontSize(6).text(superscriptText, {
                  baseline: 'top', // Adjust baseline for superscript effect
                  continued: true,
              });
  
              // Render the remainder
              doc.fontSize(8.3).text(remainder);
          } else {
              // Default rendering for other rows
              doc.text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, {
                  width: valueWidth - 10,
              });
          }
  
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
  }
  
    
      const DetailsoftheBranchh =[
        // {index: '15', field1: 'Penal charges', value1: `${allPerameters.penalCharges}`},
        // {index: '16', field1: 'Repayment Method ', value1: `${allPerameters.repaymentMethod}` },
        { index: '17',field1: 'Monthly Installment Date', value1: `10th of the month` },
        { index: '18',field1: `Repayment Date of all Outstanding Obligations\n(End date of loan Tenure)`, value1: `${allPerameters.endDateOfLoanTenure}` },
        { index: '19',field1: 'Number of Installments', value1:`${allPerameters.tenureOfLoan} months` },
        {index: '20', field1: 'Foreclosure of Loan ', value1: `${allPerameters.foreClosereOfLoan}` },
        {index: '21', field1: 'Taxes', value1: `${allPerameters.taxes}` },
        
        {index: '22', field1: 'Security', value1: `1. Personal guarantee of ${allPerameters.guarantorname} ) \n 2. Corporate guarantee of NA \n 3. Demand Promissory Notes \n 4. Cheques as per UDC Covering Letter. \n 5. First and exclusive charge over the Immovable Property as mentioned in Schedule III.`},
        { index: '23',field1: 'Security Deposit/DSRA ', value1: `${allPerameters.securityDepositOrDsra}` },
        { index: '24',field1: 'Lock–in Period  ', value1: `${allPerameters.lockPeriod}` },
    
      ];
      
      DrawTablewithoutHeaderpenal(DetailsoftheBranchh);

    
    
    function DrawCombinedTable(doc, sections) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const keyWidth = Math.round(columnWidths[0] * 1 / 3);
      const valueWidth = Math.round(columnWidths[0] * 2 / 3);
    
      sections.forEach(section => {
        // Section Header
        doc.rect(startX, startY, columnWidths.reduce((a, b) => a + b), 20)
            .fillAndStroke('#00a7ff', "#000000");
        doc.font(fontBold).fillColor('black').fontSize(9.5)
            .text(section.title, startX + 5, startY + 5, { baseline: 'hanging', align: 'center' });
    
        startY += 20;
    
        section.data.forEach((row, rowIndex) => {
            let valueRowHeight = 22;
    
            // Calculate dynamic row height
            const field1TextHeight = doc.heightOfString(row.field1, { width: keyWidth - 10 });
            const value1TextHeight = doc.heightOfString(row.value1, { width: valueWidth - 10 });
            valueRowHeight = Math.max(valueRowHeight, field1TextHeight, value1TextHeight);
    
            const backgroundColor = rowIndex % 2 === 0 ? '#f5f5f5' : '#ffffff';
    
            if (["Prepayment Charges"].includes(row.field1)) {
                       valueRowHeight = Math.max(valueRowHeight, 38.5); 
                   }

             if (["Installment Amount"].includes(row.field1)) {
                    valueRowHeight = Math.max(valueRowHeight, 38.5); 
                }
    
            // Render field and value cells
            doc.fillColor(backgroundColor).rect(startX, startY, keyWidth, valueRowHeight).stroke().fill();
            doc.font(font).fillColor('black').fontSize(8.3)
                .text(row.field1, startX + 5, startY + 5, { width: keyWidth - 10 });
    
            doc.fillColor(backgroundColor).rect(startX + keyWidth, startY, valueWidth, valueRowHeight).stroke().fill();
            doc.font(font).fillColor('black').fontSize(7.2)
                .text(row.value1, startX + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
    
            startY += valueRowHeight;
    
      });
    
        // Additional spacing between sections
        startY += 15;
      });
    
     
    }

    function DrawCombinedTable1(doc, sections) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const keyWidth = Math.round(columnWidths[0] * 1 / 3);
      const valueWidth = Math.round(columnWidths[0] * 2 / 3);
  
      sections.forEach(section => {
          // Section Header
          doc.rect(startX, startY, columnWidths.reduce((a, b) => a + b), 20)
              .fillAndStroke('#00a7ff', "#000000");
          doc.font(fontBold).fillColor('black').fontSize(9.5)
              .text(section.title, startX + 5, startY + 5, { baseline: 'hanging', align: 'center' });
  
          startY += 20;
  
          section.data.forEach((row, rowIndex) => {
              let valueRowHeight = 22;
  
              // Calculate dynamic row height
              const field1TextHeight = doc.heightOfString(row.field1, { width: keyWidth - 10 });
              const value1TextHeight = doc.heightOfString(row.value1, { width: valueWidth - 10 });
              valueRowHeight = Math.max(valueRowHeight, field1TextHeight, value1TextHeight);
  
              const backgroundColor = rowIndex % 2 === 0 ? '#f5f5f5' : '#ffffff';
  
              if (["Prepayment Charges"].includes(row.field1)) {
                  valueRowHeight = Math.max(valueRowHeight, 38.5);
              }
  
              if (["Installment Amount"].includes(row.field1)) {
                  valueRowHeight = Math.max(valueRowHeight, 38.5);
              }
  
              // Render field and value cells
              doc.fillColor(backgroundColor).rect(startX, startY, keyWidth, valueRowHeight).stroke().fill();
              doc.font(font).fillColor('black').fontSize(8.3)
                  .text(row.field1, startX + 5, startY + 5, { width: keyWidth - 10 });
  
              doc.fillColor(backgroundColor).rect(startX + keyWidth, startY, valueWidth, valueRowHeight).stroke().fill();
              doc.font(font).fillColor('black').fontSize(7.2)
                  .text(row.value1, startX + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
  
              startY += valueRowHeight;
          });
  
          // Add blank row and custom content
          const blankRowHeight = 38.5; // Adjust height as needed
          doc.fillColor('#ffffff').rect(startX, startY, columnWidths[0], blankRowHeight).stroke().fill();
          doc.font(font).fillColor('black').fontSize(8)
              .text(
                  "NOTE: Goods and Services tax (GST) will be charged extra as per the applicable rates, on all the charges and fees (wherever GST is applicable). The aforementioned charges/fees may be modified by Ratnaafin Capital Private Limited from time to time upon prior intimation via acceptable modes of communication from Ratnaafin Capital Private Limited in this regard.",
                  startX + 5, startY + 5, { width: columnWidths[0] - 10, align: 'justify' }
              );
  
          startY += blankRowHeight;
  
          // Additional spacing between sections
          startY += 15;
      });
  }
  
  
    
    // Define data for each section
    const charges = {
      title: "CHARGES",
      data: [
        { field1: "Details", value1: `Particulars` },
        { field1: 'Processing Fees ', value1: `${allPerameters.processingFees}` },
        { field1: 'Document Processing Charges', value1: `${allPerameters.documentProcessingCharges}(For under construction cases 3% of loan amount + Applicable taxes)` },
        { field1: 'Prepayment Charges', value1: `${allPerameters.prepaymentCharges}` },
        { field1: 'Bounce Charges', value1: `${allPerameters.bounceCharges}` },
        { field1: 'Outstation Collection Charges', value1: `${allPerameters.outstationCollectionCharges}` },
        { field1: 'Cheque Swap Charges', value1: `${allPerameters.chequeSwapCharges}` },
        { field1: 'Stamp Duty', value1: `${allPerameters.stampDuety}` },
        { field1: 'Duplicate NOC charges', value1: `${allPerameters.duplicateNocCharges}` },
        
      ]
    };
    
    

    // Draw combined table
    DrawCombinedTable1(doc, [charges]);

    // doc.font(fontBold).fontSize(10)
    // .text(, 50, doc.y + 10);    
    
    //addFooter();
    
    doc.addPage();
      // addLogo();
      //drawBorder();
      // Add title and content from the image
      doc.moveDown(2);
      
      const chequeDetails = {   
        title: "CHEQUE DETAILS",
        data: [
            { field1: "Bank Name", value1: `${allPerameters.bankDetail}` },
            //accountNumber
            { field1: "Bank Account Number", value1: `${allPerameters.chequebankaccountNumber}` },
            { field1: "Number of Cheques", value1: `5` },
            { field1: "Chq S.N. (From-To)", value1: `${allPerameters.chequeNo1}-${allPerameters.chequeNo5}` },
            { field1: "Amount (in INR)", value1: `${allPerameters.chequeaccountInINR}` },
            { field1: "Local/Outstation", value1: `${allPerameters.chequelocalOutstation} ` }
        ]
      };
      
      const ecsNachDetails = {
        title: "DETAILS OF ECS/NACH",
        data: [
            { field1: "Bank Name", value1: `${allPerameters.bankDetail}` },
            { field1: "Bank Account Number", value1: `${allPerameters.chequebankaccountNumber}` },
            { field1: "Installment Amount", value1: `Rs.${allPerameters.ecsNachinstallmentAmounts}/-(if Applicable for the said case:-Interest & EMI has been Charged as Per Disbursement Amount. Once Your Case Gets Fully Disbursed EMI will be revised as per Principal Outstanding which may vary to the EMI as per sanction Letter.)` }
        ]
      };
    
      DrawCombinedTable(doc, [ chequeDetails, ecsNachDetails]);
    
    
    doc.moveDown()
    
    const sections = [
      {
        title: "LOAN DISBURSEMENT MODE",
        data: [
          {
            col1: "Account Transfer Type",
            col2: [
              { text: "Bank Name" },
              { text: "Type of Account (Savings/ Current)" }
            ],
            col3: [
              { text: `${allPerameters.bankDetail}` },
              { text: `${allPerameters.accTransfertypeOfAccount}` }
            ]
          },
          {
            col1: "RTGS/NEFT/IMPS",
            col2: [
              { text: "IFSC Code" },
              { text: "Bank Account Number" }
            ],
            col3: [
              { text: `${allPerameters.rtgifscCode}` },
              { text: `${allPerameters.chequebankaccountNumber}` }
            ]
          },
          {
           col1: "Use of Existing\nECS/NACH",  // Added gap with double newlines
            col2: [
              // { text: "e A/c Holder Name as per Bank Account" },
              // { text: "Cheque in favour of" },
              { text: `(yes/No)[Use]`}
            ],
            col3: [
              // { text: `${allPerameters.accountHolderName}` },
              // { text: `${allPerameters.inFavorOf}` },
              { text: "Cheque in favor of: Sheetal Kulkarni" }
            ],
            col3Split: {  // Split last row in col3 into two parts
              part1: "Use of Existing KYC documents",
              part2: `(yes/No)[Use]`
            }
          },
        ]
      }
    ];

    
    
    
    function DrawCTable(doc, sections) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [160, 160, 160];
    
      sections.forEach(section => {
        // Section Header
        doc.rect(startX, startY, columnWidths.reduce((a, b) => a + b), 20)
          .fillAndStroke('#00a7ff', "#000000");
        doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5)
          .text(section.title, startX + 5, startY + 5, { baseline: 'hanging', align: 'center' });
    
        startY += 20;
    
        section.data.forEach((row, index) => {
          let rowHeight = 22;
          const backgroundColor = index % 2 === 0 ? '#f5f5f5' : '#ffffff';
    
          // Calculate the height of col1 and check if nested rows exist in col2 and col3
          const col1Height = doc.heightOfString(row.col1, { width: columnWidths[0] - 10 });
          const maxRowHeight = Math.max(col1Height, rowHeight * row.col2.length);
    
          // Column 1 - Render with gap between lines
          doc.fillColor(backgroundColor).rect(startX, startY, columnWidths[0], maxRowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
            .text(row.col1, startX + 5, startY + 5, { width: columnWidths[0] - 10, lineBreak: true });
    
          // Column 2 - Nested rows
          let nestedY = startY;
          row.col2.forEach(nestedRow => {
            doc.fillColor(backgroundColor).rect(startX + columnWidths[0], nestedY, columnWidths[1], rowHeight).stroke().fill();
            doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(nestedRow.text, startX + columnWidths[0] + 5, nestedY + 5, { width: columnWidths[1] - 10 });
            nestedY += rowHeight;
          });
    
          // Column 3 - Nested rows with last row split into two columns
          nestedY = startY;
          row.col3.forEach((nestedRow, rowIndex) => {
            if (rowIndex === row.col3.length - 1 && row.col3Split) {
              // Split the last row in col3 into two parts
              const halfWidth = columnWidths[2] / 2;
    
              // Part 1
              doc.fillColor(backgroundColor).rect(startX + columnWidths[0] + columnWidths[1], nestedY, halfWidth, rowHeight).stroke().fill();
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                .text(row.col3Split.part1, startX + columnWidths[0] + columnWidths[1] + 5, nestedY + 5, { width: halfWidth - 10 });
    
              // Part 2
              doc.fillColor(backgroundColor).rect(startX + columnWidths[0] + columnWidths[1] + halfWidth, nestedY, halfWidth, rowHeight).stroke().fill();
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                .text(row.col3Split.part2, startX + columnWidths[0] + columnWidths[1] + halfWidth + 5, nestedY + 5, { width: halfWidth - 10 });
            } else {
              // Regular nested row in col3
              doc.fillColor(backgroundColor).rect(startX + columnWidths[0] + columnWidths[1], nestedY, columnWidths[2], rowHeight).stroke().fill();
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                .text(nestedRow.text, startX + columnWidths[0] + columnWidths[1] + 5, nestedY + 5, { width: columnWidths[2] - 10 });
            }
            nestedY += rowHeight;
          });
    
          startY += maxRowHeight;
        });
    
        startY += 15;
      });
    };
    
    DrawCTable(doc, sections);

    const pageWidth = doc.page.width;
    doc.moveDown(2);

    
    doc
       .fontSize(12) 
       .text("Schedule II", (pageWidth / 2) - (doc.widthOfString("Schedule II") / 2), doc.y, {
           baseline: 'hanging'
       });
    
    doc.moveDown(1);
    
    // Center "Repayment Schedule"
    doc.fontSize(12)
       .text("Repayment Schedule", (pageWidth / 2) - (doc.widthOfString("Repayment Schedule") / 2), doc.y);
    
    doc.moveDown(1);
    
    // Center "As Separately Provided"
    doc
       .fontSize(12)
       .text("As Separately Provided", (pageWidth / 2) - (doc.widthOfString("As Separately Provided") / 2), doc.y, {
           lineGap: 1
       });
    
    doc.moveDown(1);

  //   function tableFunction1(tableData) {
  //     const startX = 53; // Starting X position
  //     let startY = doc.y + 10; // Starting Y position
  //     const boxWidth = 500; // Total width of the box
  //     const numFields = 7; // Fixed to 7 columns
  //     const fieldWidth = boxWidth / numFields; // Width per column
    
  //     let totalHeight = 0;
    
  //     // Calculate total height for the first 6 rows
  //     tableData.slice(0, 6).forEach((row) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
  //         let rowHeight = 0;
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }
  //         totalHeight += rowHeight;
  //     });
  
  //     // Add height for the 7th row (text-only, no columns)
  //     const finalRowHeight = doc
  //         .font('Helvetica')
  //         .fontSize(7.2)
  //         .heightOfString("As Separately Provided", { width: boxWidth }) + 10;
  //     totalHeight += finalRowHeight;
    
  //     // Draw the outer box
  //     doc.fillColor("#f0f0f0")
  //         .rect(startX, startY, boxWidth, totalHeight)
  //         .stroke("black")
  //         .fill();
    
  //     // Draw table content for the first 6 rows
  //     tableData.slice(0, 6).forEach((row, rowIndex) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
  //         let currentX = startX;
  //         let rowHeight = 0;
    
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10;
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }
  
  //         for (let field in row) {
  //             doc.fillColor("#f5f5f5")
  //                 .rect(currentX, startY, fieldWidth, rowHeight)
  //                 .stroke("black")
  //                 .fill();
    
  //             const isHeader = rowIndex === 0;
  //             doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
  //                 .fillColor("black")
  //                 .fontSize(7.2)
  //                 .text(row[field], currentX + 5, startY + 5, {
  //                     baseline: "hanging",
  //                     width: fieldWidth - 10,
  //                     align: 'left',
  //                 });
    
  //             currentX += fieldWidth;
  //         }
    
  //         startY += rowHeight; // Move to next row
  //     });
  
  //     // Draw the 7th row with no columns
  //     doc.font('Helvetica-Bold')
  //         .fillColor("black")
  //         .fontSize(7.2)
  //         .text("As Separately Provided", startX + 5, startY + 5, {
  //             width: boxWidth - 10,
  //             align: 'center',
  //         });
    
  //     // Adjust starting Y for the final row
  //     startY += finalRowHeight;
  // }
  function tableFunction1(tableData) {
    const startX = 53; // Starting X position
    let startY = doc.y + 10; // Starting Y position
    const boxWidth = 500; // Total width of the box
    const numFields = 7; // Fixed to 7 columns
    const fieldWidth = boxWidth / numFields; // Width per column
    const padding = 5; // Padding between text and cell boundaries
  
    let totalHeight = 0;
  
    // Calculate total height for the first 6 rows
    tableData.slice(0, 6).forEach((row) => {
      if (Object.values(row).every((value) => !value || value.trim() === "")) return;
  
      let rowHeight = 0;
      for (let field in row) {
        const fieldTextHeight = doc
          .font("Helvetica")
          .fontSize(7.2)
          .heightOfString(row[field] || "", { width: fieldWidth - 2 * padding }) + 2 * padding; // Add padding
        rowHeight = Math.max(rowHeight, fieldTextHeight);
      }
      totalHeight += rowHeight;
    });
  
    // Add height for the 7th row (text-only, no columns)
    const finalRowHeight =
      doc
        .font("Helvetica")
        .fontSize(7.2)
        .heightOfString("As Separately Provided", { width: boxWidth - 2 * padding }) +
      2 * padding;
    totalHeight += finalRowHeight;
  
    // Draw the outer box
    doc
      .fillColor("#f0f0f0")
      .rect(startX, startY, boxWidth, totalHeight)
      .stroke("black")
      .fill();
  
    // Draw table content for the first 6 rows
    tableData.slice(0, 6).forEach((row, rowIndex) => {
      if (Object.values(row).every((value) => !value || value.trim() === "")) return;
  
      let currentX = startX;
      let rowHeight = 0;
  
      for (let field in row) {
        const fieldTextHeight =
          doc
            .font("Helvetica")
            .fontSize(7.2)
            .heightOfString(row[field] || "", { width: fieldWidth - 2 * padding }) + 2 * padding;
        rowHeight = Math.max(rowHeight, fieldTextHeight);
      }
  
      for (let field in row) {
        doc
          .fillColor("#f5f5f5")
          .rect(currentX, startY, fieldWidth, rowHeight)
          .stroke("black")
          .fill();
  
        const isHeader = rowIndex === 0;
        doc
          .font(isHeader ? "Helvetica-Bold" : "Helvetica")
          .fillColor("black")
          .fontSize(7.2)
          .text(row[field], currentX + padding, startY + padding, {
            baseline: "hanging",
            width: fieldWidth - 2 * padding,
            align: "left",
          });
  
        currentX += fieldWidth;
      }
  
      startY += rowHeight; // Move to next row
    });
  
    // Draw the 7th row with no columns
    doc
      .font("Helvetica-Bold")
      .fillColor("black")
      .fontSize(7.2)
      .text("As Separately Provided", startX + padding, startY + padding, {
        width: boxWidth - 2 * padding,
        align: "center",
      });
  
    // Adjust starting Y for the final row
    startY += finalRowHeight;
  }
  

  const tableData1 = [
    {
      installmentNo: "Installment No.",
      dueDate: "Due Date",
      installmentAmount: "Installment Amount",
      openingPrincipal: "Opening Principal",
      interestComponent: "Interest Component",
      principalComponent: "Principal Component",
      outstandingPrincipal: "Outstanding Principal",
  },
    {
        installmentNo: "1st",
        dueDate: "_ _/_ _/_ _",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "2nd",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "3rd",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "4th",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "5th",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "",
        dueDate: "",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    // 7th Row: No columns, text only
    {
        text: "As Separately Provided"
    }
];

tableFunction1(tableData1);

    // doc.addPage();
    // // addLogo();
    
    // doc.moveDown(2);

    
    
//     const pageWidth = doc.page.width;
    
//     doc
//        .fontSize(12) 
//        .text("Schedule II", (pageWidth / 2) - (doc.widthOfString("Schedule II") / 2), doc.y, {
//            baseline: 'hanging'
//        });
    
//     doc.moveDown(1);
    
//     // Center "Repayment Schedule"
//     doc.fontSize(12)
//        .text("Repayment Schedule", (pageWidth / 2) - (doc.widthOfString("Repayment Schedule") / 2), doc.y);
    
//     doc.moveDown(1);
    
//     // Center "As Separately Provided"
//     doc
//        .fontSize(12)
//        .text("As Separately Provided", (pageWidth / 2) - (doc.widthOfString("As Separately Provided") / 2), doc.y, {
//            lineGap: 1
//        });
    
//     doc.moveDown(1);

//     function tableFunction1(tableData) {
//       const startX = 53; // Starting X position
//       let startY = doc.y + 10; // Starting Y position
//       const boxWidth = 500; // Total width of the box
//       const numFields = 7; // Fixed to 7 columns
//       const fieldWidth = boxWidth / numFields; // Width per column
    
//       let totalHeight = 0;
    
//       // Calculate total height for the first 6 rows
//       tableData.slice(0, 6).forEach((row) => {
//           if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
//           let rowHeight = 0;
//           for (let field in row) {
//               const fieldTextHeight = doc
//                   .font('Helvetica')
//                   .fontSize(7.2)
//                   .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
//               rowHeight = Math.max(rowHeight, fieldTextHeight);
//           }
//           totalHeight += rowHeight;
//       });
  
//       // Add height for the 7th row (text-only, no columns)
//       const finalRowHeight = doc
//           .font('Helvetica')
//           .fontSize(7.2)
//           .heightOfString("As Separately Provided", { width: boxWidth }) + 10;
//       totalHeight += finalRowHeight;
    
//       // Draw the outer box
//       doc.fillColor("#f0f0f0")
//           .rect(startX, startY, boxWidth, totalHeight)
//           .stroke("black")
//           .fill();
    
//       // Draw table content for the first 6 rows
//       tableData.slice(0, 6).forEach((row, rowIndex) => {
//           if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
//           let currentX = startX;
//           let rowHeight = 0;
    
//           for (let field in row) {
//               const fieldTextHeight = doc
//                   .font('Helvetica')
//                   .fontSize(7.2)
//                   .heightOfString(row[field] || '', { width: fieldWidth }) + 10;
//               rowHeight = Math.max(rowHeight, fieldTextHeight);
//           }
  
//           for (let field in row) {
//               doc.fillColor("#f5f5f5")
//                   .rect(currentX, startY, fieldWidth, rowHeight)
//                   .stroke("black")
//                   .fill();
    
//               const isHeader = rowIndex === 0;
//               doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
//                   .fillColor("black")
//                   .fontSize(7.2)
//                   .text(row[field], currentX + 5, startY + 5, {
//                       baseline: "hanging",
//                       width: fieldWidth - 10,
//                       align: 'left',
//                   });
    
//               currentX += fieldWidth;
//           }
    
//           startY += rowHeight; // Move to next row
//       });
  
//       // Draw the 7th row with no columns
//       doc.font('Helvetica-Bold')
//           .fillColor("black")
//           .fontSize(7.2)
//           .text("As Separately Provided", startX + 5, startY + 5, {
//               width: boxWidth - 10,
//               align: 'center',
//           });
    
//       // Adjust starting Y for the final row
//       startY += finalRowHeight;
//   }

//   const tableData1 = [
//     {
//       installmentNo: "Installment No.",
//       dueDate: "Due Date",
//       installmentAmount: "Installment Amount",
//       openingPrincipal: "Opening Principal",
//       interestComponent: "Interest Component",
//       principalComponent: "Principal Component",
//       outstandingPrincipal: "Outstanding Principal",
//   },
//     {
//         installmentNo: "1st",
//         dueDate: "_ _/_ _/_ _",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "2nd",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "3rd",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "4th",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "5th",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "",
//         dueDate: "",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     // 7th Row: No columns, text only
//     {
//         text: "As Separately Provided"
//     }
// ];

// tableFunction1(tableData1);


  
    
    

    
      
    
      //addFooter();
    
//       //------------------------------------------------------------new page----------------------------------------------
      doc.addPage();
      // addLogo();
      //drawBorder();
      // Add title and content from the image
      doc.moveDown(2);
    
      doc
      .fontSize(7)
      .font(fontBold)
      .text("Schedule III", { align: "center" })
      .text("Description of Immovable Property", { align: "center" })
      .moveDown(0.5)
      .text("Property 1:", { align: "center" })
      .moveDown(0.5)
      .text(`${allPerameters.techfullAdress}`, { align: "center" })
      // .moveDown(0.5)
      // .text("Gram Panchyat Sikandari Tehsil Khilchipur District Rajgarh", { align: "center" })
      // .moveDown(0.5)
      // .text("State Madhya Pradesh Pin Code 465687", { align: "center" })
      .fontSize(9)
      .moveDown(0.5)
      .text("SCHEDULE OF CHARGES", { align: "center" });
    
    doc.moveDown(1);
    // Add a function to draw black table borders
    // function drawTable(tableData) {
    //     // Add Table Header
    //     const startX = 50;
    //     let startY = doc.y + 10;
    //     const columnWidths = [50, 150, 150, 150]; // Adjust column widths as needed
    //     const totalWidth = columnWidths.reduce((a, b) => a + b, 0);
    
    //     // Draw the title row (first row)
    //     const titleRow = tableData[0];
    //     const titleWidth = totalWidth; // Span all columns
    
    //     // Calculate title row height based on text height
    //     const titleHeight = doc
    //         .font(font)
    //         .fontSize(7.2)
    //         .heightOfString(titleRow.field1, { width: titleWidth });
    
    //     // Draw a single rectangle for the title row
    //     doc
    //         .fillColor("blue") // Light sky blue color
    //         .rect(startX, startY, titleWidth, titleHeight + 10) // Height adjusted for title text
    //         .stroke("black")
    //         .fill();
    
    //     // Draw the title text centered and bold
    //     doc
    //         .font('Helvetica-Bold') // Make title bold
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(titleRow.field1, startX, startY + 5, {
    //             baseline: "hanging",
    //             width: titleWidth,
    //             align: "center" // Center align the title text
    //         });
    
    //     // Move startY down for the next row
    //     startY += titleHeight + 10;
    
    //     // Draw column headers (second row)
    //     const headers = tableData[1];
    //     const headerHeight = 15; // Fixed height for headers
    
    //     columnWidths.forEach((colWidth, index) => {
    //         const headerX = startX + columnWidths.slice(0, index).reduce((a, b) => a + b, 0);
    //         doc
    //             .fillColor("#f5f5f5")
    //             .rect(headerX, startY, colWidth, headerHeight)
    //             .stroke("black") // Draw border around header cell
    //             .fill();
    
    //         // Draw header text centered and bold
    //         const headerText = headers[`field${index + 1}`]; // Adjust index for field names
    //         doc
    //             .font('Helvetica-Bold') // Make header bold
    //             .fillColor("black")
    //             .fontSize(7.2)
    //             .text(headerText, headerX, startY + 5, {
    //                 baseline: "hanging",
    //                 width: colWidth,
    //                 align: "center" // Center align header text
    //             });
    //     });
    
    //     // Move startY down for the next row
    //     startY += headerHeight;
    
    //     // Draw data rows (starting from the third row)
    //     for (let i = 2; i < tableData.length; i++) {
    //         const row = tableData[i];
    
    //         // Calculate row height based on the cell contents
    //         const rowHeight = Math.max(
    //             doc.font(font).fontSize(7.2).heightOfString(row.value1 || "", { width: columnWidths[0] }),
    //             doc.font(font).fontSize(7.2).heightOfString(row.value2 || "", { width: columnWidths[1] }),
    //             doc.font(font).fontSize(7.2).heightOfString(row.value3 || "", { width: columnWidths[2] }),
    //             doc.font(font).fontSize(7.2).heightOfString(row.value4 || "", { width: columnWidths[3] })
    //         ) + 10; // Additional space for padding
    
    //         // Alternate row background color
    //         doc.fillColor(i % 2 === 0 ? "#f5f5f5" : "#ffffff");
    //         doc.rect(startX, startY, totalWidth, rowHeight).stroke("black").fill();
    
    //         // Draw cells normally
    //         doc.fillColor("#ffffff"); // Ensure cell background is white for content
    
    //         // Check if value4 is missing and determine how to draw the cells
    //         if (!row.value4) {
    //             // If value4 is missing, span value3 across the last two columns
    //             const spanWidth = columnWidths[2] + columnWidths[3]; // Combine width of value3 and value4
    //             const cellX = startX + columnWidths[0] + columnWidths[1]; // Starting position for value3
    
    //             doc.rect(cellX, startY, spanWidth, rowHeight).stroke("black").fill();
    //             doc.font('Helvetica-Bold').fillColor("black").fontSize(7.2)
    //                 .text(row.value3 || "", cellX, startY + 5, {
    //                     baseline: "hanging",
    //                     width: spanWidth,
    //                     align: "center" // Center align cell text
    //                 });
    
    //             // Draw value1, value2 normally
    //             columnWidths.slice(0, 2).forEach((colWidth, index) => {
    //                 const cellText = row[`value${index + 1}`] || ""; // Adjust index for value names
    //                 const cellX = startX + columnWidths.slice(0, index).reduce((a, b) => a + b, 0);
    
    //                 doc.rect(cellX, startY, colWidth, rowHeight).stroke("black").fill();
    //                 doc.font('Helvetica-Bold').fillColor("black").fontSize(7.2)
    //                     .text(cellText, cellX, startY + 5, {
    //                         baseline: "hanging",
    //                         width: colWidth,
    //                         align: "center" // Center align cell text
    //                     });
    //             });
    //         } else {
    //             // Draw each column in the row normally
    //             columnWidths.forEach((colWidth, index) => {
    //                 const cellText = row[`value${index + 1}`] || ""; // Adjust index for value names
    //                 const cellX = startX + columnWidths.slice(0, index).reduce((a, b) => a + b, 0);
    
    //                 doc.rect(cellX, startY, colWidth, rowHeight).stroke("black").fill();
    //                 doc.font('Helvetica-Bold').fillColor("black").fontSize(7.2)
    //                     .text(cellText, cellX, startY + 5, {
    //                         baseline: "hanging",
    //                         width: colWidth,
    //                         align: "center" // Center align cell text
    //                     });
    //             });
    //         }
    
    //         startY += rowHeight;
    //     }
    // }
    
    // const loanTableData = [
    //     { field1: "Other Charges during the term of loan" },
    //     { field1: "Sr. No.", field2: "Particulars of Charges", field3: "Charges (In Rs./%)", field4: "Charge Details" },
    //     { value1: "1", value2: "Repayment Instruction / Instrument Return Charge", value3: `Rs. 750`, value4: "Per Instance of dishonor of cheque / ECS debit instruction + GST as Applicable" },
    //     { value1: "2", value2: "Repayment mode Swap Charges", value3:  `Rs. 750`, value4: "Per occasion of swapping of the PDCs / ECS mandate + GST as Applicable" },
    //     { value1: "3", value2: "Penal Charges", value3:`- 2% per month on the overdue amount plus applicable taxes in the event of default in repayment of loan instalments \n\n - 2 % per month on the outstanding loan facility amount plus applicable taxes for non-compliance of agreed terms and conditions mentioned in the Sanction Letter`},
    //     { value1: "4", value2: "Duplicate statement issuance charges", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable" },
    //     { value1: "5", value2: "Cheque re-presentation charges", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable" },
    //     { value1: "6", value2: "Duplicate Amortization schedule issuance charges", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable" },
    //     { value1: "7", value2: "Document Retrieval Charges", value3: `Rs.500`, value4: "Per Instance per set + GST as Applicable"},
    //     { value1: "8", value2: "Charges for subsequent set of Photocopy of loan agreement/documents were requested by Borrower", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable"},
    //     { value1: "9", value2: "Stamp Duty Charges", value3:`As applicable in the state stamp act`},
    //     { value1: "10", value2: "Prepayment/Pre-loan closure charges (including part payment) ", value3: `As per Sanction Terms and Conditions`},
    //     { value1: "11", value2: "Administrative Charges/Processing Fees & Other Charges", value3: `As per Sanction Terms and Conditions`},
    //     { value1: "12", value2: "Charges for duplicate NOC / No due certificate", value3:`Rs. 250`, value4: "Per Instance per set + GST as Applicable"},
    //     { value1: "13", value2: "Charges for revalidation NOC", value3:`Rs. 250`, value4: "Per Instance per set + GST as Applicable"}, 
    // ];
      
    // drawTable(loanTableData);

    function DRAWTABLE123(tableTitle, tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
      // Draw table title with a colored header
      doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
      doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5)
          .text(tableTitle, startX + 5, startY + 5, { align: 'center' });
  
      startY += 20; // Move down for the first row
  
      let sectionIndex = null; // Track the section index to span the column
  
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Apply custom style for row 1 (title2)
          
  
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
  
          // Calculate row height based on the tallest content
          const rowHeight = Math.max(20, field1Height, value1Height) + 10; // Adding padding for better spacing
  
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
  
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Stroke color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
  
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
  
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
  
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
  }
 



  const scheduleOfCharges = [
    { index: "sr.No", field1: "Particulars of Charges", value1: "Charge Details" },

    { index: "1", field1: "Repayment Instruction / Instrument Return Charges / PDC / ECS / NACH Bounce Charges", value1: "Rs 750/- Per Instance (Plus GST as applicable)" },
    { index: "2", field1: "Repayment Mode Swap Charges", value1: "Rs 750/- Per Instance (Plus GST as applicable)" },
    { index: "3", field1: "Penal Charges", value1: " 2% per month on the overdue amount plus applicable taxes in the event of default in repayment of loan installments\n 2% per month on the outstanding loan facility amount plus applicable taxes for non-compliance of agreed terms and conditions mentioned in the Sanction Letter" },
    { index: "4", field1: "Duplicate Statement Issuance Charges (SOA / RPS)", value1: "Free once in a Financial Year.Thereafter Rs 250/- (Plus GST as applicable)" },
    { index: "5", field1: "Cheque / NACH Representation Charges", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "6", field1: "Duplicate Amortization Schedule Issuance Charges", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "7", field1: "Document Retrieval Charges", value1: "Rs 500/- Per Instance per set (Plus GST as applicable)" },
    { index: "8", field1: "Charges for Subsequent Set of Photocopy of Loan Agreement/Documents Were Requested by Borrower", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "9", field1: "Stamp Duty Charges", value1: "As applicable in the state stamp act" },
    { index: "10", field1: "Prepayment Charges", value1: "No prepayment allowed till completion of 12 months from the date of 1st disbursement. After completion of 12 months from the date of 1st disbursement, prepayment from personal funds may be made without incurring any fees. In case of balance transfer, 4% charges will be applicable." },
    { index: "11", field1: "Foreclosure Charges", value1: "In case of foreclosure of Loan from Owned Funds, no Foreclosure Charges will be applicable. In case of balance transfer, 4% of the Outstanding Principal Amount will be applicable." },
    { index: "12", field1: "Administrative Charges / Processing Fees & Other Charges", value1: "Nil" },
    { index: "13", field1: "Charges for Duplicate NOC / No Due Certificate", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "14", field1: "Charges for Revalidation NOC", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "15", field1: "Cersai Charge", value1: "- When facility amount is equal to Rs 5 Lacs or lesser, Rs 50 plus GST\n- When facility amount is greater than Rs 5 Lacs, Rs 100 plus GST" },
    // { index: "16", field1: "Login Fees", value1: "₹1950/- (Inclusive of all Applicable Taxes)" },
    // { index: "17", field1: "Processing Fees", value1: "2% of loan amount + Applicable taxes" },
    // { index: "18", field1: "Documentation Charges", value1: "2% of loan amount + Applicable taxes (For under construction cases 3% of loan amount + Applicable taxes)" },
    // { index: "19", field1: "Issuance of Duplicate Income Tax Certificate", value1: "NIL" },
    // { index: "20", field1: "Legal / Collections / Vehicle Storage / Repossession and Incidental Charges", value1: "As per Actuals" }
  ];

  DRAWTABLE123("Schedule of Charges (MITC)", scheduleOfCharges);
  doc.addPage();
  // addLogo();
  //drawBorder();
  doc.moveDown(6);
  const scheduleOfCharges1 = [
   
    { index: "16", field1: "Login Fees", value1: "Rs 1950/- (Inclusive of all Applicable Taxes)" },
    { index: "17", field1: "Processing Fees", value1: "2% of loan amount + Applicable taxes" },
    { index: "18", field1: "Documentation Charges", value1: "2% of loan amount + Applicable taxes (For under construction cases 3% of loan amount + Applicable taxes)" },
    { index: "19", field1: "Issuance of Duplicate Income Tax Certificate", value1: "NIL" },
    { index: "20", field1: "Legal / Collections / Vehicle Storage / Repossession and Incidental Charges", value1: "As per Actuals" }
  ];

    DRAWTABLE123("Schedule of Charges (MITC)", scheduleOfCharges1);


  
  
    
    doc.moveDown(2);
    const startX = 50; // Starting position for text from the left (adjust as per your margins)
    
    doc
    .font(fontBold) // Ensure bold font is applied
    .fontSize(8)
    .fillColor("black")
    .text(
    `IN WITNESS WHEREOF the Parties have executed this Agreement on the day and the year as mentioned in the Schedule,\n`,
    startX, // Start from the left position (left margin)
    doc.y, // Current vertical position (doc.y)
    {
      align: 'left', // Align the text to the left (default)
      align: "justify",
      width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    }
    ).moveDown()
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
    `SIGNED AND DELIVERED BY WITHIN NAMED BORROWER/ CO-BORROWER \n`,
    startX, // Start from the left position (left margin)
    doc.y, // Current vertical position (doc.y)
    {
      align: 'left', // Align the text to the left (default)
      align: "justify",
      width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    }
    ).moveDown()
    .font(fontBold)
    .fontSize(8)
    .fillColor("black")
    .text(
    `If Company/Trust/Society, by its Authorized Signatory with its seal/stamp OR If Limited Liability Partnership, by its Designated Partner and Authorized Signatory seal/stamp OR If Partnership Firm, by its Designated Partner and Authorized Signatory seal/stamp OR If HUF, through its Karta or If Individual, by the individual Borrower; AND by the Co-Borrower (if applicable)\n
    SIGNED AND DELIVERED BY WITHIN NAMED GUARANTOR(s)\n
    If Company, by its Authorized Signatory OR If Limited Liability Partnership, by its Designated Partner and Authorized Signatory OR If Partnership Firm, by its Designated Partner and Authorized Signatory OR If HUF, through its Karta Or If Individual, by the individual Borrower`,
    startX, // Start from the left position (left margin)
    doc.y, // Current vertical position (doc.y)
    {
      align: 'left', // Align the text to the left (default)
      align: "justify",
      width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    }
    );
    
    
    doc.moveDown(2);

    function firstBoxTable(tableData) {
      // Add Table Header
      const startX = 50; // Starting X position for the box
      let startY = doc.y + 10; // Starting Y position for the box
      const boxWidth = 500; // Adjust the width of the box as per your need
    
      // Calculate the total height needed for the entire box
      let totalHeight = 0;
    
      // Calculate the height for each row and determine the total height of the box
      tableData.forEach((row) => {
        const rowHeight = doc
          .font(font)
          .fontSize(7.2)
          .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
    
        totalHeight += rowHeight; // Accumulate the total height
      });
    
      // Draw the outer rectangle for the box
      doc
        .fillColor("#f0f0f0") // Box background color
        .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
        .stroke("black") // Border color
        .fill();
    
      // Loop through the data and draw the text inside the box
      tableData.forEach((row, rowIndex) => {
        // Calculate row height based on the content
        const rowHeight = doc
          .font(font)
          .fontSize(7.2)
          .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
    
        // Alternate row background color (optional)
        doc
          .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff") // Alternate row colors
          .rect(startX, startY, boxWidth, rowHeight) // Draw rectangle for each row
          .stroke("black") // Border color for each row
          .fill();
    
        // Draw the text in the box
        doc
          .font(font)
          .font('Helvetica-Bold')
          .fillColor("black")
          .fontSize(7.2)
          .text(row.field1, startX + 5, startY + 5, {
            baseline: "hanging",
            width: boxWidth - 10, // Adjust width to provide padding inside the box
            align: "left", // Align text to the left
          });
    
        // Move to the next row
        startY += rowHeight;
      });
    }
    
    const firstBoxLine = [
      { field1: `BORROWER'S NAME : ${allPerameters.borrowerName}` },
      { field1: `CO-APPLICANT'S NAME : ${allPerameters.coBorrowername}` },
      // { field1: `2nd CO-APPLICANT'S NAME : ${allPerameters.coBorrowername2}` },
      { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
    ];
    
    firstBoxTable(firstBoxLine);
    //addFooter();
    
//     //---------------------------------------------------new page---------------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(2);
    
    // function firstBoxTable(tableData) {
    //     // Add Table Header
    //     const startX = 50; // Starting X position for the box
    //     let startY = doc.y + 10; // Starting Y position for the box
    //     const boxWidth = 500; // Adjust the width of the box as per your need
      
    //     // Calculate the total height needed for the entire box
    //     let totalHeight = 0;
      
    //     // Calculate the height for each row and determine the total height of the box
    //     tableData.forEach((row) => {
    //       const rowHeight = doc
    //         .font(font)
    //         .fontSize(7.2)
    //         .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
      
    //       totalHeight += rowHeight; // Accumulate the total height
    //     });
      
    //     // Draw the outer rectangle for the box
    //     doc
    //       .fillColor("#f0f0f0") // Box background color
    //       .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    //       .stroke("black") // Border color
    //       .fill();
      
    //     // Loop through the data and draw the text inside the box
    //     tableData.forEach((row, rowIndex) => {
    //       // Calculate row height based on the content
    //       const rowHeight = doc
    //         .font(font)
    //         .fontSize(7.2)
    //         .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
      
    //       // Alternate row background color (optional)
    //       doc
    //         .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff") // Alternate row colors
    //         .rect(startX, startY, boxWidth, rowHeight) // Draw rectangle for each row
    //         .stroke("black") // Border color for each row
    //         .fill();
      
    //       // Draw the text in the box
    //       doc
    //         .font(font)
    //         .font('Helvetica-Bold')
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(row.field1, startX + 5, startY + 5, {
    //           baseline: "hanging",
    //           width: boxWidth - 10, // Adjust width to provide padding inside the box
    //           align: "left", // Align text to the left
    //         });
      
    //       // Move to the next row
    //       startY += rowHeight;
    //     });
    //   }
      
    //   const firstBoxLine = [
    //     { field1: `BORROWER'S NAME : ${allPerameters.borrowerName}` },
    //     { field1: `CO-APPLICANT'S NAME : ${allPerameters.coBorrowername}` },
    //     { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
    //   ];
      
    //   firstBoxTable(firstBoxLine);
    //   doc.moveDown(1);
    //   doc
    //   .font(fontBold) // Ensure bold font is applied
    //   .fontSize(8)
    //   .fillColor("black")
    //   .text(
    //     `AND SIGNED AND DELIVERED BY THE WITHIN NAMED LENDER,\n
    //     Ratnaa fin Capital Private Limited, by the hands of pls confirm authorized name its authorized official.`,
    //     startX, // Start from the left position (left margin)
    //     doc.y, // Current vertical position (doc.y)
    //     {
    //       align: 'left', // Align the text to the left (default)
    //       align: "justify",
    //       width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    //     }
    //   );
    
    //   function secondBoxLine(tableData) {
    //     // Add Table Header
    //     const startX = 50; // Starting X position for the box
    //     let startY = doc.y + 10; // Starting Y position for the box
    //     const boxWidth = 500; // Total width of the box
    //     const field1Width = 100; // Width for the field1 column
    //     const valueWidth = boxWidth - field1Width; // Width for the value column
        
    //     // Calculate the total height needed for the entire box
    //     let totalHeight = 0;
      
    //     // Calculate the height for each row and determine the total height of the box
    //     tableData.forEach((row) => {
    //       // Calculate row height based on the content in the value field
    //       const valueTextHeight = doc
    //         .font('Helvetica') // Regular font for calculating height
    //         .fontSize(7.2)
    //         .heightOfString(row.value || '', { width: valueWidth }) + 10; // Add padding
      
    //       totalHeight += valueTextHeight; // Accumulate the total height
    //     });
      
    //     // Draw the outer rectangle for the box
    //     doc
    //       .fillColor("#f0f0f0") // Box background color
    //       .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    //       .stroke("black") // Border color
    //       .fill();
      
    //     // Loop through the data and draw the text inside the box
    //     tableData.forEach((row) => {
    //       // Calculate row height based on the content in value field
    //       const valueTextHeight = doc
    //         .font('Helvetica') // Regular font for calculating height
    //         .fontSize(7.2)
    //         .heightOfString(row.value || '', { width: valueWidth }) + 10; // Add padding
      
    //       // Draw rectangle for the field1 box
    //       doc
    //         .fillColor("#f5f5f5") // Background color for field1 (empty box)
    //         .rect(startX, startY, field1Width, valueTextHeight)
    //         .stroke("black") // Border for field1 box
    //         .fill();
      
    //       // Draw rectangle for the value box
    //       doc
    //         .fillColor("#ffffff") // Background color for value
    //         .rect(startX + field1Width, startY, valueWidth, valueTextHeight)
    //         .stroke("black") // Border for value box
    //         .fill();
      
    //       // Draw the field1 text in the left column (in bold)
    //       doc
    //         .font('Helvetica-Bold') // Set font to bold for field1
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(row.field1, startX + 5, startY + 5, {
    //           baseline: "hanging",
    //           width: field1Width - 10, // Adjust width to provide padding inside the box
    //           align: "left", // Align text to the left
    //         });
      
    //       // Draw the value text in the right column (regular font)
    //       doc
    //         .font('Helvetica') // Set font back to regular for value
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(row.value, startX + field1Width + 5, startY + 5, {
    //           baseline: "hanging",
    //           width: valueWidth - 10, // Adjust width to provide padding inside the box
    //           align: "left", // Align text to the left
    //         });
      
    //       // Move to the next row
    //       startY += valueTextHeight;
    //     });
    //   }
      
    //   const secondBox = [
    //     { field1: " ", value: `Authorised official's Name: ${allPerameters.borrowerName}\n\nAuthorised official's Signature: ` }
    //   ];
    //   secondBoxLine(secondBox); 
      // doc.moveDown(6);
    
    // // Define the left margin and the width for centering
    const leftX = 50; // Left margin for left-aligned text
    const titleWidth = 400; // Width for the title text
    const centerX = (doc.page.width - titleWidth) / 2; // Calculate center position manually
    
    // Title (Centered and Bold)
    const startXX= 50; // Starting position for text from the left (adjust as per your margins)

    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`Place: ${allPerameters.placeOfExecution}`, startXX, doc.y, { align: "left", width: 470 ,continued:true});
    doc.moveDown(1);

    doc
    .fontSize(9)
    .font('Helvetica')
    .text(` Date: ${allPerameters.agreementdate}`, startXX, doc.y, { align: "right", width: 470 });
    doc.moveDown(1);
    doc
    .fontSize(9)
    .font(fontBold) // Bold for title
    .text("DECLARATIONS CUM UNDERTAKINGS CUM AUTHORITY", centerX, doc.y, { width: titleWidth, align: "center" }) // Manually centered
    .moveDown(0.7);
    
    // Left-aligned text
    doc
    .font(font) // Regular font for left-aligned text
    .fontSize(8)
    .text(`IN CONSIDERATION OF Ratnaafin Capital Private limited, (the Lender) providing or agreeing to provide the Agri Micro LOAN AGAINST PROPERTY to me/us on the terms and conditions contained in the Loan Agreement dated ${allPerameters.agreementdate} and other Transaction Documents,`, leftX, doc.y, { width: doc.page.width - 100, align: "left" })
    .moveDown(0.8);
    
    // Center-aligned bold text
    // doc
    // .font(fontBold) // Bold for center-aligned text
    // .fontSize(8)
    // .text("In case of Individual Borrower", centerX, doc.y, { width: titleWidth, align: "center", underline: true })
    // .moveDown(0.8);
    
    // Left-aligned text
    doc
    .font(font) // Regular font for left-aligned text
    .fontSize(9)
    .text(`I/We, ${allPerameters.borrowerName} residing at ${allPerameters.borroewraddress} (hereinafter referred to as “the Borrower”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" })
    .moveDown(0.8);
    
    // Center-aligned bold "AND"
    doc
    .font(fontBold) // Bold for center-aligned text
    .fontSize(9)
    .text("AND", centerX, doc.y, { width: titleWidth, align: "center" })
    .moveDown(0.8);
    
    // Left-aligned text
    doc
    .font(font) // Regular font for left-aligned text
    .text(`I/We,${allPerameters.coBorrowername} residing at ${allPerameters.coBorroweraddress} (hereinafter referred to as “the CO Borrower”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    // .moveDown(0.8);
    doc
    .font(fontBold) // Bold for center-aligned text
    .fontSize(9)
    .text("AND", centerX, doc.y, { width: titleWidth, align: "center" })
    .moveDown(0.4);
    
    // Center-aligned bold "AND"
    // doc
    // .font(fontBold) // Bold for center-aligned text
    // .fontSize(9)
    // .text("AND", centerX, doc.y, { width: titleWidth, align: "center" })
    // .moveDown(0.8);

    doc
    .font(font) // Regular font for left-aligned text
    .text(`I/We,${allPerameters.coBorrowername2} residing at ${allPerameters.coBorroweraddress2} (hereinafter referred to as “the CO Borrower”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    doc
    .font(fontBold) // Bold for center-aligned text
    .fontSize(9)
    .text("AND", centerX, doc.y, { width: titleWidth, align: "center" })
    .moveDown(0.4);
    doc
    .font(font) // Regular font for left-aligned text
    .text(`I/We,${allPerameters.guarantorname} residing at ${allPerameters.guarantoraddress} (hereinafter referred to as “the Guarantor”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    // Left-aligned text
    // doc
    // .font(fontBold) // Regular font for left-aligned text
    // .text(` ${allPerameters.guarantorname} `, leftX, doc.y, { width: doc.page.width - 100, align: "left" })
    doc.moveDown(0.8);
    
    // Final paragraph (Left-aligned)
    
    doc
    .fontSize(9)
    .text("(Hereinafter referred to as ”the Guarantors”/”Co-Borrowers”) hereby jointly and severally, agree, undertake, authorize, assure and affirm as follows:", leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    
    doc.moveDown(2);
    // Format the borrower details to the left side
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `1. I/We agree and undertake that for the credit facilities granted to the Borrowers and/or availed by the Borrowers, the Lender will be entitled/authorized/permitted to charge and/or deduct/debit/recover from my/our Accounts such sum or sums of money as the Lender may stipulate, incur or bear by way of guarantee fee, document verification fees, or any other levy or charge payable by the Borrower to the Lender for availing finance, including for verification of security documents by the Lender’s Advocate/s and other such fees as payable by the Borrower to the Lender in respect of facilities extended to the Borrowers.\n\n
       2. I/We further agree, authorize, assure and confirm that in the event of any default committed by me/us in compliance Of the terms and conditions or any of them stipulated by the Lender from time to time, the Lender shall be entitled, permitted and authorized to charge without any intimation to us penal charges at such rate and in accordance with such rules/regulation of the Lender and/or such Rules or regulations or stipulations/directives/guidelines of the Reserve Bank of India on the amount due and payable by the Borrowers to the Lender in respect of the credit facilities/financial accommodation extended to the Borrowers by the Lender.\n\n
       3. I/We further agree, authorize, assure and confirm that in the event of the Lender obtaining any insurance cover or cover for financial risk from an insurance company/ies or any other institution/firm/Body Corporate or otherwise over the assets charged/ hypothecated/ pledged or mortgaged to the Lender or otherwise taken possession of by the Lender on account of or in consideration of the dues payable by the Borrower for the facilities extended to my/our Account/s without any further formalities and intimation by the Lender of having obtained such insurance, or financial risk cover and such letter informing about the Lender having taken such insurance cover, etc., would be sufficient proof there of enabling the Lender to recover and/or charge the same to my/our accounts/s.\n\n
       4. I/We further agree, authorize, assure and confirm that the Lender shall be entitled to charge interest at the rate as may be decided by the Lender for the adhoc facility/facilities agreed to be extended/may be extended by the Lender to the Borrower and such interest may be continued to be charged to me/us by the Lender as long as the Borrower avail such adhoc facility and/or earlier, as may be decided by the Lender from time to time.\n\n
       5. I/We further agree, assure and undertake that in the event of Lender requiring any information for processing/review of my/our account including furnishing of statements of stocks/Balance Sheet (audited or otherwise), CMA Data statement of  other particulars  may be required by the Lender within the stipulated period or at the time of processing/review of my/our account, and if for any reason whatsoever I am/we are unable to furnish the same within a week or such other reasonable time as the Lender may, upon specific request by me/us, agree to in writing, then the Lender shall be entitled to charge to my/our account and/or claim penal charges at the rate of 24% P.A. on outstanding dues, not with standing the technical review of my/our account as may be otherwise carried out by the Lender in the absence of such information, submission as required by the Lender.\n\n`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    
    
    //addFooter();
    
//     //---------------------------------------------new page ------------------------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(2);
    
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `
       6. In case if the information about legal heirs is incomplete, inadequate, or not provided, I/We, the undersigned, hereby irrevocably agree, declare, undertake, assure, and confirm that the legal heirs, as mandated under the relevant applicable laws of India, represent the comprehensive enumeration of all my/our legal heirs, both known and unknown, at the time of executing this agreement. I hereby provide my irrevocable consent to the Lender, its successors, and assigns, to pursue any and all legal remedies for the recovery of any outstanding obligations, including but not limited to, the repayment of loans, accrued interest, fees, and charges, from any and all of my/our legal heirs, including those who may come into existence after the execution of this agreement, in the event of my/our demise or the demise of any and all of us during the existence or pendency of credit facilities extended by the Lender to the Borrower. Furthermore, I acknowledge that this consent shall remain in full force and effect throughout the entire term of any credit facility and beyond until all outstanding obligations to the Lender have been fully discharged and satisfied. I also undertake to promptly notify the Lender of any changes in the composition of my/our legal heirs, including additions or alterations.\n\n
       7. I/We further agree, undertake, and assure that I/We shall promptly inform you in writing of any change in the above particulars of my/our legal heirs that may be occasioned by birth, death, marriage, etc., and/or, on account of any amendment/change in the general statutes/laws of the country.\n\n
       8. . I/We also hereunder submit the particulars of immovable properties belonging to me/us, which have been charged to the Lender as security for financial assistance granted to the Borrower`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    doc.moveDown(1);
    
    // function tableFunction(tableData) {
    //     // Add Table Header
    //     const startX = 50; // Starting X position for the box
    //     let startY = doc.y + 10; // Starting Y position for the box
    //     const boxWidth = 500; // Total width of the box
    //     const numFields = Object.keys(tableData[0]).length; // Get number of fields from the first row
    //     const fieldWidth = boxWidth / numFields; // Calculate width for each column
    
    //     // Calculate the total height needed for the entire box
    //     let totalHeight = 0;
    
    //     // Calculate the height for each row and determine the total height of the box
    //     tableData.forEach((row) => {
    //         // Calculate row height based on the content in each field
    //         let rowHeight = 0;
    //         for (let field in row) {
    //             const fieldTextHeight = doc
    //                 .font('Helvetica') // Regular font for calculating height
    //                 .fontSize(7.2)
    //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
    //             rowHeight = Math.max(rowHeight, fieldTextHeight); // Get the maximum height for the row
    //         }
    //         totalHeight += rowHeight; // Accumulate the total height

           

    //     });
    
    //     // Draw the outer rectangle for the box
    //     doc
    //         .fillColor("#f0f0f0") // Box background color
    //         .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    //         .stroke("black") // Border color
    //         .fill();
    
    //     // Loop through the data and draw the text inside the box
    //     tableData.forEach((row, rowIndex) => {
    //         let currentX = startX; // Reset the starting X position for each row
    //         // Calculate row height based on the content in each field
    //         let rowHeight = 0;
    //         for (let field in row) {
    //             const fieldTextHeight = doc
    //                 .font('Helvetica') // Regular font for calculating height
    //                 .fontSize(7.2)
    //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
    //             rowHeight = Math.max(rowHeight, fieldTextHeight);

    //             // const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
    //             // const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    //             //  // Get the maximum height for the row
    //             // const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
    //             // const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
    //             // let rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding
                 

    //             if (rowIndex === 0) { // Example for a specific row index
    //               rowHeight = Math.max(rowHeight, 50); // Custom height for row at index 5
    //           }
    //           // const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
    //           // if (row.index) {
    //           //     sectionIndex = row.index; // Set current section index
    //           // }
    //           }
    
    //         // Draw rectangles for each field in the row
    //         for (let field in row) {
    //             // Draw rectangle for the field box
    //             doc
    //                 .fillColor("#f5f5f5") // Background color for field (empty box)
    //                 .rect(currentX, startY, fieldWidth, rowHeight)
    //                 .stroke("black") // Border for field box
    //                 .fill();
    
    //             // Set font style based on whether it's the header row
    //             const isHeader = rowIndex === 0; // Check if it's the header row
    //             doc
    //                 .font(isHeader ? 'Helvetica-Bold' : 'Helvetica') // Set font to bold for header
    //                 .fillColor("black")
    //                 .fontSize(7.2);
    
    //             // Determine text alignment based on field index (you can customize this as needed)
    //             const align = (field === 'field3') ? 'center' : 'left'; // Center field3, left for others
    
    //             // Draw the field text in the box
    //             doc.text(row[field], currentX + 5, startY + 5, {
    //                 baseline: "hanging",
    //                 width: fieldWidth - 10, // Adjust width to provide padding inside the box
    //                 align: align, // Align text based on content
    //             });
    
    //             // Move to the next column
    //             currentX += fieldWidth; // Update X position for the next field
    //         }
    
    //         // Move to the next row
    //         startY += rowHeight; // Update Y position for the next row
    //     });
    // }
    function tableFunction(tableData) {
      const startX = 53; // Starting X position
      let startY = doc.y + 10; // Starting Y position
      const boxWidth = 500; // Total width of the box
      const numFields = Object.keys(tableData[0]).length; // Number of columns
      const fieldWidth = boxWidth / numFields; // Width per column
  
      let totalHeight = 0;
  
      // Calculate total height
      tableData.forEach((row) => {
          if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
          let rowHeight = 0;
          for (let field in row) {
              const fieldTextHeight = doc
                  .font('Helvetica')
                  .fontSize(7.2)
                  .heightOfString(row[field] || '', { width: fieldWidth - 10 }) + 10; // Add padding
              rowHeight = Math.max(rowHeight, fieldTextHeight);
          }
          totalHeight += rowHeight;
      });
  
      // Draw the outer box
      doc.fillColor("#f0f0f0")
          .rect(startX, startY, boxWidth, totalHeight)
          .stroke("black")
          .fill();
  
      // Draw table content
      tableData.forEach((row, rowIndex) => {
          if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
          let currentX = startX;
          let rowHeight = 0;
  
          // Calculate row height for the current row
          for (let field in row) {
              const fieldTextHeight = doc
                  .font('Helvetica')
                  .fontSize(7.2)
                  .heightOfString(row[field] || '', { width: fieldWidth - 10 }) + 10; // Add padding
              rowHeight = Math.max(rowHeight, fieldTextHeight);
          }
  
          // Draw cells and their content
          for (let field in row) {
              doc.fillColor("#f5f5f5")
                  .rect(currentX, startY, fieldWidth, rowHeight)
                  .stroke("black")
                  .fill();
  
              const isHeader = rowIndex === 0;
              doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
                  .fillColor("black")
                  .fontSize(7.2)
                  .text(row[field], currentX + 5, startY + 5, { // 5px padding inside the cell
                      baseline: "hanging",
                      width: fieldWidth - 10, // Leave 5px padding on each side
                      align: 'left',
                  });
  
              currentX += fieldWidth;
          }
  
          startY += rowHeight; // Move to next row
      });
  
      // Set the `doc.y` position after the table ends
      doc.y = startY + 10; // Add extra 10 points for spacing after the table
  }
  
  
  //   function tableFunction(tableData) {
  //     const startX = 53; // Starting X position
  //     let startY = doc.y + 10; // Starting Y position
  //     const boxWidth = 500; // Total width of the box
  //     const numFields = Object.keys(tableData[0]).length; // Number of columns
  //     const fieldWidth = boxWidth / numFields; // Width per column
  
  //     let totalHeight = 0;
  
  //     // Calculate total height
  //     tableData.forEach((row) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
  //         let rowHeight = 0;
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }
  //         totalHeight += rowHeight;
  //     });
  
  //     // Draw the outer box
  //     doc.fillColor("#f0f0f0")
  //         .rect(startX, startY, boxWidth, totalHeight)
  //         .stroke("black")
  //         .fill();
  
  //     // Draw table content
  //     tableData.forEach((row, rowIndex) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
  //         let currentX = startX;
  //         let rowHeight = 0;
  
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10;
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }

          
  
  //         for (let field in row) {
  //             doc.fillColor("#f5f5f5")
  //                 .rect(currentX, startY, fieldWidth, rowHeight)
  //                 .stroke("black")
  //                 .fill();
  
  //             const isHeader = rowIndex === 0;
  //             doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
  //                 .fillColor("black")
  //                 .fontSize(7.2)
  //                 .text(row[field], currentX + 5, startY + 5, {
  //                     baseline: "hanging",
  //                     width: fieldWidth - 10,
  //                     align: 'left',
  //                 });
  
  //             currentX += fieldWidth;
  //         }
  
  //         startY += rowHeight; // Move to next row
  //     });
  //     doc.moveDown(); // Adds two lines of vertical space OR:
  // }
  
        
    const tableData = [
        { field1: "Item No.", field2: `Particulars of Immovable properties with full address (where situate, etc.)\n\n`, field3: "In whose name the property stands", field4: "Present Encumbrance", field5: "Whether leasehold or ownership", field6: "Present Market Value" },
        { field1: "1", field2: `${allPerameters.techfullAdress}\n\n`, field3:`${allPerameters.sellerName}&${allPerameters.buyerName}`, field4: `NO`, field5: `OWNERSHIP`, field6: `Rs.${allPerameters.presentMarketValue} - ${allPerameters.marketValuetowor}` }
    ];

//     const tableData = [
//     { 
//         field1: "Item No.", 
//         field2: "Particulars of Immovable properties with full address (where situate, etc.)",
//         field3: "Charges (In Rs./%)",
//         field4: "In whose name the property stands",
//         field5: "Whether leasehold or ownership",
//         field6: "Present Market Value"
//     },
//     { 
//         field1: "1",
//         field2: allPerameters.particularsImmovablePropertiesFullAddress || '',
//         field3: allPerameters.inWhoseNameThePropertyStands || '',
//         field4: allPerameters.presentEncumbrance || '',
//         field5: allPerameters.whetherLeaseholdOrOwnership || '',
//         field6: allPerameters.presentMarketValue || ''
//     }
// ].filter(row => Object.values(row).some(value => value.trim() !== '')); // Remove blank rows

    
    // Call the function to create the table
    tableFunction(tableData);   
    
    // doc.moveDown(14);
    
    
    const leftMargin = 50; // Set a custom left margin if needed
    const startY = doc.y;  // Start at the current y position
    
    doc
      .moveDown()
      .font(font)
      .fontSize(8)
      .fillColor("black")
      .text(
        `9. I/We also undertake, agree, assure and confirm that I/we shall not transfer, dispose of, alienate encumber or deal with in any manner, without prior permission in writing of the Lender, the assets, properties, tangible or intangible or immovable, as are charged or mortgaged to the Lender same in the usual course of my/our business or as provided for in documents executed in that behalf.`,
        leftMargin, // Set X position explicitly
        startY,     // Set Y position explicitly
        {
          lineGap: 2,
          width: 500, // Set a maximum width
          align: "left", // Align text to the left
          
        }
      );
    
    //addFooter();
    
//     //------------------------------------------new page ------------------------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(8);
    
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `10. I/We hereby declare further that the particulars of legal heirs, assets, etc., furnished by me/us as above are correct and complete, and that we are fully aware that the Lender will be granting credit/other facility to the Borrower inter-alia on the faith of this Undertaking-cum-Declaration-cum-authority.
        
    11. I/We also agree, undertake and assure that charging or non-charging of penal charges in terms aforesaid shall not in any way be construed as a waiver or satisfaction of any of the terms and conditions stipulated by the Lender for compliance in terms of this undertaking or otherwise howsoever.
        
    12.I/We say that I/We am/are absolutely seized and possessed of or otherwise well and suficiently entitled to the Immovable property being of (1) ${allPerameters.techfullAdress} more particularly described in the Schedule hereunder written (hereinafter referred to as the “said Immovable Property”).
        
    13. I/We declare that I/We have not created any charges or encumbrances in respect of the Immovable Property more particularly described in the Schedulehereunder.
        
    14. I/We declare that the said Immovable Property is proposed to be mortgaged and charged to `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        // width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(fontBold).text(
      `Ratnaafin Capital Private Limited, Ahmedabad Branch`,
      {
        lineGap: 2,
        align: "left",
        // align: "justify",
        // width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(font).text(
      `, to secure by way of First Charge for the due repayment and discharge of the secured Loan of Rs.`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc.font(fontBold).text(
      `, ${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord})`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc.font(font).text(
      `, granted by `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(fontBold).text(
      `, RCPL `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(font).text(
      `,to `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(fontBold).text(
      `, ${allPerameters.borrowerName}`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc.font(font).text(
      `, together with interest, penal charges, and other monies payable to Ratnaafin Capital Private Limited under their loan agreements, letter of sanction, and other transaction documents, as amended from time to time.`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
       
      }
    ).moveDown();
    doc.font(font).text(
      `15. The said `,
      {
        lineGap: 2,
        align: "left",
        // align: "justify",
        // width: 500, // Set a maximum width
        continued:true
      }
    );
    doc
    .font(fontBold)
    .fontSize(8)
    .fillColor("black")
    .text(
      ` Ratnaafin Capital Private Limited,Ahmedabad Branch `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      ` is/are hereinafter referred to as the "Lender."
        
    16. I/We say that the said Immovable Property is free from all encumbrances or charges (statutory or otherwise), claims and demands, and that the same or any of them or any part thereof are/is not subject to any Lien/Lispendens, attachment or any other process issued by any Court or Authority and that I/we have not created any Trust in respect thereof and that the said Immovable Property is/are in my/our exclusive, uninterrupted and undisturbed possession and enjoyment since the date of purchase/acquisition thereof and no adverse claims have been made against me in respect of the said Immovable Property or any of them or any part thereof and the same are not affected by any notices of acquisition or requisition, and that no proceedings are pending or initiated against me under the Income Tax Act, 1961, or under any other law in force in India for the time being and that no notice has been received by or served on me under the Income Tax Act, 1961 and/or under any law and there is no pending attachment whatsoever issued or initiated against the said Immovable Property or any of them or any part thereof.
        
    17. I/We say that I have duly paid all rents, royalties and all public demands including Income Tax, Corporation/Municipal Tax and all other taxes and revenue payable to the Government of India or to the Government of any State or to any Local Authority and that at present there are no arrears of such dues, rents, royalties, taxes and revenue dues and outstanding and that no attachments or warrants have been served on me of Income Tax, Government Revenues and other taxes.
        
    18. I/We also agree and undertake to give such declarations, undertakings and other writings as may be required by the Lender or their solicitors and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the lender.
        
    19. I/We say that I have obtained the requisite consent from the Income Tax authorities pursuant to the provisions contained in Section 281 of the Income Tax Act, 1961 for the alienation of my property in favour of the Lender.
        
    20. I/We assure, agree and declare that the security to be created in favour of the Lender shall ensure in respect of my Immovable Property, both present & future and that the documents of title, evidences, deeds and writings in relation to the said Immovable Property are the only documents of title relating to the said Immovable Property.
        
    21. I/We hereby agree and undertake that the MORTGAGOR shall, within a period of three months from the date hereof or such extended date as may be permitted by the Lender in writing:
        
    a) Perfectly assure the title to the properties comprised in the mortgage security and comply with all requisitions that may be made from time to time by or on behalf of the Lender in that regard.
    
    b) Provide such declarations, undertakings, and other writings as may be required by the Lender and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the Lender.`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    //addFooter();
    
//     // ------------------------------------------------- new page --------------------------------------------------------------------
    
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(2);
    
    
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `c) Pay all rents, rates, taxes, cesses, fees, revenues, assessments, duties, and other outgoings due in respect of the said Immovable Property. I/We shall observe and perform all the rules and regulations pertaining to the same and will not do or omit to do or suffer to be done anything whereby the mortgaged security, as proposed to be created in favor of the Lender, may be affected or prejudiced in any manner whatsoever.
    
    22. I/We further undertake that no mortgage, charge, lien or other encumbrance whatsoever will be created on the properties compromised in the mortgaged security save & except with the permission of the Lender.
    
    23. I/We are not aware of any act, deeds, matter or thing or circumstance which prevents me from charging/further charging in favour of the Lender on the said Immovable Property.
    
    24. I/We (for borrower/s) do hereby unconditionally and irrevocably agree as a condition of such loan/advances extended to the Borrower by the Lender that in case I/we commit default in the repayment of such loan/advances of in the repayment of interest thereon or any of the agreed installment of the loan on due date/the Lender and/or the Reserve Bank of India will have an unqualified right to disclose or publish my/our name or the name of the our company/firm/unit and/or its directors/partners/proprietors as defaulter/s in such manner and through such medium as the Lender or Reserve Bank of India in their absolute discretion may think fit.
    
    25. I/We further understand that as a pre-condition, relating to grant of the loans/advances/ credit facilities to the Borrower, the Lender, requires my/our consent for the disclosure by the Lender of, information and data relating to me/us, of the credit facility availed of/to be availed, by me/us, obligations assumed/to be assumed, by me/us, in relation thereto and default, if any, committed, in discharge thereof.`,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
      //  continued:true // Set a maximum width
       // Set a maximum width
     }
    ).moveDown()
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text( 
  `26. Accordingly, I/We, hereby agree and give consent of the disclosure by the Lender of all or any such:
     
  a. Information and data relating to me/us.
     
  b. The information or data relating to any credit facility availed of/to be availed, by me/ us, and;
     
  c. Default, if any, committed by me/us, in discharge of my/our such obligation, as the Lender may deem appropriate and necessary to disclose and furnish to any agency authorized by RBI.
    
  I/We declare that the information and data furnished by me/us to the Lender are true and correct.
    
  27. Further, in consideration of the Lender agreeing to grant the `,
     {
       lineGap: 2,
       align: "left",
      //  align: "justify",
       width: 500,
       continued:true // Set a maximum width
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica-Bold`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `Agri Micro Loan against Property `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       continued:true // Set a maximum width
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `and in consideration of the Lender at our request continuing and having continued the above-mentioned facilities, I/we,agree, confirm and undertake: 
    `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `
    a) To keep mortgaged security fully insured against fire and such other risks as may be required by the Lender and to submit the respective insurance policies to the Lender.
    
    b) To allow Lender to carry out inspection of the mortgaged securities at periodical intervals and to bear the inspection charges and other incidental charges incurred by the Lender in connection therewith.
    
   c) To allow Lender to charge penal charges @ 2 % P.M above the rate applicable to loan Account on the entire outstanding in `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       continued:true // Set a maximum width
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica-Bold`)
    .fontSize(8)
    .fillColor("black")
    .text(
     ` Agri Micro Loan against Property `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       continued:true // Set a maximum width
     }
    )
    // doc
    // .font(`Helvetica` )
    // .fontSize(8)
    // .fillColor("black")
    // .text(
    //  `facilities under the following circumstances:
     
    //    ● Entire overdue amount in case of default in repayment of loan installments
       
    //    ● Entire outstanding amount of loan facilities for non-compliance of agreedterms and conditions mentioned in the Sanction Letter
     
    // d) To obtain the Lender's written consent in respect of the following matters:
     
    //    ● Making investment in or giving loans to subordinates, associate concerns, individuals or other parties.
       
    //    ● Effecting mergers and acquisitions.
       
    //    ● Paying dividend other than out of current year's earnings after making due provisions.
       
    //    ● Giving guarantees on behalf of third parties.
    // `,
    //  {
    //    lineGap: 2,
    //    align: "left",
    //    align: "justify",
    //    width: 500, // Set a maximum width
    //  }
    // );
    doc
    .font(`Helvetica` )
    .fontSize(8)
    .fillColor("black")
    .text(
     `facilities under the following circumstances:`,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500, // Set a maximum width
     }
    );
    doc.moveDown(1)

    const bulletPoints = [
      'Entire overdue amount in case of default in repayment of loan installments.',
      'Entire outstanding amount of loan facilities for non-compliance of agreedterms and conditions mentioned in the Sanction Letter.',
    ];
    
    bulletPoints.forEach((point) => {
      doc.text(`• ${point}`, {
        lineGap: 2,
        indent: 20, // Indent bullet points
        align: 'left',
      });
    });
    doc
    doc.moveDown(1)

    .font(`Helvetica` )
    .fontSize(8)
    .fillColor("black")
    .text(
     ` d) To obtain the Lender's written consent in respect of the following matters:`,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500, // Set a maximum width
     }
    );
    const bulletPoints1 = [
      `Making investment in or giving loans to subordinates, associate concerns, individuals or other parties.`,
      `Effecting mergers and acquisitions`,
      `Paying dividend other than out of current year's earnings after making due provisions.`,
      `Giving guarantees on behalf of third parties.`,
      `Premature repayment of loans and discharge of other liabilities`
    ];
    
    bulletPoints1.forEach((point) => {
      doc.text(`• ${point}`, {
        lineGap: 2,
        indent: 20, // Indent bullet points
        align: 'left',
      });
    });

    
    
    

    
    
    //addFooter();
//     //-------------------------------------------- new page --------------------------------------------------------------------
    
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(8);
    
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `
    e) Not to create without Lender's prior written consent, charges on all or any of the assets and properties, other than the existing /proposed charges in favour of other Financial Institution/Banks (if any).
    
    f) That all the moneys advanced or to be advanced by the Lender under the facilities mentioned herein above shall be utilized exclusively for the purpose set-forth in our proposal and for no other purpose and if the said loan/advance is utilized or attempted to be utilized for any other purpose or if the Lender apprehends or has reasons to believe that the said loan/advance is being utilized for any other purpose, the Lender shall have the right to forthwith recall the entire or any part of the loan/advance without assigning any reason thereof.
    
    g) That notwithstanding anything to the contrary contained in any of the documents/agreements executed/to be executed by us as also in the Letter of Sanction by the Lender, the Lender shall be entitled to charge the contractual rate of interest at its own discretion without any intimation to us to bring it in conformity with the rate of interest prescribed by the Reserve Bank of India or any other eventuality such as reintroduction of Interest Tax, etc. from time to time and the same shall be binding on us as if such change were already incorporated in the documents executed by us.
    
    h) That in the event of any irregularity, the Lender at its discretion shall be entitled to charge on the entire outstanding or any portion thereof interest at such enhanced rates as it may fix during the continuance of such irregularity. We understand that it is on the faith of the aforesaid representations and express undertakings that the Lender has consented to entertain our proposal for the said facilities.

    28. I/We undertake that:
    
    a. The Credit Information Bureau (India) Ltd. and any other agency so authorized may use, process the said information and data disclosed by the Lender in the manner as deemed fit by them and;
    
    b. The Credit Information Bureau (India) Ltd. and other agency so authorized may furnish for consideration, the processed information and data or products thereof prepared by them, to Lenders/Financial Institutions and other credit grantors or registered users, as may be specified by the Reserve Bank of India in this behalf.
    
    c. I/We certify that (i) all information furnished by me/us is true, (ii) except as indicated in this application that there is no over dues/statutory dues against me/us (iii) except as indicated in this application that no legal action has been/is being taken against me/us; (iv) I/We shall furnish the details of legal action/s or recovery process, if any, initiated against me/us in future by any person/body/authority/together with the details of the liability/claim therein and the action/s taken by me/us to defend/counter the same forthwith on my/our coming to know of such litigations; (v) I/We shall furnish all other Information that may be required by you in connection with this credit facilities (vi)this may also be exchanged by you with any agency you may deem fit and you, your representatives, representatives of the Reserve Bank of India or any other agency.
    
    29. I/We, the Borrower/s, hereby declare, state and confirm as follows:
    
    a) There is no litigation, suit, recovery proceedings/execution application or any other coercive action or process issued, undertaken or adjudication or pending against us in any judicial forum/court of law/DRT/any tribunal/Revenue or other Recovery Authorities in respect of any loan, borrowing or advance availed by me/us from any Lender/FI/Co-operative Society/NBFC or any other private/government/semi government or public sector undertaking or institution. In case any such litigation/action or process is issued/field of undertaken against us in future we shall immediately arrange to intimate/furnish (i) details /particulars thereof in writing to the Lender/Branch and (ii) the details of action/s initiated/taken by me/us to counter/defend the same appropriately.
    
    b) There is litigation /insolvency proceedings/dispute/claim/coercive process /execution petition, presently pending/adjudicated though not finally, earlier against me/us the details whereof are as under:

    We further agree that it is on the faith of the above declaration/undertaking that the Lender has granted/sanctioned or proposes to sanction to the Borrowers the proposed/present/reviewed loan/advance facility(ies) and in case the above is found incomplete, in correct or false, then the Lender shall have the right to recall the advance /loan account and take/initiate any or all actions against me/us including civil or criminal action or proceedings and to enforce its rights in court of competent jurisdiction under any rules /regulations, act/s or law/s in force.
    
    `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    
    //addFooter();
    
//     // -------------------------------------------------- new page -----------------------------------------------------------------------------
    
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(8);
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
    `
    30. The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower also has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the Borrower and the Borrower has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.
    `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    
    doc
    .fontSize(9)
    .font(fontBold)
    .text("-: SCHEDULE ABOVE REFEERED TO :-", { align: "center" })
    .moveDown(0.8)
    .fontSize(8)
    .text("(Description of the Immovable Property)", { align: "center" })
    .moveDown(0.9)
    
    doc
    .font('Helvetica')
    .fontSize(8)
    .fillColor("black") // Normal text color
    .text("Address of Immovable Property - 1: ", { continued: true })  // Keep this text inline
    .text(`${allPerameters.techfullAdress}`, 
          { align: "left", indent: 235 })  // Indentation for the second line onwards
    .moveDown(0.9)
    .font(fontBold)
    .fontSize(9)
    .text("Boundaries of Property", { align: "left" });
    
    doc.moveDown(0.5);
    
    function BoundariesFunction(tableData) {
        // Add Table Header
        const startX = 50; // Starting X position for the box
        let startY = doc.y + 10; // Starting Y position for the box
        const boxWidth = 500; // Total width of the box
        const numFields = 3; // Fixed number of columns (Direction, Separator, Description)
    
        // Adjusted widths for columns: first and last wider, middle narrower
        const firstColumnWidth = boxWidth * 0.4; // 40% for the first column
        const middleColumnWidth = boxWidth * 0.2; // 20% for the middle column
        const lastColumnWidth = boxWidth * 0.4; // 40% for the last column
    
        // Calculate the total height needed for the entire box
        let totalHeight = 0;
    
        // Calculate the height for each row and determine the total height of the box
        tableData.forEach((row) => {
            let rowHeight = 0;
            Object.values(row).forEach((field) => {
                const fieldTextHeight = doc
                    .font('Helvetica') // Regular font for calculating height
                    .fontSize(7.2)
                    .heightOfString(field || '', { width: firstColumnWidth }) + 10; // Add padding
                rowHeight = Math.max(rowHeight, fieldTextHeight); // Get the maximum height for the row
            });
            totalHeight += rowHeight; // Accumulate the total height
        });
    
        // Draw the outer rectangle for the box
        doc
            .fillColor("#f0f0f0") // Box background color
            .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
            .stroke("black") // Border color (normal line)
            .fill();
    
        // Loop through the data and draw the text inside the box
        tableData.forEach((row) => {
            let currentX = startX; // Reset the starting X position for each row
            // Calculate row height based on the content in each field
            let rowHeight = 0;
            Object.values(row).forEach((field) => {
                const fieldTextHeight = doc
                    .font('Helvetica') // Regular font for calculating height
                    .fontSize(7.2)
                    .heightOfString(field || '', { width: firstColumnWidth }) + 10; // Add padding
                rowHeight = Math.max(rowHeight, fieldTextHeight); // Get the maximum height for the row
            });
    
            // Draw rectangles for each field in the row
            Object.entries(row).forEach(([key, field], fieldIndex) => {
                // Set the width for each column
                const fieldWidth = fieldIndex === 1 ? middleColumnWidth : (fieldIndex === 0 ? firstColumnWidth : lastColumnWidth);
    
                // Draw rectangle for the field box
                doc
                    .fillColor("#f5f5f5") // Background color for field (empty box)
                    .rect(currentX, startY, fieldWidth, rowHeight)
                    .stroke("black") // Normal line border for field box
                    .fill();
    
                // Set font style based on whether it's a field (bold) or value (normal)
                const isFieldValue = key === 'value'; // Check if it's the value field
                doc
                    .font(isFieldValue ? 'Helvetica' : 'Helvetica-Bold') // Bold for field, normal for value
                    .fillColor("black")
                    .fontSize(7.2);
    
                // Align text properly based on column index
                const align = fieldIndex === 1 ? 'left' : (fieldIndex === 0 ? 'left' : 'left'); // Align all to left
    
                // Draw the field text in the box
                doc.text(field, currentX + 5, startY + 5, {
                    baseline: "hanging",
                    width: fieldWidth - 10, // Adjust width to provide padding inside the box
                    align: align, // Align text based on content
                });
    
                // Move to the next column
                currentX += fieldWidth; // Update X position for the next field
            });
    
            // Move to the next row
            startY += rowHeight; // Update Y position for the next row
        });
    }
    
    const boundariesData = [
        { field1: "On or towards North", field2: ": ", value: `${allPerameters.OnOrTowardsNorth}` },
        { field1: "On or towards South", field2: ": ", value: `${allPerameters.OnOrTowardsSouth}` },
        { field1: "On or towards East",  field2: ": ", value: `${allPerameters.OnOrTowardsEast}` },
        { field1: "On or towards West",  field2: ": ", value: `${allPerameters.OnOrTowardsWest}` },
    ];
    
    // Call the function to create the table
    BoundariesFunction(boundariesData);
    
    doc.moveDown(2);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`DATE This: ${allPerameters.agreementdate}`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
    
    // Set initial font and size
    doc
    .font(font) // Assuming 'font' is defined elsewhere as your base font
    .fontSize(9)
    .fillColor("black")
    .text(`IN WITNESS WHEREOF the Borrower, Co-Borrowers & Guarantors set and subscribed their hands to these presents on the day and year first hereinabove written.\n\n`, {
    lineGap: 2,
    align: "left",
    width: 500, // Set a maximum width
    });
    
    // Bold text for "SIGNED & DELIVERED BY THE"
    doc
    .fontSize(9)
    .font('Helvetica-Bold') // Change to bold font
    .text(`SIGNED & DELIVERED BY THE`, {
    lineGap: 2,
    align: "left",
    width: 500, // Set a maximum width
    });
    
    // Change back to normal font for the rest of the text
    doc
    .fontSize(9)
    .font(font) // Switch back to normal font
    .text(`\n\nWITH IN NAMED\n\n(1) ${allPerameters.borrowerName}\n\n\[Borrower]\n\n\(2)${allPerameters.coBorrowername}\n\n\[Co-Borrower]\n\n\(3) ${allPerameters.guarantorname}\n\n\[Gaurantor Name]\n\n\n`, {
    lineGap: 2,
    align: "left",
    width: 500, // Set a maximum width
    });
    
    //addFooter();
    
//     //------------------------------------- new page -----------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(9);
    
    doc
    .fontSize(9)
    .font('Helvetica-Bold')
    .text(`DEMAND PROMISSORY NOTE`, startX, doc.y, { align: "center", width: 500 });
    doc.moveDown(1);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`Place:  ${allPerameters.placeOfExecution} \n\n Date: ${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
    doc.moveDown(2);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`ON DEMAND,I/We (1) ${allPerameters.borrowerName} (2) ${allPerameters.coBorrowername}  (3) ${allPerameters.guarantorname} `, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(1);
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`${allPerameters.borrowerName}, Residing At ${allPerameters.borroewraddress}`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(3);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`(Hereinafter referred to as “Borrowers”/”Co-Borrowers”/”Guarantors” which term shall, unless repugnant to the context be deemed to include in case of (a) an individual, my/ our heirs, legal representatives, executors, administrators and permitted assigns, (b) a proprietorship firm, the proprietor(ess) (both in my/our personal capacity and as proprietor(ess) of the concern) and my/our heirs, legal representatives, executors, administrators, permitted assigns and successors of the concern, (c) a company, its successors and permitted assigns, (d) a limited liability partnership, its successors and permitted assigns, (e) a partnership firm, any or each of the partners and survivor(s) of them and the partners from time to time (both in their personal capacity and as partners of the firm) and their respective heirs, legal representatives , executors, administrators, permitted assigns and successors of the firm) jointly and severally promise to pay to `,
      startX, // Starting X position
    doc.y, // Current Y position
    {
      align: "justify", // Align text for justification
      width: 500,      // Set a maximum width
      lineGap: 2,
      continued:true      // Optional line spacing
    }
    )
    .font('Helvetica-Bold')

    .text(`RATNAAFIN CAPITAL PRIVATE LIMITED,`,
      startX, // Starting X position
      doc.y, // Current Y position
      {
        align: "justify", // Align text for justification
        width: 500,      // Set a maximum width
        lineGap: 2,
        continued:true      // Optional line spacing
      }
      ) 
      .font('Helvetica')

      .text(` a company incorporated under the provisions of the Companies Act, 2013, having its registered office at 402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place Near Hyatt Hotel, New Delhi- 110066, Delhi, India and corporate office at 2nd & 3rd Floor,The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India-380060 (hereinafter referred to as the “Lender”, which expression shall, unless repugnant to the context, include its successors and assigns) the sum of Rs. `,
        startX, // Starting X position
    doc.y, // Current Y position
    {
      align: "justify", // Align text for justification
      width: 500,      // Set a maximum width
      lineGap: 2,
      continued:true
          // Optional line spacing
    }
    ) 
    .font('Helvetica-Bold')

    .text(` ${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord}) `,
        startX, // Starting X position
    doc.y, // Current Y position
    {
      align: "justify", // Align text for justification
      width: 500,      // Set a maximum width
      lineGap: 2,
      continued:true
          // Optional line spacing
    }
    )  
    .font('Helvetica')

    .text(`and with rate of interest at ${allPerameters.rateOfInterest}% Per Annum (FRR – 19.20% + ${allPerameters.interestType1}%) and/or such other rate as RCPL may ix from time to time for value received (to be paid monthly and to be calculated on the basis of 365 (three hundred and sixty five days)) and other amounts payable to the Lender in terms of the loan agreement dated ${allPerameters.agreementdate}, executed by and amongst the Borrowers and the Lender`,
      startX, // Starting X position
  doc.y, // Current Y position
  {
    align: "justify", // Align text for justification
    width: 500,      // Set a maximum width
    lineGap: 2,
        // Optional line spacing
  }
  ) ;
    
    doc.moveDown(3); // Move down after the text block
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Presentment for payment, notice of non-payment and noting and protest of the note are hereby unconditionally and irrevocably waived.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    // paymentTable
    
    function presentment(tableData) {
    // Add Table Header
    const startX = 50; // Starting X position for the box
    let startY = doc.y + 10; // Starting Y position for the box
    const boxWidth = 500; // Adjust the width of the box as per your need
    
    // Calculate the total height needed for the entire box
    let totalHeight = 0;
    
    // Calculate the height for each row and determine the total height of the box
    tableData.forEach((row) => {
    const rowHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(row.field1, { width: boxWidth }) + 40; // Add padding
    
    totalHeight += rowHeight; // Accumulate the total height
    });
    
    // Draw the outer rectangle for the box
    doc
    .fillColor("#f0f0f0") // Box background color
    .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    .stroke("black") // Border color
    .fill();
    
    // Loop through the data and draw the text inside the box
    tableData.forEach((row, rowIndex) => {
    // Calculate row height based on the content
    const rowHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(row.field1, { width: boxWidth }) + 40; // Add padding
    
    // Alternate row background color (optional)
    doc
      .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff") // Alternate row colors
      .rect(startX, startY, boxWidth, rowHeight) // Draw rectangle for each row
      .stroke("black") // Border color for each row
      .fill();
    
    // Draw the text in the box
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(row.field1, startX + 5, startY + 5, {
        baseline: "hanging",
        width: boxWidth - 10, // Adjust width to provide padding inside the box
        align: "left", // Align text to the left
      });
    
    // Move to the next row
    startY += rowHeight;
    });
    }


    
    // const presentmentpayment = [
    // { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
    // { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
    // { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
    // ];
    
    // presentment(presentmentpayment);

    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the Borrower and the Borrower has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`,{ align: "left", });
    doc.moveDown(1);
    // presentmentpayment
    //addFooter();
    
    
//     // ------------------------------------------------------ new page ------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(9);
    
    doc
    .fontSize(9)
    .font('Helvetica-Bold')
    .text(`LETTER OF CONTINUITY FOR DEMAND PROMISSORY NOTE`, startX, doc.y, { align: "center", width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`Place: ${allPerameters.placeOfExecution} \n\n  Date: ${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`To,`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Ratnaafin Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);

    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
     doc.moveDown(2)

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`Dear Sirs, \n\n\n I/We (1) ${allPerameters.borrowerName} (2)${allPerameters.coBorrowername}  (3) ${allPerameters.guarantorname} ,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`${allPerameters.borrowerName}, Residing At ${allPerameters.borroewraddress}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(4);
    
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`(Hereinafter referred to as “Borrowers”/”Co-Borrowers”/”Guarantors” which term shall, unless repugnant to the context be deemed to include in case (a) an individual, his/her heirs, legal representatives, executors, administrators and permitted assigns, (b) a proprietorship firm, the proprietor(ess) (both in my/our personal capacity and as proprietor(ess) of the concern) and his/her heirs, legal representatives, executors, administrators, permitted assigns and successors of the concern, (c) a company, its successors and permitted assigns, (d) a limited liability partnership, its successors and permitted assigns, (e) a partnership firm, any or each of the partners and survivor(s) of them and the partners from time to time (both in their personal capacity and as partners of the firm) and their respective heirs, legal representatives, executors, administrators, permitted assigns and successors of the firm) have executed a Demand Promissory Note for Rs. `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
    .font('Helvetica-Bold')

      .text(`${allPerameters.loanAmount}/- (${allPerameters.loanAmountInWord}) `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
      .font('Helvetica')

      .text(` and with rate of interest at ${allPerameters.rateOfInterest}% Per Annum and/or such other rate as `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
      .font('Helvetica-Bold')
      .text(`RCPL `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
      .font('Helvetica')
      .text(`may fix from time to time for value received, dated ${allPerameters.agreementdate} duly signed and delivered by me/us to you, as security for the repayment of all amounts due and/or payable by us under the loan agreement dated ${allPerameters.agreementdate} and/or any amendment(s)/addendum(s) thereto (“Loan Agreement”).\n\n\nWe hereby irrevocably and unconditionally, agree, confirm and undertake that the said Demand Promissory Note shall operate as a continuing security to you to be enforceable for the repayment of the ultimate balance and/or all sums remaining unpaid under the Loan Agreement now or hereafter,including all interest to become payable under the Loan Agreement, and also all monies lent, advanced, paid or incurred in respect of/under the Loan Agreement or which may in future be advanced or incurred together with interest, discount, commission and other charges and all other costs, charges and expenses which may be or become payable in connection therewith.\n\n\nThe Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the Borrower and the
       Borrower has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.\n\n\n Thanking you `, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    
    // presentment(presentmentpayment);
    
    //addFooter();
    
    
//     // ----------------------------------------------new page ------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(9);
    
    doc
    .fontSize(9)
    .font('Helvetica-Bold')
    .text(`UDC Covering Letter (APPLICANT)`, startX, doc.y, { align: "center",underline: true, width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`To,`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Ratnaafin Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(1);

    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`Sirs, \n `, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`subject:Credit Facility of Rs. ${allPerameters.loanAmount}(${allPerameters.loanAmountInWord}) sanctioned to ${allPerameters.borrowerName}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`In consideration of and towards repayment of the aforesaid credit facilities granted/agreed to be granted by Ratnaafin Capital Pvt. Ltd (Lender)\n I/We, ${allPerameters.borrowerName} hereby inter alia deliver to the Lender the cheques (as detailed hereunder) drawn in favour of the Lender being blank as regards the date of the cheque and the amount.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    
    function chequeTable(tableData) {
    // Add Table Header
    const startX = 50; // Starting X position for the box
    let startY = doc.y + 10; // Starting Y position for the box
    
    // Define custom column widths
    const columnWidths = {
        field1: 50,   // Sr. No.
        field2: 100,  // Cheque No.
        field3: 200,  // Bank Details
        field4: 150,  // Name of the account holder
    };
    
    // Function to calculate row height dynamically based on content
    const calculateRowHeight = (row) => {
        let maxHeight = 0;
        Object.keys(row).forEach((field) => {
            const text = row[field] || ''; // Default to empty string if no value
            const columnWidth = columnWidths[field] || 100; // Default width
            const textHeight = doc
                .font('Helvetica')
                .fontSize(7.2)
                .heightOfString(text, { width: columnWidth }) + 10; // Add padding
            maxHeight = Math.max(maxHeight, textHeight);
        });
        return maxHeight;
    };
    
    // Calculate total height for the table
    let totalHeight = 0;
    tableData.forEach(row => {
        totalHeight += calculateRowHeight(row);
    });
    
    // Draw the outer rectangle for the box
    doc
        .fillColor("#f0f0f0")
        .rect(startX, startY, 500, totalHeight) // Adjust box width to the total width of columns
        .stroke("black")
        .fill();
    
    // Loop through the data and draw the text inside the box
    tableData.forEach((row, rowIndex) => {
        let currentX = startX; // Reset the starting X position for each row
        const rowHeight = calculateRowHeight(row);
    
        // Draw rectangles and fill in data
        Object.keys(columnWidths).forEach((field) => {
            const columnWidth = columnWidths[field];
            const text = row[field] || ''; // Handle blank fields
    
            // Draw rectangle for the field box
            doc
                .fillColor("#f5f5f5") // Background color for the box
                .rect(currentX, startY, columnWidth, rowHeight)
                .stroke("black")
                .fill();
    
            // Set font style for header or regular row
            const isHeader = rowIndex === 0; // Check if it's the header row
            doc
                .font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
                .fillColor("black")
                .fontSize(7.2);
    
            // Draw the field text, align left
            doc.text(text, currentX + 5, startY + 5, {
                baseline: "hanging",
                width: columnWidth - 10, // Adjust width for padding
                align: 'left', // Align text to the left
            });
    
            currentX += columnWidth; // Update X for next field
        });
    
        // Move to the next row
        startY += rowHeight;
    });
    }
    
    // Updated applicant table with dynamic fields
    const applicantTable = [
    { field1: "Sr. No.", field2: "Cheque No.", field3: "Bank Details", field4: "Name of the account holder" },
    { field1: "1", field2: `${allPerameters.table?.[0]?.appchequeNo1}`, field3: `${allPerameters.table?.[0]?.bankDetail1},A/c No.${allPerameters.table?.[0]?.bankaccNo1}`, field4: `${allPerameters.table?.[0]?.accountHolderName1}` },
    { field1: "2", field2: `${allPerameters.table?.[1]?.appchequeNo2}`, field3: `${allPerameters.table?.[1]?.bankDetail1},A/c No.${allPerameters.table?.[1]?.bankaccNo2}`, field4: `${allPerameters.table?.[1]?.accountHolderName2}` },
    { field1: "3", field2: `${allPerameters.table?.[2]?.appchequeNo3}`, field3: `${allPerameters.table?.[2]?.bankDetail1},A/c No.${allPerameters.table?.[2]?.bankaccNo3}`, field4: `${allPerameters.table?.[2]?.accountHolderName3}` },
    { field1: "4", field2: `${allPerameters.table?.[3]?.appchequeNo4}`, field3: `${allPerameters.table?.[3]?.bankDetail4},A/c No.${allPerameters.table?.[3]?.bankaccNo4}`, field4: `${allPerameters.table?.[3]?.accountHolderName4}` },
    { field1: "5", field2:`${allPerameters.table?.[4]?.appchequeNo5}`, field3: `${allPerameters.table?.[4]?.bankDetail5},A/c No.${allPerameters.table?.[4]?.bankaccNo5}`, field4: `${allPerameters.table?.[4]?.accountHolderName5}` },
    // { field1: "6", field2: `${allPerameters.table?.[5]?.appchequeNo6}`, field3: `${allPerameters.table?.[5]?.bankDetail6}`, field4: `${allPerameters.table?.[5]?.accountHolderName6}` },
    // { field1: "7", field2: `${allPerameters.table?.[6]?.appchequeNo7}`, field3: `${allPerameters.table?.[6]?.bankDetail7}`, field4: `${allPerameters.table?.[6]?.accountHolderName7}` },
    ];
    
    // Call the function to create the table
    chequeTable(applicantTable);
    doc.moveDown(2);
    doc.moveDown(2);

    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`I/we do hereby agree and acknowledge in accordance with the provisions of section 20 of the Negotiable Instruments Act ("The Act") the Lender in the present case as the holder of the said cheques shall have the authority to complete the said cheques.\n\n In addition to the express provisions of the Act as mentioned above authorizing the Lender to complete the said cheques to the extent of credit facility outstanding including any interest, penal charges , other charges, etc. that the Lender may incur I / We hereby unconditionally and irrevocably authorize and confirm the authority of the Lender to fill in the date and the amount on the said cheques and to present the same for payment.\n\nI/We hereby undertake to be absolutely bound as the drawer of the said cheques so completed by the Lender as above and shall be liable in the same manner as the said cheques were drawn and completed by me/us and shall ensure that the said cheques are honored on presentation for payment\n\nI/We agree and acknowledge that any dishonoring of the said cheques would make me/us liable including under the provisions of section 138 of the Negotiable Instruments Act,1881.\n\nFor and on behalf of:
    `, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`___________________________`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`I/we do hereby agree and acknowledge in accordance with the provisions of section 20 of the Negotiable Instruments Act ("The Act") the Lender in the present case as the holder of the said cheques shall have the authority to complete the said cheques.\n\n In addition to the express provisions of the Act as mentioned above authorizing the Lender to complete the said cheques to the extent of credit facility outstanding including any interest, penal charges , other charges, etc. that the Lender may incur I / We hereby unconditionally and irrevocably authorize and confirm the authority of the Lender to fill in the date and the amount on the said cheques and to present the same for payment.\n\nI/We hereby undertake to be absolutely bound as the drawer of the said cheques so completed by the Lender as above and shall be liable in the same manner as the said cheques were drawn and completed by me/us and shall ensure that the said cheques are honored on presentation for payment\n\nI/We agree and acknowledge that any dishonoring of the said cheques would make me/us liable including under the provisions of section 138 of the Negotiable Instruments Act,1881.\n\nFor and on behalf of:
// `, startX, doc.y, { align: "left",align: "justify", width: 500 });
//  doc.moveDown(1);

  //addFooter();

//   //------------------------------- new page 12 ----------------------------------------------

  doc.addPage();
  // addLogo();
  //drawBorder();
  doc.moveDown(9);

  doc
  .fontSize(9)
  .font('Helvetica-Bold')
  .text(`UDC Covering Letter (co-applicant/Guarantor)`, startX, doc.y, { align: "center",underline: true, width: 500 });
  doc.moveDown(2);

  doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`To,`, startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(1);

  doc
  .fontSize(8)
  .font('Helvetica-Bold')
  .text(`Ratnaafin Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(1);

  doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`Dear Madam/Sir, \n `, startX, doc.y, { align: "left",align: "justify", width: 500 });
  doc.moveDown(2);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`subject:Credit Facility of Rs. ${allPerameters.loanAmount}(${allPerameters.loanAmountInWord}) sanctioned to ${allPerameters.borrowerName}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
  doc.moveDown(1);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`In consideration of and towards repayment of the aforesaid credit facilities granted/agreed to be granted by Ratnaafin Capital Pvt. Ltd Lender I/We, ${allPerameters.guarantorname} hereby inter alia deliver to the Lender the cheques (as detailed hereunder) drawn in favour of the Lender being blank as regards the date of the cheque and the amount.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
   doc.moveDown(1);


   function ChequETaBLE(tableData) {
    // Add Table Header
    const startX = 50; // Starting X position for the box
    let startY = doc.y + 10; // Starting Y position for the box
    
    // Define custom column widths
    const columnWidths = {
        field1: 50,   // Sr. No.
        field2: 100,  // Cheque No.
        field3: 200,  // Bank Details
        field4: 150,  // Name of the account holder
    };
    
    // Function to calculate row height dynamically based on content
    const calculateRowHeight = (row) => {
        let maxHeight = 0;
        Object.keys(row).forEach((field) => {
            const text = row[field] || ''; // Default to empty string if no value
            const columnWidth = columnWidths[field] || 100; // Default width
            const textHeight = doc
                .font('Helvetica')
                .fontSize(7.2)
                .heightOfString(text, { width: columnWidth }) + 10; // Add padding
            maxHeight = Math.max(maxHeight, textHeight);
        });
        return maxHeight;
    };
    
    // Calculate total height for the table
    let totalHeight = 0;
    tableData.forEach(row => {
        totalHeight += calculateRowHeight(row);
    });
    
    // Draw the outer rectangle for the box
    doc
        .fillColor("#f0f0f0")
        .rect(startX, startY, 500, totalHeight) // Adjust box width to the total width of columns
        .stroke("black")
        .fill();
    
    // Loop through the data and draw the text inside the box
    tableData.forEach((row, rowIndex) => {
        let currentX = startX; // Reset the starting X position for each row
        const rowHeight = calculateRowHeight(row);
    
        // Draw rectangles and fill in data
        Object.keys(columnWidths).forEach((field) => {
            const columnWidth = columnWidths[field];
            const text = row[field] || ''; // Handle blank fields
    
            // Draw rectangle for the field box
            doc
                .fillColor("#f5f5f5") // Background color for the box
                .rect(currentX, startY, columnWidth, rowHeight)
                .stroke("black")
                .fill();
    
            // Set font style for header or regular row
            const isHeader = rowIndex === 0; // Check if it's the header row
            doc
                .font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
                .fillColor("black")
                .fontSize(7.2);
    
            // Draw the field text, align left
            doc.text(text, currentX + 5, startY + 5, {
                baseline: "hanging",
                width: columnWidth - 10, // Adjust width for padding
                align: 'left', // Align text to the left
            });
    
            currentX += columnWidth; // Update X for next field
        });
    
        // Move to the next row
        startY += rowHeight;
    });
    }

// Updated applicant table with dynamic fields
const guarantorTable = [
  { field1: "Sr. No.", field2: "Cheque No.", field3: "Bank Details", field4: "Name of the account holder" },
  { field1: "1", field2: `${allPerameters.tableno2?.[0]?.guchequeNo1}`, field3: `${allPerameters.tableno2?.[0]?.gubankDetail1},A/c No.${allPerameters.tableno2?.[0]?.gubankaccNo1}`, field4: `${allPerameters.tableno2?.[0]?.guaccountHolderName1}` },
  { field1: "2", field2: `${allPerameters.tableno2?.[1]?.guchequeNo2}`, field3: `${allPerameters.tableno2?.[1]?.gubankDetail2},A/c No.${allPerameters.tableno2?.[1]?.gubankaccNo2}`, field4: `${allPerameters.tableno2?.[1]?.guaccountHolderName2}` },
  { field1: "3", field2: ``, field3: ``, field4: `` },
  { field1: "4", field2: ``, field3: ``, field4: `` },
  { field1: "5", field2:``, field3: ``, field4: `` },
  // { field1: "6", field2: `${allPerameters.tableno2?.[5]?.guchequeNo6}`, field3: `${allPerameters.tableno2?.[5]?.gubankDetail6}`, field4: `${allPerameters.tableno2?.[5]?.guaccountHolderName6}` },
  // { field1: "7", field2: `${allPerameters.tableno2?.[6]?.guchequeNo7}`, field3: `${allPerameters.tableno2?.[6]?.gubankDetail7}`, field4: `${allPerameters.tableno2?.[6]?.guaccountHolderName7}` },
  ];
// Call the function to create the table
ChequETaBLE(guarantorTable);
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`I/we do hereby agree and acknowledge in accordance with the provisions of section 20 of the Negotiable Instruments Act ("The Act") the Lender in the present case as the holder of the said cheques shall have the authority to complete the said cheques.\n\n In addition to the express provisions of the Act as mentioned above authorizing the Lender to complete the said cheques to the extent of credit facility outstanding including any interest, penal charges , other charges, etc. that the Lender may incur I / We hereby unconditionally and irrevocably authorize and confirm the authority of the Lender to fill in the date and the amount on the said cheques and to present the same for payment.\n\nI/We hereby undertake to be absolutely bound as the drawer of the said cheques so completed by the Lender as above and shall be liable in the same manner as the said cheques were drawn and completed by me/us and shall ensure that the said cheques are honored on presentation for payment\n\nI/We agree and acknowledge that any dishonoring of the said cheques would make me/us liable including under the provisions of section 138 of the Negotiable Instruments Act,1881.\n\nFor and on behalf of:
`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
    .fontSize(8)
    .font('Helvetica')
    .text(`___________________________`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);

  //addFooter();

  //--------------------------------disbursment demand for our loan-------------------
  doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`DISBURSEMENT DEMAND FOR OUR LOAN`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`The Manager,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`RATNAAFIN CAPITAL PRIVATE LIMITED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });


doc.moveDown(3);


doc
.fontSize(8)
.font('Helvetica')
.text(`Dear Sir,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
 .fontSize(8)
 .font('Helvetica')
 .text(`We have been sanctioned a Loan against Property from Ratnaafin Capital Private limited for an amount of Rs. `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(`${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord}) `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica')
 .text(`for the purpose of `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(`${allPerameters.specifiedPurpose}`, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica')
 .text(`. We have accepted all terms and conditions for the Agri Micro Loan against Property against property and executed all the documents for the loan.`, startX, doc.y, { align: "left",align: "justify", width: 500 });

 doc.moveDown(3);
 
 doc
 .fontSize(8)
 .font('Helvetica')
 .text(`We request a disbursement for an amount of Rs. `, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(`${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord})`, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica')
 .text(` are deducting all the necessary fees & charges, in favour of Ratnaafin Capital Private Limited from our Loan account number`, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(` ${allPerameters.sanctionLetterNo}`, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica')
 .text(` as a full/part disbursement towards this Loan.`, startX, doc.y, { align: "left", width: 500 })
 doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`We also agree to pay interest on the amount disbursed as per our request starting from the date of disbursement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`Thanking you,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(`Yours Faithfully,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(`Primary Borrower Name :${allPerameters.borrowerName}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

// const confirmationTable = [
//   { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
//   { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
//   { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
// ];

// presentment(confirmationTable);
//addFooter();

// // -------------------------------------------new page 13 --------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`VERNACULAR CONFIRMATION LETTER`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`To,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`RATNAAFIN CAPITAL PRIVATE LIMITED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`201-202, Shilp Aperia,\n Near Ashok Vatika,\n Bopal-Ambli Road,\n Ahmedabad, Gujarat – 380054`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);


doc
.fontSize(8)
.font('Helvetica')
.text(`I/We hereby acknowledge and confirm that I/we have received the copy of the loan Agreement dated ${allPerameters.agreementdate} executed between `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
.font('Helvetica-Bold')
.text(` RCPL`, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
.font('Helvetica')
.text(`and me/us ('Loan Agreement') and the contents of the loan Agreement have been fully explained to and understood by me/us at the time of availing the loan in the language understood by me/us) \n\n I/We further confirm that am/are fully aware of and completely understand the rights and obligations contained in the loan documents mentioned below:`, startX, doc.y, { align: "left",align: "justify", width: 500 });


doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(` 1. Loan application form\n 2. KYC form\n 3. Sanction letter\n 4. DP Note\n 5. Declaration cum Undertaking Cum Authority by the Borrower,Co-Borrower & Guarantor\n 6. Guarantee Agreement \n 7. Loan Facility Agreement\n 8. Mortgage Deed \n 9. Any other document related to loan\n10. Declaration of Immoval property.\n11.Interest rate Declaration.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(3);

doc
.fontSize(8)
.font('Helvetica')
.text(`The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The the Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the the Borrower / Co-borrowers / Guarantors and the the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(3);
doc
.fontSize(8)
.font('Helvetica-Bold')
.text(
  `Name of the Borrower : ${allPerameters.borrowerName}` )
  .text(
    `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` )
    .text(
      `2nd CO-BORROWERS NAME : ${allPerameters.coBorrowername2}` )
      .text(
        `GUARANTOR'S NAME : ${allPerameters.guarantorname}` )

//addFooter();
// //---------------------------------------------------- new page 14-------------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`VERNACULAR DECLARATION FORM`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);


function declarationTableFunction(tableData) {
  const startX = 50;
  let startY = doc.y + 10;

  const columnWidths = {
    field1: 50,
    field2: 100,
    field3: 330,
  };

  // Define min and max row height to avoid extremes
  const MIN_ROW_HEIGHT = 15;
  const MAX_ROW_HEIGHT = 45;

  // Function to calculate row height based on text content
  const calculateRowHeight = (row) => {
    let maxHeight = 0;
    Object.keys(row).forEach((field) => {
      const text = row[field] || '';
      const columnWidth = columnWidths[field] || 100;

      // Calculate the text height for each field
      const textHeight = doc
        .font(field === 'field3' ? fontKerlaTamil : 'Helvetica')
        .fontSize(7.2)
        .heightOfString(text, { width: columnWidth });

      // Track the highest text height in the row
      maxHeight = Math.max(maxHeight, textHeight);
    });

    // Ensure the row height stays within the defined min and max limits
    return Math.max(MIN_ROW_HEIGHT, Math.min(maxHeight, MAX_ROW_HEIGHT));
  };

  const totalWidth = Object.values(columnWidths).reduce((sum, width) => sum + width, 0);

  tableData.forEach((row, rowIndex) => {
    let currentX = startX;
    const rowHeight = calculateRowHeight(row); // Calculate the row height based on text content

    // Set up the table border at the beginning
    doc
      .lineWidth(0.25)
      .rect(startX, startY, totalWidth, rowHeight)
      .stroke("black");

    Object.keys(columnWidths).forEach((field) => {
      const columnWidth = columnWidths[field];
      const content = row[field] || '';

      doc
        .lineWidth(0.25)
        .rect(currentX, startY, columnWidth, rowHeight)
        .stroke("black");

      const isHeader = rowIndex === 0;
      const paddingTop = 2;  // Adjust padding from the top (increase if needed)
      const textYPosition = startY + paddingTop;

      if (field === 'field1' && content) {
        doc.image(content, currentX + 5, textYPosition + (rowHeight - 8) / 2, { width: 8, height: 8 });
      } else {
        doc
          .font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
          .fillColor("black")
          .fontSize(7.2);

        const text = content || '';
        if (field === 'field3') {
          // Checking for specific languages to apply respective fonts
          if (/[\u0C00-\u0C7F]/.test(text)) {  // Telugu Unicode range
            doc.font(fontTelugu)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else if (/[\u0D00-\u0D7F]/.test(text)) {  // Malayalam Unicode range
            doc.font(fontMalayam).text(text, currentX + 3, textYPosition, {
              baseline: "top",
              width: columnWidth - 6,
              align: 'left',
            });
          } else if (/[\u0C80-\u0CFF]/.test(text)) {  // Kannada Unicode range
            doc.font(fontKannada).text(text, currentX + 3, textYPosition, {
              baseline: "top",
              width: columnWidth - 6,
              align: 'left',
            });
          } else if (/[\u0A80-\u0AFF]/.test(text)) {  // Gujarati Unicode range
            doc.font(fontGujarati)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else if (/[\u0600-\u06FF]/.test(text)) {  // Urdu Unicode range
            doc.font(fontUrdu)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'right',
               });
          } else if (/[\u0A00-\u0A7F]/.test(text)) {  // Punjabi Unicode range
            doc.font(fontPanjabi)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else if (/[\u0B80-\u0BFF]/.test(text)) {  // Tamil Unicode range
            doc.font(fontKerlaTamil).text(text, currentX + 3, textYPosition, {
                baseline: "top",
                width: columnWidth - 6,
                align: 'left',
            });
          } else if (/[\u0900-\u097F]/.test(text)) {  // Hindi Unicode range
            doc.font(fontHindi)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else  if (/[\u0B00-\u0B7F]/.test(text)) {  // Odia Unicode range
            doc.font(fontOriya)  // Make sure 'fontOdia' is defined and points to the correct font file
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
           } else if (/[\u0900-\u097F]/.test(text)) {  // Marathi (Devanagari Unicode range)
            doc.font(fontMarathi)  // Ensure you have the Marathi font file available
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
        } else if (/[\u0980-\u09FF]/.test(text)) {  // Bengali Unicode range
          doc.font(fontBengali)  // Ensure you have the Bengali font file available
             .text(text, currentX + 3, textYPosition, {
               baseline: "top",
               width: columnWidth - 6,
               align: 'left',
             });
        }else {
            doc.font('Helvetica')
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          }
        } else {
          doc.font('Helvetica')
             .text(text, currentX + 3, textYPosition, {
               baseline: "top",
               width: columnWidth - 6,
               align: 'left',
             });
        }
      }

      currentX += columnWidth;
    });

    startY += rowHeight; // Adjust to the row's actual height
  });
}

const gujratiFont = [
'આ અરજી/કરાર/પત્ર/નિયમો અને શરતોનો સામગ્રી અરજીકર્તા/ઋણગ્રાહક અને સહ-ઋણગ્રાહકને અંગ્રેજીમાં વાંચીને સમજાવી',
'  અને વ્યાખ્યા કરવામાં આવી છે અને અરજીકર્તા/ઋણગ્રાહક અને સહ-ઋણગ્રાહક દ્વારા તેને સમજવામાં આવી છે',
]

const declarationTable = [
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "English", 
    field3: "The content of this Application/ Agreement/letter/Terms and Conditions has been read out, explained and interpreted to the applicant(s)/Borrower and to the Co-Borrower(s) in English and understood by the applicant(s)/Borrower and Co-Borrower(s).",  // English text
  },
  { 
    field1: CheckedLogo,  // Path to the image file (not doc.image)
    field2: "Hindi", 
    field3: "इसआवेदन / समझौ ते / पत्र / नि यमों औमों रशर्तों की सा मग्री को आवेदक (ओं)ओं / उधा रकर्ता औरअंग्रेजीग्रे जीमेंसह-उधा रकर्ता (ओं)ओं को समझा औरसमझा यागयाहैऔहै रआवेदक (ओं)ओं याउधा रकर्ता द्वा रा समझा गया है ।",  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Punjabi", 
    field3: "ਇਸਬਿ ਨੈ-ਪੱਤਰ / ਸਮਝੌਤੇਝੌਤੇ/ ਪੱਤਰ / ਨਿ ਯਮਾਂ ਅਮਾਂ ਤੇਸ਼ਰਤਾਂ ਦੀਤਾਂ ਦੀਸਮੱਗਰੀ ਨੂੰਬਿ ਨੈਕਾ ਰ /ਉਧਾ ਰਲੈਣਵਾ ਲੇਅਤੇਅੰਗ੍ਰੇਜ਼ੀ ਵਿ ਚਸਹਿ -ਉਧਾ ਰਲੈਣਵਾ ਲੇਨੂੰਸਮਝਾ ਕੇਸਮਝਾ ਇਆਗਿ ਆਹੈਅਤੇਬਿ ਨੈਕਾ ਰਦੁਆਰਾ ਸਮਝੇਗਝੇ ਏਅਤੇਸਹਿ -ਉਧਾ ਰਲੈਣਵਾ ਲੇ।",  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Kannada", 
    field3: "ಈ ಅಪ್ಲಿಕೇ ಶನ್/ಒಪ್ಪಂ ದ/ಪತ್ರ / ನಿಯಮಗಳುಮತ್ತು ಷರತ್ತು ಗಳವಿಷಯವನ್ನು ಅರ್ಜಿ ದಾ ರ (ರು )/ ಸಾ ಲಗಾರಮತ್ತು ಇಂ ಗ್ಲಿಷ್ನಲ್ಲಿಸಹ-ಸಾ ಲಗಾರ(ಗಳು)ಗೆಓದಿ, ವಿವರಿಸಲಾ ಗಿದೆಮತ್ತು ವ್ಯಾ ಖ್ಯಾ ನಿಸಲಾ ಗಿದೆಮತ್ತು ಅರ್ಜಿ ದಾ ರರು (ಗಳು ) /ಸಾ ಲಗಾರರಿಂ ದಅರ್ಥ ಮಾ ಡಿಕೊ ಳ್ಳಲಾ ಗಿದೆಮತ್ತು ಸಹ-ಸಾ ಲಗಾ ರ (ಗಳು).  ",  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Telugu", 
    field3: "ఈ అప్లికేప్లిషన్ / ఒప్పం దం / లేఖ / నిబం ధనలుమరియుషరతులయొక్క కం టెం ట్దరట్ద ఖాస్తుదారు(లు) / రుణగ్ర హీతమరియుఆం గ్లం లోసహ-రుణగ్ర హీత (ల)కుచదవబడిం ది, వివరిం చబడిం దిమరియువివరిం చబడిం దిమరియుదరఖాస్తుదారు(లు) / రుణగ్ర హీతఅర్థం చేసుకున్నా రుమరియుసహ-రుణగ్ర హీత (లు)."
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Tamil", 
    field3: "இந்தவிண்ணப்பம் / ஒப்பந்தம் / கடிதம்வி தி முறைகள்மற்றும்நி பந்தனை களி ன்உள்ளடக்கம்விண்ணப்பதா ரர்(கள்)/கடன்வா ங்குபவர் மற்றும்இணைக்கடன்வா ங்குபவர்(கள்) ஆகி யோ ருக்குஆங்கி லத்தி ல்படித்துவி ளக்கப்பட்டுவி ளக்கம்அளி க்கப்பட்டுள்ளதுமற்றும்விண்ணப் பதா ரர்(கள்)/கடன்வா ங்குபவர்புர",  // Tamil text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Malayalam", 
    field3: 'ഈ ആപ്ലി ക്കേ ഷന്റെ ഉള്ളടക്കം / കരാ ർ / കത്ത് / നി ബന്ധനകളും വ്യ വസ്ഥകളും അപേ ക്ഷകന് / കടം വാ ങ്ങു ന്നയാ ൾക്കും ഇം ഗ്ലീ ഷി ൽ സഹ-കടം വാ ങ്ങു ന്നയാ ൾക്കും വാ യിക്കു കയും വി ശദീ കരിക്കു കയും വ്യാ ഖ്യാ നിക്കു കയും ചെ യ്തു കൂ ടാ തെ അ പേ ക്ഷകൻ (ങ്ങൾ) / കടം വാ ങ്ങു ന്നയാ ൾ മനസ്സി ലാ ക്കു കയും ചെ യ്യു ന്നു . ഒപ്പം സഹ-കടം വാ ങ്ങു ന്നവരും .',  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Oriya", 
    field3: 'ଏହିଆହି ବେ ଦନ / ଚୁକ୍ତିନା ମା / ଚିଠିଚି ଠି/ ସର୍ତ୍ତା ବଳୀ ଏବଂ ଚୁକ୍ତିନା ମା ଗୁଡିକଡି ଆବେ ଦନକା ରୀ (()) / orrଣଗ୍ରହୀ ତା ଏବଂ ସହ-orrଣଗ୍ରହୀ ତା ଙ୍କୁଇଂ ରା ଜୀ ରେ ପ read ା ଯା ଇଛି,ଛିବ୍ୟା ଖ୍ୟା କରା ଯା ଇଛିଏବଂ ଆବେ ଦନକା ରୀ (ମା ନେ ) / orrଣଦା ତା ଦ୍ୱା ରା ବୁଝିଛଝିନ୍ତିଏନ୍ତିବଂ ସହ-orrଣଦା ତା (ଗୁଡିକଡି ) |',  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Marathi", 
    field3: 'याअर्जा ची / करा रा ची / पत्रा ची / अटी व शर्तीं ची मा हि ती वा चूनका ढली गेली आहे,हेअर्जदा रा ला /कर्जदा रा ला आणि इंग्रजी मध्येसह-कर्जदा रा ला /केली आहे व अर्जदा रा ने /कर्जदा रा नेसमजूनघेतली आहे.हेआणि सह-कर्जदा र',  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Gujarati", 
    field3: gujratiFont.join('\n'),  // English text
  },
  {
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Urdu", 
    field3: "درخواست/معاہدہ/خط/شرائط و ضوابط کا مواد درخواست دہندہ/قرض دہندہ اور شریک قرض دہندہ کو انگریزی میں پڑھ کر سنایا گیا، وضاحت کی گئی اور اس کی تشریح کی گئی اور درخواست دہندہ/قرض دہندہ اور شریک قرض دہندہ نے اسے سمجھ لیا۔",  // Urdu text
  },
];

// // Call the table function to render the data
declarationTableFunction(declarationTable);
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica')
.text(`___________________________`, startX, doc.y, { align: "left",underline: true, width: 500 });
doc.moveDown(0.5);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`Lender (Authorised Signatory`, startX, doc.y, { align: "left",underline: true, width: 500 });
doc.moveDown(1);
  
//addFooter();
// // -------------------------------------- new page ------------------------------------------------------------------

// doc.addPage();
// // addLogo();
// //drawBorder();
// doc.moveDown(10);

// const lenderpayment = [
//   { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
//   { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
//   { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
// ];

// presentment(lenderpayment);

//addFooter();

// // -------------------------------------- new page ------------------------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`Annexure-I`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`The Borrower and Co-Borrower(s) (“Borrowers”) hereby accept and acknowledge that they have been made aware of the terms set out in this Annexure below in accordance with applicable provisions under Reserve Bank of India (RBI) notification and that the terms set out in this Annexure shall from an integral part of this Loan Agreement (“Agreement”) executed between Borrowers and Ratnaafin Capital Private Limited (“the Company”/ “Ratnaafin Capital Pvt Ltd”/ “Lender”) on ${allPerameters.agreementdate}. `, startX, doc.y, { align: "left", width: 500,  align: "justify", })
doc.moveDown()
.fontSize(8)
.font('Helvetica')
.text(`Please note that Clause 1 and 2 of this Annexure may be amended in the Welcome Letter or Disbursement letter and/or by such additional amendments from time to time.\n\n 1. Due Dates of Repayment\n\n The Due Date of Repayment, Frequency of Repayment, Principal and Interest Amount* shall be as per the Schedule II attached hereof.\n\n *The principal and Interest amount indicated under Schedule II attached here to may change depending on the actual disbursement terms and conditions.\n\n 2.  Repayment Due Dates, in case, payment moratorium on principle and/or interest, if any, may be changed depending on the actual disbursement terms and conditions. * \n\n *In case of Interest Moratorium Period, the principal amount will continue to be paid.`, startX, doc.y, { align: "left", width: 500,  align: "justify", });
doc.moveDown(0.5);

function dateTableFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    const rowContent = row.field1 || ""; // Fallback to an empty string if field1 is undefined
    const rowHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowContent, { width: boxWidth - 10 }) + 9; // Add padding

    // Set row color to gray for specific field values, keep border black
    const rowColor = (rowContent === "Interest Moratorium Start Date" || rowContent === "Repayment Start Date")
      ? "#d3d3d3"  // Gray for specific fields
      : (rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff"); // Alternate colors for other rows

    // Draw the background rectangle for the row with gray fill color
    doc
      .lineWidth(0.5)
      .fillColor(rowColor) // Set the fill color to gray for specific fields
      .rect(startX, startY, boxWidth, rowHeight)
      .fill(); // Only fill, no stroke yet

    // Draw the black border for the row
    doc
      .lineWidth(0.5) // Black border color
      .stroke("black") // Black border color
      .rect(startX, startY, boxWidth, rowHeight) // Apply the black border
      .stroke(); // Stroke to outline the rectangle

    // Draw the text inside the row
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(rowContent, startX + 5, startY + 5, {
        baseline: "hanging",
        width: boxWidth - 10,
        align: "left",
      });

    // Move to the next row's starting Y position
    startY += rowHeight;
  });
}

const dateTable = [
  { field1: ` Interest Moratorium Start Date` },
  { field1: ``},
  { field1:  `Repayment Start Date` },
  { field1:  `` },

];

dateTableFunction(dateTable);
doc.moveDown(2);
doc
.fontSize(8)
.font('Helvetica')
.text(`3. Consequences of delayed Repayment- Classification as Special Mention Account (SMA) and Non-Performing Asset (NPA):\n\n In addition to the consequences of delayed or defaulted repayments under the Agreement, the Borrower’s account immediately on default shall be classified as Special Mention Accounts (“SMA”) or a Non-Performing Asset (“NPA”) on the following basis in accordance with RBI notifications and regulations:\n\nClassification of Special Mention Accounts and NPAs`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(0.2);

function revolvingFacilitiesFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;  // Total table width
  const minColWidth = 150; // Minimum width for columns
  const fixedColWidth = 230; // Fixed column width (each column)

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    const rowContent = row.field1 || ""; // Fallback to an empty string if field1 is undefined
    const rowValue = row.value || ""; // Value for the second column, fallback to empty string

    // Calculate the text height based on the content for both columns
    const rowContentHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowContent, { width: fixedColWidth - 10 });
    const rowValueHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowValue, { width: fixedColWidth - 10 });

    // Maximum row height (to keep row heights uniform)
    const rowHeight = Math.max(rowContentHeight, rowValueHeight) + 10; // Add padding

    // Set row color (alternating colors)
    const rowColor = (rowIndex === 0) ? "#d3d3d3" : (rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff");

    // Draw the background rectangle for the row with fill color
    doc
      .lineWidth(0.5)
      .fillColor(rowColor)
      .rect(startX, startY, boxWidth, rowHeight)
      .fill();

    // Draw the black border for the row
    doc
      .lineWidth(0.5)
      .stroke("black")
      .rect(startX, startY, boxWidth, rowHeight)
      .stroke();

    // Draw the text for the first column
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(rowContent, startX + 5, startY + 5, {
        baseline: "hanging",
        width: fixedColWidth - 10,
        align: "left",
      });

    // If there's a value for the second column, draw it
    if (rowValue) {
      doc
        .font(font)
        .font('Helvetica-Bold')
        .fillColor("black")
        .fontSize(7.2)
        .text(rowValue, startX + fixedColWidth + 5, startY + 5, {
          baseline: "hanging",
          width: fixedColWidth - 10,
          align: "left",
        });
    }

    // Draw the vertical line between the two columns
    doc
      .lineWidth(0.5)
      .stroke("black")
      .moveTo(startX + fixedColWidth, startY)  // Position of the first vertical line
      .lineTo(startX + fixedColWidth, startY + rowHeight) // Extend the line down
      .stroke();

    // Move to the next row's starting Y position
    startY += rowHeight;
  });
}

const revolvingFacilitiesTable = [
  { field1: "Loans other than revolving facilities" },
  { field1: "SMA Sub-categories", value: "Basis for classification – Principal or interest payment or any other amount wholly or partly overdue" },
  { field1: "SMA - 0", value:  ` Upto 30 days` },
  { field1: "SMA – 1", value: ` More than 31 days and upto 60 days` },
  { field1: "SMA – 2", value: ` More than 61 days and upto 90 days` },
  { field1: "NPA", value: ` More than 90 days` },
];

revolvingFacilitiesFunction(revolvingFacilitiesTable);

doc.moveDown(3);
doc
.fontSize(8)
.font('Helvetica')
.text(`The aforesaid categorization will apply only when the time intervals are continuous.\n\n\nFurther, the classifications shall be triggered/flagged by the Lender as part of its day- end processes irrespective of the time of running such processes. Similarly, classification of Borrower accounts as SMA as well as NPA shall be done as part of the day-end process for the relevant date and the SMA or NPA classification date shall be the calendar date for which the day-end process is run. In other words, the date of SMA/NPA shall reflect the asset classification status of an account at the day-end of that calendar date.\n\n\nExample: If the due date of a loan account is March 31,2021, and full dues are not received before the lending institution runs the day-end process for this date, the date of overdue shall be March 31, 2021. If it continues to remain overdue, then this account shall get tagged as SMA-1 upon running the day-end process on April 30, 2021 i.e. upon completion of 30 days of being continuously overdue.Accordingly, the date of SM A-1 classification for that account shall be April 30, 2021.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(0.2);

//addFooter();

// // ------------------------------------------- new page ----------------------------------------------------
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(10);
 

doc
.fontSize(8)
.font('Helvetica')
.text(`Similarly, if the account continues to remain overdue, it shall get tagged as SMA- 2 upon running day-end process on May 30, 2021 and if continues to remain overdue further, it shall get classified as NPA upon running day-end process onJune 30,2021.\n\nFurther, loan accounts classified as NPAs may be upgraded as ‘standard’ assets only if entire arrears of interest and principal are paid by the Borrowers.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`Acknowledged & Signed\n${allPerameters.borrowerName}\n\n`, startX, doc.y, { align: "left",underline: true, width: 500 });
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`Annexure – II`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`1. Without prejudice to the right of the RCPL to proceed against the Borrower(s) under the civil law for recovery of the amount due, the Borrower(s) hereby give consent that the RCPL will be entitled to recover the dues under the provisions of the Securitisation and Reconstruction of Financial Assets and Enforcement of Security Interest Act, 2002 and the Borrower(s) further agree(s) that he/ she/ they will be liable to pay to the RCPL all cost, charges and expenses incurred in that score. The Borrower(s) understand that the RCPL may at its sole discretion avail services of recovery agency/ agents of RCPL’s choice for initiating and continuing the recovery proceedings against the Borrower(s) until the full amounts due to the RCPL are recovered. The Borrower(s) further agree to reimburse to the RCPL, any fees,charges, costs or expenses paid to such recovery agency engaged by the RCPL, in this regard.\n\n\n2. For any grievances in relation to the loan the customer can call / write to us at 9512011220 / grievance@ratnaafin.com. The other details and the process for the Grievance Redressal Mechanism is available on the website of the Company www.ratnaafin.com`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);

//addFooter();

// //------------------------------------------------- new page ------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(10);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`DEED OF GUARANTEE`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`This Deed of Guarantee (“`, startX, doc.y, { align: "left", width: 500,continued:true });
doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`Deed`, startX, doc.y, { align: "left", width: 500,continued:true });
doc
.fontSize(8)
.font('Helvetica')
.text(`” or “`, startX, doc.y, { align: "left", width: 500,continued:true });
doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`Guarantee`, startX, doc.y, { align: "left", width: 500,continued:true });
doc
.fontSize(8)
.font('Helvetica')
.text(`”) is executed is made at the place and on the date as set out in the Schedule.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`BY`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Guarantor(s), whose name(s), address(es) and other details are mentioned in Schedule (hereinafter referred to as the “`, startX, doc.y, { align: "left", width: 500,continued:true });
doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`Guarantor”)`, startX, doc.y, { align: "left", width: 500,continued:true});
doc
.fontSize(8)
.font('Helvetica')
.text(`”)`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`The expression “`, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`Guarantor`, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true})
.font('Helvetica')
.text(`” unless it be repugnant to the context or meaning thereof, shall mean and include, if the Guarantor is a: (a) company within the meaning of the Companies Act, 1956 / Companies Act, 2013 or an LLP incorporated under the Limited Liability Partnership Act, 2008, its successors and permitted assigns; (b) a partnership firm for the purposes of the Indian Partnership Act, 1932,the partners for the time being and from time to time and their respective legal heirs, executors and administrators; (c) a sole proprietorship, the sole proprietor and his / her legal heirs, administrators and executors; and (d) an individual, his / her legal heirs,administrators and executors.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`IN FAVOUR OF`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);

doc
  .fontSize(8)
  .font('Helvetica-Bold')
  .text('RATNAAFIN CAPITAL PRIVATE LIMITED', startX, doc.y, { align: 'left', width: 500, continued: true, bold: true })
  .fontSize(8) // Resetting font size for the following text
  .font('Helvetica')
  .text(` a company incorporated under the Companies Act, 2013, having its CIN No. U65929GJ2018PTC437822, and having its Registered Office at 402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place Near Hyatt Hotel, New Delhi- 110066, Delhi, India and corporate ofice at 2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India-380060 (hereinafter called the “Lender” which expression shall, unless it be repugnant to the context or meaning thereof, mean and include its executors, successors and assigns)`, { align: 'left', width: 500 })
  // .fontSize(8)
  // .text(' which expression shall, unless it be repugnant to the context or meaning thereof, mean and include its executors, successors and assigns)', { align: 'justify', width: 500 })
  .moveDown(2); // Maintain the same line spacing

  doc
 .fontSize(7)
 .font('Helvetica')
 .text(`(The Guarantor and the Lender are hereinafter collectively referred to as the “Parties” and individually as a “Party”).`, startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(1);

  doc
 .fontSize(8)
 .font('Helvetica-Bold')
 .text(`WHEREAS:`, startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(1);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`A. Pursuant to the loan agreement executed between the Borrower(s) (more particularly mentioned in Schedule hereunder) and the Lender for the Loan more particularly mentioned in Schedule and/or any amendment(s)/ addendum(s) thereto (“Loan Agreement”) and at the request of the Guarantor, the Lender has agreed to lend and advance / lent and advanced the Loan to the Borrower(s) and the Borrower(s) has/have agreed to borrow / have borrowed the Loan from the Lender on the terms and conditions contained in the Loan Agreement and other Loan Documents\n\n B. One of the conditions of the Lender having agreed to grant/ granted the said Loan to the Borrower(s), was that the Guarantor shall execute, in favor of the Lender, an unconditional and irrevocable continuing guarantee to secure the repayment of the Outstanding Dues and the performance by the Borrower(s) of all other present and future obligations and liabilities in relation to the Loan.\n\n C. The Guarantor, in consideration of the Lender extending the Loan to the Borrower(s) pursuant to the Loan Agreement, have agreed to give this unconditional and irrevocable Guarantee in favour of the Lender as appearing hereinafter`, startX, doc.y, { align: "left",align: "justify", width: 500 });
   doc.moveDown(1);

   doc
   .fontSize(8)
   .font('Helvetica-Bold')
   .text(`IT IS THEREFORE AGREED AS FOLLOWS:`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(1);

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`1. Terms defined in the Loan Agreement shall, unless otherwise defined in this Deed, bear the same meaning when used in this Guarantee. The rules of interpretation contained in the Loan Agreement shall apply to the construction of this Guarantee, unless the context requires otherwise.\n\n 2. For good and valuable consideration being the Lender providing the Loan to the Borrower(s) under the terms of the Loan Agreement, the receipt and sufficiency of which is hereby acknowledged, the We hereby irrevocably and unconditionally:\n\n i. Guarantees to the Lender punctual performance by the Borrower(s) of all the Borrower’s obligations under the Loan Documents including due and punctual repayment by the Borrower(s) of all the Outstanding Dues;\n\n ii. Undertakes that in the event of the Borrower(s) fails to perform any of its obligations under the Loan Documents, the Guarantor(s) shall, on first demand by the Lender (such notice to be conclusive proof of the default) and without any demur, contest or delay, shall pay to the Lender the Guarantee Amount as stipulated in Schedule of this Deed (the “Guarantee Amount”) and in addition thereto shall also pay all interest, penal charges costs, other charges, expenses payable by the Borrower(s) to the Lender under the Loan Documents or any part thereof \n\n iii. undertakes with the Lender that whenever the Borrower(s) do/does not pay any amount when due and/or payable under or in connection with the Loan Documents and/or does not comply with the terms and conditions of the Loan Documents, the Guarantor,without making any delay or demur, shall, within three (3) days of demand by the Lender, pay that amount to the Lender as if it were the principal obligor;\n\n iv. as a primary obligation, indemnifies the Lender immediately on demand against any cost, loss or liability suffered by the Lender if any obligation guaranteed by it is or becomes unenforceable, invalid or illegal. The amount of the cost, loss or liability shall be equal to the amount which the Lender would otherwise have been entitled to recover; and `, startX, doc.y, { align: "left",align: "justify", width: 500 });
     doc.moveDown(1);

//addFooter();

// // ---------------------------------------------new page 17------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

doc
.fontSize(8)
.font('Helvetica')
.text(`v. accepts and acknowledges that the obligations hereunder are joint and several and independent of the obligations of the Borrower(s) and a separate action or actions may be brought against the Guarantor alone or jointly with the Borrower(s) and other guarantors.\n\n 3. The Guarantors herby agrees and acknowledges that this guarantee shall be unconditional and irrevocable and shall extend/ cover/ secure the due observance and performance of the Loan Documents. The Guarantor(s) hereby irrevocably and unconditionally agree that this guarantee shall extend to the ultimate balance of sums payable by the Borrower(s) under the Loan Documents.\n\n 4. This Deed shall be enforceable against the Guarantor(s) notwithstanding that any security created in favour of the Lender shall, at the time when the proceedings are taken against the Guarantor on this Guarantee, be outstanding or unrealized or lost. This Deed is in addition to and without prejudice to any other guarantee or security now or subsequently held by the Lender.\n\n 5. The Lenders shall have the sole discretion to make disbursement(s) and/or interim disbursement(s) to the Borrower from out of the total sanctioned Loan amount, at such time, on such conditions and in such manner as the Lenders may decide.\n\n 6. The Guarantor shall indemnify and keep the Lenders indemnified against all losses, damages, costs, claims and expenses whatsoever which the Lenders may suffer, pay or incur by reason of or in connection with any such default on the part of the Borrower including legal proceedings taken against the Borrower and/or the Guarantor for recovery of the entire Guarantee Amounts referred to in the Schedule of this Deed.\n\n 7. The Guarantors agree and understand that the Guarantors shall not be entitled to delay the payment of the Guarantee Amount for any reason whatsoever or raise any controversy, question or dispute which may arise between the Lender and Borrower(s) as regard to the terms and conditions of the Loan Agreement or the liability and/or payment of the amounts due thereunder.\n\n 
  8. The Guarantor(s) hereby agree that, without the concurrence of the Guarantor(s), the Lender shall be at liberty to vary, alter or modify the terms and conditions of the Loan Agreement and/or the other Loan Documents and in particular to defer, postpone or revise the repayment of the Loan and/or payment of interest and other moneys payable by the Borrower(s) to the Lender on such terms and conditions as may be considered necessary by the Lender including any increase in the rate of interest. The Lender shall also be at liberty to absolutely dispense with or release all or any of the security/ securities furnished or required to be furnished by the Borrower(s) to the Lender to secure the Loan. The Guarantor agrees that the liability under this Deed shall, in no manner be affected by any such variations, alterations, modifications, waiver, dispensation with or release of security, and that no further consent of the Guarantor(s) is required for giving effect to such variation alteration, modification, waiver, dispensation with, or release of security.\n\n 9. The Guarantor expressly waives all their rights including but not limited to any right it may have of first requiring the Lender (or any trustee or agent on its behalf) to proceed against or enforce any other rights or security or claim payment from any person before claiming from the Guarantor under this Deed. This waiver applies irrespective of any law or any provision of a Loan Documents to the contrary.\n\n 10. The rights and remedies of the Lender under this Deed shall be cumulative, in addition to and independent of every other guarantee or security which the Lender may at any time hold for the obligations of the Borrower(s) under the Loan Documents or any rights, powers and remedies provided by law. To give effect to this Guarantee, the Lender may act as though the Guarantor were the principal debtors to the Lender.\n\n 11. This Deed shall remain in full force and effect as a continuing guarantee unless and until such time as all amounts due to the Lender by the Borrower(s) and all amounts
   due hereunder have been completely and duly paid to the Lender to the complete and absolute satisfaction of the Lender and the Lender has in writing discharged the Borrower(s); however, if the obligations of the Guarantor under this Deed cease to be continuing for any reason, the liability of the Guarantor at the date of such cessation shall remain, regardless of any subsequent increase or reduction in the obligations of the Borrower(s) under the Loan Documents. The Guarantors hereby agree and undertake that this guarantee is irrevocable and cannot be revoked by them under any circumstance.\n\n 12. If the Guarantors have or shall hereafter take any security from the Borrower(s) in respect of their liability under this Deed, the Guarantors shall not enforce the same in the bankruptcy or insolvency of the Borrower(s) in respect thereof to the prejudice of the Lender and such security shall stand as a security for the Lender and shall forthwith be deposited with the Lender, in case of liability of the Borrower(s) to the Lender remaining unpaid.\n\n 13. Without prejudice to any other right or remedy to the Lender, so long as any money remains owing hereunder, the Lender shall have a first and paramount lien and the right of set-off on all the Guarantors moneys standing to their credit in any account whatsoever with the Lender and/or any of its group companies and/or subsidiaries and/or affiliates and/or holding company/s etc. or to proceed against and recover from any of Guarantor’s property or security lying with the Lender and/or any of its group companies and/or subsidiaries and/or affiliates and/or holding company/s etc. in relation hereto or any other transaction notwithstanding any restrictive provision thereunder with respect to right of enforcement, any amounts due and payable by the Guarantors to the Lender pursuant hereto. In case of default in payment by the Guarantor, on first demand by the Lender, of the sum due and payable hereunder, the Lender shall be entitled and have the authority, without any further notice to the Guarantors, to adjust and/or appropriate the credit balance in such account or any other monies coming to the hands of the Lender and/or any of its group companies and/or subsidiaries and/or affiliates and/or holding company/s etc. towards liquidation of the sum due and payable by the Guarantors hereunder.
`, startX, doc.y, { align: "left", width: 500 });
 doc.moveDown(1);

//addFooter();

// //---------------------------------------------------new page 18---------------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

doc
.fontSize(8)
.font('Helvetica')
.text(`14. The Guarantors further undertake that this Deed shall be binding upon the Guarantors executors, administrators and assigns and shall not be affected by any change in constitution of the Guarantors or the Lenders or the Borrower(s) constitution or by reason of the winding up, merger or amalgamation of the Borrower(s) or the Lender or the Guarantors with any other company, firm, corporation or concern.\n\n 15. The rights of the Lender against each of the Guarantor shall remain in full force and effect notwithstanding any arrangement which may be reached between the Lender and the other guarantor(s), if any, or notwithstanding the release of that other or others from liability and notwithstanding that any time hereafter the other guarantor(s) may cease for any reason whatsoever to be liable to the Lender, the Lender shall be at liberty to require performance by the Guarantor of their obligations hereunder to the same extent in all respects as if the Guarantor had at all times been solely liable to perform the said obligations.\n\n 16. The Lenders shall have full liberty, without notice to the Guarantor and without in any way affecting this Guarantee, to exercise at any time and in any manner any power or powers reserved to the Lenders under the Loan Agreement, to enforce or forbear to enforce payment of the Loan or any part thereof or interest or other moneys due to the Lenders from the Borrower or any of the remedies or securities available to the Lenders, to enter into any composition or compound with or to grant time or any other indulgence or Loan to the Borrower and the Guarantor shall not be released by act of Lenders exercising their liberty in regard to the matters referred to above or by any act or omission on the part of the Lenders or by any other matter or thing whatsoever which under the law relating to sureties would but for this provision have the effect of so releasing the Guarantor. The Guarantor hereby waive in favor of the Lender so far as may be necessary to give effect to any of the provisions of this Guarantee, all the suretyship and other rights which the Guarantor might otherwise be entitled to enforce.\n\n 17. This Deed shall not be wholly  or partially satisfied or exhausted by any payments made to or settled with the Lenders by the Borrower and shall be valid and binding on the Guarantor and operative until repayment in full of   all moneys due to the Lenders under the Loan Agreement.\n\n 
 18. This Deed shall be irrevocable and the obligations of the Guarantor hereunder shall not be conditional on the receipt of any prior notice by the Guarantor or by the Borrower and the demand or notice by the Lenders shall be sufficient notice to or demand on the Guarantor\n\n 19. The Guarantor agrees, at the request of the Lender, to sign, seal, execute and deliver any deed or other documents that may be necessary or required by the Lender, in connection with the Guarantors liability hereunder or the enforcement thereof\n\n 20. The absence or infirmity of borrowing powers on the part of the Borrower(s) or any irregularity in the exercise thereof shall not affect the Guarantor’s liability and any moneys advanced/lent to the Borrower(s) by the Lender shall be deemed to be due and owing notwithstanding such absence, infirmity or irregularity. The liability of the Guarantor, under this Deed, shall not be affected by the absence or deficiency of powers on the part of the Guarantor to give guarantees and/or indemnities or any irregularity in the exercise of such powers.\n\n 21. The Guarantors hereby declare that the entries in the Lender’s books and other records maintained by the Lender shall be conclusive and evidence of the transactions and their correctness and matters therein appearing and any certificate, statement of account or determination signed by an Officer of the Lender stating the sum due from the Borrower(s) or the Guarantors, in the absence of any manifest clerical or arithmetical error, be conclusive and binding on the Guarantors.\n\n 22. Any demand for payment or notice under this Guarantee shall be sufficiently given in writing if sent by registered post, courier, speed post, mail, email to the address provided by the Guarantor in the Schedule of this Deed. Such demand or notice is deemed to be made or given and shall be assumed to have reached the addressee in the course of registered post or any other aforesaid mode, if given by registered post or such other aforesaid mode and no period of limitation shall commence to run in favor of the Guarantor until after demand for payment in writing shall have been made or given as aforesaid. A certificate by any of the responsible officers of the Lenders that to the best of its knowledge and belief, the envelope containing the said notice was so posted shall be conclusive as against the Guarantor, even though it was returned unserved on account of refusal of the Guarantor or otherwise.
 In case of change in address of Guarantor, the Guarantor shall duly intimate the new address to the Lender in writing within seven days of such change.\n\n 23. In the event the Borrower(s) becomes insolvent or the Borrower(s) makes any arrangement or composition with its creditors, the Lender may (notwithstanding any payment made to the Lender by the Guarantor or any other person of the whole or any part of the amount due to the Lender) rank as creditor and prove against the assets of the Borrower(s) for the full amount of Lender’s claims against the Borrower(s) and the Lender may receive and retain the whole of the payments to the exclusion of all the Guarantors rights in competition with Lender until Lender’s claims are fully satisfied. Until all amounts which may be or become payable by the Borrower(s) under or in connection with the Loan Documents have been irrevocably paid in full or unless the Lender otherwise directs, the Guarantor will not exercise any rights which it may have by reason of performance by it of its obligations under the Loan Documents: \n\n i. to be indemnified by, or to receive any collateral from the Borrower(s);\n\n ii. to claim any contribution from any other guarantor of the Borrower(s) obligation under the Loan Documents; and/or \n\n  iii. to take benefit (in whole or in part and whether by way of subrogation or otherwise) of any rights of the Lender under the Loan Documents or of any other guarantee or security taken pursuant to, or in connection with, the Loan Documents by the Lender\n\n 24. The Guarantor hereby severally represents and warrants to the Lender on a continuing basis, and undertakes during the subsistence of this Guarantee that:`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

//addFooter();

// // ----------------------------------------------------- new page 19 -------------------------------------------------------------------------
   
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

doc
.fontSize(8)
.font('Helvetica')
.text(`i. The Guarantor has the competence, necessary power and authority to execute this Guarantee and perform its obligations as Guarantor under this Guarantee;\n\n ii. The execution, delivery and performance of this Guarantee do not and will not conflict with (a) any agreement binding on him or any of its assets; or (b) any applicable laws, rules, regulations or any official or judicial order applicable to him;\n\n iii. This Guarantee will be legal, valid and binding obligations of the Guarantor and enforceable in accordance with the terms hereof;\n\n iv. Neither the Guarantor nor any of its assets enjoy any right of immunity from set-off, suit or execution in respect of its obligations under this Guarantee;\n\n v. There are no actions, suits, proceedings or investigations pending, or to the knowledge of the Guarantor threatened by or against the Guarantor or the properties of the Guarantor before any court of law or government authority or any other competent authority which might have a material effect on the validity, enforceability or performance of this Guarantee by the Guarantor;\n\n vi. Any financial projections provided by the Guarantor have been prepared on the basis of recent information and on the basis of reasonable assumptions; \n\n vii. Nothing has occurred or been omitted from any information provided to the Lender and no information has been given or withheld that results in such information being untrue or misleading in any material respect;\n\n viii. All information supplied by the Guarantor under this Guarantee is true, complete and accurate in all material respects as at the date on which it was given and is not misleading in any respect;\n\n ix. The Guarantor has not defaulted in fulfillment of its obligations towards other lenders;\n\n x. The Guarantor has filed all the tax returns as required by the Applicable Laws to be filed by him and has paid all taxes payable by him;\n\n xi. The Guarantor is not in a breach of any material agreement to which it is a party;\n\n xii. The Guarantor is not in violation of the Prevention of Money Laundering Act, 2002 or any other applicable money laundering laws; and\n\n xiii. The Guarantor has not been declared as a wilful defaulter by the RBI.\n\n 25. The Guarantor hereby agree and hereby authorize the Lender that\n\n i. The Lender shall be entitled to disclose the credit information and other related/ relevant information of the Guarantor to the Reserve Bank of India, credit information
 company (e.g. CIBIL and/or other similar entities) credit rating agencies, statutory/ regulatory/ judicial/quasi-judicial authorities/bodies, statutory auditors and other persons pursuant to/in connection with/ under, inter alia, any law, regulations, guidelines and/or circulars, legal proceedings, audit, credit rating / gradings, the provisions of the Loan Documents and/or in the ordinary course of the Lender’s business; and;\n\n ii. In case the Guarantor commit(s) default in the payment/repayment of the Guarantee Amount (or part thereof) and/or upon occurrence of an Event of Default under the Loan Documents, the Lender, the Reserve Bank of India and/or credit information company will have an unqualified right to disclose or publish the name(s) of the Guarantor and its/their partners or directors as defaulter(s) in such manner and through such medium as the Lender, the Reserve Bank of India and/or the credit information company in their absolute discretion may think fit\n\n 26. The Guarantor and Lender agree that if any dispute/ disagreement/ differences (“Dispute”) arises between the Guarantor and the Lender during the subsistence of the Loan Documents (including this Deed) in connection with any nature whatsoever, then, the Dispute shall be referred to a sole arbitrator who shall be nominated/ appointed by the Lender only. The place of the arbitration shall be Ahmedabad and the arbitration proceedings shall be governed by the Arbitration & Conciliation Act, 1996 (or any statutory re-enactment thereof, for the time being in force) and shall be in the English language.\n\n 27. The validity, interpretation, implementation and resolution of disputes arising out of or in connection with Agreement shall be governed by Applicable law. The Parties agree that all matters arising out of/in relation to Agreement shall be subject to the exclusive jurisdiction of the courts or tribunals (as the case may be) at Ahmedabad, India.
 `, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(`28. The Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Guarantors in the language understood by the Borrower and the Borrower has understood the entire meaning of the terms and conditions and has afixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.
 `, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

//addFooter();

// //-------------------------------------------------- new page 20--------------------------------------------------------------
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`SCHEDULE REFERRED HERE IN ABOVE`, startX, doc.y, { align: "center", width: 500 });
 doc.moveDown(0.5);

 function referredTableFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;  // Total table width
  const fixedColWidth = 230; // Fixed column width for regular rows with two columns

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row) => {
    const rowContent = row.field1 || ""; // Fallback to an empty string if field1 is undefined
    const rowValue = row.value || ""; // Value for the second column, fallback to empty string

    // Calculate text height based on content width; wider for single-column rows
    const contentWidth = rowValue ? fixedColWidth - 10 : boxWidth - 10;
    const rowContentHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowContent, { width: contentWidth });
    const rowValueHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowValue, { width: fixedColWidth - 10 });

    // Set row height to the maximum text height + padding
    const rowHeight = Math.max(rowContentHeight, rowValueHeight) + 10;

    // Draw the black border for the row
    doc
      .lineWidth(0.5)
      .stroke("black")
      .rect(startX, startY, boxWidth, rowHeight)
      .stroke();

    if (rowValue) {
      // Regular row with two columns
      // Draw the first column text (bold)
      doc
        .font(font)
        .font('Helvetica-Bold')
        .fillColor("black")
        .fontSize(7.2)
        .text(rowContent, startX + 5, startY + 5, {
          width: fixedColWidth - 10,
          align: "left",
        });

      // Draw the second column text (non-bold)
      doc
        .font(font)
        .font('Helvetica')
        .fillColor("black")
        .fontSize(7.2)
        .text(rowValue, startX + fixedColWidth + 5, startY + 5, {
          width: fixedColWidth - 10,
          align: "left",
        });

      // Draw vertical line between columns
      doc
        .lineWidth(0.5)
        .stroke("black")
        .moveTo(startX + fixedColWidth, startY)
        .lineTo(startX + fixedColWidth, startY + rowHeight)
        .stroke();
    } else {
      // Single-column centered row
      doc
        .font(font)
        .font('Helvetica-Bold')
        .fillColor("black")
        .fontSize(7.2)
        .text(rowContent, startX, startY + 5, {
          width: boxWidth - 10,
          align: "center",
        });
    }

    // Move Y position for the next row
    startY += rowHeight;
  });
}

const referredTable = [
  { field1: "Date of the Execution", value: ` ${allPerameters.agreementdate}` },
  { field1: "Place of Execution", value:  ` ${allPerameters.placeOfExecution}` },
  { field1: "Details of the Guarantor(s)" },
  { field1: "Name of Guarantor(s)", value:  ` ${allPerameters.guarantorname}` },
  { field1: "Constitution of the Guarantor(s)", value: ` ${allPerameters.constitutionGuarentor}` },
  { field1:  `Address of Guarantor(s) `,value:`${allPerameters.guarantoraddress}` },
  { field1: "PAN of the Guarantor(s)", value:  ` ${allPerameters.guarantorpanTanCin}` },
  { field1: "Email – address(es)", value:  ` ${allPerameters.guarantoremail}` },
  { field1: "Phone No. (s)", value:  ` ${allPerameters.guarantorphoneNo}` },
  { field1: "Details of the Borrower(s)" },
  { field1: "Name of Borrower(s)", value: ` ${allPerameters.borrowerName}` },
  { field1: "Address of Borrower", value:  ` ${allPerameters.borroewraddress}` },
  { field1: "Constitution of the Borrower(s)", value: ` ${allPerameters.constitutionBorrower}` },
  { field1: "PAN/TAN/CIN of the Borrower(s)", value:  ` ${allPerameters.borrowerpanNo}` },
  { field1: "Email – address(es)", value:  ` ${allPerameters.borroweremail}` },
  { field1: "Phone No. (s)", value:  ` ${allPerameters.borrwermobileNo}` },
  { field1: "Attention: Mr./Ms.", value:  ` ${allPerameters.borrowerName}` },
  { field1: "Loan Details" },
  { field1: `Loan Agreement`, value:`Loan Agreement dated ${allPerameters.agreementdate} relating to the Loan executed between (a) the Lenders (b) the Borrower(s) and/or any amendment(s) /addendum(s) thereof)` },
  { field1: "Loan Amount", value:  `Rs.${allPerameters.loanAmount}/-( ${allPerameters.loanAmountInWord})` },
  { field1: "Guarantee Amount", value:  `Rs.${allPerameters.loanAmount}/-( ${allPerameters.loanAmountInWord}) granted or to be granted to the Borrower(s) under the Loan . together with all interest, Penal charges,costs, other charges, expenses payable by the Borrower(s) to the Lender under Loan Documents or any part thereof.` },
];

referredTableFunction(referredTable);
doc.moveDown(2)
doc
  .fontSize(8)
  .font('Helvetica-Bold')
  .text('IN WITNESS WHEREOF', startX, doc.y, { align: 'left', width: 500, continued: true, bold: true })
  .fontSize(8) // Resetting font size for the following text
  .font('Helvetica')
  .text('this Guarantee has been signed and executed by the Guarantors and is intended to be and is hereby delivered by them as a deed on the date specified above', { align: 'left', width: 500, continued: true })
  .fontSize(8)
  .font('Helvetica-Bold')
  .text('\n\n SIGNED AND DELIVERED BY \n\n WITHINNAMED GUARANTOR(S)', { align: 'justify', width: 500 })
  .moveDown(2)
  .fontSize(8)
  .font('Helvetica')
  .text(`${allPerameters.guarantorname}`, { align: 'justify', width: 500 })
  .moveDown(2)

//addFooter();

// // -------------------------------------------new page 21 ------------------------------------------------------
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`END USE LETTER FROM THE RESIDENT INDIAN CUSTOMER`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc 
.fontSize(9)
.font('Helvetica')
.text(`Date:${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`To,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
.fontSize(8)
.font('Helvetica')
.text(`The Manager,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Ratnaain Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`Dear Madam/Sir,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Sub: Application for Loan\n\n I/We, ${allPerameters.borrowerName} refer to the Application No./Sanction Letter No.${allPerameters.sanctionLetterNo} Dated:${allPerameters.sanctionLetterDate} submitted by me/us to Ratnaafin Capital Pvt Ltd. for availing of a Loan from Ratnaafin Capital Pvt Ltd.)`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`The said Facility is for the purpose of (tick one)`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

// doc
// .fontSize(8)
// .font('Helvetica')
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Education\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Business\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Agriculture & Allied Activity O Home Repair\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Other personal need. specify:`, startX, doc.y, { align: "left", width: 500 })
// doc.moveDown(1);

// const addCheckbox = (doc, x, y, fieldName, label) => {
//   // Draw a rectangle for the checkbox
//   doc
//     .rect(x, y, 8, 8) // x, y, width, height
//     .stroke();

//   // Add label text next to the checkbox
//   doc.fontSize(8).text(label, x + 20, y - 2);

//   // Add the interactive form field annotation for the checkbox
//   doc.annotate(x, y, 8, 8, {
//     Type: 'Annot',
//     Subtype: 'Widget',
//     FT: 'Btn', // Form type is Button (used for checkboxes and radio buttons)
//     T: fieldName, // Field name for the checkbox
//     Ff: 49152, // Flags to set checkbox behavior (49152 makes it toggleable)
//     V: 'Off', // Default value (unchecked state)
//     AP: {
//       N: {
//         On: '/Yes', // Name for the "checked" state
//         Off: '/Off' // Name for the "unchecked" state
//       }
//     }
//   });
//   doc.moveDown()
// };

// Add the checkboxes with labels
// addCheckbox(doc, 50, 100, 'education', 'Education');
// addCheckbox(doc, 50, 110, 'business', 'Business');
// addCheckbox(doc, 50, 120, 'agriculture', 'Agriculture & Allied Activity');
// addCheckbox(doc, 50, 130, 'home_repair', 'Home Repair/Home Improvement/Home Renovation/Home Construction');
// addCheckbox(doc, 50, 140, 'cattle', 'Cattle Purchase');
// addCheckbox(doc, 50, 150, 'other_personal', 'Other Personal');

let currentY = doc.y;

const addCheckbox = (doc, x, y, fieldName, label) => {
  // Draw a rectangle for the checkbox
  doc
    .rect(x, y, 8, 8) // x, y, width, height
    .stroke();

  // Add label text next to the checkbox
  doc.font('Helvetica').fontSize(8).text(label, x + 20, y - 2);

  // Add the interactive form field annotation for the checkbox
  doc.annotate(x, y, 8, 8, {
    Type: 'Annot',
    Subtype: 'Widget',
    FT: 'Btn', // Form type is Button (used for checkboxes and radio buttons)
    T: fieldName, // Field name for the checkbox
    Ff: 49152, // Flags to set checkbox behavior (49152 makes it toggleable)
    V: 'Off', // Default value (unchecked state)
    AP: {
      N: {
        On: '/Yes', // Name for the "checked" state
        Off: '/Off' // Name for the "unchecked" state
      }
    }
  });
};

// Add checkboxes dynamically starting after the paragraph
const spacing = 10; // Adjust spacing between checkboxes
const startXy = 50; // X coordinate for checkboxes

addCheckbox(doc, startXy, currentY, 'education', 'Education');
currentY += spacing; // Increment y position for the next checkbox
addCheckbox(doc, startXy, currentY, 'business', 'Business');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'agriculture', 'Agriculture & Allied Activity');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'home_repair', 'Home Repair/Home Improvement/Home Renovation/Home Construction');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'cattle', 'Cattle Purchase');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'other_personal', 'Other Personal');
doc.moveDown()
currentY += spacing+spacing;


// const form = doc.form(); // Initialize form support

// const checkboxes = [
//   { name: 'education', label: 'Education', x: 50, y: 100 },
//   { name: 'business', label: 'Business', x: 50, y: 130 },
//   { name: 'agriculture', label: 'Agriculture & Allied Activity', x: 50, y: 160 },
//   { name: 'homeRepair', label: 'Home Repair / Improvement', x: 50, y: 190 },
//   { name: 'cattlePurchase', label: 'Cattle Purchase', x: 50, y: 220 },
//   { name: 'otherPersonal', label: 'Other Personal', x: 50, y: 250 },
// ];

// // Loop to add each checkbox with toggleable functionality
// checkboxes.forEach((checkbox) => {
//   doc.checkbox({
//     name: checkbox.name, // Unique field name
//     x: checkbox.x, // X position
//     y: checkbox.y, // Y position
//     width: 15, // Width of the checkbox
//     height: 15, // Height of the checkbox
//     value: 'Off', // Default value is "Off" (unchecked)
//     appearance: {
//       Off: { normal: {} }, // Define "unchecked" state
//       Yes: { normal: {} }, // Define "checked" state
//     },
//   });

//   // Add label text next to the checkbox
//   doc.text(checkbox.label, checkbox.x + 20, checkbox.y - 3);
// });


doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`If the facility is to be used for Business Purpose, then please tick one of a) OR b) the following`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
currentY += spacing+spacing;
doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`a) Investment in Plant & Machinery (only for Manufacturing industry) is:\n\n`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
currentY += spacing+spacing;


// doc
// .fontSize(8)
// .font('Helvetica')
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Less than or equal to Rs 5 lakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 5 lakh and up to Rs 25 lakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 25 lakh and up to Rs 5 Crore`, startX, doc.y, { align: "left", width: 500 })
// doc.moveDown(1);

addCheckbox(doc, startXy, currentY, 'five_lakh', 'Less than or equal to Rs 5 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'above', 'Above Rs 5 lakh and up to Rs 25 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'aboveCrore', ' Above Rs 25 lakh and up to Rs 5 Crore');
doc.moveDown(1)
currentY += spacing+spacing;


doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`b) Investment in Office Equipment (only for Service industry) is:`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
currentY += spacing+spacing;


// doc
// .fontSize(8)
// .font('Helvetica')
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Less than or equal to Rs 2 lakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 2 lakh and up to Rs 10Iakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 10 lakh and up to Rs 5 Crore`, startX, doc.y, { align: "left", width: 500 })
// doc.moveDown(1);

addCheckbox(doc, startXy, currentY, 'two_lakh', 'Less than or equal to Rs 2 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'above', 'Above Rs 2 lakh and up to Rs 10 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'aboveCrore', ' Above Rs 10 lakh and up to Rs 5 Crore');
doc.moveDown(1)

doc
.fontSize(8)
.font('Helvetica')
.text(`I/We hereby represent, warrant and confirm that the aforesaid purpose is a valid purpose and also agree and undertake to utilize the loan only for the above-mentioned purpose and that the loan shall not be used for any illegal and / or antisocial and/or speculative purposes including but not limited to participation in stock markets/IPOs.\n\nI/We further agree. confirm and undertake that the purpose of use of funds under the facility shall not be changed in any manner during the tenor of the facility or that such change in purpose shall take place only with the prior written permission of Ratnaafin Capital Pvt Ltd. I/We agree that any breach or default in complying with all or any of the aforesaid undertaking(s) will constitute an event of default under the Facility Agreement executed with the Ratnaafin Capital Pvt Ltd and accordingly the Ratnaafin Capital Pvt Ltd will have the right to initiate appropriate recovery proceedings for recovering the outstanding dues in the loan account.\n\n I/We are aware that it is on the faith representation, declaration and confirmation that you have agreed to consider my loan application for financial assistance under the category of Priority Advances defined in various circulars/guidelines of Reserve Bank Of India.\n\n The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers /Guarantors in the language understood by the Borrower / Co-borrowers / Guarantors and the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(2);
doc
.fontSize(8)
.font('Helvetica')
.text(`Thanking you\n\n\n`, startX, doc.y, { align: "left", width: 500 })
.text(`Yours Sincerely`, startX, doc.y, { align: "left", width: 500 })

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`Thanking you\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`Yours Sincerely\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`APPLICANT NAME : ${allPerameters.borrowerName}\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`CO-APPLICANT NAME : ${allPerameters.coBorrowername}`, startX, doc.y, { align: "left", width: 500 })

// doc.moveDown(1);

//addFooter();

// //------------------------------------------------------------- new page 22 -----------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`Thanking you\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`Yours Sincerely\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`APPLICANT NAME : ${allPerameters.borrowerName}\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`CO-APPLICANT NAME : ${allPerameters.coBorrowername}`, startX, doc.y, { align: "left", width: 500 })
// .text(`2nd CO-APPLICANT NAME : ${allPerameters.coBorrowername2}`, startX, doc.y, { align: "left", width: 500 })

doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`Interest Rate Declaration \n Certificate to be signed by the borrower`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(3);

function rateTableFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;  // Total table width
  const minColWidth = 150; // Minimum width for columns
  const fixedColWidth = 230; // Fixed column width (each column)

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    const rowContent = row.field1 || ""; // Fallback to an empty string if field1 is undefined
    const rowValue = row.value || ""; // Value for the second column, fallback to empty string

    // Calculate the text height based on the content for both columns
    const rowContentHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowContent, { width: fixedColWidth - 10 });
    const rowValueHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowValue, { width: fixedColWidth - 10 });

    // Maximum row height (to keep row heights uniform)
    const rowHeight = Math.max(rowContentHeight, rowValueHeight) + 10; // Add padding

    // Draw the background rectangle for the row with no fill color (no color logic)
    doc
      .lineWidth(0.5)
      .stroke("black")
      .rect(startX, startY, boxWidth, rowHeight)
      .stroke();

    // Draw the text for the first column (bold font)
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(rowContent, startX + 5, startY + 5, {
        baseline: "hanging",
        width: fixedColWidth - 10,
        align: "left",
      });

    // If there's a value for the second column, draw it in normal font
    if (rowValue) {
      doc
        .font(font)
        .font('Helvetica')  // Normal font for value
        .fillColor("black")
        .fontSize(7.2)
        .text(rowValue, startX + fixedColWidth + 5, startY + 5, {
          baseline: "hanging",
          width: fixedColWidth - 10,
          align: "left",
        });
    }

    // Draw the vertical line between the two columns
    doc
      .lineWidth(0.5)
      .stroke("black")
      .moveTo(startX + fixedColWidth, startY)  // Position of the first vertical line
      .lineTo(startX + fixedColWidth, startY + rowHeight) // Extend the line down
      .stroke();

    // Move to the next row's starting Y position
    startY += rowHeight;
  });
}

const rateTable = [
  { field1: "Name of the Borrower", value: ` ${allPerameters.borrowerName}(PAN):${allPerameters.borrowerpanNo}` },
  { field1: "Address", value:  ` ${allPerameters.borroewraddress}` },
  { field1: "Constitution", value:  ` ${allPerameters.constitutionBorrower}` },
];

rateTableFunction(rateTable);

function loanTableFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;  // Total table width
  const minColWidth = 150; // Minimum width for columns
  const numColumns = Math.max(...tableData.map(row => Object.keys(row).length)); // Get the max number of fields in any row
  const colWidth = boxWidth / numColumns; // Column width based on the number of columns

  // Define the fields to be bold in the second row
  const boldFields = ["Facility", "Limits", "Sanction Letter No.", "Sanction Date"];

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    let maxHeight = 0;
    const rowContentHeights = [];

    // For the first row, span the entire table width and center the content
    if (rowIndex === 0) {
      const rowContent = row.field1 || ""; // Fallback to empty string if field1 is undefined

      // Calculate the text height based on the content for the full-width row
      const rowContentHeight = doc
        .font(font)
        .fontSize(7.2)
        .heightOfString(rowContent, { width: boxWidth - 10 });

      // Draw the background rectangle for the row
      doc
        .lineWidth(0.5)
        .stroke("black")
        .rect(startX, startY, boxWidth, rowContentHeight + 10)  // Adjusted row height
        .stroke();

      // Draw the text for the first row (spanning full width and centered)
      doc
        .font(font)
        .font('Helvetica-Bold')
        .fillColor("black")
        .fontSize(7.2)
        .text(rowContent, startX + 5, startY + 5, {
          baseline: "hanging",
          width: boxWidth - 10,
          align: "center", // Center the text
        });

      // Move to the next row's starting Y position
      startY += rowContentHeight + 10;  // Adjusted for row height + padding
    } else {
      let maxRowHeight = 0;
      // Calculate the content heights for each column in this row
      Object.keys(row).forEach((field, colIndex) => {
        const fieldValue = row[field] || ""; // Fallback to empty string if undefined
        const fieldHeight = doc
          .font(font)
          .fontSize(7.2)
          .heightOfString(fieldValue, { width: colWidth - 10 });

        rowContentHeights.push(fieldHeight);
        maxRowHeight = Math.max(maxRowHeight, fieldHeight); // Track the max height of this row
      });

      const rowHeight = maxRowHeight + 5; // Add padding

      // Draw the background rectangle for the row
      doc
        .lineWidth(0.5)
        .stroke("black")
        .rect(startX, startY, boxWidth, rowHeight)
        .stroke();

      // Draw each column in the row
      Object.keys(row).forEach((field, colIndex) => {
        const fieldValue = row[field] || ""; // Fallback to empty string if undefined

        // Check if the field needs to be bold
        const isBold = boldFields.includes(field);

        // Draw the text for the current column, apply bold if necessary
        doc
          .font(font)
          .fontSize(7.2)
          .fillColor("black")
          .font(isBold ? 'Helvetica-Bold' : 'Helvetica') // Bold font for specified fields
          .text(fieldValue, startX + colIndex * colWidth + 5, startY + 5, {
            baseline: "hanging",
            width: colWidth - 10,
            align: "left",
          });

        // Draw the vertical line between columns
        if (colIndex < numColumns - 1) {
          doc
            .lineWidth(0.5)
            .stroke("black")
            .moveTo(startX + (colIndex + 1) * colWidth, startY)  // Position of the vertical line
            .lineTo(startX + (colIndex + 1) * colWidth, startY + rowHeight) // Extend the line down
            .stroke();
        }
      });

      // Draw the horizontal line at the bottom of the row
      doc
        .lineWidth(0.5)
        .stroke("black")
        .moveTo(startX, startY + rowHeight)
        .lineTo(startX + boxWidth, startY + rowHeight)
        .stroke();

      // Move to the next row's starting Y position
      startY += rowHeight;
    }
  });

  // Draw the horizontal line at the bottom of the table
  doc
    .lineWidth(0.5)
    .stroke("black")
    .moveTo(startX, startY)
    .lineTo(startX + boxWidth, startY)
    .stroke();
}

const loanTable = [
  { field1: "Details of Agri Micro Loan Against Property" }, // This will span full width and be centered
  { field1: "Facility", field2: "Limits", field3: "Sanction Letter No.", field4: "Sanction Date" }, // Multiple fields
  { field1:  `Agri Micro Lap`, field2: `Rs.${allPerameters.amountOfLoan}/-( ${allPerameters.loanAmountInWord})`, field3: ` ${allPerameters.sanctionLetterNo}`, field4: ` ${allPerameters.sanctionLetterDate} `}, // Multiple fields
];

loanTableFunction(loanTable);
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`RATE OF INTEREST:`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`FRR (Present FRR 19.20%) + ${allPerameters.interestType1} (Spread) current effective ${allPerameters.rateOfInterest}% P.A @.\n\n The rate of interest shall be subject to change from time to time including on account of changes in interest rates made by the RBI from time to time.\n\nThe Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers /Guarantors in the language understood by the Borrower / Co-borrowers / Guarantors and the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has afixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`Signature of Borrower(s)`, startX, doc.y, { align: "right", width: 470 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica')
.text(`Place:   ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica')
.text(`Date: ${allPerameters.agreementdate}`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

//addFooter();

// //-------------------------------------------- new page 22 --------------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`DECLARATION FOR IMMOVABLE PROPERTY \n (for facility backed by mortgage)`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`I/We,  ${allPerameters.borrowerName} adult,Occupation ${allPerameters.appOccupatiion}  residing at ${allPerameters.borroewraddress}( hereinafter called as "MORTGAGOR")`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`AND`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica')
.text(`I/We, ${allPerameters.coBorrowername} adult,Occupation ${allPerameters.coappOccupatiion},residing at ${allPerameters.coBorroweraddress}( hereinafter called as "MORTGAGOR")`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`AND`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);
doc
.fontSize(9)
.font('Helvetica')
.text(`I/We, ${allPerameters.coBorrowername2} adult,Occupation ${allPerameters.coappOccupatiion1},residing at ${allPerameters.coBorroweraddress2}( hereinafter called as "MORTGAGOR")`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`do hereby declare and say as follows :-`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`1) I/We say that I/We am/are absolutely seized and possessed of or otherwise well and sufficiently entitled to the Immovable property being of (1) ${allPerameters.addressImmovableProperty}, more particularly described in the Schedule hereunder written (hereinafter referred to as the “said Immovable Property\n\n 2) I/We say that I/we have not created any charges or encumbrances in respect of the Immovable Property more particularly described in the Schedule hereunder.\n\n `, startX, doc.y, { align: "left", width: 500,continued:true }).moveDown()
.font('Helvetica')
.text(`3) I/We say that the said Immovable Property is proposed to be mortgaged and charged to `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`Ratnaafin Capital Private Limited, Ahmedabad Branch.`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`, to secure by way of First Charge for the due repayment and discharge of the secured Loan of Rs.`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord}) `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(` granted by `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`RCPL`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(` to `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`${allPerameters.borrowerName} `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`together with interest, Penal charges , commitment charges and other monies payable to `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(` Ratnaafin Capital Private Limited `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`under their loan agreements, letter of sanction and other transaction documents, amended from time to time.`, startX, doc.y, { align: "left", width: 500 }).moveDown()
.font('Helvetica')
.text(`The said `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`Ratnaafin Capital Private Limited, Ahmedabad Branch`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`, Ahmedabad Branch, is/are hereinafter referred to as the “Lender”.`, startX, doc.y, { align: "left", width: 500 }).moveDown()
 
 
 
 
 
 
 
 .font('Helvetica')
 .text(`4) I/We say that the said Immovable Property is free from all encumbrances or charges (statutory or otherwise), claims and demands, and that the same or any of them or any part thereof are/is not subject to any Lien/Lispendens, attachment or any other process issued by any Court or Authority and that I/we have not created any Trust in respect thereof and that the said Immovable Property is/are in my/our exclusive, uninterrupted and undisturbed possession and enjoyment since the date of purchase/acquisition thereof and no adverse claims have been made against me in respect of the said Immovable Property or any of them or any part thereof and the same are not affected by any notices of acquisition or requisition, and that no proceedings are pending or initiated against me under the Income Tax Act, 1961, or under any other law in force in India for the time being and that no notice has been received by or served on me under the Income Tax Act,
 1961 and/or under any law and there is no pending attachment whatsoever issued or initiated against the said Immovable Property or any of them or any part thereof. \n\n 5) I/We say that I have duly paid all rents, royalties and all public demands including Income Tax, Corporation/Municipal Tax and all other taxes and revenue payable to the Government of India or to the Government of any State or to any Local Authority and that at present there are no arrears of such dues, rents, royalties, taxes and revenue dues and outstanding and that no attachments or warrants have been served on me of Income Tax, Government Revenues and other taxes.\n\n 6) I/We also agree and undertake to give such declarations, undertakings and other writings as may be required by the Lender or their solicitors and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the lender.\n\n 7) I/We say that I have obtained the requisite consent from the Income Tax authorities pursuant to the provisions contained in Section 281 of the Income Tax Act, 1961 for the alienation of my property in favour of the Lender.\n\n 8) I/We assure, agree and declare that the security to be created in favour of the Lender shall ensure in respect of my Immovable Property, both present & future and that the documents of title, evidences, deeds and writings in relation to the said Immovable Property are the only documents of title relating to the said Immovable Property.\n\n 9) I/We hereby agree and undertake that MORTGAGOR shall within a period of three months from the date hereof or such extended date as may be permitted by the Lender in writing :-\n\n a) perfectly assure the title to the properties comprised in the mortgage security and to comply with all requisitions, that may be made from time to time by or on behalf of the Lender in that behalf ;\n\n b) give such declarations, undertakings and other writings as may be required by the Lender and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the Lender;`, startX, doc.y, { align: "left", width: 500 })
doc.moveDown(1);

//addFooter();

// //------------------------------------------------------------- new page ----------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

doc
.fontSize(8)
.font('Helvetica')
.text(`c) pay all rents, rates, taxes, cesses, fees, revenues, assessments, duties and other outgoings and pay other amounts due in respect of the said Immovable Property and shall observe and perform all the rules and regulations pertaining to the same will not do or omit to do or suffer to be done anything whereby the mortgaged security as proposed to be created in favour of the Lender be affected or prejudiced in any manner whatsoever.\n\n 10) I/We further undertake that no mortgage, charge, lien or other encumbrance whatsoever will be created on the properties compromised in the mortgaged security save & except with the permission of the Lender.\n\n 11) I/We are not aware of any act, deeds, matter or thing or circumstance which prevents me from charging/further charging in favour of the Lender on the said Immovable Property.\n\n12)The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers /Guarantors in the language understood by the Borrower / Co-borrowers / Guarantors and the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement. \n\nAND I/We make the aforesaid declaration solemnly and sincerely believing the same to be true and knowing full well that on the faith thereof the Lender has agreed to complete the said transaction of mortgage by legal mortgage in respect of the Immovable Property, described in the Schedule hereunder written.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`-: SCHEDULE ABOVE REFERRED TO :-\n\n (Description of the Immovable Property)`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);

doc
.fontSize(7)
.font('Helvetica-Bold')
.text(` ${allPerameters.addressImmovableProperty}`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);
doc
.fontSize(7)
.font('Helvetica-Bold')
.text(`Boundaries of Property`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

const boundariesPropertyData = [
  { field1: "On or towards North", field2: ": ", value:  ` ${allPerameters.OnOrTowardsNorth}` },
  { field1: "On or towards South", field2: ": ", value:  ` ${allPerameters.OnOrTowardsSouth} `},
  { field1: "On or towards East",  field2: ": ", value:  ` ${allPerameters.OnOrTowardsEast}` },
  { field1: "On or towards West",  field2: ": ", value:  ` ${allPerameters.OnOrTowardsWest}` },
];

// Call the function to create the table
BoundariesFunction(boundariesPropertyData);
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text( ` Date:${allPerameters.agreementdate}`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`SIGNED & DELIVERED BY THE WITH IN NAMED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(0.5);

doc
.fontSize(8)
.font('Helvetica-Bold')
  .text(`BORROWERS NAME :   ${allPerameters.borrowerName}`,
  startX, doc.y, { align: "left", width: 500 })
  .text(`CO-BORROWERS NAME :  ${allPerameters.coBorrowername}`,
    startX, doc.y, { align: "left", width: 500 })
    .text(`2nd CO-BORROWERS NAME : ${allPerameters.coBorrowername2}`,
      startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(0.5);
  


//addFooter();

//rcpl group loan secure
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`RCPL Group Loan Secure Customer Mandate`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`To,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`RATNAAFIN CAPITAL PRIVATE LIMITED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(3);


doc
.fontSize(8)
.font('Helvetica')
.text(`Dear Sir/Madam,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(3);


// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`I/We hereby acknowledge and confirm that I/we have received the copy of the loan Agreement dated ${allPerameters.agreementdate} executed between RCPL and me/us ('Loan Agreement') and the contents of the loan Agreement have been fully explained to and understood by me/us at the time of availing the loan in the language understood by me/us) \n\n I/We further confirm that am/are fully aware of and completely understand the rights and obligations contained in the loan documents mentioned below:`, startX, doc.y, { align: "left",align: "justify", width: 500 });
//  doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(`I would like to get insured with ICICI Prudenal for the loan protect policy. In case either of the following reason triggers:`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(3);

doc
.fontSize(8)
.font('Helvetica')
.text(`
1) Policy rejecon by ICICI Prudenal due to underwring reason.
2) Insured not interested in Medical.
3) Case rejected by ICICI Prudenal on the ground of Medical or income.
4) Medical is not completed by the Client ll 30 days from the Login.
5) For any other reasons not menoned above. `, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
.fontSize(8)
.font('Helvetica')
.text(`I agree to get my policy placed with`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`
1. Bajaj Allianze Life Insurance Company Limited
2. Zuno General Insurance Limited
3. Raheja QBE General Insurance Company Limited
4. Niva Bupa Health Insurance Company Limited
5. Tata AIG General Insurance Company Limited
6. Care Health Insurance Company Limited
7. Aditya Birla Health Insurance Company Limited.
`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Request to kindly note and process accordingly`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Thanking you, `, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Loanee – RCPL`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`(Signature)`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);


// const confirmationTable = [
//   { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
//   { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
//   { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
// ];

// presentment(confirmationTable);
//addFooter();
// Finalize the PDF
    doc.end();
  
    // const pdfFileUrl = `/uploads/pdf/${pdfFilename}`;
  
    // return new Promise((resolve, reject) => {
    //   stream.on("finish", () => {
    //     resolve(pdfFileUrl);
    //   });
    //   stream.on("error", reject);
    // });

    return new Promise((resolve) => {
      doc.on('end', () => resolve(Buffer.concat(buffers)));
    });
  }

  async function  RcplLdAndPgDeedpdf2(allPerameters) {

    const font = "assets/font/Cambria.ttf";
    const fontBold = "assets/font/Cambria-Bold.ttf";
    const fontKerlaTamil = "assets/font/KarlaTamilUpright-Regular.ttf"
    const fontUrdu = "assets/font/IBMPlexSansArabic-Regular.ttf"
    const fontTelugu = "assets/font/TiroTelugu-Regular.ttf"
    const fontPanjabi = "assets/font/BalooPaaji2-VariableFont_wght.ttf"
    const fontMalayam = "assets/font/AnekMalayalam-VariableFont_wdth.ttf"
    const fontKannada = "assets/font/NotoSansKannada-VariableFont_wdth.ttf"
    const fontGujarati = "assets/font/Rasa-VariableFont_wght.ttf"
    const fontHindi = "assets/font/Mukta-Regular.ttf"
    const fontOriya = 'assets/font/BalooBhaina2-VariableFont_wght.ttf'
    const fontMarathi = 'assets/font/Hind-Regular.ttf'
    const fontBengali = 'assets/font/NotoSansBengali-VariableFont_wdth.ttf'
    // const baseDir = path.join("./uploads/");
    // const outputDir = path.join(baseDir, "pdf/");
    const PDFDocument = require('pdfkit');
  const doc = new PDFDocument({ margin: 50, size: "A4" });

  // Buffer to hold the PDF content
  const buffers = [];
  doc.on('data', (chunk) => buffers.push(chunk));
  doc.on('end', () => console.log('PDF generated successfully!'));
//fontKerlaTamil,fontUrdu,fontTelugu,fontSans,fontGurmukhi,fontMalayam
    // draw a border around the page
    function drawBorder() {
      const pageWidth = doc.page.width;
      const pageHeight = doc.page.height;
      const margin = 30;
      const lineWidth = 2;
  
      // Draw a simple border rectangle
      doc.lineWidth(lineWidth);
      doc
        .rect(margin, margin, pageWidth - 2 * margin, pageHeight - 2 * margin)
        .strokeColor("#324e98") // Set the color of the border
        .stroke();
    }
  
    // add logo to every page
    function addLogo() {
        // doc.moveDown(-5)
        if (fs.existsSync(pdfLogo)) {
          doc.image(pdfLogo, 400, 9, {
            fit: [160, 140],
            align: "right",
            valign: "bottom",
          });
        } else {
          console.error(`Logo file not found at: ${pdfLogo}`);
        }
      }
  
    // watermark function
    function addWatermark() {
      if (fs.existsSync(watermarklogo)) {
        doc.save();
        doc.rotate(-45, { origin: [doc.page.width / 2, doc.page.height / 2] });
  
        doc.image(
          watermarklogo,
          doc.page.width / 2 - 200,
          doc.page.height / 2 - 200,
          {
            fit: [450, 400],
            opacity: 0.05,
            align: "center",
            valign: "center",
          }
        );
  
        doc.restore();
      } else {
        console.error(`Logo file not found at: ${watermarklogo}`);
      }
    }
  
    // Footer with border and stylized text
    // Footer with border and stylized text
    function addFooter() {
      const pageWidth = doc.page.margins.left;
      const pageHeight = doc.page.height;
  
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#324e98")
        .text("RatnaaFin Capital Pvt Ltd", pageWidth, pageHeight - 80, {
          align: "center",
        });
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#000000")
        .text("Registered Office: 174/3, Nehru Nagar, Indore-452011 (M.P.)", {
          align: "center",
        });
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#000000")
        .text("CIN: 67120MP1994PTC008686", { align: "center" });
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#000000")
        .text("Phone: +91 7374911911 | Email: hr@fincoopers.com", {
          align: "center",
        });
  
      // Add a separator line above the footer
      doc
        .moveTo(50, doc.page.height - 100)
        .lineTo(doc.page.width - 50, doc.page.height - 100)
        .strokeColor("#324e98")
        .lineWidth(1)
        .stroke();
    }
    // if (!fs.existsSync(outputDir)) {
    //   fs.mkdirSync(outputDir, { recursive: true });
    // }
  
    const timestamp = Date.now();
    // const candidateName = 
    // (`${candidateDetails.name}`); // Capitalize name
    // const pdfFilename = `LdAndPgDeed.pdf`;
    // const pdfPath = path.join(outputDir, pdfFilename);
  
    // const doc = new PDFDocument({ margin: 50, size: "A4" });
    // const stream = fs.createWriteStream(pdfPath);
  
    // doc.pipe(stream);
  
    // Add logo and border to the first page
    // addLogo();
    //   addWatermark();
    // //drawBorder();
    // Title styling for OFFER LETTER in uppercase and underlined
    doc.moveDown(2);
    const yPosition = doc.y; // Get the current y position

    doc.moveDown(2); 
    doc
    .fontSize(10)
    .font(fontBold)
    .text("FACILITY AGREEMENT", { align: "center" });
  doc.moveDown(1);

  
doc.fontSize(9).font('Helvetica-Bold').text(`THIS FACILITY AGREEMENT (“Agreement”)`, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica').text(` is made at the place and on the date as set out in the Schedule.`)
doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("BETWEEN", { align: "center" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`RATNAAFIN CAPITAL PRIVATE LIMITED,`, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica').text(`is a Non-Banking Financial Company incorporated under the provisions of the Companies Act, 2013, having its registered office at 402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place Near Hyatt Hotel, New Delhi-110066, Delhi, India and corporate office at 2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India-380060 acting in these presents through its branch office located in the city/ town as mentioned in`,{
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica-Bold').text(` the Schedule("RCPL" `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`or the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`"Lender", `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`which expression shall, unless repugnant to the context, include its successors and assigns) of the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`FIRST PART`)

doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("AND", { align: "center" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`The `, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica-Bold').text(`Borrower(s) or Co-Borrower(s), `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`details where of are described and set out in `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`the Schedule, `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`of the `, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica-Bold').text(`OTHER PART. `)

doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`The term `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`“Borrower(s)”, `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`which expression unless repugnant to the context or meaning thereof be deemed to include (i) where the Borrower(s) is/are an individual, his/her heirs, executors, and administrators; (ii) where the Borrower(s) is/are a sole proprietorship concern, the person whose name appears as sole proprietor and shall include his/her heirs, executors, and administrators; (iii)where the Borrower(s) is/are a partnership firm under Indian Partnership Act, 1932, any and eachof the partner, and their survivor(s) or the partner(s) from time to time and their respective heirs, legal representatives, executors and administrators; (iv) where the Borrower(s) is a Hindu Undivided Family (HUF), the Karta and any or each of the adult member of the HUF and their survivor(s) and his /her/ their respective heirs, executors and administrators.(v) where the Borrower(s) is/are a Company or Society or Limited Liability Partnership(LLP), its successors andpermitted assigns; (vi) where the Borrower(s) is/are an unincorporated body, all members thereofand their respective successors; (vii) where the Borrower(s) is /are a Trust, the trustee/s for timebeing thereof and the successors of the trust / trustees). `)
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower(s) and the Co-Borrower(s) (if any) are here in after referred to as the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`“Borrower”. `)

doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`Lender and Borrower are hereinafter collectively referred to as `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`"Parties" `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`and individually as `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(` "Party".`)

doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("W H E R E A S", { align: "left", underline:"true" });
doc.moveDown(1);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(
    `A. The Borrower(s) has approached the Lender for availing a loan/advance of the amount as more particularly mentioned in Schedule I for the purpose as specified in Schedule I here to. \n\n` +
    `B. The Borrower(s) has proposed to create security over the Immovable Properties (hereinafter defined) by executing the Security Documents (hereinafter defined) as the principal and primary instrument for availing of the Loan. \n\n` +
    `C. At the request of the Borrower(s) and relying upon the representations, warranties, undertakings and covenants made by the Borrower(s), the Lender has agreed to advance/grant such loan for the aforesaid purpose, upon the terms and conditions set forth herein and other loan and security documents.`
  );
doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("NOW IT IS AGREED BY AND BETWEEN THE PARTIES HERETO AS FOLLOWS: ", { align: "left" });
doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("1. DFINITION AND INTERPRETATION ", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`In this Agreement, unless the context otherwise requires: `)
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. “Applicable Laws” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`means any act, statute, law, regulation, enactment, ordinance, treaty, rule, judgment, order, award, decree, bye-laws, rule of common law, Clearances, directions, directives, guidelines policy, licenses, requirement or any governmental restriction or condition including any similar form of decision of, or determination, application or execution by or any interpretation or pronouncement having the force of law of, any government authority having jurisdiction over the matter in question. `)

//---------------------------------------------new page -------------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica-Bold').text(`b. “CIBIL” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean Credit Information Bureau (India) Limited `)

doc.fontSize(9).font('Helvetica-Bold').text(`c. “Due Date” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean the date(s) on which any amount in respect of the Outstanding Obligations falls due as specified in this Agreement.`)

doc.fontSize(9).font('Helvetica-Bold').text(`d. “Event of Default” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean any event or circumstance specified as such in Clause13.a`)

doc.fontSize(9).font('Helvetica-Bold').text(`e. “Installment(s)” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall have the meaning ascribed to it in Clause 6.a`)

doc.fontSize(9).font('Helvetica-Bold').text(`f. “Immovable Properties” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean residential/commercial immovable properties as more particularly described in the Schedule III hereto, on the security of which the Lender has agreed to advance the Loan.`,{lineGap: 1})

doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`Without prejudice to the generality of the above “Immovable Properties” shall also include:\n\n i. In the case of part of a building, the entire built-up area (and any additions there to), the proportionate share in the common areas of the building and the proportionate undivided share in the land on which the said building is situated or is being built / will be built or \n\n ii. in the case of a flat, the entire built-up area (and any additions thereto), the proportionate share in the common areas of the building in which such flat is / will be situated and the proportionate undivided share in the land on which the said building is situated or is being built / will be built; or \n\n iii. In the case of an independent structure, the structure and entire plot of land on which the structure is situated or is being built / will be built or\n\n iv. In the case of an individual house, the house and entire plot of land on which the house will be built.`,{lineGap: 1})
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`g. “Loan” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall have the meaning ascribed to in Clause 0`)

doc.fontSize(9).font('Helvetica-Bold').text(`h. “Material Terms and Conditions” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean all terms and conditions mentioned in the sanction letter/s/ Transaction Documents.`)

doc.fontSize(9).font('Helvetica-Bold').text(`i. “Outstanding dues / Obligations” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean at any time the entire outstanding amount due in respect of the Loan, including but not limited to the present and future obligations and liabilities of the Borrower to pay/repay the principal amount of the Loan, Interest, Penal Charges, prepayment charges, other fees, liquidated damages, costs, charges and expenses(including any fees payable to the Lender) and other amounts, taxes, payable in respect of under the Transaction Documents.`)

doc.fontSize(9).font('Helvetica-Bold').text(`j. “Penal Charges” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean such charges as specified in the Schedule to this Agreement applicable in the event of default in repayment of loan instalments or non-compliance of agreed terms and conditions mentioned in the Sanction Letter.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`k. “Repayment Schedule” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall have the meaning ascribed to it in Clause 6.a`)

doc.fontSize(9).font('Helvetica-Bold').text(`l. “RBI” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(` shall mean the Reserve Bank of India`)

doc.fontSize(9).font('Helvetica-Bold').text(`m. “Security Documents” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean all documents, undertakings, agreements, deeds, declarations, undertakings, indemnities, affidavits, writings, certificates, no-objections, letters, filings, forms, towards or in relation to creation, perfection, filing, registering, etc. of Security Interest and/or issue of a guarantee, as part of the Security, and whether executed bythe Borrower, Security Providers, Lender or the Borrower or any third party, as per the requirement of the Lender and as may be amended, confirmed or restated from time to time, as per the requirement of the Lender.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`n. “Security Provider” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean any person whose property or assets /any part thereofare/shall be charged and/or who creates/is required to create any Security Interest in favour of the Lender, to secure the Outstanding Obligation or any part thereof.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`o. “Transaction Documents” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(` shall mean this Agreement, Security Documents and include all writings and other documents executed or entered into or to be executed or entered into, by the Borrower or any other Person, in relation to or pertaining to the Loan and each such transaction document as amended from time to time.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`p. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`a reference to the singular includes the plural (and vice versa)`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`q. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`the headings in this Agreement are inserted for convenience of reference only and are to beignored in construing and interpreting this Agreement.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`r. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`reference to the words “include” or “including” shall be construed without limitation.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`s. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`reference to a gender shall include references to the female and male gender`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`t. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`all approvals, permissions, consents or acceptance required from Lender for any matter shall require the “prior”, “written” approval, permission, consent or acceptance of Lender and`,{lineGap: 1})


//---------------------------------- new page ---------------------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica-Bold').text(`u. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`in the event of any disagreement or dispute between Lender and the Borrower/s regarding themateriality of any matter including of any event, occurrence, circumstance, change, fact, information, document, authorization, proceeding, act, omission, claims, breach, default orotherwise, the opinion of Lender as to the materiality of any of the foregoing shall be final and binding on the Borrowers`,{lineGap: 1})

doc.moveDown(1);
doc
.fontSize(10)
.font(fontBold)
.text("2. LOAN FACILITY", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Based on the Borrower's request, representations, warranties, covenants and under takings as contained herein, the Lender hereby agrees to grant to the Borrower and the Borrower hereby agrees to avail from the Lender, a secured loan facility in the aggregate amount asmentioned in the Schedule I here to (“Loan”) on the terms and conditions containedherein in this Agreement.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The relationship between the Lender and the Borrower shall commence from the date ofthis Agreement and subsist until all the Outstanding Obligations payable by the Borrowerto the Lender under this Agreement and in all other Transaction Documents shall have been fully paid to and received by the Lender.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`It is hereby agreed between the Parties that the Lender may, at its sole and absolute discretion, cancel and/or withdraw the undrawn limit of the Loan as sanctioned by the Lender. The said withdrawal shall not absolve the Borrower of any of its liability to repay the Outstanding Obligations.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`d. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The term or tenor of the Loan shall be as set out in the Schedule I hereto.`,{lineGap: 1})

doc.moveDown(1);
doc
.fontSize(10)
.font(fontBold)
.text("3. DISBURSEMENT", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Upon the request of the Borrower, the Lender shall, at its sole discretion, disbursethe Loan in lumpsum or suitable installments having regard to the need of the Borrower. The decision of the Lender in this regard, shall be final and binding onthe Borrower.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The amount of the Loan will be disbursed by the Lender subject to compliance by the Borrower with the terms and conditions provided in this Agreement. The Loan amount shall be disbursed to the Borrower net of all initial payments towards documentation charges, loan processing charges, premium for insurance (if applicable) and such other charges as specified in the Schedule I here to.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Interest on the Loan will begin to accrue in favour of the Lender as and from the date of disbursement of the Loan.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`d. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Not with standing anything contained in this Agreement, the Lender may terminatethe right of the Borrower to disbursements under the Loan, if the request for suchdisbursement shall not have been made within 30 days from the date of this Agreement or by such extended date as may be agreed upon by the Lender in writing.`,{lineGap: 1})

doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`4. INTEREST RATES AND PENAL CHARGES `)
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall be liable to pay interest on the Loan from time to time at the rateas specified in the Schedule I here to (“Interest”). The Lender in its sole discretion would be entitled to modify and vary the said rate of Interest from time to time a sper its policy, market conditions and/or applicable laws including on account of changes in interest rates made by the RBI from time to time. In the event rate of Interest is modified, then in such event interest would be payable by the Borrower at the revised rate of interest.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Interest will be calculated on the basis of rate of Interest mentioned in the Schedule I hereto and is rounded off to the next rupee calculated on monthly rests and any other charges shall be computed on the basis of a year of three hundred and sixty-Five (365) days.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`In the event of the Borrower committing a default or delay in the repayment of any Instalment on the Due Date, in full or in part, the borrower shall pay penal chargesat the rate specified in the Schedule I hereto on the overdue amount from the date ofdefault till the date of payment or the Borrower committing any breach or default ofagreed terms and conditions mentioned in the Sanction Letter or under any otherTransaction Documents, the Borrower shall, in respect of the OutstandingObligations, pay the Penal charges as the rate specified in the Schedule I hereto, onthe outstanding loan amount from the date of default till such time that the breach iscured. The Borrower expressly agrees that the rate of such Penal charge is a fairestimate of the loss likely to be suffered by the Lender by reason of such delay/ default on the part of the Borrower. The payment of Penal charges shall not absolvethe Borrower of the other obligations including to make timely payments and/or inrespect of such default or affect any of the other rights of the Lender including inrespect of the default. It is expressly specified that the Lender expressly reserves all the other rights that may accrue to it on any default by the Borrower.`,{lineGap: 1})

//-------------------------------------------- new page --------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc
.fontSize(10)
.font(fontBold)
.text("5. FEES, CHARGES, COSTS AND CLAIMS", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower undertakes to pay forthwith on demand to the Lender and in no caselater than 30 (Thirty) calendar days from the date on which demand being made all costs and expenses including cost and expenses for investigation of title to any immovable property offered/proposed to be offered as security and for the preparation, execution, preservation, performance, enforcement and realization ofthe Outstanding Obligations, Security Documents and other instruments creating and/or evidencing the creation of any security for the Loan as also any other instruments required in connection with the Loan.`,{lineGap: 1})
   
doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall bear the service charges, processing fee, stamp duty, cheque bouncing charges, cheque swapping charges, loan cancellation/re-booking charges, and any other fees as more particularly detailed in the Schedule I hereto in relationto the Loan`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall during the tenure of the Loan bear all taxes (including interest tax and GST) as may be applicable or as may be levied by any government body orauthority in relation to the Loan.`,{lineGap: 1})

doc
.fontSize(10)
.font(fontBold)
.text("6. REPAYMENT", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a.`,{continued: true,lineGap: 1})

doc.fontSize(9).font('Helvetica').text(`The Borrower shall repay the Loan together with interest, penal charges and other charges thereo n in such number of installments, of such amounts, and on such Due Dates `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`(“Installments”),`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`as mentioned in the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`Schedule II`,{continued: true,lineGap: 1})

doc.fontSize(9).font('Helvetica').text(` here to `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(` (“Repayment Schedule”).`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Repayment Schedule is without prejudice to the right of the Lender to recompute the interest in case of variation and on such re-computation, payment shall be made by the Borrower in accordance with such varied Repayment Schedule. Not with standing anything to the contrary contained in this Agreement, the Loan shall be repayable on demand and the Lender shall have the right to be paid forth with on demand the entire Outstanding Obligations in respect of the Loan. The Borrower hereby agree that the time is the essence of the contract.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If such Due Date falls on a day which is not a business day at the place where the payment is to be made, the Borrower shall pay the Instalment on the business day preceding the said Due Date for such repayment. All payments to be made by the Borrower to the Lender shall be made free and clear of and without any deductionfor on account of any taxes. If the Borrower is required to make such deduction, then, in such case, the sum payable to the Lender shall be increased to the extent necessary to ensure that, after making such deduction, the Lender receives and retains (without any liability for such deduction) a sum equal to the sum which it would have received had such deduction not been made or required to be made.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Lender shall have the right at any time or from time to time to review and reschedule the Repayment Schedule in such manner and to such an extent as the Lender may, in its sole discretion, decide and the repayment will there upon be made as per the revised Repayment Schedule.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower agrees declares and confirms that not with standing any of the provisions of any applicable law or any of the terms and conditions contained in the Agreement and or any Transaction Documents, any payment(s) shall unless otherwise agreed to by the Lender in writing be appropriated in the manner following: \n\n i. Firstly, towards costs, charges, expenses and other monies, due and payableto the Lender. \n\n ii. Secondly, towards the Interest due and payable and / or becoming due andpayable to the Lender.\n\n iii. Thirdly, towards repayment of the amount of the principal sums due andpayable or becoming due and payable to Lender and\n\n iv. Lastly, towards any other amount due and payable to the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Provided however that the Lender reserves the right to appropriate the moneys received in any other manner as it may deem appropriate at its sole discretion.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`e.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall repay / pay the Installments and other monies to the Lenderthrough any one of the following: (i) by postdated cheques. (ii) by Electronic Version 1.3 6of66Clearing System (Debit Clearing) as notified by RBI (ECS), (iii) by directly payingamounts by cheque / draft issued in the name of “RATNAAFIN CAPITAL PRIVATE LIMITED”. (iv) NACH or (v) by any other method provided the same isapproved by the Lender. The method for payment shall be as selected by the Borrower in Schedule I.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`f.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall not be entitled to cancel or issue stop- payment instructionswith respect to the postdated cheques / ECS / NACH mandates for so long as anypart of the Outstanding Obligations is pending.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower hereby unconditionally and irrevocably authorizes the Lender, acting through its officers, authorized agents to fill necessary details in the cheque/s delivered to the Lender for an amount not exceeding the maximum amount due by the Borrower to the Lender under the terms and conditions of this Agreement without notice to the Borrower in his behalf. The Borrower hereby confirm and agree that the Lender is entitled in its sole discretion to use one or more such cheques or ECS or NACH for the regularization/settlement of repayment of theLoan.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(``,{continued: true,lineGap: 1})



//------------------------------------------------------------new page 5 ------------------------------------------------------
doc.addPage();
// addLogo();
doc.moveDown();

doc.fontSize(9).font('Helvetica-Bold').text(`h.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall at all times maintain sufficient funds in its bank account to ensure that the ECS, post-dated cheques, or NACH, if any, issued by the Borrower are not dishonored and the Instalments are received / realized by the Lender on or before the applicable Due Dates.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Not with standing the mode of repayment / payment, the Borrower shall continue toremain at all times liable and responsible for ensuring the payment / repayment ofall Instalments and all other monies in respect of the Loan to the Lender on or before the relevant Due Dates without any further notice / intimation being given by the Lender and all such amounts payable by the Borrower to the Lender shall be paid without any deductions whatsoever so as to enable the Lender to fully realize the amounts due on or before the respective Due Date(s). Credit for payments by any method will be given only on realization of payments. The acceptance by the Lender of any payment which is less than the full Instalment or other amounts due and owing at such time shall not constitute a waiver of the Lender’s right to receive payment in full at such time or at any subsequent time or a waiver of any other rights whatsoever of the Lender under this Agreement.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`j.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall obtain the Lender’s prior written consent for changes in authorised signatory who has signed the post dated cheques /ECS/NACH which have been submitted to the Lender at the time of disbursal of this Loan. The Lender may permit the Borrower to swap / exchange the post dated cheques/ECS/NACH issued to the Lender with alternate post dated cheques/ ECS/NACH drawn on another bank(as approved by the Lender). In such an event, the Borrower shall promptly replace the post dated cheques and/ or the ECS or NACH mandates, agreements and/or other documents executed for payment of the Instalments and issue fresh post dated cheques, ECS or NACH mandates in lieu thereof to the satisfaction of the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`k.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Without prejudice to any other rights or remedies the Lender may have under thisAgreement and/or under the applicable law, the Borrower shall be liable to pay a flat charge as stated in the Schedule I hereto in case of dishonour of the cheques or dishonour of ECS or NACH mandates or any other recognized mode by Lender onthe first presentation. In case of dishonour on the second presentation, a furthercharge, as stated in the Schedule I, would be levied in respect of such dishonoured cheques. The levy of charge upon dishonour is without prejudice to the other rights which the Lender has under this Agreement or under law or equity.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`l.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower may prepay the entire Outstanding Obligations at any time by giving one-month prior notice in writing to the Lender. In the event the Borrower exercises its right to prepay, the Lender will be entitled to charge prepayment charges at therate as set out in the Schedule I here to. No amount that has been prepaid shall be reborrowed by the Borrower.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`m.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`In case of two or more Borrowers, the liability of the co-borrower(s) to repay theLoan together with interest, etc, and to observe the terms and conditions of thisAgreement and any other Transaction Documents shall be is joint and several andconsequently the Lender shall have a sole discretion to proceed against all or any ofthe co-borrower(s) to recover the Loan and other charges payable by under this Agreement.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(10).font('Helvetica-Bold').text(`7. LOCK IN PERIOD`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`7.1.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrowers shall not repay/ prepay/ foreclose any portion of the outstanding loan amount either in part or in full during the Lock-in period (“Lock-in Period”) as described in Schedule – I of this agreement.\n `,{lineGap: 1})   

doc.fontSize(9).font('Helvetica-Bold').text(`7.2.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrowers may exercise the option of pre-payment/repayment/foreclosure post Lockin-period, where applicable, subject to the Borrowers and/or the guarantor(s) complying with the following conditions and at the absolute discretion of the Lender. After the expiry of Lock-in Period as provided in Schedule - I here under, the Borrowers shall givethe Lender a notice of 45 days intimating his desire to repay/ prepay/ foreclose the loan and the Lender may accept repayment/ prepayment/ foreclosure together with prepayment charges/ fore closure charges as specified in Schedule -I, hereto and such charges is payable by the Borrower together with applicable taxes.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`7.3.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica')
   .text(`The amount repaid/prepaid shall first:\n\n`, { lineGap: 1 })
   .text(
      `7.3.1. Be used to credit the penal charges, charges, legal expenses if any, Arrears of installments, interest due up to date for the current month, The current month EMI, foreclosure / pre-payment charges and other expenses and taxes due as mentioned in this agreement.\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `7.3.2. If any amount remains after meeting the charges, then it shall be adjusted towards the principal amount. If the entire amount due for prepayment is not remitted then the amount so received by the Lender would be treated as an advance payment of future EMI and will be adjusted to EMI month on month, as and when the EMI falls due for payment.\n\n`, 
      { lineGap: 1, indent: 20 }
   )
   .text(
    `7.3.3. The Borrowers here by agrees that the Lender is not obliged to reverse the interest that may accrue on account of advance payment. The amount due under fore closure should be paid in full by the Borrower to the Lender to qualify the account foreclosure.\n\n`, 
    { lineGap: 1, indent: 20 }
 );


//------------------------------------------------new page 5 -------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica-Bold').text(`7.4.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Not with standing anything contained the Borrowers shall remit the monthly instalments without any default in terms of the Agreement. The Option to accept repayment/ prepayment or decline the request for repayment/prepayment during the Lock-in period is at the sole discretion of the Lender.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`7.5.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If the loan is being foreclosed by the Borrowers by obtaining financial assistance from any other financial institution/ Bank/ NBFC/ Third party, the Borrower shall be charged additional prepayment/foreclosure charges at the rate specified in Schedule - I herein, which is payable together with applicable Goods and Service Tax (GST) by the Borrower in addition to the applicable foreclosure charges. Furthermore, the Borrower undertakesand agrees to execute such documents as the company may require and abide by such amended/altered repayment schedule as specified by the company.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`7.6.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If the Borrowers requests for repayment/ prepayment/ foreclosure during the Lock-inperiod, then the Lender is at liberty to refuse the repayment/prepayment or in the alternative lay down conditions for acceptance at its discretion which the Borrower is at liberty to accept or otherwise.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(10).font('Helvetica-Bold').text(`8. CONDITIONS PRECEDENT TO DISBURSEMENT OF LOAN`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica').text(`The obligation of the Lender to make the disbursement of the Loan shall be subject to the condition that:\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower meets the Lender’s requirement of creditworthiness. The Lender shall be entitled to make or cause to be made inquiries of such nature as the Lender may deem fit for the creditworthiness of the Borrower. The Lender shall be further entitled to call for such credentials from the Borrower as may be required to prove the creditworthiness of the Borrower.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No Events of Default as stated in Clause 13.a shall have happened and be continuing.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower or Security Provider (as the case may be) shall have absolute, clear and marketable title to the said Immovable Property and the said Immovable Property is absolutely unencumbered and free from prior charges/lien whatsoever.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No extraordinary circumstances shall have occurred which shall make it improbable for the purpose for which Loan is provided to be carried out and/or for the Borrower to fulfill its obligations under this Agreement;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower or the security provider shall have created and perfected security andor guarantees for the repayment of the Loan with interest in favour of the Lender asmay be required by the Lender and execute all necessary documents as may be stipulated by the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall have satisfied the Lender to the effect that there is no action, suit, proceedings or investigation pending or to the knowledge of the Borrower or is threatened by or against the Borrower, before any court of law or tribunal or anyother competent Government Authority which might have a effect on the financial and other affairs of the Borrower or which might put into question the validity or performance of this Agreement and/or other Transaction Documents executed by the Borrower in favour of the Lender`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Such other conditions precedents as may be detailed in the sanction letter.`,{lineGap: 1})

doc.moveDown(1)
doc.fontSize(10).font('Helvetica-Bold').text(`9. SECURITY`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`In consideration of Lender having granted/agreed to grant to the Borrower the Loan, the Borrower shall create and/or cause to create such security interest in such form and manner and of such nature as may be required by the Lender and also as provided in the Schedule here to to secure the Borrower's Outstanding Obligations`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`(“Security Interest”).`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower agrees with, and undertakes that the Lender, shall have a first and exclusive charge over the said Immovable Property as more particularly describe inthe Schedule III hereto and that the Borrower/Security Provider shall not create anyother encumbrance, charge or security interest in the Immovable Properties in favour of any other Person or body, except with the prior written consent of the Lender.\n\n `,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica')
   .text(`In addition to the above, the Borrower do the following:\n`, { lineGap: 1 })
   .text(
      `i. The Borrower shall execute money bond or a demand promissory note and a letter of continuity in favour of the Lender for the Loan;\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `ii. The Borrower shall or cause the Security Provider to execute any such agreement/s, document/s, undertaking/s, declaration/s that may be required now or here after at any time during the pendency of this Loan/or any other loan/sgranted by the Lender hereafter\n\n`, 
      { lineGap: 1, indent: 20 }
   )


//--------------------------------------------------new page 7 ----------------------------------

doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica')
   .text(
      `iii. The Borrower shall ensure that the deed of mortgage to be executed by the Borrower/Security Provider for creation of the mortgage over the immovable  property, be duly registered with the relevant Sub-Registrar of Assurances. Further, in case of equitable mortgage, the Borrower/Security Provider shall ensure that an intimation/notice is provided to the Sub-Registrar of Assurances informing him/her that a charge by way of equitable mortgage has been createdover the said Immovable Property, within the timelines and in the manner as provided for in the applicable law.\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `iv. The Borrower shall or cause the Security Provider to file all forms and make all filings as may be required under Applicable Law including, without limitation, the filing of Form CHG-1 under the Companies Act, 2013 with the applicable Registrar of Companies (if applicable), in respect of creation of charge as above with in 30 (Thirty) days from the date of creation of security.\n\n`, 
      { lineGap: 1, indent: 20 }
   )
   .text(
    `v. The Borrower shall or ensure that the Security Provider shall provide all cooperation and assistance that the Lender may require in relation to any filings required to be made with the Central Registry of Securitisation Asset Reconstruction and Security Interest and shall bear all cost, charges and expenses which may be incurred by the Lender in relation to such filings.\n\n`, 
    { lineGap: 1, indent: 20 }
 )
 doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall submit such number of advance Instalments as mentioned in the Schedule as a security deposit with the Lender towards the security for the repayment of the Outstanding Obligations`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`(“Security Deposit”).`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Security Deposit shall be returned/ refunded by the Lender to the Borrower only after there payment of entire Outstanding Obligations. The Security Deposit shall carry the interest at the rate specified in the Schedule hereto from the date of making such Security Deposit till the last Repayment and after which the Security Deposit shall cease to carry interest thereon. The Borrower shall not be entitled to withdraw or seek refund of the Security Deposit or any part there of till any amount payable to the Lender is due and pending. In the Event of Default as mentioned in this Agreement, the Lender shall be entitled to for feit the Security Deposit and interest there on andt he same shall be utilized towards the repayment of the Outstanding Obligations. Any amount of the Outstanding Obligations remaining unpaid to the Lender after such adjustment shall be paid by the Borrower immediately on such demand by the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall furnish such additional securities including additional guarantee(s), as the Lender may deem fit, in its sole discretion. In such an event the Borrower shall provide such additional security and in this regard execute such agreements, undertakings, documents, power of attorney/s that may be required by the Lender, failing with the Loan may be recalled/Repayment of the Loan may be accelerated by the Lender with immediate effect.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The security interest created in favour of the Lender shall continue in full force till all the Outstanding Obligation have been fully paid or discharged by the Borrower(s) to the Lender and until the Lender issues a ‘No Objection Certificate’ in this regard. The Security Interest of the Lender and the obligation of the Borrower shall not be affected, impaired or discharged by the winding up, or insolvency or by merger, amalgamation, reconstruction, or takeover of the management, dissolution or appropriation of the business or assets of the Borrower /Security Provider (as thecase may be).`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If at any time during the subsistence of the Agreement, the Lender is of the opinion that any of the security provided by the Borrower has become inadequate to cover the balance of the Outstanding Obligations, then the Borrower shall provide and furnish such additional security including hypothecation and/or mortgage of or charge over such of the Borrower’s movable or immovable properties as may beacceptable to the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`h.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall, until the full repayment of the Outstanding Obligations, fully insure, and keep the Immovable Property and all other properties over which the Security Interest are created in favour of the Lender so insured against all comprehensive risks and assign the benefits of such policy/ies in with the name of the Lender appropriately endorsed and recorded as 'Assignee' in such insurance policy/ies, for a value as required by the Lender and produce evidence there of to the Lender from time to time and wherever called upon to do so.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall, until the full repayment of the Outstanding Obligations ensuresthat the above-mentioned insurance policy/ies are valid, subsisting and operative and shall make timely payments of the premium. The Lender reserves the right to pay the pay the premium on behalf of the Borrower and reimburse the same from the Borrower.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`j.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Lender shall have the right to receive and adjust any payment that it may receive in connection with any insurance policy / policies against the Loan and alter the repayment schedule as set out in Schedule II here under in any manner as it may deem fit not with standing anything to the contrary contained in this Agreement or any other document.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`k.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower here by irrevocably authorizes the Lender to act on the Borrower’s behalf, at the Borrower’s sole risks and costs and to take all necessary steps, actions and proceedings as the Lender deems fit to safeguard its interests: (i) to adjust, settle, compromise or refer to arbitration any dispute arising under or in connection withany insurance and such adjustment, settlement, compromise, and any award made on such arbitration shall be valid and binding on the Borrower, and (ii) to receive all monies payable under any such insurance or under any claim made there under and to give a valid receipt there for and apply such proceeds in accordance with the terms here of or in such other manner as deemed fit by the Lender.`,{lineGap: 1})


//--------------------------------------------------new page 8 ----------------------------------
doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica-Bold').text(`l.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall not be entitled to raise any claim against the Lender, in case the Lender chooses not to take any action in relation to the insurance claims or proceedings and/or on the grounds that a larger sum or amount of claims / settlement might or ought to have been received or be entitled to dispute the liability of the Borrower for the balance amount of Outstanding Obligations remaining due after such adjustment.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`m.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall permit the Lender, its employee, representative or its agents at all times, to have free access of the Immovable Property to inspect, view or examine the state and condition of the Immovable Property.`,{lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`10. BORROWER’S REPRESENTATIONS, WARRANTIES AND COVENANTS`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower here by represents, warrants and undertakers to the Lender that:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All the particulars and details provided by the Borrower to the Lender in this or any other Transaction Documents submitted are true correct, complete and up to date in all respect and no material details have been concealed which would have an effect on the decision of grant of the Loan`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower has full power, capacity, and authority to execute, deliver and perform the Transaction Documents and have taken all necessary action (corporate, statutory or otherwise) for the authorization, execution, delivery, and performance of this Agreement and Transaction Documents.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`It has not taken any corporate action nor has any steps been taken or legal proceeding been initiated or threatened against the Borrower for its winding up, insolvency, dissolution, administration, reorganization or for appointment of receiver, administrator of the Borrower or all or any of its assets or undertakings`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`As of the date of this Agreement, there are no litigation, proceedings or disputes pending or threatened against or affecting the Borrower which could have as ubstantially adverse effect on the Borrower, its business or operations, its assets orits ability to perform its obligations under this Agreement and other Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`the Borrower or the Security Provider (as the case may be) has absolute clear and marketable title to the Immovable Property and that the Immovable Property is absolutely unencumbered and free from any liability whatsoever`,{continued: false,lineGap: 1})
// doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
// doc.fontSize(9).font('Helvetica').text(`The Borrower or the Security Provider (as the case may be) shall continue to remainin occupation/possession of the Immovable Property and shall not part with thepossession thereof either partly or wholly until the entire Loan with interest has beenrepaid to the Lender.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower or the Security Provider (as the case may be) shall continue to remainin occupation/possession of the Immovable Property and shall not part with the possession thereof either partly or wholly until the entire Loan with interest has been repaid to the Lender.`,{lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`11. AFFIRMATIVE COVENANTS`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower covenants and undertakes that at so long as the amounts due under this Agreement shall remain outstanding and until the full and final payment of all the Outstanding Obligations, it shall, unless the Lender waives compliance in writing:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Utilize the Loan solely for the purpose stated by it to the Lender`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Maintain the Immovable Property in good order and condition and all necessary repairs, additions and improvements there to will be made during the currency of the Loan and that the Borrower will ensure that the value of the Property does not diminish`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. The Borrower shall notify the Lender of any change in the Borrower's employment, business or profession. In the event the Borrower is self-employed, the Borrower hereby undertakes to keep the Lender informed about the financials of his business on a regular basis as may be notified to him by the Lender. In the event the Borrower is a company, partnership or sole proprietary, the Borrower shall provide the Lender such information and/or documents as may be required by the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Comply with all the terms and conditions of holding the Immovable Property and all the rules, regulations, bye-laws, etc., of the concerned co-operative society,association, company or any other competent government authority and pay maintenance charges, municipal tax and other charges in relation to the Immovable Property as also any other dues, etc., as may be payable in respect of the Immovable Property and/or of the use thereo.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Promptly inform the Lender of any loss or damage to Property due to any act of God or damage or other risks against which the Property may not have been insured.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Regularly and punctually repay and discharge all the Outstanding Obligations in the manner set out herein. Not with standing the Repayment Schedule here under, the Borrower agrees that the Lender shall have the right to be paid on demand the entire Outstanding Obligations.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Maintain its corporate existence and obtain, comply with the terms of and do all that is necessary to maintain in full force and effect all authorisation, approvals, licenses and consents required to enable it to law fully carry on its business`,{lineGap: 1})


//-----------------------------------------------------new page 9 ------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica-Bold').text(`h.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Obtain, comply with the terms of and do all that is necessary to maintain in full force and effect all authorization, approvals, licenses and consents required to enable it to enter into and perform its obligation under this Agreement and to ensurelegality validity, enforceability or admissibility in evidence of any of the Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Inform the Lender of any material litigation, arbitration or other proceedings which affect the Borrower and/or the Immovable Property, forthwith upon such proceedings being instituted or threatened by any persons making a claim for money against the Borrower and/or the Immovable Property;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`j.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Promptly inform the Lender of any occurrence of which it becomes aware which might adversely affect the Borrower or affect its ability to perform its obligations under any of the Transaction Documents;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`k.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Promptly inform the Lender of the occurrence of any Event of Default and of the steps being taken to remedy the same and will from time to time, if so requested by the Lender, confirm to the Lender in writing that save as otherwise stated in such confirmation, no other Event of Default has occurred and is continuing`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`l.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`appraise the Lender of the occurrence or likely occurrence of any event which is likely to affect the capacity of the Borrower(s) to repay the Outstanding Obligations or likely to affect the security for the said Loan or the obligations of the Borrower to FICCL in respect of the said Loan`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`m.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. forth with inform the Lender on the occurrence or likely occurrence of, inter alia, any of the following events, namely, the occurrence of any event which is likely to affect the Borrower(s) business, steps taken by authorities for recovery of statutory,dues, etc.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`n.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`pay regularly all taxes, assessment dues, duties and impositions as may, from time to time, be payable to any Government body or authority`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`o.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`pay and reimburse to the Lender all governmental charges, taxes or penalties imposed on or in pursuance of this Agreement or on any instruments issued here under;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`p.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`bear all costs of making good any deficit in stamp duty on the documents executedby the Borrower or any other person in relation to the Loan and/or security createdby the Borrower in favour of the Lender; and`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`q.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`perform and execute, on request of the Lender, such acts and deeds, as may be necessary to carry out the intent of this Agreement.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`12. NEGATIVE COVENANTS`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica').text(`The Borrower covenants and undertakes that at so long as the amounts due under this Agreement shall remain outstanding and until the full and final payment of all the Outstanding Obligations, it shall not, unless previously approved by the Lender in writing:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Make any changes in its constitution, business management, ownership or control and shall not alter its constitutional / incorporation documents (as applicable)`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Undertake or permit any merger, de-merger, consolidation, reorganization, scheme of arrangement or compromise with its creditors or shareholders or effect any scheme of amalgamation or reconstruction`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Create any encumbrance or lien of any nature whatsoever over the ImmovableProperty;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Sell, transfer, lease, give on leave and license basis, alienate, or otherwise part with the possession of the Immovable Property or any part thereof`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Enter into any agreement or arrangement with any Person, institution or local or Government body for the use, occupation or disposal of the Immovable Property or any part there of.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Stand surety for anybody or guarantee the repayment of any loan or the purchase price of any asset`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Execute any document, such as power of attorney, or any other similar or other deed, in favour of any Person to deal with the Immovable Property in any manner`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`h.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Effect any oral or other partition of the immoveable Property or enter into any family arrangement in this regard.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Borrow from any source or charge any property until the Borrower's Outstanding Obligations are paid in full.`,{continued: false,lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`13. EVENT OF DEFAULT`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(` The occurrence of any one or more of the following events or events similar there to, shall each constitute an event of default`,{lineGap: 1,continued: true})
doc.fontSize(9).
font('Helvetica-Bold')
   .text(`(“Event of Default”):\n`, { lineGap: 1 });
doc.fontSize(9).
font('Helvetica')
   .text(
      `i. Default or delay in payment/repayment of any Instalment or any part there of, whether for principal or interest or otherwise due and payable from the Borrower under this Agreement, within the time stipulated here under and/or other Transaction Documents\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )


//---------------------------------------------- new page 10 ---------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica')
   .text(
      `ii. Any breach or omission or default (other than a payment default) in performance of any covenant, condition, obligations or undertaking under this Agreement or the Transaction Documents by the Borrower, guarantor or any other person (as the case may be) and such default has continued for a period of 7 (seven) days after the notice in writing there of has been given to the Borrower or as the case may be to any other person by the Lender(except where the Lender is of the opinion that such default is incapable of remedy, in which case, no notice shall be required);\n\n`, 
      { lineGap: 1, indent: 20 }
   )

doc.fontSize(9).font('Helvetica')
   .text(`iii. Any representation or warranty or covenant on the part of the Borrower made or deemed to be made in or pursuant to the Transaction Documents is or proves to be incorrect, incomplete or misleading in any material respect;\n\n`, { lineGap: 1,indent: 20  })
   .text(
      `iv. Failure by the Borrower to keep the immovable property full and comprehensively insured from time to time and punctually pay the insurance premium on such policies as and when due;\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `v. Failure by the Borrower to provide the insurance policies of the Immovable Property with endorsement of hypothecation in favour of the Lender as per Clause 9.h of the Agreement;\n\n`, 
      { lineGap: 1, indent: 20 }
   )
   .text(
    `vi. The Immovable Property or any part there of is let out, given on leave and Version 1.3 14of66license, sold, disposed of, charged, encumbered or otherwise alienated in anymanner whatsoever without written approval of the Lender\n\n`, 
    { lineGap: 1, indent: 20 }
 )
 .text(
  `vii. The Borrower or guarantors, if any (in case of either of them being acorporation or partnership firm) takes any action or other steps are taken or legal proceedings are started for insolvency, winding up, dissolution or reorganization or for the appointment of a liquidator, receiver, trustee or similar officer on its assets\n\n`, 
  { lineGap: 1, indent: 20 }
)
.text(
  `viii. The Borrower or guarantors, if any (in case of being an individual) dies or takes any steps or any steps are taken with a view to his being made in solvent in any jurisdiction or with a view to the appointment of a receiver, trustee or similar officer of any of his assets\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `ix. if the Borrower ceases or threatens to cease to carry on any of its businesses or gives notice of its intention to do so or if all or any part of the assets of the Borrower required or essential for its business or operations are damaged or destroyed or there occurs any change from the date of this Agreement in thegeneral nature or scope of the business, operations, management, orownership of the Borrower, which could have a material adverse effect\n\n `, 
  { lineGap: 1, indent: 20 }
) .text(
  `x. The Immoveable Property or any part there of is (or sought to be) attached, taken into custody by any official, authority or any other person or made the subject of any legal or execution proceedings\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `xi. The Immoveable Property depreciate in value to such an extent that the Lender is of the opinion that further security should be given and such further security is not given on written demand\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `xii. An event of default howsoever described (or any event which with the giving of notice, lapse of time, determination of materiality, or fulfilment of any other applicable condition or any combination of the foregoing would constitute an event of default) occurs under any agreement or document relating to any in debtedness of the Borrower or if any other financial institutions or banks with whom the Borrower has entered into agreements for financial assistance have recalled its assistance or any part there of\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `xiii. The Borrower is unable or has admitted in writing its inability to pay any of its Borrower(s) Dues as they mature or when due and /or demanded by the Lender\n\n`, 
  { lineGap: 1, indent: 20 }
)
.text(
  `xiv. One or more events, conditions or circumstances (including any change in law) occur or exist, which in the sole opinion of the Lender, could have a material adverse effect on the ability of the Borrower to pay / repay the Loan or`, 
  { lineGap: 1, indent: 20 }
)
.text(
  `xv. The Borrower fails to inform the Lender of the occurrence of any Event of Default or any event which after the notice or lapse of time, or both, would become an Event of Default.\n\n`, 
  { lineGap: 1, indent: 20 }
)

doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall promptly notify the Lender in writing upon becoming aware of any default and any event which constitutes an Event of Default and the steps, if any, being taken to remedy it. The decision of the Lender as to whether or not an Event of Default has occurred shall be final and binding upon the Borrower.`,{lineGap: 1})


//--------------------------------------------------new page 11 ----------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica-Bold').text(`14. EFFECT OF EVENT OF DEFAULT`,{align:"true",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`With out prejudice to the other rights or remedies available to the Lender under Applicable Law, on the occurrence of an Event of Default, the Lender shall been titled to exercise any or all of the following rights (whether simultaneously orother wise), at the sole discretion of the Lender:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica')
   .text(`i. Declare that the obligation of the Lender to make or continue to make the Loan available, stands terminated`, { lineGap: 1,indent: 20  })
   .text(
      `ii. Declare that the entire Outstanding Obligation is immediately due and payable to the Lender, where upon the same shall become immediately due and payable by the Borrower and the Borrower shall pay the entire Outstanding Obligation in accordance with the terms of the notice without any further notice or other legal formalities of any kind;\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
    `iii. Invoke the guarantee, if any for payment of the Outstanding Obligations and/or\n\n`, 
    { lineGap: 1, indent: 20 } // Adjust `indent` as needed
 )
 .text(
  `iv. Exercise any right, power or remedy permitted to it by law, including by suit, in equity or by action at law, or both, or otherwise (including appointment of receiver), whether for specific performance of any covenant, condition or term contained in this Agreement or for an injunction against a violation of any of the terms and conditions of this Agreement, or in aid of the exercise ofany power or right granted in this Agreement.\n\n`, 
  { lineGap: 1, indent: 20 } // Adjust `indent` as needed
)
 
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(` If the Borrower defaults in the repayment of the Outstanding Obligation any part there of, as stated in the Clause a.ii, on the notified date, the Lender shall have the right to enter upon and take possession of the Immovable Property or any part of it and enforce its security interest over the Immovable Property and exercise such other rights and remedies as permitted or available under Applicable Law.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall pay all costs/ expenses/ charges / fees in connection with the enforcement of the Lender’s rights including cheque bouncing charges, possession charges, legal charges, charges of agencies hired for disposal of the Immovable Property auction charges, expenses for making the Immovable Property market able or for its preservation (including insurance, taxes etc.), if incurred, or any expense other wise how so ever incurred in relation to the Immovable Property and other miscellaneous charges either due to default of the Borrower(s), or at the time of enforcement of the security interest over the Immoveable Property.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`15. INDEMNITY`,{align:"left",lineGap: 1})
doc.moveDown(1)

doc.fontSize(9).font('Helvetica').text(`The Borrower shall, without prejudice any right of the Lender, indemnify and hold harmless the Lender, its directors, officers, employees, consultants, agencies, appointees or representatives against all costs (including advocates’ fee), expenses, penalties, losses, compensation, damage, damages, suits, actions, proceedings, claims, liabilities, consequences of whatsoever nature arising from:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Occurrence of Events of Default or`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any failure by any of the Borrower to comply with the provisions of this Agreement and/or other Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any acts of omission and commission or breach of this Agreement or theTransaction Documents or any representation, warranty, covenant being false, misleading, untrue or incorrect or`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Enforcement of its rights in relation to the Immovable Property`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`non-payment or insufficient payment of stamp duty by the Borrower on thisAgreement or any other Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Borrower failing to take necessary action to protect the interest of the Lender andwhole or any part of the Immovable Property`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`16. ASSIGNMENT/TRANSFER/SECURITISATION`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower expressly recognizes and accepts that the Lender shall be absolutely entitled to, and has full power and authority to sell, assign or otherwise transfer in Version 1.3 16of66any manner whatsoever, in whole or in part, and in such manner and on such terms as the Lender may decide (including if deemed appropriate by the Lender reserving a right to retain its power to proceed against the Borrower on behalf of the purchaser, assignee or transferee) any or all outstanding and dues of the Borrower, to any third party of the Lender’s choice without any further reference or intimation or notice tothe Borrower, and without seeking any consent of the Borrower. Any such action and any such sale, assignment or transfer shall bind the Borrower to accept such third party as creditor exclusively or as a joint creditor with the Lender or any other person, as the case may be. Any costs in this behalf, whether on account of such sale, assignment or transfer or enforcement of rights and recovery of outstanding and dues, shall be to the account of the Borrower.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall not assign this Agreement or any of the rights, duties or obligations of the Borrower here under, except with prior written consent of the Lender.`,{lineGap: 1})


//------------------------------------------new page -----------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(10).font('Helvetica-Bold').text(`17. CROSS COLLATERAL`,{align:"left",lineGap: 1})
doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`The Borrower acknowledges that in the event of repayment by the Borrower of the Outstanding Obligation under this Agreement but there being any outstanding by the Borrower under any other financial facility availed by the Borrower or its affiliates from the Lender, then in such event the Lender shall not be obliged to release the securitycreated by the Borrower under this Agreement/Transaction Documents and the Borrower hereby authorizes the Lender to extend the security to cover such outstanding financial facility. Likewise, in the event of there being any outstanding by the Borrower under this Agreement, the Lender shall not be obliged to release the security created by the Borrower for any other financial facility availed of by the Borrower from the Lender and the Borrower undertakes to extend such security to cover the outstanding due under this Agreement.`,{lineGap: 1})
doc.moveDown(1);
doc.fontSize(10).font('Helvetica-Bold').text(`18. SUBORDINATE DEBT`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower does hereby agree declare confirm and undertake that all loans, advances, and other monies advanced by its group companies/ associates/ the directors, partners, and/or their friends and relatives or any of them shall stand and be regarded as subordinate debt in comparison with the Loan hereby granted. The Borrower does here by further declare and undertake that the Borrower shall not repay any of such loans and advances in whole or in part or pay any interest thereon until such time as the entire Outstanding Obligation of the Lender under and in pursuance of the Loan and/or this Agreement are repaid in full.`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(10).font('Helvetica-Bold').text(`19. DISCLOSURE OF INFORMATION`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`a.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Lender shall, as it may deem appropriate and necessary, be entitled to disclose all or any: (i) information and data relating to the Borrower; (ii) information or data relating to the Loan / Transaction Documents; (iii) obligations assumed / to be assumed by the Borrower in relation to the Loan under this Agreement and other Transaction Documents; (iv) default, if any, committed by the Borrower of the a fore said obligations, to the CIBIL and any other agency authorized in this behalf bythe RBI. The CIBIL and/or any other agency so authorized may use and/or processthe aforesaid information and data disclosed by the Lender in any manner as deemedfit by them. The CIBIL and/or any other agency so authorized may furnish for consideration, the processed information and data or products thereof prepared by them, to Lender / financial institutions and other credit grantors or registered users, as may be specified by RBI in this behalf.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`In case the Borrower commits any default in payment or repayment of the Outstanding Obligations, the Lender and/or the RBI will have an unqualified right to disclose or publish the details of such default along with the name of the Borrower and/or its directors / partners / co-applicants, as applicable, as defaulters in such manner as the Lender and/or RBI may, in their absolute discretion, think fit. The Borrower shall not hold the Lender responsible for sharing and/or disclosing the information now or in the future and also for any consequences suffered by the Borrowers and/or others by reason thereof. The provisions of this clause shall survive ever after the termination of this Agreement and the repayment of the Borrower’s Outstanding Obligations`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(10).font('Helvetica-Bold').text(`20. DISPUTE RESOLUTION`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`a.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All disputes, differences and / or claims arising out of this Agreement including constructions, meaning or effect hereof or as to the right and liabilities of the parties here under shall be settled by arbitration to be held in accordance with the provisions of the Arbitration and Conciliation Act, 1996 or any statutory amendments or reenactments there of and shall be referred to a sole arbitrator to be nominated by the Lender. In the event of death, refusal, neglect, inability or incapability of a person soappointed to act as an arbitrator, the Lender shall appoint another person in his placeas the arbitrator. The venue and seat of the arbitration shall be Ahmedabad. The award of the arbitrator shall be final and binding on all parties concerned.\n\n`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All legal actions and/or proceedings arising out of / in connection with this Agreement and the Transaction Documents shall be brought in / before the courts or tribunals at Ahmedabad and the Borrower irrevocably submits itself in the jurisdiction of such courts and tribunals. The Lender may, however, in its absolute discretion commence any legal action or proceedings arising out of the Agreement in any other court, tribunal or other appropriate forum and Borrower(s) here by consents to that jurisdiction.`,{align:"left",lineGap: 1})


//--------------------------------------------------new page 13--------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(10).font('Helvetica-Bold').text(`21. NOTICES`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All notices or other communications under this Agreement or the Transaction Documents shall be given by the Borrower to the Lender in writing at the addresses specified in the Schedule I hereto. Such notice, demand, request or other communication shall be deemed to have been duly given or made when it shall be (a)delivered personally or (b) sent by facsimile; or (c) sent by registered mail with acknowledgement due, postage prepaid or courier; or (d) sent by email.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any communication or document made or delivered by one person to another under or in connection with the Finance Documents will be effective:\n\n`,{align:"left",lineGap: 1})

doc.fontSize(9).font('Helvetica')
   .text(
      `i. if delivered personally, on delivery; or\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
    `ii. if by way of facsimile, when received in legible form; or\n`, 
    { lineGap: 1, indent: 20 } // Adjust `indent` as needed
 )
 .text(
  `iii. if by way of registered mail/courier, the date of receipt of such registered mail/courier (as demonstrated by the acknowledgement); or\n`, 
  { lineGap: 1, indent: 20 } // Adjust `indent` as needed
)
.text(
  `iv. if by way of email, as soon as the email leaves the system of the sender to be transmitted to the addressee.`, 
  { lineGap: 1, indent: 20 } // Adjust `indent` as needed
)
doc.fontSize(9).font('Helvetica-Bold').text(`c.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any notice given or communication made under any Finance Document must be in English Language.`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`22. MISCELLANEOUS`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The entries made in the account books/ record of the Lender maintained in accordance with its usual practice and in compliance with statutory requirements and / or a statement signed by a designated officer of the Lender, shall be final and binding on the Borrower. Such entries and / or statement shall be prima facie conclusive evidence of the existence and amount of obligations of the Borrower recorded in respect of the Loan.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`This Agreement and any other Transaction Documents integrate all the terms and conditions mentioned here in or incidental hereto, and supersede all oral negotiations and prior writings in respect of the subject matter hereof, except for those provisions of the Sanction Letter issued prior to this Agreement which are in addition to and complement, and are not in conflict with the terms of this Agreement. In the event ofany conflict between the terms and conditions of this Agreement and any agreement or documents, then in such event the terms and conditions of this Agreement shall prevail.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. The Lender reserves the right to use the information provided by the Borrower in this Agreement and the Transaction Documents and during surveys, informationfrom external sources, including consumer reports, for marketing activities carried out by the Lender / its affiliates/group companies. The Lender may use this information to develop mailing lists that may be used by companies with whom the Lender shall work to develop marketing offers for the Borrower`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any provision of this Agreement or any other Transaction Document, which is prohibited or unenforceable in any jurisdiction, shall, as to such jurisdiction, beineffective to the extent of the prohibition or unenforceability but that shall not invalidate the remaining provisions of this Agreement or such other Transaction Document or affect such provision in any other jurisdiction.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No delay in exercising or omission to exercise any right, power, or remedy accruing to the Lender under this Agreement or the other Transaction Documents shall impair any such right, power, or remedy or shall be construed to be a waiver there of or any acquiescence in such default, nor shall the action or inaction of the Lender in respect of any default or any acquiescence by it in any default, affect or impair any right, power, or remedy of the Lender in respect of any other default. The rights of the Lender under this Agreement and the other Transaction Documents may be exercised as often as necessary, are cumulative and not exclusive of their rights under the general law and may be waived only in writing and specifically and at the Lender’s sole discretion.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No suit, action, prosecution, or other legal action shall lie against the Lender or anyof its directors, officers, employees, consultants, appraisers, valuers, auditors, Version 1.3 19of66agencies for any act done in good faith or intended to be done in pursuance of thisAgreement or any Transaction Documents.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower acknowledges that he/authorizedx representative has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower in the language understood by the Borrower and the Borrower has understood the entire meaning of the terms and conditions and has affixed its signature after verifying and understanding the contents of this Agreement.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`h.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. Nothing herein contained shall prejudice or adversely affect any general or special lien or right to set-off to which the Lender is or may by law or otherwise be entitled or any rights or remedies of the Lender including in respect of any present or future security, guarantee, obligations of the Borrower.`,{align:"left",lineGap: 1})



// -------------------------------------------- new page --------------------------------------  
 
 doc.addPage();
 // addLogo();
 //drawBorder();
 doc.moveDown(2);

    function DRAWTABLE(tableTitle, tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
      // Draw table title with a colored header
      doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
      doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5)
          .text(tableTitle, startX + 5, startY + 5, { align: 'center' });
    
      startY += 20; // Move down for the first row
    
      let sectionIndex = null; // Track the section index to span the column
      
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
    
          // Calculate row height based on the tallest content
          const rowHeight = Math.max(20, field1Height, value1Height) + 10; // Adding padding for better spacing
    
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
    
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Stroke color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
    
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
    
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
    
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
    }
    
    
    function DrawTablewithoutHeader(tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
      let sectionIndex = null; // Track the section index to span the column
      
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
    
          // Calculate row height based on the taller content
          const rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding
    
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
    
           if (["penal Charges"].includes(row.field1)) {
            rowHeight = Math.max(rowHeight, 38.5); 
                   }
    
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Line color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
    
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
    
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
    
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
    }
    
    
    // function DRawTable(tableTitle, tableData, spanIndex) {
    //   const startX = 50;
    //   let startY = doc.y + 10;
    //   const columnWidths = [500];
    //   const indexWidth = 30;
    //   const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
    //   const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
    //   // Add table title
    //   doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
    //   doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5).text(tableTitle, startX + 5, startY + 5, { align: 'center' });
    
    //   startY += 20; // Move down for the first row
    
    //   let sectionIndex = null;
    
    //   // Helper function to calculate the height of the text
    //   function calculateTextHeight(text, width) {
    //     return doc.font('Helvetica').fontSize(8.3).heightOfString(text, { width });
    //   }
    
    //   // Render each row in the table
    //   tableData.forEach((row, rowIndex) => {
    //       // Calculate the height needed for each cell's text
    //       const field1Height = calculateTextHeight(row.field1, keyWidth);
    //       const value1Height = calculateTextHeight(row.value1, valueWidth);
    //       const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
    
    //       // Display the index only once if it matches a section needing a span
    //       const indexLabel = row.index && spanIndex ? row.index : '';
    
    //       if (row.index) {
    //           sectionIndex = row.index;
    //       }
    
    //       // Draw the index in the first column (only once if spanIndex is true)
    //       if (indexLabel) {
    //           doc.fillColor('#ffffff')
    //               .rect(startX, startY, indexWidth, rowHeight * tableData.length).stroke().fill(); // Span vertically for entire section
    //           doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //               .text(indexLabel, startX + 5, startY + 5, { width: indexWidth - 10, height: rowHeight * tableData.length });
    //       }
    
    //       // Draw the key in the second column
    //       doc.fillColor('#f5f5f5')
    //           .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
    //       doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //           .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
    
    //       // Draw the value in the third column
    //       doc.fillColor('#ffffff')
    //           .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
    //       doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //           .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
    
    //       startY += rowHeight; // Move down to the next row, based on dynamic height
    //   });
    // }
    function DRawTable(tableTitle, tableData, spanIndex) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
      // Add table title
      doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
      doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5).text(tableTitle, startX + 5, startY + 5, { align: 'center' });
  
      startY += 20; // Move down for the first row
  
      let sectionIndex = null;
      let totalSectionHeight = 0;
  
      // Calculate total height needed for all rows if spanIndex is true
      tableData.forEach(row => {
          const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth - 10 });
          const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth - 10 });
          totalSectionHeight += Math.max(field1Height, value1Height) + 10;
      });
  
      // Draw the index as a single cell spanning the full height if spanIndex is true
      if (spanIndex && tableData[0].index) {
          sectionIndex = tableData[0].index;
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, totalSectionHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(sectionIndex, startX + 5, startY + (totalSectionHeight / 2) - 5, {
                  width: indexWidth - 10,
                  align: 'center',
                  height: totalSectionHeight
              });
      }
  
      // Render each row in the table without the index label
      tableData.forEach(row => {
          // Calculate the height needed for each cell's text
          const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth - 10 });
          const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth - 10 });
          const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
  
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
  
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
  
          startY += rowHeight; // Move down to the next row, based on dynamic height
      });
  }
  

  //   function DRawTable(tableTitle, tableData, spanIndex) {
  //     const startX = 50;
  //     let startY = doc.y + 10;
  //     const columnWidths = [500];
  //     const indexWidth = 30;
  //     const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
  //     const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
  //     // Add table title
  //     doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
  //     doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5).text(tableTitle, startX + 5, startY + 5, { align: 'center' });
  
  //     startY += 20; // Move down for the first row
  
  //     let sectionIndex = null;
  //     let totalSectionHeight = 0;
  
  //     // Calculate total height needed for all rows if spanIndex is true
  //     tableData.forEach(row => {
  //         const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth });
  //         const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth });
  //         totalSectionHeight += Math.max(field1Height, value1Height) + 10;
  //     });
  
  //     // Draw the index as a single cell spanning the full height if spanIndex is true
  //     if (spanIndex && tableData[0].index) {
  //         sectionIndex = tableData[0].index;
  //         doc.fillColor('#ffffff')
  //             .rect(startX, startY, indexWidth, totalSectionHeight).stroke().fill();
  //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
  //             .text(sectionIndex, startX + 5, startY + (totalSectionHeight / 2) - 5, {
  //                 width: indexWidth - 10,
  //                 align: 'center',
  //                 height: totalSectionHeight
  //             });
  //     }
  
  //     // Render each row in the table without the index label
  //     tableData.forEach(row => {
  //         // Calculate the height needed for each cell's text
  //         const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth });
  //         const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth });
  //         const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
  
  //         // Draw the key in the second column
  //         doc.fillColor('#f5f5f5')
  //             .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
  //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
  //             .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
  
  //         // Draw the value in the third column
  //         doc.fillColor('#ffffff')
  //             .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
  //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
  //             .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
  
  //         startY += rowHeight; // Move down to the next row, based on dynamic height
  //     });
  // }
   
    function DRAWTable(tableData, spanIndex) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
      doc.strokeColor('#000000'); // Set border line color to black for the entire table
    
    
      let sectionIndex = null;
    
      // Helper function to calculate the height of the text
      function calculateTextHeight(text, width) {
        return doc.font('Helvetica').fontSize(8.3).heightOfString(text, { width });
      }
    
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Calculate the height needed for each cell's text
          const field1Height = calculateTextHeight(row.field1, keyWidth);
          const value1Height = calculateTextHeight(row.value1, valueWidth);
          const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
    
          // Display the index only once if it matches a section needing a span
          const indexLabel = row.index && spanIndex ? row.index : '';
    
          if (row.index) {
              sectionIndex = row.index;
          }
    
          // Draw the index in the first column (only once if spanIndex is true)
          if (indexLabel) {
              doc.fillColor('#ffffff')
                  .rect(startX, startY, indexWidth, rowHeight * tableData.length).stroke().fill(); // Span vertically for entire section
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                  .text(indexLabel, startX + 5, startY + 5, { width: indexWidth - 10, height: rowHeight * tableData.length });
          }
    
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
    
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
    
          startY += rowHeight; // Move down to the next row, based on dynamic height
      });
    }

  doc
    .fontSize(12)
    .font(fontBold)
    .text("Schedule I", { align: "center", underline: true });
  doc.moveDown(0.6);

  // Format the borrower details to the left side
  doc
    .font(fontBold)
    .fontSize(12)
    .fillColor("black")
    .text(
      "Details of the Loan",
        
      {
        lineGap: 1,
        align: "center",
         underline: true
      }
    );
    doc.moveDown(1);
    
//  unworked
    const AgreementDetails = [
      {index: '1',field1:"Date of the Agreement",value1:`${allPerameters.agreementdate}` },
      {index: '2',field1: "Place of Execution ",value1: `${allPerameters.placeOfExecution}` },
    ];
    DRAWTABLE("Agreement Details", AgreementDetails,false)
    doc.moveDown();

      const DetailsoftheBorrower = [
        {index: '3', field1: "Name of the Borrower(s)", value1: `${allPerameters.borrowerName}` },
        { field1: 'Constitution of the Borrower(s) ', value1: `${allPerameters?.constitutionBorrower}` },
        { field1: 'PAN/TAN/CIN of the Borrower(s)', value1: `${allPerameters.borrowerpanNo}` }, //unworked constitution
        { field1: 'Address of the Borrower(s)', value1: `${allPerameters.borroewraddress}` },
        { field1: 'Email – address(es)', value1: `${allPerameters.borroweremail}` },
        { field1: 'Phone No. (s)', value1: `${allPerameters.borrwermobileNo}` },
        {field1: 'Attention: Mr./Ms.', value1: `${allPerameters.borrowerName}` },// unworked mr/ms
    ];
    DRawTable("Details of the Borrower",DetailsoftheBorrower,true)
    
    doc.moveDown();
    
    const DetailsoftheCoBorrower = [
      { index: '4',field1: 'Name of the Borrower(s)', value1: `${allPerameters.coBorrowername}` },
      { field1: 'Constitution of the Co-Borrower(s) ', value1: `${allPerameters.constitutionCoBorrower}` },
      { field1: 'PAN/TAN/CIN of the Co-Borrower(s)', value1: `${allPerameters.panTanCin}` },
      { field1: 'Address of the Co-Borrower(s)', value1: `${allPerameters.coBorroweraddress}` },
      { field1: 'Email – address(es)', value1: `${allPerameters.coBorroeremail}` },
      { field1: 'Phone No. (s)', value1:  `${allPerameters.coBorrowerphoneNo}` },
      { field1: 'Attention: Mr./Ms.', value1: `${allPerameters.coBorrowername}` },
    ];
    
    DRawTable("Details of the Co-Borrower", DetailsoftheCoBorrower,true);
    doc.moveDown();

    const DetailsoftheCoBorrower2 = [
      { index: '4',field1: 'Name of the 2nd Borrower(s)', value1: `${allPerameters.coBorrowername2}` },
      { field1: 'Constitution of the 2nd Co-Borrower(s) ', value1: `${allPerameters.constitutionCoBorrower2}` },
      { field1: 'PAN/TAN/CIN ', value1: `${allPerameters.panTanCin2}` },
      { field1: 'Address of the 2nd Co-Borrower(s)', value1: `${allPerameters.coBorroweraddress2}` },
      { field1: 'Email – address(es)', value1: `${allPerameters.coBorroeremail2}` },
      { field1: 'Phone No. (s)', value1:  `${allPerameters.coBorrowerphoneNo2}` },
      { field1: 'Attention: Mr./Ms.', value1: `${allPerameters.coBorrowername2}` },
    ];
    
    DRawTable("Details of the 2nd Co-Borrower", DetailsoftheCoBorrower2,true);
    doc.moveDown();
    
    // const DetailsoftheGuarantor = [
    //   { index: '5', field1: "Name of the Guarantor", value1: `${allPerameters.guarantorname}` },
    //   { field1: 'Constitution of the Guarantor', value1:  `${allPerameters.constitutionGuarentor}` },
    //   { field1: 'PAN/TAN/CIN of the Guarantor', value1: `${allPerameters.guarantorpanTanCin}` },
    //   { field1: 'Address of the Guarantor', value1:  `${allPerameters.guarantoraddress}` },
    //   // { field1: 'Email – address(es)', value1: `${req.body.detailsoftheGuarantor?.email}` },
    
    //   // { field1: 'Phone No. (s)', value1: `${req.body.detailsoftheGuarantor?.phoneNo}` },
    //   // { field1: 'Attention: Mr./Ms', value1: `${req.body.detailsoftheGuarantor?.attentioMrMs}`},
    
    
    // ];
    // DRawTable("Details of the Guarantor", DetailsoftheGuarantor, true);
    
    
    
      ////addFooter();
    
//       //---------------------------------NEW PAGE ------------------------------------------------
      
    
//       // //---------------------------------------------------new page---------------------------------------------------------------
      doc.addPage();
      // addLogo();
      //drawBorder();
    
      doc.moveDown(2);

      // const DetailsoftheGuarantor = [
      //   { index: '5', field1: "Name of the Guarantor", value1: `${allPerameters.guarantorname}` },
      //   { field1: 'Constitution of the Guarantor', value1:  `${allPerameters.constitutionGuarentor}` },
      //   { field1: 'PAN/TAN/CIN of the Guarantor', value1: `${allPerameters.guarantorpanTanCin}` },
      //   { field1: 'Address of the Guarantor', value1:  `${allPerameters.guarantoraddress}` },
      //   { field1: 'Email – address(es)', value1: `${allPerameters.guarantoremail}` },
      
      //   { field1: 'Phone No. (s)', value1: `${allPerameters.guarantorphoneNo}` },
      //   { field1: 'Attention: Mr./Ms', value1: `${allPerameters.guarantorname}`},
      
      
      // ];
      // DRawTable("Details of the Guarantor", DetailsoftheGuarantor, true);
    
      // const DetailsoftheGuarantorr = [
        
      //   { index:'.',field1: 'Email – address(es)', value1: `${allPerameters.guarantoremail}` },
      
      //   { field1: 'Phone No. (s)', value1: `${allPerameters.guarantorphoneNo}` },
      //   { field1: 'Attention: Mr./Ms', value1: `${allPerameters.guarantorname}`},
      
      
      // ];
      // DRAWTable( DetailsoftheGuarantorr, true);
    
      const DetailsoftheBranch = [
        {index: '6', field1: 'Place of the Branch ', value1: `${allPerameters.branchplace}` },
        { field1: 'Address of the Branch', value1: `${allPerameters.branchaddress}` },
        { field1: 'Email – address(es)', value1: `${allPerameters.branchemail}` },
        { field1: 'Phone No. (s)', value1: `${allPerameters.branchphoneNo}` },
        { field1: 'Attention: Mr./Ms.', value1: `${allPerameters.attentionMrMs}` },
      ];
    
      DRawTable("Details of the Branch", DetailsoftheBranch,true);
    
      doc.moveDown();
    
    
      const DetailsoftheLoan = [
        { index: '7',field1: 'Sanction Letter No.', value1: `${allPerameters.sanctionLetterNo}` },
        {index: '8', field1: 'Date of Sanction Letter', value1: `${allPerameters.sanctionLetterDate}` },
      
        { index: '9',field1: 'Facility Type ', value1: `${allPerameters.facilityType}` },
        { index: '10',field1: 'Specified Purpose ', value1: `${allPerameters.specifiedPurpose}` },
        {index: '11', field1: 'Amount of Loan', value1: `${allPerameters.amountOfLoan}/-(${allPerameters.loanAmountInWord})`},
        {index: '12', field1: 'Rate of Interest', value1: `${allPerameters.rateOfInterest}% Per Annum (FRR – 19.20% + ${allPerameters.interestType1}%)` },
        // {index: '13', field1: 'Login Fees .', value1: `${allPerameters.loginFees}` },
        { index: '13',field1: 'Loan Processing fee', value1: `${allPerameters.loanProcessingFees}` },
        // { index: '15',field1: 'Documentation Charges', value1: `${allPerameters.documentCharges}` },
        { index: '14',field1: 'Tenure of Loan ', value1: `${allPerameters.tenureOfLoan} months` },
        {index: '15', field1: 'Penal charges', value1: `${allPerameters.penalCharges}`},
        {index: '16', field1: 'Repayment Method ', value1: `${allPerameters.repaymentMethod}` },
        { index: '17',field1: 'Monthly Installment Date', value1: `10th of the month` },
        { index: '18',field1: `Repayment Date of all Outstanding Obligations\n(End date of loan Tenure)`, value1: `${allPerameters.endDateOfLoanTenure}` },
        { index: '19',field1: 'Number of Installments', value1:`${allPerameters.tenureOfLoan} months` },
        // { index: '19',field1: 'Monthly Installment Date ', value1: '10th of the month' },
        // { index: '20',field1: `Repayment Date of all Outstanding Obligations\n(End date of loan Tenure)`, value1: 'As per Repayment Schedule' },
        // { index: '21',field1: 'Number of Installments', value1: '60 months' },
        // {index: '22', field1: 'Foreclosure of Loan ', value1: 'No Foreclosure allowed till completion of 12 months from the date of 1st disbursement.After completion of 12 months from the date of 1st disbursement, Foreclosure from personal funds may be made without incurring any fees.In case of balance transfer, 4% charges will be applicable.' },
        // {index: '23', field1: 'Taxes', value1: 'Goods and Services tax (GST) will be charged extra as per the applicable rates, on interest, penal charges,other charges and fees (wherever GST is applicable)' },
    //     {index: '24', field1: 'Security', value1: `1. Personal guarantee of PAWAN NAGAR ) \n 2. Corporate guarantee of NA \n 3. Demand Promissory Notes \n 4. Cheques as per UDC Covering Letter. \n 5. First and exclusive charge over the Immovable Property as mentioned in Schedule III.`},
    //     { index: '25',field1: 'Security Deposit/DSRA ', value1: 'NIL' },
    //     { index: '26',field1: 'Lock–in Period  ', value1: `The borrower shall not repay/prepay/foreclose any portion of the outstanding loan amount
    //   either in part or in full within 1 year completion of loan tenure from the date of 1st
    // disbursement of the loan.` },
    
      ];
      
      DRAWTABLE("Details of the Loan", DetailsoftheLoan);
      
      
      
      //addFooter();
    //=================-------------------------------------------------------
      doc.addPage();
      // addLogo();
      //drawBorder();
      // Add title and content from the image
      doc.moveDown(2);

    //   function DrawTablewithoutHeaderpenal(tableData) {
    //     const startX = 50;
    //     let startY = doc.y + 10;
    //     const columnWidths = [500];
    //     const indexWidth = 30;
    //     const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
    //     const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
      
    //     let sectionIndex = null; // Track the section index to span the column
        
    //     // Render each row in the table
    //     tableData.forEach((row, rowIndex) => {
    //         // Measure text height for row.field1 and row.value1
    //         const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
    //         const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
      
    //         // Calculate row height based on the taller content
    //         let rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding

    //         if (rowIndex === 0) { // Example for a specific row index
    //           rowHeight = Math.max(rowHeight, 50); // Custom height for row at index 5
    //       }

    //       else if (rowIndex === 1) { // Example for a specific row index
    //         rowHeight = Math.max(rowHeight, 10); // Custom height for row at index 5
    //     }

    //     else if (rowIndex === 2) { // Example for a specific row index
    //       rowHeight = Math.max(rowHeight, 10); // Custom height for row at index 5
    //   }

    //   else if (rowIndex === 8) { // Example for a specific row index
    //     rowHeight = Math.max(rowHeight, 10); // Custom height for row at index 5
    // }
      
    //         // Only display the index once per section, in the first row
    //         const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
    //         if (row.index) {
    //             sectionIndex = row.index; // Set current section index
    //         }
      
    //          if (["penal Charges"].includes(row.field1)) {
    //           rowHeight = Math.max(rowHeight, 45.5); 
    //                  }
      
    //         // Draw the index in the first column (only for the first row of each section)
    //         doc.fillColor('#ffffff')
    //             .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Line color set to black
    //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //             .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
      
    //         // Draw the key in the second column
    //         doc.fillColor('#f5f5f5')
    //             .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
    //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //             .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
      
    //         // Draw the value in the third column
    //         doc.fillColor('#ffffff')
    //             .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
    //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //             .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
      
    //         // Move startY down by rowHeight for the next row
    //         startY += rowHeight;
    //     });
    //   }
    function DrawTablewithoutHeaderpenal(tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
      let sectionIndex = null; // Track the section index to span the column
  
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
  
          // Calculate row height based on the taller content
          let rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding
  
          // Custom adjustments for specific rows (if any)
          if (["penal Charges"].includes(row.field1)) {
              rowHeight = Math.max(rowHeight, 45.5);
          }
  
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
  
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Line color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
  
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
  
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3);
  
          if (row.field1 === 'Monthly Installment Date' && row.value1.includes('10th')) {
              const mainText = '10'; // The main numeric part
              const superscriptText = 'th'; // The superscript part
              const remainder = ' of the month'; // The rest of the string
  
              // Render "10"
              doc.text(mainText, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, {
                  continued: true, // Indicate that the next text is part of the same line
              });
  
              // Render "th" as superscript
              doc.fontSize(6).text(superscriptText, {
                  baseline: 'top', // Adjust baseline for superscript effect
                  continued: true,
              });
  
              // Render the remainder
              doc.fontSize(8.3).text(remainder);
          } else {
              // Default rendering for other rows
              doc.text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, {
                  width: valueWidth - 10,
              });
          }
  
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
  }
  
    
      const DetailsoftheBranchh =[
        // {index: '15', field1: 'Penal charges', value1: `${allPerameters.penalCharges}`},
        // {index: '16', field1: 'Repayment Method ', value1: `${allPerameters.repaymentMethod}` },
        // { index: '17',field1: 'Monthly Installment Date', value1: `10th of the month` },
        // { index: '18',field1: `Repayment Date of all Outstanding Obligations\n(End date of loan Tenure)`, value1: `${allPerameters.endDateOfLoanTenure}` },
        // { index: '19',field1: 'Number of Installments', value1:`${allPerameters.tenureOfLoan} months` },
        {index: '20', field1: 'Foreclosure of Loan ', value1: `${allPerameters.foreClosereOfLoan}` },
        {index: '21', field1: 'Taxes', value1: `${allPerameters.taxes}` },
        
        {index: '22', field1: 'Security', value1: `1. Personal guarantee of ${allPerameters.guarantorname} ) \n 2. Corporate guarantee of NA \n 3. Demand Promissory Notes \n 4. Cheques as per UDC Covering Letter. \n 5. First and exclusive charge over the Immovable Property as mentioned in Schedule III.`},
        { index: '23',field1: 'Security Deposit/DSRA ', value1: `${allPerameters.securityDepositOrDsra}` },
        { index: '24',field1: 'Lock–in Period  ', value1: `${allPerameters.lockPeriod}` },
    
      ];
      
      DrawTablewithoutHeaderpenal(DetailsoftheBranchh);

    
    
    function DrawCombinedTable(doc, sections) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const keyWidth = Math.round(columnWidths[0] * 1 / 3);
      const valueWidth = Math.round(columnWidths[0] * 2 / 3);
    
      sections.forEach(section => {
        // Section Header
        doc.rect(startX, startY, columnWidths.reduce((a, b) => a + b), 20)
            .fillAndStroke('#00a7ff', "#000000");
        doc.font(fontBold).fillColor('black').fontSize(9.5)
            .text(section.title, startX + 5, startY + 5, { baseline: 'hanging', align: 'center' });
    
        startY += 20;
    
        section.data.forEach((row, rowIndex) => {
            let valueRowHeight = 22;
    
            // Calculate dynamic row height
            const field1TextHeight = doc.heightOfString(row.field1, { width: keyWidth - 10 });
            const value1TextHeight = doc.heightOfString(row.value1, { width: valueWidth - 10 });
            valueRowHeight = Math.max(valueRowHeight, field1TextHeight, value1TextHeight);
    
            const backgroundColor = rowIndex % 2 === 0 ? '#f5f5f5' : '#ffffff';
    
            if (["Prepayment Charges"].includes(row.field1)) {
                       valueRowHeight = Math.max(valueRowHeight, 38.5); 
                   }

             if (["Installment Amount"].includes(row.field1)) {
                    valueRowHeight = Math.max(valueRowHeight, 38.5); 
                }
    
            // Render field and value cells
            doc.fillColor(backgroundColor).rect(startX, startY, keyWidth, valueRowHeight).stroke().fill();
            doc.font(font).fillColor('black').fontSize(8.3)
                .text(row.field1, startX + 5, startY + 5, { width: keyWidth - 10 });
    
            doc.fillColor(backgroundColor).rect(startX + keyWidth, startY, valueWidth, valueRowHeight).stroke().fill();
            doc.font(font).fillColor('black').fontSize(7.2)
                .text(row.value1, startX + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
    
            startY += valueRowHeight;
    
      });
    
        // Additional spacing between sections
        startY += 15;
      });
    
     
    }

    function DrawCombinedTable1(doc, sections) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const keyWidth = Math.round(columnWidths[0] * 1 / 3);
      const valueWidth = Math.round(columnWidths[0] * 2 / 3);
  
      sections.forEach(section => {
          // Section Header
          doc.rect(startX, startY, columnWidths.reduce((a, b) => a + b), 20)
              .fillAndStroke('#00a7ff', "#000000");
          doc.font(fontBold).fillColor('black').fontSize(9.5)
              .text(section.title, startX + 5, startY + 5, { baseline: 'hanging', align: 'center' });
  
          startY += 20;
  
          section.data.forEach((row, rowIndex) => {
              let valueRowHeight = 22;
  
              // Calculate dynamic row height
              const field1TextHeight = doc.heightOfString(row.field1, { width: keyWidth - 10 });
              const value1TextHeight = doc.heightOfString(row.value1, { width: valueWidth - 10 });
              valueRowHeight = Math.max(valueRowHeight, field1TextHeight, value1TextHeight);
  
              const backgroundColor = rowIndex % 2 === 0 ? '#f5f5f5' : '#ffffff';
  
              if (["Prepayment Charges"].includes(row.field1)) {
                  valueRowHeight = Math.max(valueRowHeight, 38.5);
              }
  
              if (["Installment Amount"].includes(row.field1)) {
                  valueRowHeight = Math.max(valueRowHeight, 38.5);
              }
  
              // Render field and value cells
              doc.fillColor(backgroundColor).rect(startX, startY, keyWidth, valueRowHeight).stroke().fill();
              doc.font(font).fillColor('black').fontSize(8.3)
                  .text(row.field1, startX + 5, startY + 5, { width: keyWidth - 10 });
  
              doc.fillColor(backgroundColor).rect(startX + keyWidth, startY, valueWidth, valueRowHeight).stroke().fill();
              doc.font(font).fillColor('black').fontSize(7.2)
                  .text(row.value1, startX + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
  
              startY += valueRowHeight;
          });
  
          // Add blank row and custom content
          const blankRowHeight = 38.5; // Adjust height as needed
          doc.fillColor('#ffffff').rect(startX, startY, columnWidths[0], blankRowHeight).stroke().fill();
          doc.font(font).fillColor('black').fontSize(8)
              .text(
                  "NOTE: Goods and Services tax (GST) will be charged extra as per the applicable rates, on all the charges and fees (wherever GST is applicable). The aforementioned charges/fees may be modified by Ratnaafin Capital Private Limited from time to time upon prior intimation via acceptable modes of communication from Ratnaafin Capital Private Limited in this regard.",
                  startX + 5, startY + 5, { width: columnWidths[0] - 10, align: 'justify' }
              );
  
          startY += blankRowHeight;
  
          // Additional spacing between sections
          startY += 15;
      });
  }
  
  
    
    // Define data for each section
    const charges = {
      title: "CHARGES",
      data: [
        { field1: "Details", value1: `Particulars` },
        { field1: 'Processing Fees ', value1: `${allPerameters.processingFees}` },
        { field1: 'Document Processing Charges', value1: `${allPerameters.documentProcessingCharges}(For under construction cases 3% of loan amount + Applicable taxes)` },
        { field1: 'Prepayment Charges', value1: `${allPerameters.prepaymentCharges}` },
        { field1: 'Bounce Charges', value1: `${allPerameters.bounceCharges}` },
        { field1: 'Outstation Collection Charges', value1: `${allPerameters.outstationCollectionCharges}` },
        { field1: 'Cheque Swap Charges', value1: `${allPerameters.chequeSwapCharges}` },
        { field1: 'Stamp Duty', value1: `${allPerameters.stampDuety}` },
        { field1: 'Duplicate NOC charges', value1: `${allPerameters.duplicateNocCharges}` },
        
      ]
    };
    
    

    // Draw combined table
    DrawCombinedTable1(doc, [charges]);

    // doc.font(fontBold).fontSize(10)
    // .text(, 50, doc.y + 10);    
    
    //addFooter();
    
    doc.addPage();
      // addLogo();
      //drawBorder();
      // Add title and content from the image
      doc.moveDown(2);
      
      const chequeDetails = {   
        title: "CHEQUE DETAILS",
        data: [
            { field1: "Bank Name", value1: `${allPerameters.bankDetail}` },
            //accountNumber
            { field1: "Bank Account Number", value1: `${allPerameters.chequebankaccountNumber}` },
            { field1: "Number of Cheques", value1: `5` },
            { field1: "Chq S.N. (From-To)", value1: `${allPerameters.chequeNo1}-${allPerameters.chequeNo5}` },
            { field1: "Amount (in INR)", value1: `${allPerameters.chequeaccountInINR}` },
            { field1: "Local/Outstation", value1: `${allPerameters.chequelocalOutstation} ` }
        ]
      };
      
      const ecsNachDetails = {
        title: "DETAILS OF ECS/NACH",
        data: [
            { field1: "Bank Name", value1: `${allPerameters.bankDetail}` },
            { field1: "Bank Account Number", value1: `${allPerameters.chequebankaccountNumber}` },
            { field1: "Installment Amount", value1: `Rs.${allPerameters.ecsNachinstallmentAmounts}/-(if Applicable for the said case:-Interest & EMI has been Charged as Per Disbursement Amount. Once Your Case Gets Fully Disbursed EMI will be revised as per Principal Outstanding which may vary to the EMI as per sanction Letter.)` }
        ]
      };
    
      DrawCombinedTable(doc, [ chequeDetails, ecsNachDetails]);
    
    
    doc.moveDown()
    
    const sections = [
      {
        title: "LOAN DISBURSEMENT MODE",
        data: [
          {
            col1: "Account Transfer Type",
            col2: [
              { text: "Bank Name" },
              { text: "Type of Account (Savings/ Current)" }
            ],
            col3: [
              { text: `${allPerameters.bankDetail}` },
              { text: `${allPerameters.accTransfertypeOfAccount}` }
            ]
          },
          {
            col1: "RTGS/NEFT/IMPS",
            col2: [
              { text: "IFSC Code" },
              { text: "Bank Account Number" }
            ],
            col3: [
              { text: `${allPerameters.rtgifscCode}` },
              { text: `${allPerameters.chequebankaccountNumber}` }
            ]
          },
          {
           col1: "Use of Existing\nECS/NACH",  // Added gap with double newlines
            col2: [
              // { text: "e A/c Holder Name as per Bank Account" },
              // { text: "Cheque in favour of" },
              { text: `(yes/No)[Use]`}
            ],
            col3: [
              // { text: `${allPerameters.accountHolderName}` },
              // { text: `${allPerameters.inFavorOf}` },
              { text: "Cheque in favor of: Sheetal Kulkarni" }
            ],
            col3Split: {  // Split last row in col3 into two parts
              part1: "Use of Existing KYC documents",
              part2: `(yes/No)[Use]`
            }
          },
        ]
      }
    ];

    
    
    
    function DrawCTable(doc, sections) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [160, 160, 160];
    
      sections.forEach(section => {
        // Section Header
        doc.rect(startX, startY, columnWidths.reduce((a, b) => a + b), 20)
          .fillAndStroke('#00a7ff', "#000000");
        doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5)
          .text(section.title, startX + 5, startY + 5, { baseline: 'hanging', align: 'center' });
    
        startY += 20;
    
        section.data.forEach((row, index) => {
          let rowHeight = 22;
          const backgroundColor = index % 2 === 0 ? '#f5f5f5' : '#ffffff';
    
          // Calculate the height of col1 and check if nested rows exist in col2 and col3
          const col1Height = doc.heightOfString(row.col1, { width: columnWidths[0] - 10 });
          const maxRowHeight = Math.max(col1Height, rowHeight * row.col2.length);
    
          // Column 1 - Render with gap between lines
          doc.fillColor(backgroundColor).rect(startX, startY, columnWidths[0], maxRowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
            .text(row.col1, startX + 5, startY + 5, { width: columnWidths[0] - 10, lineBreak: true });
    
          // Column 2 - Nested rows
          let nestedY = startY;
          row.col2.forEach(nestedRow => {
            doc.fillColor(backgroundColor).rect(startX + columnWidths[0], nestedY, columnWidths[1], rowHeight).stroke().fill();
            doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(nestedRow.text, startX + columnWidths[0] + 5, nestedY + 5, { width: columnWidths[1] - 10 });
            nestedY += rowHeight;
          });
    
          // Column 3 - Nested rows with last row split into two columns
          nestedY = startY;
          row.col3.forEach((nestedRow, rowIndex) => {
            if (rowIndex === row.col3.length - 1 && row.col3Split) {
              // Split the last row in col3 into two parts
              const halfWidth = columnWidths[2] / 2;
    
              // Part 1
              doc.fillColor(backgroundColor).rect(startX + columnWidths[0] + columnWidths[1], nestedY, halfWidth, rowHeight).stroke().fill();
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                .text(row.col3Split.part1, startX + columnWidths[0] + columnWidths[1] + 5, nestedY + 5, { width: halfWidth - 10 });
    
              // Part 2
              doc.fillColor(backgroundColor).rect(startX + columnWidths[0] + columnWidths[1] + halfWidth, nestedY, halfWidth, rowHeight).stroke().fill();
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                .text(row.col3Split.part2, startX + columnWidths[0] + columnWidths[1] + halfWidth + 5, nestedY + 5, { width: halfWidth - 10 });
            } else {
              // Regular nested row in col3
              doc.fillColor(backgroundColor).rect(startX + columnWidths[0] + columnWidths[1], nestedY, columnWidths[2], rowHeight).stroke().fill();
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                .text(nestedRow.text, startX + columnWidths[0] + columnWidths[1] + 5, nestedY + 5, { width: columnWidths[2] - 10 });
            }
            nestedY += rowHeight;
          });
    
          startY += maxRowHeight;
        });
    
        startY += 15;
      });
    };
    
    DrawCTable(doc, sections);

    const pageWidth = doc.page.width;
    doc.moveDown(2);

    
    doc
       .fontSize(12) 
       .text("Schedule II", (pageWidth / 2) - (doc.widthOfString("Schedule II") / 2), doc.y, {
           baseline: 'hanging'
       });
    
    doc.moveDown(1);
    
    // Center "Repayment Schedule"
    doc.fontSize(12)
       .text("Repayment Schedule", (pageWidth / 2) - (doc.widthOfString("Repayment Schedule") / 2), doc.y);
    
    doc.moveDown(1);
    
    // Center "As Separately Provided"
    doc
       .fontSize(12)
       .text("As Separately Provided", (pageWidth / 2) - (doc.widthOfString("As Separately Provided") / 2), doc.y, {
           lineGap: 1
       });
    
    doc.moveDown(1);

  //   function tableFunction1(tableData) {
  //     const startX = 53; // Starting X position
  //     let startY = doc.y + 10; // Starting Y position
  //     const boxWidth = 500; // Total width of the box
  //     const numFields = 7; // Fixed to 7 columns
  //     const fieldWidth = boxWidth / numFields; // Width per column
    
  //     let totalHeight = 0;
    
  //     // Calculate total height for the first 6 rows
  //     tableData.slice(0, 6).forEach((row) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
  //         let rowHeight = 0;
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }
  //         totalHeight += rowHeight;
  //     });
  
  //     // Add height for the 7th row (text-only, no columns)
  //     const finalRowHeight = doc
  //         .font('Helvetica')
  //         .fontSize(7.2)
  //         .heightOfString("As Separately Provided", { width: boxWidth }) + 10;
  //     totalHeight += finalRowHeight;
    
  //     // Draw the outer box
  //     doc.fillColor("#f0f0f0")
  //         .rect(startX, startY, boxWidth, totalHeight)
  //         .stroke("black")
  //         .fill();
    
  //     // Draw table content for the first 6 rows
  //     tableData.slice(0, 6).forEach((row, rowIndex) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
  //         let currentX = startX;
  //         let rowHeight = 0;
    
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10;
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }
  
  //         for (let field in row) {
  //             doc.fillColor("#f5f5f5")
  //                 .rect(currentX, startY, fieldWidth, rowHeight)
  //                 .stroke("black")
  //                 .fill();
    
  //             const isHeader = rowIndex === 0;
  //             doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
  //                 .fillColor("black")
  //                 .fontSize(7.2)
  //                 .text(row[field], currentX + 5, startY + 5, {
  //                     baseline: "hanging",
  //                     width: fieldWidth - 10,
  //                     align: 'left',
  //                 });
    
  //             currentX += fieldWidth;
  //         }
    
  //         startY += rowHeight; // Move to next row
  //     });
  
  //     // Draw the 7th row with no columns
  //     doc.font('Helvetica-Bold')
  //         .fillColor("black")
  //         .fontSize(7.2)
  //         .text("As Separately Provided", startX + 5, startY + 5, {
  //             width: boxWidth - 10,
  //             align: 'center',
  //         });
    
  //     // Adjust starting Y for the final row
  //     startY += finalRowHeight;
  // }
  function tableFunction1(tableData) {
    const startX = 53; // Starting X position
    let startY = doc.y + 10; // Starting Y position
    const boxWidth = 500; // Total width of the box
    const numFields = 7; // Fixed to 7 columns
    const fieldWidth = boxWidth / numFields; // Width per column
    const padding = 5; // Padding between text and cell boundaries
  
    let totalHeight = 0;
  
    // Calculate total height for the first 6 rows
    tableData.slice(0, 6).forEach((row) => {
      if (Object.values(row).every((value) => !value || value.trim() === "")) return;
  
      let rowHeight = 0;
      for (let field in row) {
        const fieldTextHeight = doc
          .font("Helvetica")
          .fontSize(7.2)
          .heightOfString(row[field] || "", { width: fieldWidth - 2 * padding }) + 2 * padding; // Add padding
        rowHeight = Math.max(rowHeight, fieldTextHeight);
      }
      totalHeight += rowHeight;
    });
  
    // Add height for the 7th row (text-only, no columns)
    const finalRowHeight =
      doc
        .font("Helvetica")
        .fontSize(7.2)
        .heightOfString("As Separately Provided", { width: boxWidth - 2 * padding }) +
      2 * padding;
    totalHeight += finalRowHeight;
  
    // Draw the outer box
    doc
      .fillColor("#f0f0f0")
      .rect(startX, startY, boxWidth, totalHeight)
      .stroke("black")
      .fill();
  
    // Draw table content for the first 6 rows
    tableData.slice(0, 6).forEach((row, rowIndex) => {
      if (Object.values(row).every((value) => !value || value.trim() === "")) return;
  
      let currentX = startX;
      let rowHeight = 0;
  
      for (let field in row) {
        const fieldTextHeight =
          doc
            .font("Helvetica")
            .fontSize(7.2)
            .heightOfString(row[field] || "", { width: fieldWidth - 2 * padding }) + 2 * padding;
        rowHeight = Math.max(rowHeight, fieldTextHeight);
      }
  
      for (let field in row) {
        doc
          .fillColor("#f5f5f5")
          .rect(currentX, startY, fieldWidth, rowHeight)
          .stroke("black")
          .fill();
  
        const isHeader = rowIndex === 0;
        doc
          .font(isHeader ? "Helvetica-Bold" : "Helvetica")
          .fillColor("black")
          .fontSize(7.2)
          .text(row[field], currentX + padding, startY + padding, {
            baseline: "hanging",
            width: fieldWidth - 2 * padding,
            align: "left",
          });
  
        currentX += fieldWidth;
      }
  
      startY += rowHeight; // Move to next row
    });
  
    // Draw the 7th row with no columns
    doc
      .font("Helvetica-Bold")
      .fillColor("black")
      .fontSize(7.2)
      .text("As Separately Provided", startX + padding, startY + padding, {
        width: boxWidth - 2 * padding,
        align: "center",
      });
  
    // Adjust starting Y for the final row
    startY += finalRowHeight;
  }
  

  const tableData1 = [
    {
      installmentNo: "Installment No.",
      dueDate: "Due Date",
      installmentAmount: "Installment Amount",
      openingPrincipal: "Opening Principal",
      interestComponent: "Interest Component",
      principalComponent: "Principal Component",
      outstandingPrincipal: "Outstanding Principal",
  },
    {
        installmentNo: "1st",
        dueDate: "_ _/_ _/_ _",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "2nd",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "3rd",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "4th",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "5th",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "",
        dueDate: "",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    // 7th Row: No columns, text only
    {
        text: "As Separately Provided"
    }
];

tableFunction1(tableData1);

    // doc.addPage();
    // // addLogo();
    
    // doc.moveDown(2);

    
    
//     const pageWidth = doc.page.width;
    
//     doc
//        .fontSize(12) 
//        .text("Schedule II", (pageWidth / 2) - (doc.widthOfString("Schedule II") / 2), doc.y, {
//            baseline: 'hanging'
//        });
    
//     doc.moveDown(1);
    
//     // Center "Repayment Schedule"
//     doc.fontSize(12)
//        .text("Repayment Schedule", (pageWidth / 2) - (doc.widthOfString("Repayment Schedule") / 2), doc.y);
    
//     doc.moveDown(1);
    
//     // Center "As Separately Provided"
//     doc
//        .fontSize(12)
//        .text("As Separately Provided", (pageWidth / 2) - (doc.widthOfString("As Separately Provided") / 2), doc.y, {
//            lineGap: 1
//        });
    
//     doc.moveDown(1);

//     function tableFunction1(tableData) {
//       const startX = 53; // Starting X position
//       let startY = doc.y + 10; // Starting Y position
//       const boxWidth = 500; // Total width of the box
//       const numFields = 7; // Fixed to 7 columns
//       const fieldWidth = boxWidth / numFields; // Width per column
    
//       let totalHeight = 0;
    
//       // Calculate total height for the first 6 rows
//       tableData.slice(0, 6).forEach((row) => {
//           if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
//           let rowHeight = 0;
//           for (let field in row) {
//               const fieldTextHeight = doc
//                   .font('Helvetica')
//                   .fontSize(7.2)
//                   .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
//               rowHeight = Math.max(rowHeight, fieldTextHeight);
//           }
//           totalHeight += rowHeight;
//       });
  
//       // Add height for the 7th row (text-only, no columns)
//       const finalRowHeight = doc
//           .font('Helvetica')
//           .fontSize(7.2)
//           .heightOfString("As Separately Provided", { width: boxWidth }) + 10;
//       totalHeight += finalRowHeight;
    
//       // Draw the outer box
//       doc.fillColor("#f0f0f0")
//           .rect(startX, startY, boxWidth, totalHeight)
//           .stroke("black")
//           .fill();
    
//       // Draw table content for the first 6 rows
//       tableData.slice(0, 6).forEach((row, rowIndex) => {
//           if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
//           let currentX = startX;
//           let rowHeight = 0;
    
//           for (let field in row) {
//               const fieldTextHeight = doc
//                   .font('Helvetica')
//                   .fontSize(7.2)
//                   .heightOfString(row[field] || '', { width: fieldWidth }) + 10;
//               rowHeight = Math.max(rowHeight, fieldTextHeight);
//           }
  
//           for (let field in row) {
//               doc.fillColor("#f5f5f5")
//                   .rect(currentX, startY, fieldWidth, rowHeight)
//                   .stroke("black")
//                   .fill();
    
//               const isHeader = rowIndex === 0;
//               doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
//                   .fillColor("black")
//                   .fontSize(7.2)
//                   .text(row[field], currentX + 5, startY + 5, {
//                       baseline: "hanging",
//                       width: fieldWidth - 10,
//                       align: 'left',
//                   });
    
//               currentX += fieldWidth;
//           }
    
//           startY += rowHeight; // Move to next row
//       });
  
//       // Draw the 7th row with no columns
//       doc.font('Helvetica-Bold')
//           .fillColor("black")
//           .fontSize(7.2)
//           .text("As Separately Provided", startX + 5, startY + 5, {
//               width: boxWidth - 10,
//               align: 'center',
//           });
    
//       // Adjust starting Y for the final row
//       startY += finalRowHeight;
//   }

//   const tableData1 = [
//     {
//       installmentNo: "Installment No.",
//       dueDate: "Due Date",
//       installmentAmount: "Installment Amount",
//       openingPrincipal: "Opening Principal",
//       interestComponent: "Interest Component",
//       principalComponent: "Principal Component",
//       outstandingPrincipal: "Outstanding Principal",
//   },
//     {
//         installmentNo: "1st",
//         dueDate: "_ _/_ _/_ _",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "2nd",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "3rd",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "4th",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "5th",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "",
//         dueDate: "",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     // 7th Row: No columns, text only
//     {
//         text: "As Separately Provided"
//     }
// ];

// tableFunction1(tableData1);


  
    
    

    
      
    
      //addFooter();
    
//       //------------------------------------------------------------new page----------------------------------------------
      doc.addPage();
      // addLogo();
      //drawBorder();
      // Add title and content from the image
      doc.moveDown(2);
    
      doc
      .fontSize(7)
      .font(fontBold)
      .text("Schedule III", { align: "center" })
      .text("Description of Immovable Property", { align: "center" })
      .moveDown(0.5)
      .text("Property 1:", { align: "center" })
      .moveDown(0.5)
      .text(`${allPerameters.techfullAdress}`, { align: "center" })
      // .moveDown(0.5)
      // .text("Gram Panchyat Sikandari Tehsil Khilchipur District Rajgarh", { align: "center" })
      // .moveDown(0.5)
      // .text("State Madhya Pradesh Pin Code 465687", { align: "center" })
      .fontSize(9)
      .moveDown(0.5)
      .text("SCHEDULE OF CHARGES", { align: "center" });
    
    doc.moveDown(1);
    // Add a function to draw black table borders
    // function drawTable(tableData) {
    //     // Add Table Header
    //     const startX = 50;
    //     let startY = doc.y + 10;
    //     const columnWidths = [50, 150, 150, 150]; // Adjust column widths as needed
    //     const totalWidth = columnWidths.reduce((a, b) => a + b, 0);
    
    //     // Draw the title row (first row)
    //     const titleRow = tableData[0];
    //     const titleWidth = totalWidth; // Span all columns
    
    //     // Calculate title row height based on text height
    //     const titleHeight = doc
    //         .font(font)
    //         .fontSize(7.2)
    //         .heightOfString(titleRow.field1, { width: titleWidth });
    
    //     // Draw a single rectangle for the title row
    //     doc
    //         .fillColor("blue") // Light sky blue color
    //         .rect(startX, startY, titleWidth, titleHeight + 10) // Height adjusted for title text
    //         .stroke("black")
    //         .fill();
    
    //     // Draw the title text centered and bold
    //     doc
    //         .font('Helvetica-Bold') // Make title bold
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(titleRow.field1, startX, startY + 5, {
    //             baseline: "hanging",
    //             width: titleWidth,
    //             align: "center" // Center align the title text
    //         });
    
    //     // Move startY down for the next row
    //     startY += titleHeight + 10;
    
    //     // Draw column headers (second row)
    //     const headers = tableData[1];
    //     const headerHeight = 15; // Fixed height for headers
    
    //     columnWidths.forEach((colWidth, index) => {
    //         const headerX = startX + columnWidths.slice(0, index).reduce((a, b) => a + b, 0);
    //         doc
    //             .fillColor("#f5f5f5")
    //             .rect(headerX, startY, colWidth, headerHeight)
    //             .stroke("black") // Draw border around header cell
    //             .fill();
    
    //         // Draw header text centered and bold
    //         const headerText = headers[`field${index + 1}`]; // Adjust index for field names
    //         doc
    //             .font('Helvetica-Bold') // Make header bold
    //             .fillColor("black")
    //             .fontSize(7.2)
    //             .text(headerText, headerX, startY + 5, {
    //                 baseline: "hanging",
    //                 width: colWidth,
    //                 align: "center" // Center align header text
    //             });
    //     });
    
    //     // Move startY down for the next row
    //     startY += headerHeight;
    
    //     // Draw data rows (starting from the third row)
    //     for (let i = 2; i < tableData.length; i++) {
    //         const row = tableData[i];
    
    //         // Calculate row height based on the cell contents
    //         const rowHeight = Math.max(
    //             doc.font(font).fontSize(7.2).heightOfString(row.value1 || "", { width: columnWidths[0] }),
    //             doc.font(font).fontSize(7.2).heightOfString(row.value2 || "", { width: columnWidths[1] }),
    //             doc.font(font).fontSize(7.2).heightOfString(row.value3 || "", { width: columnWidths[2] }),
    //             doc.font(font).fontSize(7.2).heightOfString(row.value4 || "", { width: columnWidths[3] })
    //         ) + 10; // Additional space for padding
    
    //         // Alternate row background color
    //         doc.fillColor(i % 2 === 0 ? "#f5f5f5" : "#ffffff");
    //         doc.rect(startX, startY, totalWidth, rowHeight).stroke("black").fill();
    
    //         // Draw cells normally
    //         doc.fillColor("#ffffff"); // Ensure cell background is white for content
    
    //         // Check if value4 is missing and determine how to draw the cells
    //         if (!row.value4) {
    //             // If value4 is missing, span value3 across the last two columns
    //             const spanWidth = columnWidths[2] + columnWidths[3]; // Combine width of value3 and value4
    //             const cellX = startX + columnWidths[0] + columnWidths[1]; // Starting position for value3
    
    //             doc.rect(cellX, startY, spanWidth, rowHeight).stroke("black").fill();
    //             doc.font('Helvetica-Bold').fillColor("black").fontSize(7.2)
    //                 .text(row.value3 || "", cellX, startY + 5, {
    //                     baseline: "hanging",
    //                     width: spanWidth,
    //                     align: "center" // Center align cell text
    //                 });
    
    //             // Draw value1, value2 normally
    //             columnWidths.slice(0, 2).forEach((colWidth, index) => {
    //                 const cellText = row[`value${index + 1}`] || ""; // Adjust index for value names
    //                 const cellX = startX + columnWidths.slice(0, index).reduce((a, b) => a + b, 0);
    
    //                 doc.rect(cellX, startY, colWidth, rowHeight).stroke("black").fill();
    //                 doc.font('Helvetica-Bold').fillColor("black").fontSize(7.2)
    //                     .text(cellText, cellX, startY + 5, {
    //                         baseline: "hanging",
    //                         width: colWidth,
    //                         align: "center" // Center align cell text
    //                     });
    //             });
    //         } else {
    //             // Draw each column in the row normally
    //             columnWidths.forEach((colWidth, index) => {
    //                 const cellText = row[`value${index + 1}`] || ""; // Adjust index for value names
    //                 const cellX = startX + columnWidths.slice(0, index).reduce((a, b) => a + b, 0);
    
    //                 doc.rect(cellX, startY, colWidth, rowHeight).stroke("black").fill();
    //                 doc.font('Helvetica-Bold').fillColor("black").fontSize(7.2)
    //                     .text(cellText, cellX, startY + 5, {
    //                         baseline: "hanging",
    //                         width: colWidth,
    //                         align: "center" // Center align cell text
    //                     });
    //             });
    //         }
    
    //         startY += rowHeight;
    //     }
    // }
    
    // const loanTableData = [
    //     { field1: "Other Charges during the term of loan" },
    //     { field1: "Sr. No.", field2: "Particulars of Charges", field3: "Charges (In Rs./%)", field4: "Charge Details" },
    //     { value1: "1", value2: "Repayment Instruction / Instrument Return Charge", value3: `Rs. 750`, value4: "Per Instance of dishonor of cheque / ECS debit instruction + GST as Applicable" },
    //     { value1: "2", value2: "Repayment mode Swap Charges", value3:  `Rs. 750`, value4: "Per occasion of swapping of the PDCs / ECS mandate + GST as Applicable" },
    //     { value1: "3", value2: "Penal Charges", value3:`- 2% per month on the overdue amount plus applicable taxes in the event of default in repayment of loan instalments \n\n - 2 % per month on the outstanding loan facility amount plus applicable taxes for non-compliance of agreed terms and conditions mentioned in the Sanction Letter`},
    //     { value1: "4", value2: "Duplicate statement issuance charges", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable" },
    //     { value1: "5", value2: "Cheque re-presentation charges", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable" },
    //     { value1: "6", value2: "Duplicate Amortization schedule issuance charges", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable" },
    //     { value1: "7", value2: "Document Retrieval Charges", value3: `Rs.500`, value4: "Per Instance per set + GST as Applicable"},
    //     { value1: "8", value2: "Charges for subsequent set of Photocopy of loan agreement/documents were requested by Borrower", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable"},
    //     { value1: "9", value2: "Stamp Duty Charges", value3:`As applicable in the state stamp act`},
    //     { value1: "10", value2: "Prepayment/Pre-loan closure charges (including part payment) ", value3: `As per Sanction Terms and Conditions`},
    //     { value1: "11", value2: "Administrative Charges/Processing Fees & Other Charges", value3: `As per Sanction Terms and Conditions`},
    //     { value1: "12", value2: "Charges for duplicate NOC / No due certificate", value3:`Rs. 250`, value4: "Per Instance per set + GST as Applicable"},
    //     { value1: "13", value2: "Charges for revalidation NOC", value3:`Rs. 250`, value4: "Per Instance per set + GST as Applicable"}, 
    // ];
      
    // drawTable(loanTableData);

    function DRAWTABLE123(tableTitle, tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
      // Draw table title with a colored header
      doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
      doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5)
          .text(tableTitle, startX + 5, startY + 5, { align: 'center' });
  
      startY += 20; // Move down for the first row
  
      let sectionIndex = null; // Track the section index to span the column
  
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Apply custom style for row 1 (title2)
          
  
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
  
          // Calculate row height based on the tallest content
          const rowHeight = Math.max(20, field1Height, value1Height) + 10; // Adding padding for better spacing
  
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
  
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Stroke color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
  
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
  
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
  
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
  }
 



  const scheduleOfCharges = [
    { index: "sr.No", field1: "Particulars of Charges", value1: "Charge Details" },

    { index: "1", field1: "Repayment Instruction / Instrument Return Charges / PDC / ECS / NACH Bounce Charges", value1: "Rs 750/- Per Instance (Plus GST as applicable)" },
    { index: "2", field1: "Repayment Mode Swap Charges", value1: "Rs 750/- Per Instance (Plus GST as applicable)" },
    { index: "3", field1: "Penal Charges", value1: " 2% per month on the overdue amount plus applicable taxes in the event of default in repayment of loan installments\n 2% per month on the outstanding loan facility amount plus applicable taxes for non-compliance of agreed terms and conditions mentioned in the Sanction Letter" },
    { index: "4", field1: "Duplicate Statement Issuance Charges (SOA / RPS)", value1: "Free once in a Financial Year.Thereafter Rs 250/- (Plus GST as applicable)" },
    { index: "5", field1: "Cheque / NACH Representation Charges", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "6", field1: "Duplicate Amortization Schedule Issuance Charges", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "7", field1: "Document Retrieval Charges", value1: "Rs 500/- Per Instance per set (Plus GST as applicable)" },
    { index: "8", field1: "Charges for Subsequent Set of Photocopy of Loan Agreement/Documents Were Requested by Borrower", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "9", field1: "Stamp Duty Charges", value1: "As applicable in the state stamp act" },
    { index: "10", field1: "Prepayment Charges", value1: "No prepayment allowed till completion of 12 months from the date of 1st disbursement. After completion of 12 months from the date of 1st disbursement, prepayment from personal funds may be made without incurring any fees. In case of balance transfer, 4% charges will be applicable." },
    { index: "11", field1: "Foreclosure Charges", value1: "In case of foreclosure of Loan from Owned Funds, no Foreclosure Charges will be applicable. In case of balance transfer, 4% of the Outstanding Principal Amount will be applicable." },
    { index: "12", field1: "Administrative Charges / Processing Fees & Other Charges", value1: "Nil" },
    { index: "13", field1: "Charges for Duplicate NOC / No Due Certificate", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "14", field1: "Charges for Revalidation NOC", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "15", field1: "Cersai Charge", value1: "- When facility amount is equal to Rs 5 Lacs or lesser, Rs 50 plus GST\n- When facility amount is greater than Rs 5 Lacs, Rs 100 plus GST" },
    // { index: "16", field1: "Login Fees", value1: "₹1950/- (Inclusive of all Applicable Taxes)" },
    // { index: "17", field1: "Processing Fees", value1: "2% of loan amount + Applicable taxes" },
    // { index: "18", field1: "Documentation Charges", value1: "2% of loan amount + Applicable taxes (For under construction cases 3% of loan amount + Applicable taxes)" },
    // { index: "19", field1: "Issuance of Duplicate Income Tax Certificate", value1: "NIL" },
    // { index: "20", field1: "Legal / Collections / Vehicle Storage / Repossession and Incidental Charges", value1: "As per Actuals" }
  ];

  DRAWTABLE123("Schedule of Charges (MITC)", scheduleOfCharges);
  doc.addPage();
  // addLogo();
  //drawBorder();
  doc.moveDown(6);
  const scheduleOfCharges1 = [
   
    { index: "16", field1: "Login Fees", value1: "Rs 1950/- (Inclusive of all Applicable Taxes)" },
    { index: "17", field1: "Processing Fees", value1: "2% of loan amount + Applicable taxes" },
    { index: "18", field1: "Documentation Charges", value1: "2% of loan amount + Applicable taxes (For under construction cases 3% of loan amount + Applicable taxes)" },
    { index: "19", field1: "Issuance of Duplicate Income Tax Certificate", value1: "NIL" },
    { index: "20", field1: "Legal / Collections / Vehicle Storage / Repossession and Incidental Charges", value1: "As per Actuals" }
  ];

    DRAWTABLE123("Schedule of Charges (MITC)", scheduleOfCharges1);


  
  
    
    doc.moveDown(2);
    const startX = 50; // Starting position for text from the left (adjust as per your margins)
    
    doc
    .font(fontBold) // Ensure bold font is applied
    .fontSize(8)
    .fillColor("black")
    .text(
    `IN WITNESS WHEREOF the Parties have executed this Agreement on the day and the year as mentioned in the Schedule,\n`,
    startX, // Start from the left position (left margin)
    doc.y, // Current vertical position (doc.y)
    {
      align: 'left', // Align the text to the left (default)
      align: "justify",
      width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    }
    ).moveDown()
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
    `SIGNED AND DELIVERED BY WITHIN NAMED BORROWER/ CO-BORROWER \n`,
    startX, // Start from the left position (left margin)
    doc.y, // Current vertical position (doc.y)
    {
      align: 'left', // Align the text to the left (default)
      align: "justify",
      width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    }
    ).moveDown()
    .font(fontBold)
    .fontSize(8)
    .fillColor("black")
    .text(
    `If Company/Trust/Society, by its Authorized Signatory with its seal/stamp OR If Limited Liability Partnership, by its Designated Partner and Authorized Signatory seal/stamp OR If Partnership Firm, by its Designated Partner and Authorized Signatory seal/stamp OR If HUF, through its Karta or If Individual, by the individual Borrower; AND by the Co-Borrower (if applicable)\n
    SIGNED AND DELIVERED BY WITHIN NAMED GUARANTOR(s)\n
    If Company, by its Authorized Signatory OR If Limited Liability Partnership, by its Designated Partner and Authorized Signatory OR If Partnership Firm, by its Designated Partner and Authorized Signatory OR If HUF, through its Karta Or If Individual, by the individual Borrower`,
    startX, // Start from the left position (left margin)
    doc.y, // Current vertical position (doc.y)
    {
      align: 'left', // Align the text to the left (default)
      align: "justify",
      width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    }
    );
    
    
    doc.moveDown(2);

    function firstBoxTable(tableData) {
      // Add Table Header
      const startX = 50; // Starting X position for the box
      let startY = doc.y + 10; // Starting Y position for the box
      const boxWidth = 500; // Adjust the width of the box as per your need
    
      // Calculate the total height needed for the entire box
      let totalHeight = 0;
    
      // Calculate the height for each row and determine the total height of the box
      tableData.forEach((row) => {
        const rowHeight = doc
          .font(font)
          .fontSize(7.2)
          .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
    
        totalHeight += rowHeight; // Accumulate the total height
      });
    
      // Draw the outer rectangle for the box
      doc
        .fillColor("#f0f0f0") // Box background color
        .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
        .stroke("black") // Border color
        .fill();
    
      // Loop through the data and draw the text inside the box
      tableData.forEach((row, rowIndex) => {
        // Calculate row height based on the content
        const rowHeight = doc
          .font(font)
          .fontSize(7.2)
          .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
    
        // Alternate row background color (optional)
        doc
          .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff") // Alternate row colors
          .rect(startX, startY, boxWidth, rowHeight) // Draw rectangle for each row
          .stroke("black") // Border color for each row
          .fill();
    
        // Draw the text in the box
        doc
          .font(font)
          .font('Helvetica-Bold')
          .fillColor("black")
          .fontSize(7.2)
          .text(row.field1, startX + 5, startY + 5, {
            baseline: "hanging",
            width: boxWidth - 10, // Adjust width to provide padding inside the box
            align: "left", // Align text to the left
          });
    
        // Move to the next row
        startY += rowHeight;
      });
    }
    
    const firstBoxLine = [
      { field1: `BORROWER'S NAME : ${allPerameters.borrowerName}` },
      { field1: `CO-APPLICANT'S NAME : ${allPerameters.coBorrowername}` },
      { field1: `2nd CO-APPLICANT'S NAME : ${allPerameters.coBorrowername2}` },
      // { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
    ];
    
    firstBoxTable(firstBoxLine);
    //addFooter();
    
//     //---------------------------------------------------new page---------------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(2);
    
    // function firstBoxTable(tableData) {
    //     // Add Table Header
    //     const startX = 50; // Starting X position for the box
    //     let startY = doc.y + 10; // Starting Y position for the box
    //     const boxWidth = 500; // Adjust the width of the box as per your need
      
    //     // Calculate the total height needed for the entire box
    //     let totalHeight = 0;
      
    //     // Calculate the height for each row and determine the total height of the box
    //     tableData.forEach((row) => {
    //       const rowHeight = doc
    //         .font(font)
    //         .fontSize(7.2)
    //         .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
      
    //       totalHeight += rowHeight; // Accumulate the total height
    //     });
      
    //     // Draw the outer rectangle for the box
    //     doc
    //       .fillColor("#f0f0f0") // Box background color
    //       .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    //       .stroke("black") // Border color
    //       .fill();
      
    //     // Loop through the data and draw the text inside the box
    //     tableData.forEach((row, rowIndex) => {
    //       // Calculate row height based on the content
    //       const rowHeight = doc
    //         .font(font)
    //         .fontSize(7.2)
    //         .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
      
    //       // Alternate row background color (optional)
    //       doc
    //         .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff") // Alternate row colors
    //         .rect(startX, startY, boxWidth, rowHeight) // Draw rectangle for each row
    //         .stroke("black") // Border color for each row
    //         .fill();
      
    //       // Draw the text in the box
    //       doc
    //         .font(font)
    //         .font('Helvetica-Bold')
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(row.field1, startX + 5, startY + 5, {
    //           baseline: "hanging",
    //           width: boxWidth - 10, // Adjust width to provide padding inside the box
    //           align: "left", // Align text to the left
    //         });
      
    //       // Move to the next row
    //       startY += rowHeight;
    //     });
    //   }
      
    //   const firstBoxLine = [
    //     { field1: `BORROWER'S NAME : ${allPerameters.borrowerName}` },
    //     { field1: `CO-APPLICANT'S NAME : ${allPerameters.coBorrowername}` },
    //     { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
    //   ];
      
    //   firstBoxTable(firstBoxLine);
    //   doc.moveDown(1);
    //   doc
    //   .font(fontBold) // Ensure bold font is applied
    //   .fontSize(8)
    //   .fillColor("black")
    //   .text(
    //     `AND SIGNED AND DELIVERED BY THE WITHIN NAMED LENDER,\n
    //     Ratnaa fin Capital Private Limited, by the hands of pls confirm authorized name its authorized official.`,
    //     startX, // Start from the left position (left margin)
    //     doc.y, // Current vertical position (doc.y)
    //     {
    //       align: 'left', // Align the text to the left (default)
    //       align: "justify",
    //       width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    //     }
    //   );
    
    //   function secondBoxLine(tableData) {
    //     // Add Table Header
    //     const startX = 50; // Starting X position for the box
    //     let startY = doc.y + 10; // Starting Y position for the box
    //     const boxWidth = 500; // Total width of the box
    //     const field1Width = 100; // Width for the field1 column
    //     const valueWidth = boxWidth - field1Width; // Width for the value column
        
    //     // Calculate the total height needed for the entire box
    //     let totalHeight = 0;
      
    //     // Calculate the height for each row and determine the total height of the box
    //     tableData.forEach((row) => {
    //       // Calculate row height based on the content in the value field
    //       const valueTextHeight = doc
    //         .font('Helvetica') // Regular font for calculating height
    //         .fontSize(7.2)
    //         .heightOfString(row.value || '', { width: valueWidth }) + 10; // Add padding
      
    //       totalHeight += valueTextHeight; // Accumulate the total height
    //     });
      
    //     // Draw the outer rectangle for the box
    //     doc
    //       .fillColor("#f0f0f0") // Box background color
    //       .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    //       .stroke("black") // Border color
    //       .fill();
      
    //     // Loop through the data and draw the text inside the box
    //     tableData.forEach((row) => {
    //       // Calculate row height based on the content in value field
    //       const valueTextHeight = doc
    //         .font('Helvetica') // Regular font for calculating height
    //         .fontSize(7.2)
    //         .heightOfString(row.value || '', { width: valueWidth }) + 10; // Add padding
      
    //       // Draw rectangle for the field1 box
    //       doc
    //         .fillColor("#f5f5f5") // Background color for field1 (empty box)
    //         .rect(startX, startY, field1Width, valueTextHeight)
    //         .stroke("black") // Border for field1 box
    //         .fill();
      
    //       // Draw rectangle for the value box
    //       doc
    //         .fillColor("#ffffff") // Background color for value
    //         .rect(startX + field1Width, startY, valueWidth, valueTextHeight)
    //         .stroke("black") // Border for value box
    //         .fill();
      
    //       // Draw the field1 text in the left column (in bold)
    //       doc
    //         .font('Helvetica-Bold') // Set font to bold for field1
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(row.field1, startX + 5, startY + 5, {
    //           baseline: "hanging",
    //           width: field1Width - 10, // Adjust width to provide padding inside the box
    //           align: "left", // Align text to the left
    //         });
      
    //       // Draw the value text in the right column (regular font)
    //       doc
    //         .font('Helvetica') // Set font back to regular for value
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(row.value, startX + field1Width + 5, startY + 5, {
    //           baseline: "hanging",
    //           width: valueWidth - 10, // Adjust width to provide padding inside the box
    //           align: "left", // Align text to the left
    //         });
      
    //       // Move to the next row
    //       startY += valueTextHeight;
    //     });
    //   }
      
    //   const secondBox = [
    //     { field1: " ", value: `Authorised official's Name: ${allPerameters.borrowerName}\n\nAuthorised official's Signature: ` }
    //   ];
    //   secondBoxLine(secondBox); 
      // doc.moveDown(6);
    
    // // Define the left margin and the width for centering
    const leftX = 50; // Left margin for left-aligned text
    const titleWidth = 400; // Width for the title text
    const centerX = (doc.page.width - titleWidth) / 2; // Calculate center position manually
    
    // Title (Centered and Bold)
    const startXX= 50; // Starting position for text from the left (adjust as per your margins)

    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`Place: ${allPerameters.placeOfExecution}`, startXX, doc.y, { align: "left", width: 470 ,continued:true});
    doc.moveDown(1);

    doc
    .fontSize(9)
    .font('Helvetica')
    .text(` Date: ${allPerameters.agreementdate}`, startXX, doc.y, { align: "right", width: 470 });
    doc.moveDown(1);
    doc
    .fontSize(9)
    .font(fontBold) // Bold for title
    .text("DECLARATIONS CUM UNDERTAKINGS CUM AUTHORITY", centerX, doc.y, { width: titleWidth, align: "center" }) // Manually centered
    .moveDown(0.7);
    
    // Left-aligned text
    doc
    .font(font) // Regular font for left-aligned text
    .fontSize(8)
    .text(`IN CONSIDERATION OF Ratnaafin Capital Private limited, (the Lender) providing or agreeing to provide the Agri Micro LOAN AGAINST PROPERTY to me/us on the terms and conditions contained in the Loan Agreement dated ${allPerameters.agreementdate} and other Transaction Documents,`, leftX, doc.y, { width: doc.page.width - 100, align: "left" })
    .moveDown(0.8);
    
    // Center-aligned bold text
    // doc
    // .font(fontBold) // Bold for center-aligned text
    // .fontSize(8)
    // .text("In case of Individual Borrower", centerX, doc.y, { width: titleWidth, align: "center", underline: true })
    // .moveDown(0.8);
    
    // Left-aligned text
    doc
    .font(font) // Regular font for left-aligned text
    .fontSize(9)
    .text(`I/We, ${allPerameters.borrowerName} residing at ${allPerameters.borroewraddress} (hereinafter referred to as “the Borrower”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" })
    .moveDown(0.8);
    
    // Center-aligned bold "AND"
    doc
    .font(fontBold) // Bold for center-aligned text
    .fontSize(9)
    .text("AND", centerX, doc.y, { width: titleWidth, align: "center" })
    .moveDown(0.8);
    
    // Left-aligned text
    doc
    .font(font) // Regular font for left-aligned text
    .text(`I/We,${allPerameters.coBorrowername} residing at ${allPerameters.coBorroweraddress} (hereinafter referred to as “the CO Borrower”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    // .moveDown(0.8);
    doc
    .font(fontBold) // Bold for center-aligned text
    .fontSize(9)
    .text("AND", centerX, doc.y, { width: titleWidth, align: "center" })
    .moveDown(0.4);
    // Center-aligned bold "AND"
    // doc
    // .font(fontBold) // Bold for center-aligned text
    // .fontSize(9)
    // .text("AND", centerX, doc.y, { width: titleWidth, align: "center" })
    // .moveDown(0.8);

    doc
    .font(font) // Regular font for left-aligned text
    .text(`I/We,${allPerameters.coBorrowername2} residing at ${allPerameters.coBorroweraddress2} (hereinafter referred to as “the CO Borrower”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    // doc
    // .font(font) // Regular font for left-aligned text
    // .text(`I/We,${allPerameters.guarantorname} residing at ${allPerameters.guarantoraddress} (hereinafter referred to as “the Guarantor”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    // Left-aligned text
    // doc
    // .font(fontBold) // Regular font for left-aligned text
    // .text(` ${allPerameters.guarantorname} `, leftX, doc.y, { width: doc.page.width - 100, align: "left" })
    doc.moveDown(0.8);
    
    // Final paragraph (Left-aligned)
    
    doc
    .fontSize(9)
    .text("(Hereinafter referred to as ”the Guarantors”/”Co-Borrowers”) hereby jointly and severally, agree, undertake, authorize, assure and affirm as follows:", leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    
    doc.moveDown(2);
    // Format the borrower details to the left side
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `1. I/We agree and undertake that for the credit facilities granted to the Borrowers and/or availed by the Borrowers, the Lender will be entitled/authorized/permitted to charge and/or deduct/debit/recover from my/our Accounts such sum or sums of money as the Lender may stipulate, incur or bear by way of guarantee fee, document verification fees, or any other levy or charge payable by the Borrower to the Lender for availing finance, including for verification of security documents by the Lender’s Advocate/s and other such fees as payable by the Borrower to the Lender in respect of facilities extended to the Borrowers.\n\n
       2. I/We further agree, authorize, assure and confirm that in the event of any default committed by me/us in compliance Of the terms and conditions or any of them stipulated by the Lender from time to time, the Lender shall be entitled, permitted and authorized to charge without any intimation to us penal charges at such rate and in accordance with such rules/regulation of the Lender and/or such Rules or regulations or stipulations/directives/guidelines of the Reserve Bank of India on the amount due and payable by the Borrowers to the Lender in respect of the credit facilities/financial accommodation extended to the Borrowers by the Lender.\n\n
       3. I/We further agree, authorize, assure and confirm that in the event of the Lender obtaining any insurance cover or cover for financial risk from an insurance company/ies or any other institution/firm/Body Corporate or otherwise over the assets charged/ hypothecated/ pledged or mortgaged to the Lender or otherwise taken possession of by the Lender on account of or in consideration of the dues payable by the Borrower for the facilities extended to my/our Account/s without any further formalities and intimation by the Lender of having obtained such insurance, or financial risk cover and such letter informing about the Lender having taken such insurance cover, etc., would be sufficient proof there of enabling the Lender to recover and/or charge the same to my/our accounts/s.\n\n
       4. I/We further agree, authorize, assure and confirm that the Lender shall be entitled to charge interest at the rate as may be decided by the Lender for the adhoc facility/facilities agreed to be extended/may be extended by the Lender to the Borrower and such interest may be continued to be charged to me/us by the Lender as long as the Borrower avail such adhoc facility and/or earlier, as may be decided by the Lender from time to time.\n\n
       5. I/We further agree, assure and undertake that in the event of Lender requiring any information for processing/review of my/our account including furnishing of statements of stocks/Balance Sheet (audited or otherwise), CMA Data statement of  other particulars  may be required by the Lender within the stipulated period or at the time of processing/review of my/our account, and if for any reason whatsoever I am/we are unable to furnish the same within a week or such other reasonable time as the Lender may, upon specific request by me/us, agree to in writing, then the Lender shall be entitled to charge to my/our account and/or claim penal charges at the rate of 24% P.A. on outstanding dues, not with standing the technical review of my/our account as may be otherwise carried out by the Lender in the absence of such information, submission as required by the Lender.\n\n`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    
    
    //addFooter();
    
//     //---------------------------------------------new page ------------------------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(2);
    
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `
       6. In case if the information about legal heirs is incomplete, inadequate, or not provided, I/We, the undersigned, hereby irrevocably agree, declare, undertake, assure, and confirm that the legal heirs, as mandated under the relevant applicable laws of India, represent the comprehensive enumeration of all my/our legal heirs, both known and unknown, at the time of executing this agreement. I hereby provide my irrevocable consent to the Lender, its successors, and assigns, to pursue any and all legal remedies for the recovery of any outstanding obligations, including but not limited to, the repayment of loans, accrued interest, fees, and charges, from any and all of my/our legal heirs, including those who may come into existence after the execution of this agreement, in the event of my/our demise or the demise of any and all of us during the existence or pendency of credit facilities extended by the Lender to the Borrower. Furthermore, I acknowledge that this consent shall remain in full force and effect throughout the entire term of any credit facility and beyond until all outstanding obligations to the Lender have been fully discharged and satisfied. I also undertake to promptly notify the Lender of any changes in the composition of my/our legal heirs, including additions or alterations.\n\n
       7. I/We further agree, undertake, and assure that I/We shall promptly inform you in writing of any change in the above particulars of my/our legal heirs that may be occasioned by birth, death, marriage, etc., and/or, on account of any amendment/change in the general statutes/laws of the country.\n\n
       8. . I/We also hereunder submit the particulars of immovable properties belonging to me/us, which have been charged to the Lender as security for financial assistance granted to the Borrower`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    doc.moveDown(1);
    
    // function tableFunction(tableData) {
    //     // Add Table Header
    //     const startX = 50; // Starting X position for the box
    //     let startY = doc.y + 10; // Starting Y position for the box
    //     const boxWidth = 500; // Total width of the box
    //     const numFields = Object.keys(tableData[0]).length; // Get number of fields from the first row
    //     const fieldWidth = boxWidth / numFields; // Calculate width for each column
    
    //     // Calculate the total height needed for the entire box
    //     let totalHeight = 0;
    
    //     // Calculate the height for each row and determine the total height of the box
    //     tableData.forEach((row) => {
    //         // Calculate row height based on the content in each field
    //         let rowHeight = 0;
    //         for (let field in row) {
    //             const fieldTextHeight = doc
    //                 .font('Helvetica') // Regular font for calculating height
    //                 .fontSize(7.2)
    //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
    //             rowHeight = Math.max(rowHeight, fieldTextHeight); // Get the maximum height for the row
    //         }
    //         totalHeight += rowHeight; // Accumulate the total height

           

    //     });
    
    //     // Draw the outer rectangle for the box
    //     doc
    //         .fillColor("#f0f0f0") // Box background color
    //         .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    //         .stroke("black") // Border color
    //         .fill();
    
    //     // Loop through the data and draw the text inside the box
    //     tableData.forEach((row, rowIndex) => {
    //         let currentX = startX; // Reset the starting X position for each row
    //         // Calculate row height based on the content in each field
    //         let rowHeight = 0;
    //         for (let field in row) {
    //             const fieldTextHeight = doc
    //                 .font('Helvetica') // Regular font for calculating height
    //                 .fontSize(7.2)
    //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
    //             rowHeight = Math.max(rowHeight, fieldTextHeight);

    //             // const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
    //             // const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    //             //  // Get the maximum height for the row
    //             // const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
    //             // const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
    //             // let rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding
                 

    //             if (rowIndex === 0) { // Example for a specific row index
    //               rowHeight = Math.max(rowHeight, 50); // Custom height for row at index 5
    //           }
    //           // const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
    //           // if (row.index) {
    //           //     sectionIndex = row.index; // Set current section index
    //           // }
    //           }
    
    //         // Draw rectangles for each field in the row
    //         for (let field in row) {
    //             // Draw rectangle for the field box
    //             doc
    //                 .fillColor("#f5f5f5") // Background color for field (empty box)
    //                 .rect(currentX, startY, fieldWidth, rowHeight)
    //                 .stroke("black") // Border for field box
    //                 .fill();
    
    //             // Set font style based on whether it's the header row
    //             const isHeader = rowIndex === 0; // Check if it's the header row
    //             doc
    //                 .font(isHeader ? 'Helvetica-Bold' : 'Helvetica') // Set font to bold for header
    //                 .fillColor("black")
    //                 .fontSize(7.2);
    
    //             // Determine text alignment based on field index (you can customize this as needed)
    //             const align = (field === 'field3') ? 'center' : 'left'; // Center field3, left for others
    
    //             // Draw the field text in the box
    //             doc.text(row[field], currentX + 5, startY + 5, {
    //                 baseline: "hanging",
    //                 width: fieldWidth - 10, // Adjust width to provide padding inside the box
    //                 align: align, // Align text based on content
    //             });
    
    //             // Move to the next column
    //             currentX += fieldWidth; // Update X position for the next field
    //         }
    
    //         // Move to the next row
    //         startY += rowHeight; // Update Y position for the next row
    //     });
    // }
    function tableFunction(tableData) {
      const startX = 53; // Starting X position
      let startY = doc.y + 10; // Starting Y position
      const boxWidth = 500; // Total width of the box
      const numFields = Object.keys(tableData[0]).length; // Number of columns
      const fieldWidth = boxWidth / numFields; // Width per column
  
      let totalHeight = 0;
  
      // Calculate total height
      tableData.forEach((row) => {
          if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
          let rowHeight = 0;
          for (let field in row) {
              const fieldTextHeight = doc
                  .font('Helvetica')
                  .fontSize(7.2)
                  .heightOfString(row[field] || '', { width: fieldWidth - 10 }) + 10; // Add padding
              rowHeight = Math.max(rowHeight, fieldTextHeight);
          }
          totalHeight += rowHeight;
      });
  
      // Draw the outer box
      doc.fillColor("#f0f0f0")
          .rect(startX, startY, boxWidth, totalHeight)
          .stroke("black")
          .fill();
  
      // Draw table content
      tableData.forEach((row, rowIndex) => {
          if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
          let currentX = startX;
          let rowHeight = 0;
  
          // Calculate row height for the current row
          for (let field in row) {
              const fieldTextHeight = doc
                  .font('Helvetica')
                  .fontSize(7.2)
                  .heightOfString(row[field] || '', { width: fieldWidth - 10 }) + 10; // Add padding
              rowHeight = Math.max(rowHeight, fieldTextHeight);
          }
  
          // Draw cells and their content
          for (let field in row) {
              doc.fillColor("#f5f5f5")
                  .rect(currentX, startY, fieldWidth, rowHeight)
                  .stroke("black")
                  .fill();
  
              const isHeader = rowIndex === 0;
              doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
                  .fillColor("black")
                  .fontSize(7.2)
                  .text(row[field], currentX + 5, startY + 5, { // 5px padding inside the cell
                      baseline: "hanging",
                      width: fieldWidth - 10, // Leave 5px padding on each side
                      align: 'left',
                  });
  
              currentX += fieldWidth;
          }
  
          startY += rowHeight; // Move to next row
      });
  
      // Set the `doc.y` position after the table ends
      doc.y = startY + 10; // Add extra 10 points for spacing after the table
  }
  
  
  //   function tableFunction(tableData) {
  //     const startX = 53; // Starting X position
  //     let startY = doc.y + 10; // Starting Y position
  //     const boxWidth = 500; // Total width of the box
  //     const numFields = Object.keys(tableData[0]).length; // Number of columns
  //     const fieldWidth = boxWidth / numFields; // Width per column
  
  //     let totalHeight = 0;
  
  //     // Calculate total height
  //     tableData.forEach((row) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
  //         let rowHeight = 0;
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }
  //         totalHeight += rowHeight;
  //     });
  
  //     // Draw the outer box
  //     doc.fillColor("#f0f0f0")
  //         .rect(startX, startY, boxWidth, totalHeight)
  //         .stroke("black")
  //         .fill();
  
  //     // Draw table content
  //     tableData.forEach((row, rowIndex) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
  //         let currentX = startX;
  //         let rowHeight = 0;
  
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10;
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }

          
  
  //         for (let field in row) {
  //             doc.fillColor("#f5f5f5")
  //                 .rect(currentX, startY, fieldWidth, rowHeight)
  //                 .stroke("black")
  //                 .fill();
  
  //             const isHeader = rowIndex === 0;
  //             doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
  //                 .fillColor("black")
  //                 .fontSize(7.2)
  //                 .text(row[field], currentX + 5, startY + 5, {
  //                     baseline: "hanging",
  //                     width: fieldWidth - 10,
  //                     align: 'left',
  //                 });
  
  //             currentX += fieldWidth;
  //         }
  
  //         startY += rowHeight; // Move to next row
  //     });
  //     doc.moveDown(); // Adds two lines of vertical space OR:
  // }
  
        
    const tableData = [
        { field1: "Item No.", field2: `Particulars of Immovable properties with full address (where situate, etc.)\n\n`, field3: "In whose name the property stands", field4: "Present Encumbrance", field5: "Whether leasehold or ownership", field6: "Present Market Value" },
        { field1: "1", field2: `${allPerameters.techfullAdress}\n\n`, field3:`${allPerameters.sellerName}&${allPerameters.buyerName}`, field4: `NO`, field5: `OWNERSHIP`, field6: `Rs.${allPerameters.presentMarketValue} - ${allPerameters.marketValuetowor}` }
    ];

//     const tableData = [
//     { 
//         field1: "Item No.", 
//         field2: "Particulars of Immovable properties with full address (where situate, etc.)",
//         field3: "Charges (In Rs./%)",
//         field4: "In whose name the property stands",
//         field5: "Whether leasehold or ownership",
//         field6: "Present Market Value"
//     },
//     { 
//         field1: "1",
//         field2: allPerameters.particularsImmovablePropertiesFullAddress || '',
//         field3: allPerameters.inWhoseNameThePropertyStands || '',
//         field4: allPerameters.presentEncumbrance || '',
//         field5: allPerameters.whetherLeaseholdOrOwnership || '',
//         field6: allPerameters.presentMarketValue || ''
//     }
// ].filter(row => Object.values(row).some(value => value.trim() !== '')); // Remove blank rows

    
    // Call the function to create the table
    tableFunction(tableData);   
    
    // doc.moveDown(14);
    
    
    const leftMargin = 50; // Set a custom left margin if needed
    const startY = doc.y;  // Start at the current y position
    
    doc
      .moveDown()
      .font(font)
      .fontSize(8)
      .fillColor("black")
      .text(
        `9. I/We also undertake, agree, assure and confirm that I/we shall not transfer, dispose of, alienate encumber or deal with in any manner, without prior permission in writing of the Lender, the assets, properties, tangible or intangible or immovable, as are charged or mortgaged to the Lender same in the usual course of my/our business or as provided for in documents executed in that behalf.`,
        leftMargin, // Set X position explicitly
        startY,     // Set Y position explicitly
        {
          lineGap: 2,
          width: 500, // Set a maximum width
          align: "left", // Align text to the left
          
        }
      );
    
    //addFooter();
    
//     //------------------------------------------new page ------------------------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(8);
    
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `10. I/We hereby declare further that the particulars of legal heirs, assets, etc., furnished by me/us as above are correct and complete, and that we are fully aware that the Lender will be granting credit/other facility to the Borrower inter-alia on the faith of this Undertaking-cum-Declaration-cum-authority.
        
    11. I/We also agree, undertake and assure that charging or non-charging of penal charges in terms aforesaid shall not in any way be construed as a waiver or satisfaction of any of the terms and conditions stipulated by the Lender for compliance in terms of this undertaking or otherwise howsoever.
        
    12.I/We say that I/We am/are absolutely seized and possessed of or otherwise well and suficiently entitled to the Immovable property being of (1) ${allPerameters.techfullAdress} more particularly described in the Schedule hereunder written (hereinafter referred to as the “said Immovable Property”).
        
    13. I/We declare that I/We have not created any charges or encumbrances in respect of the Immovable Property more particularly described in the Schedulehereunder.
        
    14. I/We declare that the said Immovable Property is proposed to be mortgaged and charged to `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        // width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(fontBold).text(
      `Ratnaafin Capital Private Limited, Ahmedabad Branch`,
      {
        lineGap: 2,
        align: "left",
        // align: "justify",
        // width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(font).text(
      `, to secure by way of First Charge for the due repayment and discharge of the secured Loan of Rs.`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc.font(fontBold).text(
      `, ${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord})`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc.font(font).text(
      `, granted by `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(fontBold).text(
      `, RCPL `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(font).text(
      `,to `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(fontBold).text(
      `, ${allPerameters.borrowerName}`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc.font(font).text(
      `, together with interest, penal charges, and other monies payable to Ratnaafin Capital Private Limited under their loan agreements, letter of sanction, and other transaction documents, as amended from time to time.`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
       
      }
    ).moveDown();
    doc.font(font).text(
      `15. The said `,
      {
        lineGap: 2,
        align: "left",
        // align: "justify",
        // width: 500, // Set a maximum width
        continued:true
      }
    );
    doc
    .font(fontBold)
    .fontSize(8)
    .fillColor("black")
    .text(
      ` Ratnaafin Capital Private Limited,Ahmedabad Branch `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      ` is/are hereinafter referred to as the "Lender."
        
    16. I/We say that the said Immovable Property is free from all encumbrances or charges (statutory or otherwise), claims and demands, and that the same or any of them or any part thereof are/is not subject to any Lien/Lispendens, attachment or any other process issued by any Court or Authority and that I/we have not created any Trust in respect thereof and that the said Immovable Property is/are in my/our exclusive, uninterrupted and undisturbed possession and enjoyment since the date of purchase/acquisition thereof and no adverse claims have been made against me in respect of the said Immovable Property or any of them or any part thereof and the same are not affected by any notices of acquisition or requisition, and that no proceedings are pending or initiated against me under the Income Tax Act, 1961, or under any other law in force in India for the time being and that no notice has been received by or served on me under the Income Tax Act, 1961 and/or under any law and there is no pending attachment whatsoever issued or initiated against the said Immovable Property or any of them or any part thereof.
        
    17. I/We say that I have duly paid all rents, royalties and all public demands including Income Tax, Corporation/Municipal Tax and all other taxes and revenue payable to the Government of India or to the Government of any State or to any Local Authority and that at present there are no arrears of such dues, rents, royalties, taxes and revenue dues and outstanding and that no attachments or warrants have been served on me of Income Tax, Government Revenues and other taxes.
        
    18. I/We also agree and undertake to give such declarations, undertakings and other writings as may be required by the Lender or their solicitors and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the lender.
        
    19. I/We say that I have obtained the requisite consent from the Income Tax authorities pursuant to the provisions contained in Section 281 of the Income Tax Act, 1961 for the alienation of my property in favour of the Lender.
        
    20. I/We assure, agree and declare that the security to be created in favour of the Lender shall ensure in respect of my Immovable Property, both present & future and that the documents of title, evidences, deeds and writings in relation to the said Immovable Property are the only documents of title relating to the said Immovable Property.
        
    21. I/We hereby agree and undertake that the MORTGAGOR shall, within a period of three months from the date hereof or such extended date as may be permitted by the Lender in writing:
        
    a) Perfectly assure the title to the properties comprised in the mortgage security and comply with all requisitions that may be made from time to time by or on behalf of the Lender in that regard.
    
    b) Provide such declarations, undertakings, and other writings as may be required by the Lender and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the Lender.`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    //addFooter();
    
//     // ------------------------------------------------- new page --------------------------------------------------------------------
    
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(2);
    
    
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `c) Pay all rents, rates, taxes, cesses, fees, revenues, assessments, duties, and other outgoings due in respect of the said Immovable Property. I/We shall observe and perform all the rules and regulations pertaining to the same and will not do or omit to do or suffer to be done anything whereby the mortgaged security, as proposed to be created in favor of the Lender, may be affected or prejudiced in any manner whatsoever.
    
    22. I/We further undertake that no mortgage, charge, lien or other encumbrance whatsoever will be created on the properties compromised in the mortgaged security save & except with the permission of the Lender.
    
    23. I/We are not aware of any act, deeds, matter or thing or circumstance which prevents me from charging/further charging in favour of the Lender on the said Immovable Property.
    
    24. I/We (for borrower/s) do hereby unconditionally and irrevocably agree as a condition of such loan/advances extended to the Borrower by the Lender that in case I/we commit default in the repayment of such loan/advances of in the repayment of interest thereon or any of the agreed installment of the loan on due date/the Lender and/or the Reserve Bank of India will have an unqualified right to disclose or publish my/our name or the name of the our company/firm/unit and/or its directors/partners/proprietors as defaulter/s in such manner and through such medium as the Lender or Reserve Bank of India in their absolute discretion may think fit.
    
    25. I/We further understand that as a pre-condition, relating to grant of the loans/advances/ credit facilities to the Borrower, the Lender, requires my/our consent for the disclosure by the Lender of, information and data relating to me/us, of the credit facility availed of/to be availed, by me/us, obligations assumed/to be assumed, by me/us, in relation thereto and default, if any, committed, in discharge thereof.`,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
      //  continued:true // Set a maximum width
       // Set a maximum width
     }
    ).moveDown()
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text( 
  `26. Accordingly, I/We, hereby agree and give consent of the disclosure by the Lender of all or any such:
     
  a. Information and data relating to me/us.
     
  b. The information or data relating to any credit facility availed of/to be availed, by me/ us, and;
     
  c. Default, if any, committed by me/us, in discharge of my/our such obligation, as the Lender may deem appropriate and necessary to disclose and furnish to any agency authorized by RBI.
    
  I/We declare that the information and data furnished by me/us to the Lender are true and correct.
    
  27. Further, in consideration of the Lender agreeing to grant the `,
     {
       lineGap: 2,
       align: "left",
      //  align: "justify",
       width: 500,
       continued:true // Set a maximum width
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica-Bold`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `Agri Micro Loan against Property `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       continued:true // Set a maximum width
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `and in consideration of the Lender at our request continuing and having continued the above-mentioned facilities, I/we,agree, confirm and undertake: 
    `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `
    a) To keep mortgaged security fully insured against fire and such other risks as may be required by the Lender and to submit the respective insurance policies to the Lender.
    
    b) To allow Lender to carry out inspection of the mortgaged securities at periodical intervals and to bear the inspection charges and other incidental charges incurred by the Lender in connection therewith.
    
   c) To allow Lender to charge penal charges @ 2 % P.M above the rate applicable to loan Account on the entire outstanding in `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       continued:true // Set a maximum width
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica-Bold`)
    .fontSize(8)
    .fillColor("black")
    .text(
     ` Agri Micro Loan against Property `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       continued:true // Set a maximum width
     }
    )
    // doc
    // .font(`Helvetica` )
    // .fontSize(8)
    // .fillColor("black")
    // .text(
    //  `facilities under the following circumstances:
     
    //    ● Entire overdue amount in case of default in repayment of loan installments
       
    //    ● Entire outstanding amount of loan facilities for non-compliance of agreedterms and conditions mentioned in the Sanction Letter
     
    // d) To obtain the Lender's written consent in respect of the following matters:
     
    //    ● Making investment in or giving loans to subordinates, associate concerns, individuals or other parties.
       
    //    ● Effecting mergers and acquisitions.
       
    //    ● Paying dividend other than out of current year's earnings after making due provisions.
       
    //    ● Giving guarantees on behalf of third parties.
    // `,
    //  {
    //    lineGap: 2,
    //    align: "left",
    //    align: "justify",
    //    width: 500, // Set a maximum width
    //  }
    // );
    doc
    .font(`Helvetica` )
    .fontSize(8)
    .fillColor("black")
    .text(
     `facilities under the following circumstances:`,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500, // Set a maximum width
     }
    );
    doc.moveDown(1)

    const bulletPoints = [
      'Entire overdue amount in case of default in repayment of loan installments.',
      'Entire outstanding amount of loan facilities for non-compliance of agreedterms and conditions mentioned in the Sanction Letter.',
    ];
    
    bulletPoints.forEach((point) => {
      doc.text(`• ${point}`, {
        lineGap: 2,
        indent: 20, // Indent bullet points
        align: 'left',
      });
    });
    doc
    doc.moveDown(1)

    .font(`Helvetica` )
    .fontSize(8)
    .fillColor("black")
    .text(
     ` d) To obtain the Lender's written consent in respect of the following matters:`,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500, // Set a maximum width
     }
    );
    const bulletPoints1 = [
      `Making investment in or giving loans to subordinates, associate concerns, individuals or other parties.`,
      `Effecting mergers and acquisitions`,
      `Paying dividend other than out of current year's earnings after making due provisions.`,
      `Giving guarantees on behalf of third parties.`,
      `Premature repayment of loans and discharge of other liabilities`
    ];
    
    bulletPoints1.forEach((point) => {
      doc.text(`• ${point}`, {
        lineGap: 2,
        indent: 20, // Indent bullet points
        align: 'left',
      });
    });

    
    
    

    
    
    //addFooter();
//     //-------------------------------------------- new page --------------------------------------------------------------------
    
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(8);
    
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `
    e) Not to create without Lender's prior written consent, charges on all or any of the assets and properties, other than the existing /proposed charges in favour of other Financial Institution/Banks (if any).
    
    f) That all the moneys advanced or to be advanced by the Lender under the facilities mentioned herein above shall be utilized exclusively for the purpose set-forth in our proposal and for no other purpose and if the said loan/advance is utilized or attempted to be utilized for any other purpose or if the Lender apprehends or has reasons to believe that the said loan/advance is being utilized for any other purpose, the Lender shall have the right to forthwith recall the entire or any part of the loan/advance without assigning any reason thereof.
    
    g) That notwithstanding anything to the contrary contained in any of the documents/agreements executed/to be executed by us as also in the Letter of Sanction by the Lender, the Lender shall be entitled to charge the contractual rate of interest at its own discretion without any intimation to us to bring it in conformity with the rate of interest prescribed by the Reserve Bank of India or any other eventuality such as reintroduction of Interest Tax, etc. from time to time and the same shall be binding on us as if such change were already incorporated in the documents executed by us.
    
    h) That in the event of any irregularity, the Lender at its discretion shall be entitled to charge on the entire outstanding or any portion thereof interest at such enhanced rates as it may fix during the continuance of such irregularity. We understand that it is on the faith of the aforesaid representations and express undertakings that the Lender has consented to entertain our proposal for the said facilities.

    28. I/We undertake that:
    
    a. The Credit Information Bureau (India) Ltd. and any other agency so authorized may use, process the said information and data disclosed by the Lender in the manner as deemed fit by them and;
    
    b. The Credit Information Bureau (India) Ltd. and other agency so authorized may furnish for consideration, the processed information and data or products thereof prepared by them, to Lenders/Financial Institutions and other credit grantors or registered users, as may be specified by the Reserve Bank of India in this behalf.
    
    c. I/We certify that (i) all information furnished by me/us is true, (ii) except as indicated in this application that there is no over dues/statutory dues against me/us (iii) except as indicated in this application that no legal action has been/is being taken against me/us; (iv) I/We shall furnish the details of legal action/s or recovery process, if any, initiated against me/us in future by any person/body/authority/together with the details of the liability/claim therein and the action/s taken by me/us to defend/counter the same forthwith on my/our coming to know of such litigations; (v) I/We shall furnish all other Information that may be required by you in connection with this credit facilities (vi)this may also be exchanged by you with any agency you may deem fit and you, your representatives, representatives of the Reserve Bank of India or any other agency.
    
    29. I/We, the Borrower/s, hereby declare, state and confirm as follows:
    
    a) There is no litigation, suit, recovery proceedings/execution application or any other coercive action or process issued, undertaken or adjudication or pending against us in any judicial forum/court of law/DRT/any tribunal/Revenue or other Recovery Authorities in respect of any loan, borrowing or advance availed by me/us from any Lender/FI/Co-operative Society/NBFC or any other private/government/semi government or public sector undertaking or institution. In case any such litigation/action or process is issued/field of undertaken against us in future we shall immediately arrange to intimate/furnish (i) details /particulars thereof in writing to the Lender/Branch and (ii) the details of action/s initiated/taken by me/us to counter/defend the same appropriately.
    
    b) There is litigation /insolvency proceedings/dispute/claim/coercive process /execution petition, presently pending/adjudicated though not finally, earlier against me/us the details whereof are as under:

    We further agree that it is on the faith of the above declaration/undertaking that the Lender has granted/sanctioned or proposes to sanction to the Borrowers the proposed/present/reviewed loan/advance facility(ies) and in case the above is found incomplete, in correct or false, then the Lender shall have the right to recall the advance /loan account and take/initiate any or all actions against me/us including civil or criminal action or proceedings and to enforce its rights in court of competent jurisdiction under any rules /regulations, act/s or law/s in force.
    
    `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    
    //addFooter();
    
//     // -------------------------------------------------- new page -----------------------------------------------------------------------------
    
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(8);
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
    `
    30. The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower also has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the Borrower and the Borrower has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.
    `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    
    doc
    .fontSize(9)
    .font(fontBold)
    .text("-: SCHEDULE ABOVE REFEERED TO :-", { align: "center" })
    .moveDown(0.8)
    .fontSize(8)
    .text("(Description of the Immovable Property)", { align: "center" })
    .moveDown(0.9)
    
    doc
    .font('Helvetica')
    .fontSize(8)
    .fillColor("black") // Normal text color
    .text("Address of Immovable Property - 1: ", { continued: true })  // Keep this text inline
    .text(`${allPerameters.techfullAdress}`, 
          { align: "left", indent: 235 })  // Indentation for the second line onwards
    .moveDown(0.9)
    .font(fontBold)
    .fontSize(9)
    .text("Boundaries of Property", { align: "left" });
    
    doc.moveDown(0.5);
    
    function BoundariesFunction(tableData) {
        // Add Table Header
        const startX = 50; // Starting X position for the box
        let startY = doc.y + 10; // Starting Y position for the box
        const boxWidth = 500; // Total width of the box
        const numFields = 3; // Fixed number of columns (Direction, Separator, Description)
    
        // Adjusted widths for columns: first and last wider, middle narrower
        const firstColumnWidth = boxWidth * 0.4; // 40% for the first column
        const middleColumnWidth = boxWidth * 0.2; // 20% for the middle column
        const lastColumnWidth = boxWidth * 0.4; // 40% for the last column
    
        // Calculate the total height needed for the entire box
        let totalHeight = 0;
    
        // Calculate the height for each row and determine the total height of the box
        tableData.forEach((row) => {
            let rowHeight = 0;
            Object.values(row).forEach((field) => {
                const fieldTextHeight = doc
                    .font('Helvetica') // Regular font for calculating height
                    .fontSize(7.2)
                    .heightOfString(field || '', { width: firstColumnWidth }) + 10; // Add padding
                rowHeight = Math.max(rowHeight, fieldTextHeight); // Get the maximum height for the row
            });
            totalHeight += rowHeight; // Accumulate the total height
        });
    
        // Draw the outer rectangle for the box
        doc
            .fillColor("#f0f0f0") // Box background color
            .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
            .stroke("black") // Border color (normal line)
            .fill();
    
        // Loop through the data and draw the text inside the box
        tableData.forEach((row) => {
            let currentX = startX; // Reset the starting X position for each row
            // Calculate row height based on the content in each field
            let rowHeight = 0;
            Object.values(row).forEach((field) => {
                const fieldTextHeight = doc
                    .font('Helvetica') // Regular font for calculating height
                    .fontSize(7.2)
                    .heightOfString(field || '', { width: firstColumnWidth }) + 10; // Add padding
                rowHeight = Math.max(rowHeight, fieldTextHeight); // Get the maximum height for the row
            });
    
            // Draw rectangles for each field in the row
            Object.entries(row).forEach(([key, field], fieldIndex) => {
                // Set the width for each column
                const fieldWidth = fieldIndex === 1 ? middleColumnWidth : (fieldIndex === 0 ? firstColumnWidth : lastColumnWidth);
    
                // Draw rectangle for the field box
                doc
                    .fillColor("#f5f5f5") // Background color for field (empty box)
                    .rect(currentX, startY, fieldWidth, rowHeight)
                    .stroke("black") // Normal line border for field box
                    .fill();
    
                // Set font style based on whether it's a field (bold) or value (normal)
                const isFieldValue = key === 'value'; // Check if it's the value field
                doc
                    .font(isFieldValue ? 'Helvetica' : 'Helvetica-Bold') // Bold for field, normal for value
                    .fillColor("black")
                    .fontSize(7.2);
    
                // Align text properly based on column index
                const align = fieldIndex === 1 ? 'left' : (fieldIndex === 0 ? 'left' : 'left'); // Align all to left
    
                // Draw the field text in the box
                doc.text(field, currentX + 5, startY + 5, {
                    baseline: "hanging",
                    width: fieldWidth - 10, // Adjust width to provide padding inside the box
                    align: align, // Align text based on content
                });
    
                // Move to the next column
                currentX += fieldWidth; // Update X position for the next field
            });
    
            // Move to the next row
            startY += rowHeight; // Update Y position for the next row
        });
    }
    
    const boundariesData = [
        { field1: "On or towards North", field2: ": ", value: `${allPerameters.OnOrTowardsNorth}` },
        { field1: "On or towards South", field2: ": ", value: `${allPerameters.OnOrTowardsSouth}` },
        { field1: "On or towards East",  field2: ": ", value: `${allPerameters.OnOrTowardsEast}` },
        { field1: "On or towards West",  field2: ": ", value: `${allPerameters.OnOrTowardsWest}` },
    ];
    
    // Call the function to create the table
    BoundariesFunction(boundariesData);
    
    doc.moveDown(2);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`DATE This: ${allPerameters.agreementdate}`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
    
    // Set initial font and size
    doc
    .font(font) // Assuming 'font' is defined elsewhere as your base font
    .fontSize(9)
    .fillColor("black")
    .text(`IN WITNESS WHEREOF the Borrower, Co-Borrowers & Guarantors set and subscribed their hands to these presents on the day and year first hereinabove written.\n\n`, {
    lineGap: 2,
    align: "left",
    width: 500, // Set a maximum width
    });
    
    // Bold text for "SIGNED & DELIVERED BY THE"
    doc
    .fontSize(9)
    .font('Helvetica-Bold') // Change to bold font
    .text(`SIGNED & DELIVERED BY THE`, {
    lineGap: 2,
    align: "left",
    width: 500, // Set a maximum width
    });
    
    // Change back to normal font for the rest of the text
    doc
    .fontSize(9)
    .font(font) // Switch back to normal font
    .text(`\n\nWITH IN NAMED\n\n(1) ${allPerameters.borrowerName}\n\n\[Borrower]\n\n\(2)${allPerameters.coBorrowername}\n\n\[Co-Borrower]\n\n\(3)${allPerameters.coBorrowername2}\n\n\[2nd Co-Borrower]\n\n`, {
    lineGap: 2,
    align: "left",
    width: 500, // Set a maximum width
    });
    
    //addFooter();
    
//     //------------------------------------- new page -----------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(9);
    
    doc
    .fontSize(9)
    .font('Helvetica-Bold')
    .text(`DEMAND PROMISSORY NOTE`, startX, doc.y, { align: "center", width: 500 });
    doc.moveDown(1);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`Place:  ${allPerameters.placeOfExecution} \n\n Date: ${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
    doc.moveDown(2);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`ON DEMAND,I/We (1) ${allPerameters.borrowerName} (2) ${allPerameters.coBorrowername} (3) ${allPerameters.coBorrowername2}  `, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(1);
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`${allPerameters.borrowerName}, Residing At ${allPerameters.borroewraddress}`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(3);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`(Hereinafter referred to as “Borrowers”/”Co-Borrowers”/”Guarantors” which term shall, unless repugnant to the context be deemed to include in case of (a) an individual, my/ our heirs, legal representatives, executors, administrators and permitted assigns, (b) a proprietorship firm, the proprietor(ess) (both in my/our personal capacity and as proprietor(ess) of the concern) and my/our heirs, legal representatives, executors, administrators, permitted assigns and successors of the concern, (c) a company, its successors and permitted assigns, (d) a limited liability partnership, its successors and permitted assigns, (e) a partnership firm, any or each of the partners and survivor(s) of them and the partners from time to time (both in their personal capacity and as partners of the firm) and their respective heirs, legal representatives , executors, administrators, permitted assigns and successors of the firm) jointly and severally promise to pay to `,
      startX, // Starting X position
    doc.y, // Current Y position
    {
      align: "justify", // Align text for justification
      width: 500,      // Set a maximum width
      lineGap: 2,
      continued:true      // Optional line spacing
    }
    )
    .font('Helvetica-Bold')

    .text(`RATNAAFIN CAPITAL PRIVATE LIMITED,`,
      startX, // Starting X position
      doc.y, // Current Y position
      {
        align: "justify", // Align text for justification
        width: 500,      // Set a maximum width
        lineGap: 2,
        continued:true      // Optional line spacing
      }
      ) 
      .font('Helvetica')

      .text(` a company incorporated under the provisions of the Companies Act, 2013, having its registered office at 402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place Near Hyatt Hotel, New Delhi- 110066, Delhi, India and corporate office at 2nd & 3rd Floor,The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India-380060 (hereinafter referred to as the “Lender”, which expression shall, unless repugnant to the context, include its successors and assigns) the sum of Rs. `,
        startX, // Starting X position
    doc.y, // Current Y position
    {
      align: "justify", // Align text for justification
      width: 500,      // Set a maximum width
      lineGap: 2,
      continued:true
          // Optional line spacing
    }
    ) 
    .font('Helvetica-Bold')

    .text(` ${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord}) `,
        startX, // Starting X position
    doc.y, // Current Y position
    {
      align: "justify", // Align text for justification
      width: 500,      // Set a maximum width
      lineGap: 2,
      continued:true
          // Optional line spacing
    }
    )  
    .font('Helvetica')

    .text(`and with rate of interest at ${allPerameters.rateOfInterest}% Per Annum (FRR – 19.20% + ${allPerameters.interestType1}%) and/or such other rate as RCPL may ix from time to time for value received (to be paid monthly and to be calculated on the basis of 365 (three hundred and sixty five days)) and other amounts payable to the Lender in terms of the loan agreement dated ${allPerameters.agreementdate}, executed by and amongst the Borrowers and the Lender`,
      startX, // Starting X position
  doc.y, // Current Y position
  {
    align: "justify", // Align text for justification
    width: 500,      // Set a maximum width
    lineGap: 2,
        // Optional line spacing
  }
  ) ;
    
    doc.moveDown(3); // Move down after the text block
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Presentment for payment, notice of non-payment and noting and protest of the note are hereby unconditionally and irrevocably waived.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    // paymentTable
    
    function presentment(tableData) {
    // Add Table Header
    const startX = 50; // Starting X position for the box
    let startY = doc.y + 10; // Starting Y position for the box
    const boxWidth = 500; // Adjust the width of the box as per your need
    
    // Calculate the total height needed for the entire box
    let totalHeight = 0;
    
    // Calculate the height for each row and determine the total height of the box
    tableData.forEach((row) => {
    const rowHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(row.field1, { width: boxWidth }) + 40; // Add padding
    
    totalHeight += rowHeight; // Accumulate the total height
    });
    
    // Draw the outer rectangle for the box
    doc
    .fillColor("#f0f0f0") // Box background color
    .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    .stroke("black") // Border color
    .fill();
    
    // Loop through the data and draw the text inside the box
    tableData.forEach((row, rowIndex) => {
    // Calculate row height based on the content
    const rowHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(row.field1, { width: boxWidth }) + 40; // Add padding
    
    // Alternate row background color (optional)
    doc
      .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff") // Alternate row colors
      .rect(startX, startY, boxWidth, rowHeight) // Draw rectangle for each row
      .stroke("black") // Border color for each row
      .fill();
    
    // Draw the text in the box
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(row.field1, startX + 5, startY + 5, {
        baseline: "hanging",
        width: boxWidth - 10, // Adjust width to provide padding inside the box
        align: "left", // Align text to the left
      });
    
    // Move to the next row
    startY += rowHeight;
    });
    }


    
    // const presentmentpayment = [
    // { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
    // { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
    // { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
    // ];
    
    // presentment(presentmentpayment);

    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the Borrower and the Borrower has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`,{ align: "left", });
    doc.moveDown(1);
    // presentmentpayment
    //addFooter();
    
    
//     // ------------------------------------------------------ new page ------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(9);
    
    doc
    .fontSize(9)
    .font('Helvetica-Bold')
    .text(`LETTER OF CONTINUITY FOR DEMAND PROMISSORY NOTE`, startX, doc.y, { align: "center", width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`Place: ${allPerameters.placeOfExecution} \n\n  Date: ${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`To,`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Ratnaafin Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);

    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
     doc.moveDown(2)

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`Dear Sirs, \n\n\n I/We (1) ${allPerameters.borrowerName} (2)${allPerameters.coBorrowername} (3)${allPerameters.coBorrowername2} ,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`${allPerameters.borrowerName}, Residing At ${allPerameters.borroewraddress}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(4);
    
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`(Hereinafter referred to as “Borrowers”/”Co-Borrowers”/”Guarantors” which term shall, unless repugnant to the context be deemed to include in case (a) an individual, his/her heirs, legal representatives, executors, administrators and permitted assigns, (b) a proprietorship firm, the proprietor(ess) (both in my/our personal capacity and as proprietor(ess) of the concern) and his/her heirs, legal representatives, executors, administrators, permitted assigns and successors of the concern, (c) a company, its successors and permitted assigns, (d) a limited liability partnership, its successors and permitted assigns, (e) a partnership firm, any or each of the partners and survivor(s) of them and the partners from time to time (both in their personal capacity and as partners of the firm) and their respective heirs, legal representatives, executors, administrators, permitted assigns and successors of the firm) have executed a Demand Promissory Note for Rs. `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
    .font('Helvetica-Bold')

      .text(`${allPerameters.loanAmount}/- (${allPerameters.loanAmountInWord}) `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
      .font('Helvetica')

      .text(` and with rate of interest at ${allPerameters.rateOfInterest}% Per Annum and/or such other rate as `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
      .font('Helvetica-Bold')
      .text(`RCPL `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
      .font('Helvetica')
      .text(`may fix from time to time for value received, dated ${allPerameters.agreementdate} duly signed and delivered by me/us to you, as security for the repayment of all amounts due and/or payable by us under the loan agreement dated ${allPerameters.agreementdate} and/or any amendment(s)/addendum(s) thereto (“Loan Agreement”).\n\n\nWe hereby irrevocably and unconditionally, agree, confirm and undertake that the said Demand Promissory Note shall operate as a continuing security to you to be enforceable for the repayment of the ultimate balance and/or all sums remaining unpaid under the Loan Agreement now or hereafter,including all interest to become payable under the Loan Agreement, and also all monies lent, advanced, paid or incurred in respect of/under the Loan Agreement or which may in future be advanced or incurred together with interest, discount, commission and other charges and all other costs, charges and expenses which may be or become payable in connection therewith.\n\n\nThe Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the Borrower and the
       Borrower has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.\n\n\n Thanking you `, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    
    // presentment(presentmentpayment);
    
    //addFooter();
    
    
//     // ----------------------------------------------new page ------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(9);
    
    doc
    .fontSize(9)
    .font('Helvetica-Bold')
    .text(`UDC Covering Letter (APPLICANT)`, startX, doc.y, { align: "center",underline: true, width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`To,`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Ratnaafin Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(1);

    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`Sirs, \n `, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`subject:Credit Facility of Rs. ${allPerameters.loanAmount}(${allPerameters.loanAmountInWord}) sanctioned to ${allPerameters.borrowerName}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`In consideration of and towards repayment of the aforesaid credit facilities granted/agreed to be granted by Ratnaafin Capital Pvt. Ltd (Lender)\n I/We, ${allPerameters.borrowerName} hereby inter alia deliver to the Lender the cheques (as detailed hereunder) drawn in favour of the Lender being blank as regards the date of the cheque and the amount.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    
    function chequeTable(tableData) {
    // Add Table Header
    const startX = 50; // Starting X position for the box
    let startY = doc.y + 10; // Starting Y position for the box
    
    // Define custom column widths
    const columnWidths = {
        field1: 50,   // Sr. No.
        field2: 100,  // Cheque No.
        field3: 200,  // Bank Details
        field4: 150,  // Name of the account holder
    };
    
    // Function to calculate row height dynamically based on content
    const calculateRowHeight = (row) => {
        let maxHeight = 0;
        Object.keys(row).forEach((field) => {
            const text = row[field] || ''; // Default to empty string if no value
            const columnWidth = columnWidths[field] || 100; // Default width
            const textHeight = doc
                .font('Helvetica')
                .fontSize(7.2)
                .heightOfString(text, { width: columnWidth }) + 10; // Add padding
            maxHeight = Math.max(maxHeight, textHeight);
        });
        return maxHeight;
    };
    
    // Calculate total height for the table
    let totalHeight = 0;
    tableData.forEach(row => {
        totalHeight += calculateRowHeight(row);
    });
    
    // Draw the outer rectangle for the box
    doc
        .fillColor("#f0f0f0")
        .rect(startX, startY, 500, totalHeight) // Adjust box width to the total width of columns
        .stroke("black")
        .fill();
    
    // Loop through the data and draw the text inside the box
    tableData.forEach((row, rowIndex) => {
        let currentX = startX; // Reset the starting X position for each row
        const rowHeight = calculateRowHeight(row);
    
        // Draw rectangles and fill in data
        Object.keys(columnWidths).forEach((field) => {
            const columnWidth = columnWidths[field];
            const text = row[field] || ''; // Handle blank fields
    
            // Draw rectangle for the field box
            doc
                .fillColor("#f5f5f5") // Background color for the box
                .rect(currentX, startY, columnWidth, rowHeight)
                .stroke("black")
                .fill();
    
            // Set font style for header or regular row
            const isHeader = rowIndex === 0; // Check if it's the header row
            doc
                .font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
                .fillColor("black")
                .fontSize(7.2);
    
            // Draw the field text, align left
            doc.text(text, currentX + 5, startY + 5, {
                baseline: "hanging",
                width: columnWidth - 10, // Adjust width for padding
                align: 'left', // Align text to the left
            });
    
            currentX += columnWidth; // Update X for next field
        });
    
        // Move to the next row
        startY += rowHeight;
    });
    }
    
    // Updated applicant table with dynamic fields
    const applicantTable = [
    { field1: "Sr. No.", field2: "Cheque No.", field3: "Bank Details", field4: "Name of the account holder" },
    { field1: "1", field2: `${allPerameters.table?.[0]?.appchequeNo1}`, field3: `${allPerameters.table?.[0]?.bankDetail1},A/c No.${allPerameters.table?.[0]?.bankaccNo1}`, field4: `${allPerameters.table?.[0]?.accountHolderName1}` },
    { field1: "2", field2: `${allPerameters.table?.[1]?.appchequeNo2}`, field3: `${allPerameters.table?.[1]?.bankDetail1},A/c No.${allPerameters.table?.[1]?.bankaccNo2}`, field4: `${allPerameters.table?.[1]?.accountHolderName2}` },
    { field1: "3", field2: `${allPerameters.table?.[2]?.appchequeNo3}`, field3: `${allPerameters.table?.[2]?.bankDetail1},A/c No.${allPerameters.table?.[2]?.bankaccNo3}`, field4: `${allPerameters.table?.[2]?.accountHolderName3}` },
    { field1: "4", field2: `${allPerameters.table?.[3]?.appchequeNo4}`, field3: `${allPerameters.table?.[3]?.bankDetail4},A/c No.${allPerameters.table?.[3]?.bankaccNo4}`, field4: `${allPerameters.table?.[3]?.accountHolderName4}` },
    { field1: "5", field2:`${allPerameters.table?.[4]?.appchequeNo5}`, field3: `${allPerameters.table?.[4]?.bankDetail5},A/c No.${allPerameters.table?.[4]?.bankaccNo5}`, field4: `${allPerameters.table?.[4]?.accountHolderName5}` },
    // { field1: "6", field2: `${allPerameters.table?.[5]?.appchequeNo6}`, field3: `${allPerameters.table?.[5]?.bankDetail6}`, field4: `${allPerameters.table?.[5]?.accountHolderName6}` },
    // { field1: "7", field2: `${allPerameters.table?.[6]?.appchequeNo7}`, field3: `${allPerameters.table?.[6]?.bankDetail7}`, field4: `${allPerameters.table?.[6]?.accountHolderName7}` },
    ];
    
    // Call the function to create the table
    chequeTable(applicantTable);
    doc.moveDown(2);
    doc.moveDown(2);

    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`I/we do hereby agree and acknowledge in accordance with the provisions of section 20 of the Negotiable Instruments Act ("The Act") the Lender in the present case as the holder of the said cheques shall have the authority to complete the said cheques.\n\n In addition to the express provisions of the Act as mentioned above authorizing the Lender to complete the said cheques to the extent of credit facility outstanding including any interest, penal charges , other charges, etc. that the Lender may incur I / We hereby unconditionally and irrevocably authorize and confirm the authority of the Lender to fill in the date and the amount on the said cheques and to present the same for payment.\n\nI/We hereby undertake to be absolutely bound as the drawer of the said cheques so completed by the Lender as above and shall be liable in the same manner as the said cheques were drawn and completed by me/us and shall ensure that the said cheques are honored on presentation for payment\n\nI/We agree and acknowledge that any dishonoring of the said cheques would make me/us liable including under the provisions of section 138 of the Negotiable Instruments Act,1881.\n\nFor and on behalf of:
    `, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`___________________________`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`I/we do hereby agree and acknowledge in accordance with the provisions of section 20 of the Negotiable Instruments Act ("The Act") the Lender in the present case as the holder of the said cheques shall have the authority to complete the said cheques.\n\n In addition to the express provisions of the Act as mentioned above authorizing the Lender to complete the said cheques to the extent of credit facility outstanding including any interest, penal charges , other charges, etc. that the Lender may incur I / We hereby unconditionally and irrevocably authorize and confirm the authority of the Lender to fill in the date and the amount on the said cheques and to present the same for payment.\n\nI/We hereby undertake to be absolutely bound as the drawer of the said cheques so completed by the Lender as above and shall be liable in the same manner as the said cheques were drawn and completed by me/us and shall ensure that the said cheques are honored on presentation for payment\n\nI/We agree and acknowledge that any dishonoring of the said cheques would make me/us liable including under the provisions of section 138 of the Negotiable Instruments Act,1881.\n\nFor and on behalf of:
// `, startX, doc.y, { align: "left",align: "justify", width: 500 });
//  doc.moveDown(1);

  //addFooter();

//   //------------------------------- new page 12 ----------------------------------------------

  doc.addPage();
  // addLogo();
  //drawBorder();
  doc.moveDown(9);

  doc
  .fontSize(9)
  .font('Helvetica-Bold')
  .text(`UDC Covering Letter (co-applicant/Guarantor)`, startX, doc.y, { align: "center",underline: true, width: 500 });
  doc.moveDown(2);

  doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`To,`, startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(1);

  doc
  .fontSize(8)
  .font('Helvetica-Bold')
  .text(`Ratnaafin Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(1);

  doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`Dear Madam/Sir, \n `, startX, doc.y, { align: "left",align: "justify", width: 500 });
  doc.moveDown(2);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`subject:Credit Facility of Rs. ${allPerameters.loanAmount}(${allPerameters.loanAmountInWord}) sanctioned to ${allPerameters.borrowerName}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
  doc.moveDown(1);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`In consideration of and towards repayment of the aforesaid credit facilities granted/agreed to be granted by Ratnaafin Capital Pvt. Ltd Lender I/We, ${allPerameters.guarantorname} hereby inter alia deliver to the Lender the cheques (as detailed hereunder) drawn in favour of the Lender being blank as regards the date of the cheque and the amount.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
   doc.moveDown(1);


   function ChequETaBLE(tableData) {
    // Add Table Header
    const startX = 50; // Starting X position for the box
    let startY = doc.y + 10; // Starting Y position for the box
    
    // Define custom column widths
    const columnWidths = {
        field1: 50,   // Sr. No.
        field2: 100,  // Cheque No.
        field3: 200,  // Bank Details
        field4: 150,  // Name of the account holder
    };
    
    // Function to calculate row height dynamically based on content
    const calculateRowHeight = (row) => {
        let maxHeight = 0;
        Object.keys(row).forEach((field) => {
            const text = row[field] || ''; // Default to empty string if no value
            const columnWidth = columnWidths[field] || 100; // Default width
            const textHeight = doc
                .font('Helvetica')
                .fontSize(7.2)
                .heightOfString(text, { width: columnWidth }) + 10; // Add padding
            maxHeight = Math.max(maxHeight, textHeight);
        });
        return maxHeight;
    };
    
    // Calculate total height for the table
    let totalHeight = 0;
    tableData.forEach(row => {
        totalHeight += calculateRowHeight(row);
    });
    
    // Draw the outer rectangle for the box
    doc
        .fillColor("#f0f0f0")
        .rect(startX, startY, 500, totalHeight) // Adjust box width to the total width of columns
        .stroke("black")
        .fill();
    
    // Loop through the data and draw the text inside the box
    tableData.forEach((row, rowIndex) => {
        let currentX = startX; // Reset the starting X position for each row
        const rowHeight = calculateRowHeight(row);
    
        // Draw rectangles and fill in data
        Object.keys(columnWidths).forEach((field) => {
            const columnWidth = columnWidths[field];
            const text = row[field] || ''; // Handle blank fields
    
            // Draw rectangle for the field box
            doc
                .fillColor("#f5f5f5") // Background color for the box
                .rect(currentX, startY, columnWidth, rowHeight)
                .stroke("black")
                .fill();
    
            // Set font style for header or regular row
            const isHeader = rowIndex === 0; // Check if it's the header row
            doc
                .font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
                .fillColor("black")
                .fontSize(7.2);
    
            // Draw the field text, align left
            doc.text(text, currentX + 5, startY + 5, {
                baseline: "hanging",
                width: columnWidth - 10, // Adjust width for padding
                align: 'left', // Align text to the left
            });
    
            currentX += columnWidth; // Update X for next field
        });
    
        // Move to the next row
        startY += rowHeight;
    });
    }

// Updated applicant table with dynamic fields
const guarantorTable = [
  { field1: "Sr. No.", field2: "Cheque No.", field3: "Bank Details", field4: "Name of the account holder" },
  { field1: "1", field2: `${allPerameters.tableno2?.[0]?.guchequeNo1}`, field3: `${allPerameters.tableno2?.[0]?.gubankDetail1},A/c No.${allPerameters.tableno2?.[0]?.gubankaccNo1}`, field4: `${allPerameters.tableno2?.[0]?.guaccountHolderName1}` },
  { field1: "2", field2: `${allPerameters.tableno2?.[1]?.guchequeNo2}`, field3: `${allPerameters.tableno2?.[1]?.gubankDetail2},A/c No.${allPerameters.tableno2?.[1]?.gubankaccNo2}`, field4: `${allPerameters.tableno2?.[1]?.guaccountHolderName2}` },
  { field1: "3", field2: ``, field3: ``, field4: `` },
  { field1: "4", field2: ``, field3: ``, field4: `` },
  { field1: "5", field2:``, field3: ``, field4: `` },
  // { field1: "6", field2: `${allPerameters.tableno2?.[5]?.guchequeNo6}`, field3: `${allPerameters.tableno2?.[5]?.gubankDetail6}`, field4: `${allPerameters.tableno2?.[5]?.guaccountHolderName6}` },
  // { field1: "7", field2: `${allPerameters.tableno2?.[6]?.guchequeNo7}`, field3: `${allPerameters.tableno2?.[6]?.gubankDetail7}`, field4: `${allPerameters.tableno2?.[6]?.guaccountHolderName7}` },
  ];
// Call the function to create the table
ChequETaBLE(guarantorTable);
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`I/we do hereby agree and acknowledge in accordance with the provisions of section 20 of the Negotiable Instruments Act ("The Act") the Lender in the present case as the holder of the said cheques shall have the authority to complete the said cheques.\n\n In addition to the express provisions of the Act as mentioned above authorizing the Lender to complete the said cheques to the extent of credit facility outstanding including any interest, penal charges , other charges, etc. that the Lender may incur I / We hereby unconditionally and irrevocably authorize and confirm the authority of the Lender to fill in the date and the amount on the said cheques and to present the same for payment.\n\nI/We hereby undertake to be absolutely bound as the drawer of the said cheques so completed by the Lender as above and shall be liable in the same manner as the said cheques were drawn and completed by me/us and shall ensure that the said cheques are honored on presentation for payment\n\nI/We agree and acknowledge that any dishonoring of the said cheques would make me/us liable including under the provisions of section 138 of the Negotiable Instruments Act,1881.\n\nFor and on behalf of:
`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
    .fontSize(8)
    .font('Helvetica')
    .text(`___________________________`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);

  //addFooter();

  //--------------------------------disbursment demand for our loan-------------------
  doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`DISBURSEMENT DEMAND FOR OUR LOAN`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`The Manager,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`RATNAAFIN CAPITAL PRIVATE LIMITED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });


doc.moveDown(3);


doc
.fontSize(8)
.font('Helvetica')
.text(`Dear Sir,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
 .fontSize(8)
 .font('Helvetica')
 .text(`We have been sanctioned a Loan against Property from Ratnaafin Capital Private limited for an amount of Rs. `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(`${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord}) `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica')
 .text(`for the purpose of `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(`${allPerameters.specifiedPurpose}`, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica')
 .text(`. We have accepted all terms and conditions for the Agri Micro Loan against Property against property and executed all the documents for the loan.`, startX, doc.y, { align: "left",align: "justify", width: 500 });

 doc.moveDown(3);
 
 doc
 .fontSize(8)
 .font('Helvetica')
 .text(`We request a disbursement for an amount of Rs. `, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(`${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord})`, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica')
 .text(` are deducting all the necessary fees & charges, in favour of Ratnaafin Capital Private Limited from our Loan account number`, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(` ${allPerameters.sanctionLetterNo}`, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica')
 .text(` as a full/part disbursement towards this Loan.`, startX, doc.y, { align: "left", width: 500 })
 doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`We also agree to pay interest on the amount disbursed as per our request starting from the date of disbursement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`Thanking you,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(`Yours Faithfully,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(`Primary Borrower Name :${allPerameters.borrowerName}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

// const confirmationTable = [
//   { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
//   { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
//   { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
// ];

// presentment(confirmationTable);
//addFooter();

// // -------------------------------------------new page 13 --------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`VERNACULAR CONFIRMATION LETTER`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`To,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`RATNAAFIN CAPITAL PRIVATE LIMITED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`201-202, Shilp Aperia,\n Near Ashok Vatika,\n Bopal-Ambli Road,\n Ahmedabad, Gujarat – 380054`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);


doc
.fontSize(8)
.font('Helvetica')
.text(`I/We hereby acknowledge and confirm that I/we have received the copy of the loan Agreement dated ${allPerameters.agreementdate} executed between `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
.font('Helvetica-Bold')
.text(` RCPL`, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
.font('Helvetica')
.text(`and me/us ('Loan Agreement') and the contents of the loan Agreement have been fully explained to and understood by me/us at the time of availing the loan in the language understood by me/us) \n\n I/We further confirm that am/are fully aware of and completely understand the rights and obligations contained in the loan documents mentioned below:`, startX, doc.y, { align: "left",align: "justify", width: 500 });


doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(` 1. Loan application form\n 2. KYC form\n 3. Sanction letter\n 4. DP Note\n 5. Declaration cum Undertaking Cum Authority by the Borrower,Co-Borrower & Guarantor\n 6. Guarantee Agreement \n 7. Loan Facility Agreement\n 8. Mortgage Deed \n 9. Any other document related to loan\n10. Declaration of Immoval property.\n11.Interest rate Declaration.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(3);

doc
.fontSize(8)
.font('Helvetica')
.text(`The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The the Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the the Borrower / Co-borrowers / Guarantors and the the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(3);
doc
.fontSize(8)
.font('Helvetica-Bold')
.text(
  `Name of the Borrower : ${allPerameters.borrowerName}` )
  .text(
    `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` )
    .text(
      `2nd CO-BORROWERS NAME : ${allPerameters.coBorrowername2}` )
      // .text(
      //   `GUARANTOR'S NAME : ${allPerameters.guarantorname}` )

//addFooter();
// //---------------------------------------------------- new page 14-------------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`VERNACULAR DECLARATION FORM`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);


function declarationTableFunction(tableData) {
  const startX = 50;
  let startY = doc.y + 10;

  const columnWidths = {
    field1: 50,
    field2: 100,
    field3: 330,
  };

  // Define min and max row height to avoid extremes
  const MIN_ROW_HEIGHT = 15;
  const MAX_ROW_HEIGHT = 45;

  // Function to calculate row height based on text content
  const calculateRowHeight = (row) => {
    let maxHeight = 0;
    Object.keys(row).forEach((field) => {
      const text = row[field] || '';
      const columnWidth = columnWidths[field] || 100;

      // Calculate the text height for each field
      const textHeight = doc
        .font(field === 'field3' ? fontKerlaTamil : 'Helvetica')
        .fontSize(7.2)
        .heightOfString(text, { width: columnWidth });

      // Track the highest text height in the row
      maxHeight = Math.max(maxHeight, textHeight);
    });

    // Ensure the row height stays within the defined min and max limits
    return Math.max(MIN_ROW_HEIGHT, Math.min(maxHeight, MAX_ROW_HEIGHT));
  };

  const totalWidth = Object.values(columnWidths).reduce((sum, width) => sum + width, 0);

  tableData.forEach((row, rowIndex) => {
    let currentX = startX;
    const rowHeight = calculateRowHeight(row); // Calculate the row height based on text content

    // Set up the table border at the beginning
    doc
      .lineWidth(0.25)
      .rect(startX, startY, totalWidth, rowHeight)
      .stroke("black");

    Object.keys(columnWidths).forEach((field) => {
      const columnWidth = columnWidths[field];
      const content = row[field] || '';

      doc
        .lineWidth(0.25)
        .rect(currentX, startY, columnWidth, rowHeight)
        .stroke("black");

      const isHeader = rowIndex === 0;
      const paddingTop = 2;  // Adjust padding from the top (increase if needed)
      const textYPosition = startY + paddingTop;

      if (field === 'field1' && content) {
        doc.image(content, currentX + 5, textYPosition + (rowHeight - 8) / 2, { width: 8, height: 8 });
      } else {
        doc
          .font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
          .fillColor("black")
          .fontSize(7.2);

        const text = content || '';
        if (field === 'field3') {
          // Checking for specific languages to apply respective fonts
          if (/[\u0C00-\u0C7F]/.test(text)) {  // Telugu Unicode range
            doc.font(fontTelugu)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else if (/[\u0D00-\u0D7F]/.test(text)) {  // Malayalam Unicode range
            doc.font(fontMalayam).text(text, currentX + 3, textYPosition, {
              baseline: "top",
              width: columnWidth - 6,
              align: 'left',
            });
          } else if (/[\u0C80-\u0CFF]/.test(text)) {  // Kannada Unicode range
            doc.font(fontKannada).text(text, currentX + 3, textYPosition, {
              baseline: "top",
              width: columnWidth - 6,
              align: 'left',
            });
          } else if (/[\u0A80-\u0AFF]/.test(text)) {  // Gujarati Unicode range
            doc.font(fontGujarati)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else if (/[\u0600-\u06FF]/.test(text)) {  // Urdu Unicode range
            doc.font(fontUrdu)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'right',
               });
          } else if (/[\u0A00-\u0A7F]/.test(text)) {  // Punjabi Unicode range
            doc.font(fontPanjabi)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else if (/[\u0B80-\u0BFF]/.test(text)) {  // Tamil Unicode range
            doc.font(fontKerlaTamil).text(text, currentX + 3, textYPosition, {
                baseline: "top",
                width: columnWidth - 6,
                align: 'left',
            });
          } else if (/[\u0900-\u097F]/.test(text)) {  // Hindi Unicode range
            doc.font(fontHindi)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else  if (/[\u0B00-\u0B7F]/.test(text)) {  // Odia Unicode range
            doc.font(fontOriya)  // Make sure 'fontOdia' is defined and points to the correct font file
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
           } else if (/[\u0900-\u097F]/.test(text)) {  // Marathi (Devanagari Unicode range)
            doc.font(fontMarathi)  // Ensure you have the Marathi font file available
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
        } else if (/[\u0980-\u09FF]/.test(text)) {  // Bengali Unicode range
          doc.font(fontBengali)  // Ensure you have the Bengali font file available
             .text(text, currentX + 3, textYPosition, {
               baseline: "top",
               width: columnWidth - 6,
               align: 'left',
             });
        }else {
            doc.font('Helvetica')
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          }
        } else {
          doc.font('Helvetica')
             .text(text, currentX + 3, textYPosition, {
               baseline: "top",
               width: columnWidth - 6,
               align: 'left',
             });
        }
      }

      currentX += columnWidth;
    });

    startY += rowHeight; // Adjust to the row's actual height
  });
}

const gujratiFont = [
'આ અરજી/કરાર/પત્ર/નિયમો અને શરતોનો સામગ્રી અરજીકર્તા/ઋણગ્રાહક અને સહ-ઋણગ્રાહકને અંગ્રેજીમાં વાંચીને સમજાવી',
'  અને વ્યાખ્યા કરવામાં આવી છે અને અરજીકર્તા/ઋણગ્રાહક અને સહ-ઋણગ્રાહક દ્વારા તેને સમજવામાં આવી છે',
]

const declarationTable = [
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "English", 
    field3: "The content of this Application/ Agreement/letter/Terms and Conditions has been read out, explained and interpreted to the applicant(s)/Borrower and to the Co-Borrower(s) in English and understood by the applicant(s)/Borrower and Co-Borrower(s).",  // English text
  },
  { 
    field1: CheckedLogo,  // Path to the image file (not doc.image)
    field2: "Hindi", 
    field3: "इसआवेदन / समझौ ते / पत्र / नि यमों औमों रशर्तों की सा मग्री को आवेदक (ओं)ओं / उधा रकर्ता औरअंग्रेजीग्रे जीमेंसह-उधा रकर्ता (ओं)ओं को समझा औरसमझा यागयाहैऔहै रआवेदक (ओं)ओं याउधा रकर्ता द्वा रा समझा गया है ।",  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Punjabi", 
    field3: "ਇਸਬਿ ਨੈ-ਪੱਤਰ / ਸਮਝੌਤੇਝੌਤੇ/ ਪੱਤਰ / ਨਿ ਯਮਾਂ ਅਮਾਂ ਤੇਸ਼ਰਤਾਂ ਦੀਤਾਂ ਦੀਸਮੱਗਰੀ ਨੂੰਬਿ ਨੈਕਾ ਰ /ਉਧਾ ਰਲੈਣਵਾ ਲੇਅਤੇਅੰਗ੍ਰੇਜ਼ੀ ਵਿ ਚਸਹਿ -ਉਧਾ ਰਲੈਣਵਾ ਲੇਨੂੰਸਮਝਾ ਕੇਸਮਝਾ ਇਆਗਿ ਆਹੈਅਤੇਬਿ ਨੈਕਾ ਰਦੁਆਰਾ ਸਮਝੇਗਝੇ ਏਅਤੇਸਹਿ -ਉਧਾ ਰਲੈਣਵਾ ਲੇ।",  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Kannada", 
    field3: "ಈ ಅಪ್ಲಿಕೇ ಶನ್/ಒಪ್ಪಂ ದ/ಪತ್ರ / ನಿಯಮಗಳುಮತ್ತು ಷರತ್ತು ಗಳವಿಷಯವನ್ನು ಅರ್ಜಿ ದಾ ರ (ರು )/ ಸಾ ಲಗಾರಮತ್ತು ಇಂ ಗ್ಲಿಷ್ನಲ್ಲಿಸಹ-ಸಾ ಲಗಾರ(ಗಳು)ಗೆಓದಿ, ವಿವರಿಸಲಾ ಗಿದೆಮತ್ತು ವ್ಯಾ ಖ್ಯಾ ನಿಸಲಾ ಗಿದೆಮತ್ತು ಅರ್ಜಿ ದಾ ರರು (ಗಳು ) /ಸಾ ಲಗಾರರಿಂ ದಅರ್ಥ ಮಾ ಡಿಕೊ ಳ್ಳಲಾ ಗಿದೆಮತ್ತು ಸಹ-ಸಾ ಲಗಾ ರ (ಗಳು).  ",  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Telugu", 
    field3: "ఈ అప్లికేప్లిషన్ / ఒప్పం దం / లేఖ / నిబం ధనలుమరియుషరతులయొక్క కం టెం ట్దరట్ద ఖాస్తుదారు(లు) / రుణగ్ర హీతమరియుఆం గ్లం లోసహ-రుణగ్ర హీత (ల)కుచదవబడిం ది, వివరిం చబడిం దిమరియువివరిం చబడిం దిమరియుదరఖాస్తుదారు(లు) / రుణగ్ర హీతఅర్థం చేసుకున్నా రుమరియుసహ-రుణగ్ర హీత (లు)."
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Tamil", 
    field3: "இந்தவிண்ணப்பம் / ஒப்பந்தம் / கடிதம்வி தி முறைகள்மற்றும்நி பந்தனை களி ன்உள்ளடக்கம்விண்ணப்பதா ரர்(கள்)/கடன்வா ங்குபவர் மற்றும்இணைக்கடன்வா ங்குபவர்(கள்) ஆகி யோ ருக்குஆங்கி லத்தி ல்படித்துவி ளக்கப்பட்டுவி ளக்கம்அளி க்கப்பட்டுள்ளதுமற்றும்விண்ணப் பதா ரர்(கள்)/கடன்வா ங்குபவர்புர",  // Tamil text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Malayalam", 
    field3: 'ഈ ആപ്ലി ക്കേ ഷന്റെ ഉള്ളടക്കം / കരാ ർ / കത്ത് / നി ബന്ധനകളും വ്യ വസ്ഥകളും അപേ ക്ഷകന് / കടം വാ ങ്ങു ന്നയാ ൾക്കും ഇം ഗ്ലീ ഷി ൽ സഹ-കടം വാ ങ്ങു ന്നയാ ൾക്കും വാ യിക്കു കയും വി ശദീ കരിക്കു കയും വ്യാ ഖ്യാ നിക്കു കയും ചെ യ്തു കൂ ടാ തെ അ പേ ക്ഷകൻ (ങ്ങൾ) / കടം വാ ങ്ങു ന്നയാ ൾ മനസ്സി ലാ ക്കു കയും ചെ യ്യു ന്നു . ഒപ്പം സഹ-കടം വാ ങ്ങു ന്നവരും .',  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Oriya", 
    field3: 'ଏହିଆହି ବେ ଦନ / ଚୁକ୍ତିନା ମା / ଚିଠିଚି ଠି/ ସର୍ତ୍ତା ବଳୀ ଏବଂ ଚୁକ୍ତିନା ମା ଗୁଡିକଡି ଆବେ ଦନକା ରୀ (()) / orrଣଗ୍ରହୀ ତା ଏବଂ ସହ-orrଣଗ୍ରହୀ ତା ଙ୍କୁଇଂ ରା ଜୀ ରେ ପ read ା ଯା ଇଛି,ଛିବ୍ୟା ଖ୍ୟା କରା ଯା ଇଛିଏବଂ ଆବେ ଦନକା ରୀ (ମା ନେ ) / orrଣଦା ତା ଦ୍ୱା ରା ବୁଝିଛଝିନ୍ତିଏନ୍ତିବଂ ସହ-orrଣଦା ତା (ଗୁଡିକଡି ) |',  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Marathi", 
    field3: 'याअर्जा ची / करा रा ची / पत्रा ची / अटी व शर्तीं ची मा हि ती वा चूनका ढली गेली आहे,हेअर्जदा रा ला /कर्जदा रा ला आणि इंग्रजी मध्येसह-कर्जदा रा ला /केली आहे व अर्जदा रा ने /कर्जदा रा नेसमजूनघेतली आहे.हेआणि सह-कर्जदा र',  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Gujarati", 
    field3: gujratiFont.join('\n'),  // English text
  },
  {
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Urdu", 
    field3: "درخواست/معاہدہ/خط/شرائط و ضوابط کا مواد درخواست دہندہ/قرض دہندہ اور شریک قرض دہندہ کو انگریزی میں پڑھ کر سنایا گیا، وضاحت کی گئی اور اس کی تشریح کی گئی اور درخواست دہندہ/قرض دہندہ اور شریک قرض دہندہ نے اسے سمجھ لیا۔",  // Urdu text
  },
];

// // Call the table function to render the data
declarationTableFunction(declarationTable);
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica')
.text(`___________________________`, startX, doc.y, { align: "left",underline: true, width: 500 });
doc.moveDown(0.5);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`Lender (Authorised Signatory`, startX, doc.y, { align: "left",underline: true, width: 500 });
doc.moveDown(1);
  
//addFooter();
// // -------------------------------------- new page ------------------------------------------------------------------

// doc.addPage();
// // addLogo();
// //drawBorder();
// doc.moveDown(10);

// const lenderpayment = [
//   { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
//   { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
//   { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
// ];

// presentment(lenderpayment);

//addFooter();

// // -------------------------------------- new page ------------------------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`Annexure-I`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`The Borrower and Co-Borrower(s) (“Borrowers”) hereby accept and acknowledge that they have been made aware of the terms set out in this Annexure below in accordance with applicable provisions under Reserve Bank of India (RBI) notification and that the terms set out in this Annexure shall from an integral part of this Loan Agreement (“Agreement”) executed between Borrowers and Ratnaafin Capital Private Limited (“the Company”/ “Ratnaafin Capital Pvt Ltd”/ “Lender”) on ${allPerameters.agreementdate}. `, startX, doc.y, { align: "left", width: 500,  align: "justify", })
doc.moveDown()
.fontSize(8)
.font('Helvetica')
.text(`Please note that Clause 1 and 2 of this Annexure may be amended in the Welcome Letter or Disbursement letter and/or by such additional amendments from time to time.\n\n 1. Due Dates of Repayment\n\n The Due Date of Repayment, Frequency of Repayment, Principal and Interest Amount* shall be as per the Schedule II attached hereof.\n\n *The principal and Interest amount indicated under Schedule II attached here to may change depending on the actual disbursement terms and conditions.\n\n 2.  Repayment Due Dates, in case, payment moratorium on principle and/or interest, if any, may be changed depending on the actual disbursement terms and conditions. * \n\n *In case of Interest Moratorium Period, the principal amount will continue to be paid.`, startX, doc.y, { align: "left", width: 500,  align: "justify", });
doc.moveDown(0.5);

function dateTableFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    const rowContent = row.field1 || ""; // Fallback to an empty string if field1 is undefined
    const rowHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowContent, { width: boxWidth - 10 }) + 9; // Add padding

    // Set row color to gray for specific field values, keep border black
    const rowColor = (rowContent === "Interest Moratorium Start Date" || rowContent === "Repayment Start Date")
      ? "#d3d3d3"  // Gray for specific fields
      : (rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff"); // Alternate colors for other rows

    // Draw the background rectangle for the row with gray fill color
    doc
      .lineWidth(0.5)
      .fillColor(rowColor) // Set the fill color to gray for specific fields
      .rect(startX, startY, boxWidth, rowHeight)
      .fill(); // Only fill, no stroke yet

    // Draw the black border for the row
    doc
      .lineWidth(0.5) // Black border color
      .stroke("black") // Black border color
      .rect(startX, startY, boxWidth, rowHeight) // Apply the black border
      .stroke(); // Stroke to outline the rectangle

    // Draw the text inside the row
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(rowContent, startX + 5, startY + 5, {
        baseline: "hanging",
        width: boxWidth - 10,
        align: "left",
      });

    // Move to the next row's starting Y position
    startY += rowHeight;
  });
}

const dateTable = [
  { field1: ` Interest Moratorium Start Date` },
  { field1: ``},
  { field1:  `Repayment Start Date` },
  { field1:  `` },

];

dateTableFunction(dateTable);
doc.moveDown(2);
doc
.fontSize(8)
.font('Helvetica')
.text(`3. Consequences of delayed Repayment- Classification as Special Mention Account (SMA) and Non-Performing Asset (NPA):\n\n In addition to the consequences of delayed or defaulted repayments under the Agreement, the Borrower’s account immediately on default shall be classified as Special Mention Accounts (“SMA”) or a Non-Performing Asset (“NPA”) on the following basis in accordance with RBI notifications and regulations:\n\nClassification of Special Mention Accounts and NPAs`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(0.2);

function revolvingFacilitiesFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;  // Total table width
  const minColWidth = 150; // Minimum width for columns
  const fixedColWidth = 230; // Fixed column width (each column)

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    const rowContent = row.field1 || ""; // Fallback to an empty string if field1 is undefined
    const rowValue = row.value || ""; // Value for the second column, fallback to empty string

    // Calculate the text height based on the content for both columns
    const rowContentHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowContent, { width: fixedColWidth - 10 });
    const rowValueHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowValue, { width: fixedColWidth - 10 });

    // Maximum row height (to keep row heights uniform)
    const rowHeight = Math.max(rowContentHeight, rowValueHeight) + 10; // Add padding

    // Set row color (alternating colors)
    const rowColor = (rowIndex === 0) ? "#d3d3d3" : (rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff");

    // Draw the background rectangle for the row with fill color
    doc
      .lineWidth(0.5)
      .fillColor(rowColor)
      .rect(startX, startY, boxWidth, rowHeight)
      .fill();

    // Draw the black border for the row
    doc
      .lineWidth(0.5)
      .stroke("black")
      .rect(startX, startY, boxWidth, rowHeight)
      .stroke();

    // Draw the text for the first column
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(rowContent, startX + 5, startY + 5, {
        baseline: "hanging",
        width: fixedColWidth - 10,
        align: "left",
      });

    // If there's a value for the second column, draw it
    if (rowValue) {
      doc
        .font(font)
        .font('Helvetica-Bold')
        .fillColor("black")
        .fontSize(7.2)
        .text(rowValue, startX + fixedColWidth + 5, startY + 5, {
          baseline: "hanging",
          width: fixedColWidth - 10,
          align: "left",
        });
    }

    // Draw the vertical line between the two columns
    doc
      .lineWidth(0.5)
      .stroke("black")
      .moveTo(startX + fixedColWidth, startY)  // Position of the first vertical line
      .lineTo(startX + fixedColWidth, startY + rowHeight) // Extend the line down
      .stroke();

    // Move to the next row's starting Y position
    startY += rowHeight;
  });
}

const revolvingFacilitiesTable = [
  { field1: "Loans other than revolving facilities" },
  { field1: "SMA Sub-categories", value: "Basis for classification – Principal or interest payment or any other amount wholly or partly overdue" },
  { field1: "SMA - 0", value:  ` Upto 30 days` },
  { field1: "SMA – 1", value: ` More than 31 days and upto 60 days` },
  { field1: "SMA – 2", value: ` More than 61 days and upto 90 days` },
  { field1: "NPA", value: ` More than 90 days` },
];

revolvingFacilitiesFunction(revolvingFacilitiesTable);

doc.moveDown(3);
doc
.fontSize(8)
.font('Helvetica')
.text(`The aforesaid categorization will apply only when the time intervals are continuous.\n\n\nFurther, the classifications shall be triggered/flagged by the Lender as part of its day- end processes irrespective of the time of running such processes. Similarly, classification of Borrower accounts as SMA as well as NPA shall be done as part of the day-end process for the relevant date and the SMA or NPA classification date shall be the calendar date for which the day-end process is run. In other words, the date of SMA/NPA shall reflect the asset classification status of an account at the day-end of that calendar date.\n\n\nExample: If the due date of a loan account is March 31,2021, and full dues are not received before the lending institution runs the day-end process for this date, the date of overdue shall be March 31, 2021. If it continues to remain overdue, then this account shall get tagged as SMA-1 upon running the day-end process on April 30, 2021 i.e. upon completion of 30 days of being continuously overdue.Accordingly, the date of SM A-1 classification for that account shall be April 30, 2021.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(0.2);

//addFooter();

// // ------------------------------------------- new page ----------------------------------------------------
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(10);
 

doc
.fontSize(8)
.font('Helvetica')
.text(`Similarly, if the account continues to remain overdue, it shall get tagged as SMA- 2 upon running day-end process on May 30, 2021 and if continues to remain overdue further, it shall get classified as NPA upon running day-end process onJune 30,2021.\n\nFurther, loan accounts classified as NPAs may be upgraded as ‘standard’ assets only if entire arrears of interest and principal are paid by the Borrowers.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`Acknowledged & Signed\n${allPerameters.borrowerName}\n\n`, startX, doc.y, { align: "left",underline: true, width: 500 });
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`Annexure – II`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`1. Without prejudice to the right of the RCPL to proceed against the Borrower(s) under the civil law for recovery of the amount due, the Borrower(s) hereby give consent that the RCPL will be entitled to recover the dues under the provisions of the Securitisation and Reconstruction of Financial Assets and Enforcement of Security Interest Act, 2002 and the Borrower(s) further agree(s) that he/ she/ they will be liable to pay to the RCPL all cost, charges and expenses incurred in that score. The Borrower(s) understand that the RCPL may at its sole discretion avail services of recovery agency/ agents of RCPL’s choice for initiating and continuing the recovery proceedings against the Borrower(s) until the full amounts due to the RCPL are recovered. The Borrower(s) further agree to reimburse to the RCPL, any fees,charges, costs or expenses paid to such recovery agency engaged by the RCPL, in this regard.\n\n\n2. For any grievances in relation to the loan the customer can call / write to us at 9512011220 / grievance@ratnaafin.com. The other details and the process for the Grievance Redressal Mechanism is available on the website of the Company www.ratnaafin.com`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);

//addFooter();

// //------------------------------------------------- new page ------------------------------------


//addFooter();

// // -------------------------------------------new page 21 ------------------------------------------------------
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`END USE LETTER FROM THE RESIDENT INDIAN CUSTOMER`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc 
.fontSize(9)
.font('Helvetica')
.text(`Date:${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`To,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
.fontSize(8)
.font('Helvetica')
.text(`The Manager,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Ratnaain Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`Dear Madam/Sir,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Sub: Application for Loan\n\n I/We, ${allPerameters.borrowerName} refer to the Application No./Sanction Letter No.${allPerameters.sanctionLetterNo} Dated:${allPerameters.sanctionLetterDate} submitted by me/us to Ratnaafin Capital Pvt Ltd. for availing of a Loan from Ratnaafin Capital Pvt Ltd.)`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`The said Facility is for the purpose of (tick one)`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

// doc
// .fontSize(8)
// .font('Helvetica')
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Education\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Business\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Agriculture & Allied Activity O Home Repair\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Other personal need. specify:`, startX, doc.y, { align: "left", width: 500 })
// doc.moveDown(1);

// const addCheckbox = (doc, x, y, fieldName, label) => {
//   // Draw a rectangle for the checkbox
//   doc
//     .rect(x, y, 8, 8) // x, y, width, height
//     .stroke();

//   // Add label text next to the checkbox
//   doc.fontSize(8).text(label, x + 20, y - 2);

//   // Add the interactive form field annotation for the checkbox
//   doc.annotate(x, y, 8, 8, {
//     Type: 'Annot',
//     Subtype: 'Widget',
//     FT: 'Btn', // Form type is Button (used for checkboxes and radio buttons)
//     T: fieldName, // Field name for the checkbox
//     Ff: 49152, // Flags to set checkbox behavior (49152 makes it toggleable)
//     V: 'Off', // Default value (unchecked state)
//     AP: {
//       N: {
//         On: '/Yes', // Name for the "checked" state
//         Off: '/Off' // Name for the "unchecked" state
//       }
//     }
//   });
//   doc.moveDown()
// };

// Add the checkboxes with labels
// addCheckbox(doc, 50, 100, 'education', 'Education');
// addCheckbox(doc, 50, 110, 'business', 'Business');
// addCheckbox(doc, 50, 120, 'agriculture', 'Agriculture & Allied Activity');
// addCheckbox(doc, 50, 130, 'home_repair', 'Home Repair/Home Improvement/Home Renovation/Home Construction');
// addCheckbox(doc, 50, 140, 'cattle', 'Cattle Purchase');
// addCheckbox(doc, 50, 150, 'other_personal', 'Other Personal');

let currentY = doc.y;

const addCheckbox = (doc, x, y, fieldName, label) => {
  // Draw a rectangle for the checkbox
  doc
    .rect(x, y, 8, 8) // x, y, width, height
    .stroke();

  // Add label text next to the checkbox
  doc.font('Helvetica').fontSize(8).text(label, x + 20, y - 2);

  // Add the interactive form field annotation for the checkbox
  doc.annotate(x, y, 8, 8, {
    Type: 'Annot',
    Subtype: 'Widget',
    FT: 'Btn', // Form type is Button (used for checkboxes and radio buttons)
    T: fieldName, // Field name for the checkbox
    Ff: 49152, // Flags to set checkbox behavior (49152 makes it toggleable)
    V: 'Off', // Default value (unchecked state)
    AP: {
      N: {
        On: '/Yes', // Name for the "checked" state
        Off: '/Off' // Name for the "unchecked" state
      }
    }
  });
};

// Add checkboxes dynamically starting after the paragraph
const spacing = 10; // Adjust spacing between checkboxes
const startXy = 50; // X coordinate for checkboxes

addCheckbox(doc, startXy, currentY, 'education', 'Education');
currentY += spacing; // Increment y position for the next checkbox
addCheckbox(doc, startXy, currentY, 'business', 'Business');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'agriculture', 'Agriculture & Allied Activity');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'home_repair', 'Home Repair/Home Improvement/Home Renovation/Home Construction');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'cattle', 'Cattle Purchase');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'other_personal', 'Other Personal');
doc.moveDown()
currentY += spacing+spacing;


// const form = doc.form(); // Initialize form support

// const checkboxes = [
//   { name: 'education', label: 'Education', x: 50, y: 100 },
//   { name: 'business', label: 'Business', x: 50, y: 130 },
//   { name: 'agriculture', label: 'Agriculture & Allied Activity', x: 50, y: 160 },
//   { name: 'homeRepair', label: 'Home Repair / Improvement', x: 50, y: 190 },
//   { name: 'cattlePurchase', label: 'Cattle Purchase', x: 50, y: 220 },
//   { name: 'otherPersonal', label: 'Other Personal', x: 50, y: 250 },
// ];

// // Loop to add each checkbox with toggleable functionality
// checkboxes.forEach((checkbox) => {
//   doc.checkbox({
//     name: checkbox.name, // Unique field name
//     x: checkbox.x, // X position
//     y: checkbox.y, // Y position
//     width: 15, // Width of the checkbox
//     height: 15, // Height of the checkbox
//     value: 'Off', // Default value is "Off" (unchecked)
//     appearance: {
//       Off: { normal: {} }, // Define "unchecked" state
//       Yes: { normal: {} }, // Define "checked" state
//     },
//   });

//   // Add label text next to the checkbox
//   doc.text(checkbox.label, checkbox.x + 20, checkbox.y - 3);
// });


doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`If the facility is to be used for Business Purpose, then please tick one of a) OR b) the following`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
currentY += spacing+spacing;
doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`a) Investment in Plant & Machinery (only for Manufacturing industry) is:\n\n`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
currentY += spacing+spacing;


// doc
// .fontSize(8)
// .font('Helvetica')
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Less than or equal to Rs 5 lakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 5 lakh and up to Rs 25 lakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 25 lakh and up to Rs 5 Crore`, startX, doc.y, { align: "left", width: 500 })
// doc.moveDown(1);

addCheckbox(doc, startXy, currentY, 'five_lakh', 'Less than or equal to Rs 5 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'above', 'Above Rs 5 lakh and up to Rs 25 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'aboveCrore', ' Above Rs 25 lakh and up to Rs 5 Crore');
doc.moveDown(1)
currentY += spacing+spacing;


doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`b) Investment in Office Equipment (only for Service industry) is:`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
currentY += spacing+spacing;


// doc
// .fontSize(8)
// .font('Helvetica')
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Less than or equal to Rs 2 lakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 2 lakh and up to Rs 10Iakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 10 lakh and up to Rs 5 Crore`, startX, doc.y, { align: "left", width: 500 })
// doc.moveDown(1);

addCheckbox(doc, startXy, currentY, 'two_lakh', 'Less than or equal to Rs 2 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'above', 'Above Rs 2 lakh and up to Rs 10 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'aboveCrore', ' Above Rs 10 lakh and up to Rs 5 Crore');
doc.moveDown(1)

doc
.fontSize(8)
.font('Helvetica')
.text(`I/We hereby represent, warrant and confirm that the aforesaid purpose is a valid purpose and also agree and undertake to utilize the loan only for the above-mentioned purpose and that the loan shall not be used for any illegal and / or antisocial and/or speculative purposes including but not limited to participation in stock markets/IPOs.\n\nI/We further agree. confirm and undertake that the purpose of use of funds under the facility shall not be changed in any manner during the tenor of the facility or that such change in purpose shall take place only with the prior written permission of Ratnaafin Capital Pvt Ltd. I/We agree that any breach or default in complying with all or any of the aforesaid undertaking(s) will constitute an event of default under the Facility Agreement executed with the Ratnaafin Capital Pvt Ltd and accordingly the Ratnaafin Capital Pvt Ltd will have the right to initiate appropriate recovery proceedings for recovering the outstanding dues in the loan account.\n\n I/We are aware that it is on the faith representation, declaration and confirmation that you have agreed to consider my loan application for financial assistance under the category of Priority Advances defined in various circulars/guidelines of Reserve Bank Of India.\n\n The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers /Guarantors in the language understood by the Borrower / Co-borrowers / Guarantors and the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(2);
doc
.fontSize(8)
.font('Helvetica')
.text(`Thanking you\n\n\n`, startX, doc.y, { align: "left", width: 500 })
.text(`Yours Sincerely`, startX, doc.y, { align: "left", width: 500 })

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`Thanking you\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`Yours Sincerely\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`APPLICANT NAME : ${allPerameters.borrowerName}\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`CO-APPLICANT NAME : ${allPerameters.coBorrowername}`, startX, doc.y, { align: "left", width: 500 })

// doc.moveDown(1);

//addFooter();

// //------------------------------------------------------------- new page 22 -----------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`Thanking you\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`Yours Sincerely\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`APPLICANT NAME : ${allPerameters.borrowerName}\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`CO-APPLICANT NAME : ${allPerameters.coBorrowername}`, startX, doc.y, { align: "left", width: 500 })
// .text(`2nd CO-APPLICANT NAME : ${allPerameters.coBorrowername2}`, startX, doc.y, { align: "left", width: 500 })

doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`Interest Rate Declaration \n Certificate to be signed by the borrower`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(3);

function rateTableFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;  // Total table width
  const minColWidth = 150; // Minimum width for columns
  const fixedColWidth = 230; // Fixed column width (each column)

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    const rowContent = row.field1 || ""; // Fallback to an empty string if field1 is undefined
    const rowValue = row.value || ""; // Value for the second column, fallback to empty string

    // Calculate the text height based on the content for both columns
    const rowContentHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowContent, { width: fixedColWidth - 10 });
    const rowValueHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowValue, { width: fixedColWidth - 10 });

    // Maximum row height (to keep row heights uniform)
    const rowHeight = Math.max(rowContentHeight, rowValueHeight) + 10; // Add padding

    // Draw the background rectangle for the row with no fill color (no color logic)
    doc
      .lineWidth(0.5)
      .stroke("black")
      .rect(startX, startY, boxWidth, rowHeight)
      .stroke();

    // Draw the text for the first column (bold font)
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(rowContent, startX + 5, startY + 5, {
        baseline: "hanging",
        width: fixedColWidth - 10,
        align: "left",
      });

    // If there's a value for the second column, draw it in normal font
    if (rowValue) {
      doc
        .font(font)
        .font('Helvetica')  // Normal font for value
        .fillColor("black")
        .fontSize(7.2)
        .text(rowValue, startX + fixedColWidth + 5, startY + 5, {
          baseline: "hanging",
          width: fixedColWidth - 10,
          align: "left",
        });
    }

    // Draw the vertical line between the two columns
    doc
      .lineWidth(0.5)
      .stroke("black")
      .moveTo(startX + fixedColWidth, startY)  // Position of the first vertical line
      .lineTo(startX + fixedColWidth, startY + rowHeight) // Extend the line down
      .stroke();

    // Move to the next row's starting Y position
    startY += rowHeight;
  });
}

const rateTable = [
  { field1: "Name of the Borrower", value: ` ${allPerameters.borrowerName}(PAN):${allPerameters.borrowerpanNo}` },
  { field1: "Address", value:  ` ${allPerameters.borroewraddress}` },
  { field1: "Constitution", value:  ` ${allPerameters.constitutionBorrower}` },
];

rateTableFunction(rateTable);

function loanTableFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;  // Total table width
  const minColWidth = 150; // Minimum width for columns
  const numColumns = Math.max(...tableData.map(row => Object.keys(row).length)); // Get the max number of fields in any row
  const colWidth = boxWidth / numColumns; // Column width based on the number of columns

  // Define the fields to be bold in the second row
  const boldFields = ["Facility", "Limits", "Sanction Letter No.", "Sanction Date"];

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    let maxHeight = 0;
    const rowContentHeights = [];

    // For the first row, span the entire table width and center the content
    if (rowIndex === 0) {
      const rowContent = row.field1 || ""; // Fallback to empty string if field1 is undefined

      // Calculate the text height based on the content for the full-width row
      const rowContentHeight = doc
        .font(font)
        .fontSize(7.2)
        .heightOfString(rowContent, { width: boxWidth - 10 });

      // Draw the background rectangle for the row
      doc
        .lineWidth(0.5)
        .stroke("black")
        .rect(startX, startY, boxWidth, rowContentHeight + 10)  // Adjusted row height
        .stroke();

      // Draw the text for the first row (spanning full width and centered)
      doc
        .font(font)
        .font('Helvetica-Bold')
        .fillColor("black")
        .fontSize(7.2)
        .text(rowContent, startX + 5, startY + 5, {
          baseline: "hanging",
          width: boxWidth - 10,
          align: "center", // Center the text
        });

      // Move to the next row's starting Y position
      startY += rowContentHeight + 10;  // Adjusted for row height + padding
    } else {
      let maxRowHeight = 0;
      // Calculate the content heights for each column in this row
      Object.keys(row).forEach((field, colIndex) => {
        const fieldValue = row[field] || ""; // Fallback to empty string if undefined
        const fieldHeight = doc
          .font(font)
          .fontSize(7.2)
          .heightOfString(fieldValue, { width: colWidth - 10 });

        rowContentHeights.push(fieldHeight);
        maxRowHeight = Math.max(maxRowHeight, fieldHeight); // Track the max height of this row
      });

      const rowHeight = maxRowHeight + 5; // Add padding

      // Draw the background rectangle for the row
      doc
        .lineWidth(0.5)
        .stroke("black")
        .rect(startX, startY, boxWidth, rowHeight)
        .stroke();

      // Draw each column in the row
      Object.keys(row).forEach((field, colIndex) => {
        const fieldValue = row[field] || ""; // Fallback to empty string if undefined

        // Check if the field needs to be bold
        const isBold = boldFields.includes(field);

        // Draw the text for the current column, apply bold if necessary
        doc
          .font(font)
          .fontSize(7.2)
          .fillColor("black")
          .font(isBold ? 'Helvetica-Bold' : 'Helvetica') // Bold font for specified fields
          .text(fieldValue, startX + colIndex * colWidth + 5, startY + 5, {
            baseline: "hanging",
            width: colWidth - 10,
            align: "left",
          });

        // Draw the vertical line between columns
        if (colIndex < numColumns - 1) {
          doc
            .lineWidth(0.5)
            .stroke("black")
            .moveTo(startX + (colIndex + 1) * colWidth, startY)  // Position of the vertical line
            .lineTo(startX + (colIndex + 1) * colWidth, startY + rowHeight) // Extend the line down
            .stroke();
        }
      });

      // Draw the horizontal line at the bottom of the row
      doc
        .lineWidth(0.5)
        .stroke("black")
        .moveTo(startX, startY + rowHeight)
        .lineTo(startX + boxWidth, startY + rowHeight)
        .stroke();

      // Move to the next row's starting Y position
      startY += rowHeight;
    }
  });

  // Draw the horizontal line at the bottom of the table
  doc
    .lineWidth(0.5)
    .stroke("black")
    .moveTo(startX, startY)
    .lineTo(startX + boxWidth, startY)
    .stroke();
}

const loanTable = [
  { field1: "Details of Agri Micro Loan Against Property" }, // This will span full width and be centered
  { field1: "Facility", field2: "Limits", field3: "Sanction Letter No.", field4: "Sanction Date" }, // Multiple fields
  { field1:  `Agri Micro Lap`, field2: `Rs.${allPerameters.amountOfLoan}/-( ${allPerameters.loanAmountInWord})`, field3: ` ${allPerameters.sanctionLetterNo}`, field4: ` ${allPerameters.sanctionLetterDate} `}, // Multiple fields
];

loanTableFunction(loanTable);
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`RATE OF INTEREST:`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`FRR (Present FRR 19.20%) + ${allPerameters.interestType1} (Spread) current effective ${allPerameters.rateOfInterest}% P.A @.\n\n The rate of interest shall be subject to change from time to time including on account of changes in interest rates made by the RBI from time to time.\n\nThe Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers /Guarantors in the language understood by the Borrower / Co-borrowers / Guarantors and the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has afixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`Signature of Borrower(s)`, startX, doc.y, { align: "right", width: 470 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica')
.text(`Place:   ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica')
.text(`Date: ${allPerameters.agreementdate}`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

//addFooter();

// //-------------------------------------------- new page 22 --------------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`DECLARATION FOR IMMOVABLE PROPERTY \n (for facility backed by mortgage)`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`I/We,  ${allPerameters.borrowerName} adult,Occupation ${allPerameters.appOccupatiion}  residing at ${allPerameters.borroewraddress}( hereinafter called as "MORTGAGOR")`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`AND`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica')
.text(`I/We, ${allPerameters.coBorrowername} adult,Occupation ${allPerameters.coappOccupatiion},residing at ${allPerameters.coBorroweraddress}( hereinafter called as "MORTGAGOR")`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`AND`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);
doc
.fontSize(9)
.font('Helvetica')
.text(`I/We, ${allPerameters.coBorrowername2} adult,Occupation ${allPerameters.coappOccupatiion1},residing at ${allPerameters.coBorroweraddress2}( hereinafter called as "MORTGAGOR")`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`do hereby declare and say as follows :-`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`1) I/We say that I/We am/are absolutely seized and possessed of or otherwise well and sufficiently entitled to the Immovable property being of (1) ${allPerameters.addressImmovableProperty}, more particularly described in the Schedule hereunder written (hereinafter referred to as the “said Immovable Property\n\n 2) I/We say that I/we have not created any charges or encumbrances in respect of the Immovable Property more particularly described in the Schedule hereunder.\n\n `, startX, doc.y, { align: "left", width: 500,continued:true }).moveDown()
.font('Helvetica')
.text(`3) I/We say that the said Immovable Property is proposed to be mortgaged and charged to `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`Ratnaafin Capital Private Limited, Ahmedabad Branch.`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`, to secure by way of First Charge for the due repayment and discharge of the secured Loan of Rs.`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord}) `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(` granted by `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`RCPL`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(` to `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`${allPerameters.borrowerName} `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`together with interest, Penal charges , commitment charges and other monies payable to `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(` Ratnaafin Capital Private Limited `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`under their loan agreements, letter of sanction and other transaction documents, amended from time to time.`, startX, doc.y, { align: "left", width: 500 }).moveDown()
.font('Helvetica')
.text(`The said `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`Ratnaafin Capital Private Limited, Ahmedabad Branch`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`, Ahmedabad Branch, is/are hereinafter referred to as the “Lender”.`, startX, doc.y, { align: "left", width: 500 }).moveDown()
 
 
 
 
 
 
 
 .font('Helvetica')
 .text(`4) I/We say that the said Immovable Property is free from all encumbrances or charges (statutory or otherwise), claims and demands, and that the same or any of them or any part thereof are/is not subject to any Lien/Lispendens, attachment or any other process issued by any Court or Authority and that I/we have not created any Trust in respect thereof and that the said Immovable Property is/are in my/our exclusive, uninterrupted and undisturbed possession and enjoyment since the date of purchase/acquisition thereof and no adverse claims have been made against me in respect of the said Immovable Property or any of them or any part thereof and the same are not affected by any notices of acquisition or requisition, and that no proceedings are pending or initiated against me under the Income Tax Act, 1961, or under any other law in force in India for the time being and that no notice has been received by or served on me under the Income Tax Act,
 1961 and/or under any law and there is no pending attachment whatsoever issued or initiated against the said Immovable Property or any of them or any part thereof. \n\n 5) I/We say that I have duly paid all rents, royalties and all public demands including Income Tax, Corporation/Municipal Tax and all other taxes and revenue payable to the Government of India or to the Government of any State or to any Local Authority and that at present there are no arrears of such dues, rents, royalties, taxes and revenue dues and outstanding and that no attachments or warrants have been served on me of Income Tax, Government Revenues and other taxes.\n\n 6) I/We also agree and undertake to give such declarations, undertakings and other writings as may be required by the Lender or their solicitors and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the lender.\n\n 7) I/We say that I have obtained the requisite consent from the Income Tax authorities pursuant to the provisions contained in Section 281 of the Income Tax Act, 1961 for the alienation of my property in favour of the Lender.\n\n 8) I/We assure, agree and declare that the security to be created in favour of the Lender shall ensure in respect of my Immovable Property, both present & future and that the documents of title, evidences, deeds and writings in relation to the said Immovable Property are the only documents of title relating to the said Immovable Property.\n\n 9) I/We hereby agree and undertake that MORTGAGOR shall within a period of three months from the date hereof or such extended date as may be permitted by the Lender in writing :-\n\n a) perfectly assure the title to the properties comprised in the mortgage security and to comply with all requisitions, that may be made from time to time by or on behalf of the Lender in that behalf ;\n\n b) give such declarations, undertakings and other writings as may be required by the Lender and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the Lender;`, startX, doc.y, { align: "left", width: 500 })
doc.moveDown(1);

//addFooter();

// //------------------------------------------------------------- new page ----------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

doc
.fontSize(8)
.font('Helvetica')
.text(`c) pay all rents, rates, taxes, cesses, fees, revenues, assessments, duties and other outgoings and pay other amounts due in respect of the said Immovable Property and shall observe and perform all the rules and regulations pertaining to the same will not do or omit to do or suffer to be done anything whereby the mortgaged security as proposed to be created in favour of the Lender be affected or prejudiced in any manner whatsoever.\n\n 10) I/We further undertake that no mortgage, charge, lien or other encumbrance whatsoever will be created on the properties compromised in the mortgaged security save & except with the permission of the Lender.\n\n 11) I/We are not aware of any act, deeds, matter or thing or circumstance which prevents me from charging/further charging in favour of the Lender on the said Immovable Property.\n\n12)The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers /Guarantors in the language understood by the Borrower / Co-borrowers / Guarantors and the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement. \n\nAND I/We make the aforesaid declaration solemnly and sincerely believing the same to be true and knowing full well that on the faith thereof the Lender has agreed to complete the said transaction of mortgage by legal mortgage in respect of the Immovable Property, described in the Schedule hereunder written.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`-: SCHEDULE ABOVE REFERRED TO :-\n\n (Description of the Immovable Property)`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);

doc
.fontSize(7)
.font('Helvetica-Bold')
.text(` ${allPerameters.addressImmovableProperty}`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);
doc
.fontSize(7)
.font('Helvetica-Bold')
.text(`Boundaries of Property`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

const boundariesPropertyData = [
  { field1: "On or towards North", field2: ": ", value:  ` ${allPerameters.OnOrTowardsNorth}` },
  { field1: "On or towards South", field2: ": ", value:  ` ${allPerameters.OnOrTowardsSouth} `},
  { field1: "On or towards East",  field2: ": ", value:  ` ${allPerameters.OnOrTowardsEast}` },
  { field1: "On or towards West",  field2: ": ", value:  ` ${allPerameters.OnOrTowardsWest}` },
];

// Call the function to create the table
BoundariesFunction(boundariesPropertyData);
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text( ` Date:${allPerameters.agreementdate}`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`SIGNED & DELIVERED BY THE WITH IN NAMED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(0.5);

doc
.fontSize(8)
.font('Helvetica-Bold')
  .text(`BORROWERS NAME :   ${allPerameters.borrowerName}`,
  startX, doc.y, { align: "left", width: 500 })
  .text(`CO-BORROWERS NAME :  ${allPerameters.coBorrowername}`,
    startX, doc.y, { align: "left", width: 500 })
    .text(`2nd CO-BORROWERS NAME : ${allPerameters.coBorrowername2}`,
      startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(0.5);
  


//addFooter();

//rcpl group loan secure
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`RCPL Group Loan Secure Customer Mandate`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`To,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`RATNAAFIN CAPITAL PRIVATE LIMITED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(3);


doc
.fontSize(8)
.font('Helvetica')
.text(`Dear Sir/Madam,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(3);


// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`I/We hereby acknowledge and confirm that I/we have received the copy of the loan Agreement dated ${allPerameters.agreementdate} executed between RCPL and me/us ('Loan Agreement') and the contents of the loan Agreement have been fully explained to and understood by me/us at the time of availing the loan in the language understood by me/us) \n\n I/We further confirm that am/are fully aware of and completely understand the rights and obligations contained in the loan documents mentioned below:`, startX, doc.y, { align: "left",align: "justify", width: 500 });
//  doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(`I would like to get insured with ICICI Prudenal for the loan protect policy. In case either of the following reason triggers:`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(3);

doc
.fontSize(8)
.font('Helvetica')
.text(`
1) Policy rejecon by ICICI Prudenal due to underwring reason.
2) Insured not interested in Medical.
3) Case rejected by ICICI Prudenal on the ground of Medical or income.
4) Medical is not completed by the Client ll 30 days from the Login.
5) For any other reasons not menoned above. `, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
.fontSize(8)
.font('Helvetica')
.text(`I agree to get my policy placed with`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`
1. Bajaj Allianze Life Insurance Company Limited
2. Zuno General Insurance Limited
3. Raheja QBE General Insurance Company Limited
4. Niva Bupa Health Insurance Company Limited
5. Tata AIG General Insurance Company Limited
6. Care Health Insurance Company Limited
7. Aditya Birla Health Insurance Company Limited.
`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Request to kindly note and process accordingly`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Thanking you, `, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Loanee – RCPL`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`(Signature)`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);


// const confirmationTable = [
//   { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
//   { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
//   { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
// ];

// presentment(confirmationTable);
//addFooter();
// Finalize the PDF
    doc.end();
  
    // const pdfFileUrl = `/uploads/pdf/${pdfFilename}`;
  
    // return new Promise((resolve, reject) => {
    //   stream.on("finish", () => {
    //     resolve(pdfFileUrl);
    //   });
    //   stream.on("error", reject);
    // });

    return new Promise((resolve) => {
      doc.on('end', () => resolve(Buffer.concat(buffers)));
    });
  }

  async function  RcplLdAndPgDeedpdf3(allPerameters) {

    const font = "assets/font/Cambria.ttf";
    const fontBold = "assets/font/Cambria-Bold.ttf";
    const fontKerlaTamil = "assets/font/KarlaTamilUpright-Regular.ttf"
    const fontUrdu = "assets/font/IBMPlexSansArabic-Regular.ttf"
    const fontTelugu = "assets/font/TiroTelugu-Regular.ttf"
    const fontPanjabi = "assets/font/BalooPaaji2-VariableFont_wght.ttf"
    const fontMalayam = "assets/font/AnekMalayalam-VariableFont_wdth.ttf"
    const fontKannada = "assets/font/NotoSansKannada-VariableFont_wdth.ttf"
    const fontGujarati = "assets/font/Rasa-VariableFont_wght.ttf"
    const fontHindi = "assets/font/Mukta-Regular.ttf"
    const fontOriya = 'assets/font/BalooBhaina2-VariableFont_wght.ttf'
    const fontMarathi = 'assets/font/Hind-Regular.ttf'
    const fontBengali = 'assets/font/NotoSansBengali-VariableFont_wdth.ttf'
    // const baseDir = path.join("./uploads/");
    // const outputDir = path.join(baseDir, "pdf/");
    const PDFDocument = require('pdfkit');
  const doc = new PDFDocument({ margin: 50, size: "A4" });

  // Buffer to hold the PDF content
  const buffers = [];
  doc.on('data', (chunk) => buffers.push(chunk));
  doc.on('end', () => console.log('PDF generated successfully!'));
//fontKerlaTamil,fontUrdu,fontTelugu,fontSans,fontGurmukhi,fontMalayam
    // draw a border around the page
    function drawBorder() {
      const pageWidth = doc.page.width;
      const pageHeight = doc.page.height;
      const margin = 30;
      const lineWidth = 2;
  
      // Draw a simple border rectangle
      doc.lineWidth(lineWidth);
      doc
        .rect(margin, margin, pageWidth - 2 * margin, pageHeight - 2 * margin)
        .strokeColor("#324e98") // Set the color of the border
        .stroke();
    }
  
    // add logo to every page
    function addLogo() {
        // doc.moveDown(-5)
        if (fs.existsSync(pdfLogo)) {
          doc.image(pdfLogo, 400, 9, {
            fit: [160, 140],
            align: "right",
            valign: "bottom",
          });
        } else {
          console.error(`Logo file not found at: ${pdfLogo}`);
        }
      }
  
    // watermark function
    function addWatermark() {
      if (fs.existsSync(watermarklogo)) {
        doc.save();
        doc.rotate(-45, { origin: [doc.page.width / 2, doc.page.height / 2] });
  
        doc.image(
          watermarklogo,
          doc.page.width / 2 - 200,
          doc.page.height / 2 - 200,
          {
            fit: [450, 400],
            opacity: 0.05,
            align: "center",
            valign: "center",
          }
        );
  
        doc.restore();
      } else {
        console.error(`Logo file not found at: ${watermarklogo}`);
      }
    }
  
    // Footer with border and stylized text
    // Footer with border and stylized text
    function addFooter() {
      const pageWidth = doc.page.margins.left;
      const pageHeight = doc.page.height;
  
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#324e98")
        .text("RatnaaFin Capital Pvt Ltd", pageWidth, pageHeight - 80, {
          align: "center",
        });
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#000000")
        .text("Registered Office: 174/3, Nehru Nagar, Indore-452011 (M.P.)", {
          align: "center",
        });
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#000000")
        .text("CIN: 67120MP1994PTC008686", { align: "center" });
      doc
        .font(fontBold)
        .fontSize(6.3)
        .fillColor("#000000")
        .text("Phone: +91 7374911911 | Email: hr@fincoopers.com", {
          align: "center",
        });
  
      // Add a separator line above the footer
      doc
        .moveTo(50, doc.page.height - 100)
        .lineTo(doc.page.width - 50, doc.page.height - 100)
        .strokeColor("#324e98")
        .lineWidth(1)
        .stroke();
    }
    // if (!fs.existsSync(outputDir)) {
    //   fs.mkdirSync(outputDir, { recursive: true });
    // }
  
    const timestamp = Date.now();
    // const candidateName = 
    // (`${candidateDetails.name}`); // Capitalize name
    // const pdfFilename = `LdAndPgDeed.pdf`;
    // const pdfPath = path.join(outputDir, pdfFilename);
  
    // const doc = new PDFDocument({ margin: 50, size: "A4" });
    // const stream = fs.createWriteStream(pdfPath);
  
    // doc.pipe(stream);
  
    // Add logo and border to the first page
    // addLogo();
    //   addWatermark();
    // //drawBorder();
    // Title styling for OFFER LETTER in uppercase and underlined
    doc.moveDown(2);
    const yPosition = doc.y; // Get the current y position

    doc.moveDown(2); 
    doc
    .fontSize(10)
    .font(fontBold)
    .text("FACILITY AGREEMENT", { align: "center" });
  doc.moveDown(1);

  
doc.fontSize(9).font('Helvetica-Bold').text(`THIS FACILITY AGREEMENT (“Agreement”)`, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica').text(` is made at the place and on the date as set out in the Schedule.`)
doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("BETWEEN", { align: "center" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`RATNAAFIN CAPITAL PRIVATE LIMITED,`, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica').text(`is a Non-Banking Financial Company incorporated under the provisions of the Companies Act, 2013, having its registered office at 402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place Near Hyatt Hotel, New Delhi-110066, Delhi, India and corporate office at 2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India-380060 acting in these presents through its branch office located in the city/ town as mentioned in`,{
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica-Bold').text(` the Schedule("RCPL" `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`or the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`"Lender", `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`which expression shall, unless repugnant to the context, include its successors and assigns) of the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`FIRST PART`)

doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("AND", { align: "center" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`The `, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica-Bold').text(`Borrower(s) or Co-Borrower(s), `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`details where of are described and set out in `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`the Schedule, `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`of the `, {
    continued: true, // Allows the text to continue on the same line
})

doc.fontSize(9).font('Helvetica-Bold').text(`OTHER PART. `)

doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`The term `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`“Borrower(s)”, `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`which expression unless repugnant to the context or meaning thereof be deemed to include (i) where the Borrower(s) is/are an individual, his/her heirs, executors, and administrators; (ii) where the Borrower(s) is/are a sole proprietorship concern, the person whose name appears as sole proprietor and shall include his/her heirs, executors, and administrators; (iii)where the Borrower(s) is/are a partnership firm under Indian Partnership Act, 1932, any and eachof the partner, and their survivor(s) or the partner(s) from time to time and their respective heirs, legal representatives, executors and administrators; (iv) where the Borrower(s) is a Hindu Undivided Family (HUF), the Karta and any or each of the adult member of the HUF and their survivor(s) and his /her/ their respective heirs, executors and administrators.(v) where the Borrower(s) is/are a Company or Society or Limited Liability Partnership(LLP), its successors andpermitted assigns; (vi) where the Borrower(s) is/are an unincorporated body, all members thereofand their respective successors; (vii) where the Borrower(s) is /are a Trust, the trustee/s for timebeing thereof and the successors of the trust / trustees). `)
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower(s) and the Co-Borrower(s) (if any) are here in after referred to as the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`“Borrower”. `)

doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`Lender and Borrower are hereinafter collectively referred to as `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`"Parties" `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`and individually as `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(` "Party".`)

doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("W H E R E A S", { align: "left", underline:"true" });
doc.moveDown(1);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(
    `A. The Borrower(s) has approached the Lender for availing a loan/advance of the amount as more particularly mentioned in Schedule I for the purpose as specified in Schedule I here to. \n\n` +
    `B. The Borrower(s) has proposed to create security over the Immovable Properties (hereinafter defined) by executing the Security Documents (hereinafter defined) as the principal and primary instrument for availing of the Loan. \n\n` +
    `C. At the request of the Borrower(s) and relying upon the representations, warranties, undertakings and covenants made by the Borrower(s), the Lender has agreed to advance/grant such loan for the aforesaid purpose, upon the terms and conditions set forth herein and other loan and security documents.`
  );
doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("NOW IT IS AGREED BY AND BETWEEN THE PARTIES HERETO AS FOLLOWS: ", { align: "left" });
doc.moveDown(1);

doc
.fontSize(10)
.font(fontBold)
.text("1. DFINITION AND INTERPRETATION ", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`In this Agreement, unless the context otherwise requires: `)
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. “Applicable Laws” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`means any act, statute, law, regulation, enactment, ordinance, treaty, rule, judgment, order, award, decree, bye-laws, rule of common law, Clearances, directions, directives, guidelines policy, licenses, requirement or any governmental restriction or condition including any similar form of decision of, or determination, application or execution by or any interpretation or pronouncement having the force of law of, any government authority having jurisdiction over the matter in question. `)

//---------------------------------------------new page -------------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica-Bold').text(`b. “CIBIL” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean Credit Information Bureau (India) Limited `)

doc.fontSize(9).font('Helvetica-Bold').text(`c. “Due Date” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean the date(s) on which any amount in respect of the Outstanding Obligations falls due as specified in this Agreement.`)

doc.fontSize(9).font('Helvetica-Bold').text(`d. “Event of Default” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean any event or circumstance specified as such in Clause13.a`)

doc.fontSize(9).font('Helvetica-Bold').text(`e. “Installment(s)” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall have the meaning ascribed to it in Clause 6.a`)

doc.fontSize(9).font('Helvetica-Bold').text(`f. “Immovable Properties” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean residential/commercial immovable properties as more particularly described in the Schedule III hereto, on the security of which the Lender has agreed to advance the Loan.`,{lineGap: 1})

doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`Without prejudice to the generality of the above “Immovable Properties” shall also include:\n\n i. In the case of part of a building, the entire built-up area (and any additions there to), the proportionate share in the common areas of the building and the proportionate undivided share in the land on which the said building is situated or is being built / will be built or \n\n ii. in the case of a flat, the entire built-up area (and any additions thereto), the proportionate share in the common areas of the building in which such flat is / will be situated and the proportionate undivided share in the land on which the said building is situated or is being built / will be built; or \n\n iii. In the case of an independent structure, the structure and entire plot of land on which the structure is situated or is being built / will be built or\n\n iv. In the case of an individual house, the house and entire plot of land on which the house will be built.`,{lineGap: 1})
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`g. “Loan” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall have the meaning ascribed to in Clause 0`)

doc.fontSize(9).font('Helvetica-Bold').text(`h. “Material Terms and Conditions” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean all terms and conditions mentioned in the sanction letter/s/ Transaction Documents.`)

doc.fontSize(9).font('Helvetica-Bold').text(`i. “Outstanding dues / Obligations” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean at any time the entire outstanding amount due in respect of the Loan, including but not limited to the present and future obligations and liabilities of the Borrower to pay/repay the principal amount of the Loan, Interest, Penal Charges, prepayment charges, other fees, liquidated damages, costs, charges and expenses(including any fees payable to the Lender) and other amounts, taxes, payable in respect of under the Transaction Documents.`)

doc.fontSize(9).font('Helvetica-Bold').text(`j. “Penal Charges” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean such charges as specified in the Schedule to this Agreement applicable in the event of default in repayment of loan instalments or non-compliance of agreed terms and conditions mentioned in the Sanction Letter.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`k. “Repayment Schedule” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall have the meaning ascribed to it in Clause 6.a`)

doc.fontSize(9).font('Helvetica-Bold').text(`l. “RBI” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(` shall mean the Reserve Bank of India`)

doc.fontSize(9).font('Helvetica-Bold').text(`m. “Security Documents” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean all documents, undertakings, agreements, deeds, declarations, undertakings, indemnities, affidavits, writings, certificates, no-objections, letters, filings, forms, towards or in relation to creation, perfection, filing, registering, etc. of Security Interest and/or issue of a guarantee, as part of the Security, and whether executed bythe Borrower, Security Providers, Lender or the Borrower or any third party, as per the requirement of the Lender and as may be amended, confirmed or restated from time to time, as per the requirement of the Lender.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`n. “Security Provider” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`shall mean any person whose property or assets /any part thereofare/shall be charged and/or who creates/is required to create any Security Interest in favour of the Lender, to secure the Outstanding Obligation or any part thereof.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`o. “Transaction Documents” `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(` shall mean this Agreement, Security Documents and include all writings and other documents executed or entered into or to be executed or entered into, by the Borrower or any other Person, in relation to or pertaining to the Loan and each such transaction document as amended from time to time.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`p. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`a reference to the singular includes the plural (and vice versa)`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`q. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`the headings in this Agreement are inserted for convenience of reference only and are to beignored in construing and interpreting this Agreement.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`r. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`reference to the words “include” or “including” shall be construed without limitation.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`s. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`reference to a gender shall include references to the female and male gender`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`t. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`all approvals, permissions, consents or acceptance required from Lender for any matter shall require the “prior”, “written” approval, permission, consent or acceptance of Lender and`,{lineGap: 1})


//---------------------------------- new page ---------------------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica-Bold').text(`u. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`in the event of any disagreement or dispute between Lender and the Borrower/s regarding themateriality of any matter including of any event, occurrence, circumstance, change, fact, information, document, authorization, proceeding, act, omission, claims, breach, default orotherwise, the opinion of Lender as to the materiality of any of the foregoing shall be final and binding on the Borrowers`,{lineGap: 1})

doc.moveDown(1);
doc
.fontSize(10)
.font(fontBold)
.text("2. LOAN FACILITY", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Based on the Borrower's request, representations, warranties, covenants and under takings as contained herein, the Lender hereby agrees to grant to the Borrower and the Borrower hereby agrees to avail from the Lender, a secured loan facility in the aggregate amount asmentioned in the Schedule I here to (“Loan”) on the terms and conditions containedherein in this Agreement.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The relationship between the Lender and the Borrower shall commence from the date ofthis Agreement and subsist until all the Outstanding Obligations payable by the Borrowerto the Lender under this Agreement and in all other Transaction Documents shall have been fully paid to and received by the Lender.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`It is hereby agreed between the Parties that the Lender may, at its sole and absolute discretion, cancel and/or withdraw the undrawn limit of the Loan as sanctioned by the Lender. The said withdrawal shall not absolve the Borrower of any of its liability to repay the Outstanding Obligations.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`d. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The term or tenor of the Loan shall be as set out in the Schedule I hereto.`,{lineGap: 1})

doc.moveDown(1);
doc
.fontSize(10)
.font(fontBold)
.text("3. DISBURSEMENT", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Upon the request of the Borrower, the Lender shall, at its sole discretion, disbursethe Loan in lumpsum or suitable installments having regard to the need of the Borrower. The decision of the Lender in this regard, shall be final and binding onthe Borrower.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The amount of the Loan will be disbursed by the Lender subject to compliance by the Borrower with the terms and conditions provided in this Agreement. The Loan amount shall be disbursed to the Borrower net of all initial payments towards documentation charges, loan processing charges, premium for insurance (if applicable) and such other charges as specified in the Schedule I here to.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Interest on the Loan will begin to accrue in favour of the Lender as and from the date of disbursement of the Loan.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`d. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`Not with standing anything contained in this Agreement, the Lender may terminatethe right of the Borrower to disbursements under the Loan, if the request for suchdisbursement shall not have been made within 30 days from the date of this Agreement or by such extended date as may be agreed upon by the Lender in writing.`,{lineGap: 1})

doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`4. INTEREST RATES AND PENAL CHARGES `)
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall be liable to pay interest on the Loan from time to time at the rateas specified in the Schedule I here to (“Interest”). The Lender in its sole discretion would be entitled to modify and vary the said rate of Interest from time to time a sper its policy, market conditions and/or applicable laws including on account of changes in interest rates made by the RBI from time to time. In the event rate of Interest is modified, then in such event interest would be payable by the Borrower at the revised rate of interest.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Interest will be calculated on the basis of rate of Interest mentioned in the Schedule I hereto and is rounded off to the next rupee calculated on monthly rests and any other charges shall be computed on the basis of a year of three hundred and sixty-Five (365) days.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`In the event of the Borrower committing a default or delay in the repayment of any Instalment on the Due Date, in full or in part, the borrower shall pay penal chargesat the rate specified in the Schedule I hereto on the overdue amount from the date ofdefault till the date of payment or the Borrower committing any breach or default ofagreed terms and conditions mentioned in the Sanction Letter or under any otherTransaction Documents, the Borrower shall, in respect of the OutstandingObligations, pay the Penal charges as the rate specified in the Schedule I hereto, onthe outstanding loan amount from the date of default till such time that the breach iscured. The Borrower expressly agrees that the rate of such Penal charge is a fairestimate of the loss likely to be suffered by the Lender by reason of such delay/ default on the part of the Borrower. The payment of Penal charges shall not absolvethe Borrower of the other obligations including to make timely payments and/or inrespect of such default or affect any of the other rights of the Lender including inrespect of the default. It is expressly specified that the Lender expressly reserves all the other rights that may accrue to it on any default by the Borrower.`,{lineGap: 1})

//-------------------------------------------- new page --------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc
.fontSize(10)
.font(fontBold)
.text("5. FEES, CHARGES, COSTS AND CLAIMS", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower undertakes to pay forthwith on demand to the Lender and in no caselater than 30 (Thirty) calendar days from the date on which demand being made all costs and expenses including cost and expenses for investigation of title to any immovable property offered/proposed to be offered as security and for the preparation, execution, preservation, performance, enforcement and realization ofthe Outstanding Obligations, Security Documents and other instruments creating and/or evidencing the creation of any security for the Loan as also any other instruments required in connection with the Loan.`,{lineGap: 1})
   
doc.fontSize(9).font('Helvetica-Bold').text(`b. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall bear the service charges, processing fee, stamp duty, cheque bouncing charges, cheque swapping charges, loan cancellation/re-booking charges, and any other fees as more particularly detailed in the Schedule I hereto in relationto the Loan`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c. `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall during the tenure of the Loan bear all taxes (including interest tax and GST) as may be applicable or as may be levied by any government body orauthority in relation to the Loan.`,{lineGap: 1})

doc
.fontSize(10)
.font(fontBold)
.text("6. REPAYMENT", { align: "left" });
doc.moveDown(1);

doc.fontSize(9).font('Helvetica-Bold').text(`a.`,{continued: true,lineGap: 1})

doc.fontSize(9).font('Helvetica').text(`The Borrower shall repay the Loan together with interest, penal charges and other charges thereo n in such number of installments, of such amounts, and on such Due Dates `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`(“Installments”),`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`as mentioned in the `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(`Schedule II`,{continued: true,lineGap: 1})

doc.fontSize(9).font('Helvetica').text(` here to `, {
    continued: true, // Allows the text to continue on the same line
})
doc.fontSize(9).font('Helvetica-Bold').text(` (“Repayment Schedule”).`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Repayment Schedule is without prejudice to the right of the Lender to recompute the interest in case of variation and on such re-computation, payment shall be made by the Borrower in accordance with such varied Repayment Schedule. Not with standing anything to the contrary contained in this Agreement, the Loan shall be repayable on demand and the Lender shall have the right to be paid forth with on demand the entire Outstanding Obligations in respect of the Loan. The Borrower hereby agree that the time is the essence of the contract.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If such Due Date falls on a day which is not a business day at the place where the payment is to be made, the Borrower shall pay the Instalment on the business day preceding the said Due Date for such repayment. All payments to be made by the Borrower to the Lender shall be made free and clear of and without any deductionfor on account of any taxes. If the Borrower is required to make such deduction, then, in such case, the sum payable to the Lender shall be increased to the extent necessary to ensure that, after making such deduction, the Lender receives and retains (without any liability for such deduction) a sum equal to the sum which it would have received had such deduction not been made or required to be made.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`c.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Lender shall have the right at any time or from time to time to review and reschedule the Repayment Schedule in such manner and to such an extent as the Lender may, in its sole discretion, decide and the repayment will there upon be made as per the revised Repayment Schedule.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower agrees declares and confirms that not with standing any of the provisions of any applicable law or any of the terms and conditions contained in the Agreement and or any Transaction Documents, any payment(s) shall unless otherwise agreed to by the Lender in writing be appropriated in the manner following: \n\n i. Firstly, towards costs, charges, expenses and other monies, due and payableto the Lender. \n\n ii. Secondly, towards the Interest due and payable and / or becoming due andpayable to the Lender.\n\n iii. Thirdly, towards repayment of the amount of the principal sums due andpayable or becoming due and payable to Lender and\n\n iv. Lastly, towards any other amount due and payable to the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Provided however that the Lender reserves the right to appropriate the moneys received in any other manner as it may deem appropriate at its sole discretion.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`e.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall repay / pay the Installments and other monies to the Lenderthrough any one of the following: (i) by postdated cheques. (ii) by Electronic Version 1.3 6of66Clearing System (Debit Clearing) as notified by RBI (ECS), (iii) by directly payingamounts by cheque / draft issued in the name of “RATNAAFIN CAPITAL PRIVATE LIMITED”. (iv) NACH or (v) by any other method provided the same isapproved by the Lender. The method for payment shall be as selected by the Borrower in Schedule I.`,{lineGap: 1})

doc.fontSize(9).font('Helvetica-Bold').text(`f.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall not be entitled to cancel or issue stop- payment instructionswith respect to the postdated cheques / ECS / NACH mandates for so long as anypart of the Outstanding Obligations is pending.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower hereby unconditionally and irrevocably authorizes the Lender, acting through its officers, authorized agents to fill necessary details in the cheque/s delivered to the Lender for an amount not exceeding the maximum amount due by the Borrower to the Lender under the terms and conditions of this Agreement without notice to the Borrower in his behalf. The Borrower hereby confirm and agree that the Lender is entitled in its sole discretion to use one or more such cheques or ECS or NACH for the regularization/settlement of repayment of theLoan.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(``,{continued: true,lineGap: 1})



//------------------------------------------------------------new page 5 ------------------------------------------------------
doc.addPage();
// addLogo();
doc.moveDown();

doc.fontSize(9).font('Helvetica-Bold').text(`h.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall at all times maintain sufficient funds in its bank account to ensure that the ECS, post-dated cheques, or NACH, if any, issued by the Borrower are not dishonored and the Instalments are received / realized by the Lender on or before the applicable Due Dates.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Not with standing the mode of repayment / payment, the Borrower shall continue toremain at all times liable and responsible for ensuring the payment / repayment ofall Instalments and all other monies in respect of the Loan to the Lender on or before the relevant Due Dates without any further notice / intimation being given by the Lender and all such amounts payable by the Borrower to the Lender shall be paid without any deductions whatsoever so as to enable the Lender to fully realize the amounts due on or before the respective Due Date(s). Credit for payments by any method will be given only on realization of payments. The acceptance by the Lender of any payment which is less than the full Instalment or other amounts due and owing at such time shall not constitute a waiver of the Lender’s right to receive payment in full at such time or at any subsequent time or a waiver of any other rights whatsoever of the Lender under this Agreement.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`j.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall obtain the Lender’s prior written consent for changes in authorised signatory who has signed the post dated cheques /ECS/NACH which have been submitted to the Lender at the time of disbursal of this Loan. The Lender may permit the Borrower to swap / exchange the post dated cheques/ECS/NACH issued to the Lender with alternate post dated cheques/ ECS/NACH drawn on another bank(as approved by the Lender). In such an event, the Borrower shall promptly replace the post dated cheques and/ or the ECS or NACH mandates, agreements and/or other documents executed for payment of the Instalments and issue fresh post dated cheques, ECS or NACH mandates in lieu thereof to the satisfaction of the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`k.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Without prejudice to any other rights or remedies the Lender may have under thisAgreement and/or under the applicable law, the Borrower shall be liable to pay a flat charge as stated in the Schedule I hereto in case of dishonour of the cheques or dishonour of ECS or NACH mandates or any other recognized mode by Lender onthe first presentation. In case of dishonour on the second presentation, a furthercharge, as stated in the Schedule I, would be levied in respect of such dishonoured cheques. The levy of charge upon dishonour is without prejudice to the other rights which the Lender has under this Agreement or under law or equity.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`l.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower may prepay the entire Outstanding Obligations at any time by giving one-month prior notice in writing to the Lender. In the event the Borrower exercises its right to prepay, the Lender will be entitled to charge prepayment charges at therate as set out in the Schedule I here to. No amount that has been prepaid shall be reborrowed by the Borrower.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`m.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`In case of two or more Borrowers, the liability of the co-borrower(s) to repay theLoan together with interest, etc, and to observe the terms and conditions of thisAgreement and any other Transaction Documents shall be is joint and several andconsequently the Lender shall have a sole discretion to proceed against all or any ofthe co-borrower(s) to recover the Loan and other charges payable by under this Agreement.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(10).font('Helvetica-Bold').text(`7. LOCK IN PERIOD`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`7.1.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrowers shall not repay/ prepay/ foreclose any portion of the outstanding loan amount either in part or in full during the Lock-in period (“Lock-in Period”) as described in Schedule – I of this agreement.\n `,{lineGap: 1})   

doc.fontSize(9).font('Helvetica-Bold').text(`7.2.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrowers may exercise the option of pre-payment/repayment/foreclosure post Lockin-period, where applicable, subject to the Borrowers and/or the guarantor(s) complying with the following conditions and at the absolute discretion of the Lender. After the expiry of Lock-in Period as provided in Schedule - I here under, the Borrowers shall givethe Lender a notice of 45 days intimating his desire to repay/ prepay/ foreclose the loan and the Lender may accept repayment/ prepayment/ foreclosure together with prepayment charges/ fore closure charges as specified in Schedule -I, hereto and such charges is payable by the Borrower together with applicable taxes.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`7.3.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica')
   .text(`The amount repaid/prepaid shall first:\n\n`, { lineGap: 1 })
   .text(
      `7.3.1. Be used to credit the penal charges, charges, legal expenses if any, Arrears of installments, interest due up to date for the current month, The current month EMI, foreclosure / pre-payment charges and other expenses and taxes due as mentioned in this agreement.\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `7.3.2. If any amount remains after meeting the charges, then it shall be adjusted towards the principal amount. If the entire amount due for prepayment is not remitted then the amount so received by the Lender would be treated as an advance payment of future EMI and will be adjusted to EMI month on month, as and when the EMI falls due for payment.\n\n`, 
      { lineGap: 1, indent: 20 }
   )
   .text(
    `7.3.3. The Borrowers here by agrees that the Lender is not obliged to reverse the interest that may accrue on account of advance payment. The amount due under fore closure should be paid in full by the Borrower to the Lender to qualify the account foreclosure.\n\n`, 
    { lineGap: 1, indent: 20 }
 );


//------------------------------------------------new page 5 -------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica-Bold').text(`7.4.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Not with standing anything contained the Borrowers shall remit the monthly instalments without any default in terms of the Agreement. The Option to accept repayment/ prepayment or decline the request for repayment/prepayment during the Lock-in period is at the sole discretion of the Lender.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`7.5.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If the loan is being foreclosed by the Borrowers by obtaining financial assistance from any other financial institution/ Bank/ NBFC/ Third party, the Borrower shall be charged additional prepayment/foreclosure charges at the rate specified in Schedule - I herein, which is payable together with applicable Goods and Service Tax (GST) by the Borrower in addition to the applicable foreclosure charges. Furthermore, the Borrower undertakesand agrees to execute such documents as the company may require and abide by such amended/altered repayment schedule as specified by the company.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`7.6.    `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If the Borrowers requests for repayment/ prepayment/ foreclosure during the Lock-inperiod, then the Lender is at liberty to refuse the repayment/prepayment or in the alternative lay down conditions for acceptance at its discretion which the Borrower is at liberty to accept or otherwise.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(10).font('Helvetica-Bold').text(`8. CONDITIONS PRECEDENT TO DISBURSEMENT OF LOAN`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica').text(`The obligation of the Lender to make the disbursement of the Loan shall be subject to the condition that:\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower meets the Lender’s requirement of creditworthiness. The Lender shall be entitled to make or cause to be made inquiries of such nature as the Lender may deem fit for the creditworthiness of the Borrower. The Lender shall be further entitled to call for such credentials from the Borrower as may be required to prove the creditworthiness of the Borrower.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No Events of Default as stated in Clause 13.a shall have happened and be continuing.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower or Security Provider (as the case may be) shall have absolute, clear and marketable title to the said Immovable Property and the said Immovable Property is absolutely unencumbered and free from prior charges/lien whatsoever.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No extraordinary circumstances shall have occurred which shall make it improbable for the purpose for which Loan is provided to be carried out and/or for the Borrower to fulfill its obligations under this Agreement;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower or the security provider shall have created and perfected security andor guarantees for the repayment of the Loan with interest in favour of the Lender asmay be required by the Lender and execute all necessary documents as may be stipulated by the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall have satisfied the Lender to the effect that there is no action, suit, proceedings or investigation pending or to the knowledge of the Borrower or is threatened by or against the Borrower, before any court of law or tribunal or anyother competent Government Authority which might have a effect on the financial and other affairs of the Borrower or which might put into question the validity or performance of this Agreement and/or other Transaction Documents executed by the Borrower in favour of the Lender`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Such other conditions precedents as may be detailed in the sanction letter.`,{lineGap: 1})

doc.moveDown(1)
doc.fontSize(10).font('Helvetica-Bold').text(`9. SECURITY`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`In consideration of Lender having granted/agreed to grant to the Borrower the Loan, the Borrower shall create and/or cause to create such security interest in such form and manner and of such nature as may be required by the Lender and also as provided in the Schedule here to to secure the Borrower's Outstanding Obligations`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`(“Security Interest”).`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower agrees with, and undertakes that the Lender, shall have a first and exclusive charge over the said Immovable Property as more particularly describe inthe Schedule III hereto and that the Borrower/Security Provider shall not create anyother encumbrance, charge or security interest in the Immovable Properties in favour of any other Person or body, except with the prior written consent of the Lender.\n\n `,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica')
   .text(`In addition to the above, the Borrower do the following:\n`, { lineGap: 1 })
   .text(
      `i. The Borrower shall execute money bond or a demand promissory note and a letter of continuity in favour of the Lender for the Loan;\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `ii. The Borrower shall or cause the Security Provider to execute any such agreement/s, document/s, undertaking/s, declaration/s that may be required now or here after at any time during the pendency of this Loan/or any other loan/sgranted by the Lender hereafter\n\n`, 
      { lineGap: 1, indent: 20 }
   )


//--------------------------------------------------new page 7 ----------------------------------

doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica')
   .text(
      `iii. The Borrower shall ensure that the deed of mortgage to be executed by the Borrower/Security Provider for creation of the mortgage over the immovable  property, be duly registered with the relevant Sub-Registrar of Assurances. Further, in case of equitable mortgage, the Borrower/Security Provider shall ensure that an intimation/notice is provided to the Sub-Registrar of Assurances informing him/her that a charge by way of equitable mortgage has been createdover the said Immovable Property, within the timelines and in the manner as provided for in the applicable law.\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `iv. The Borrower shall or cause the Security Provider to file all forms and make all filings as may be required under Applicable Law including, without limitation, the filing of Form CHG-1 under the Companies Act, 2013 with the applicable Registrar of Companies (if applicable), in respect of creation of charge as above with in 30 (Thirty) days from the date of creation of security.\n\n`, 
      { lineGap: 1, indent: 20 }
   )
   .text(
    `v. The Borrower shall or ensure that the Security Provider shall provide all cooperation and assistance that the Lender may require in relation to any filings required to be made with the Central Registry of Securitisation Asset Reconstruction and Security Interest and shall bear all cost, charges and expenses which may be incurred by the Lender in relation to such filings.\n\n`, 
    { lineGap: 1, indent: 20 }
 )
 doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall submit such number of advance Instalments as mentioned in the Schedule as a security deposit with the Lender towards the security for the repayment of the Outstanding Obligations`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`(“Security Deposit”).`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Security Deposit shall be returned/ refunded by the Lender to the Borrower only after there payment of entire Outstanding Obligations. The Security Deposit shall carry the interest at the rate specified in the Schedule hereto from the date of making such Security Deposit till the last Repayment and after which the Security Deposit shall cease to carry interest thereon. The Borrower shall not be entitled to withdraw or seek refund of the Security Deposit or any part there of till any amount payable to the Lender is due and pending. In the Event of Default as mentioned in this Agreement, the Lender shall be entitled to for feit the Security Deposit and interest there on andt he same shall be utilized towards the repayment of the Outstanding Obligations. Any amount of the Outstanding Obligations remaining unpaid to the Lender after such adjustment shall be paid by the Borrower immediately on such demand by the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall furnish such additional securities including additional guarantee(s), as the Lender may deem fit, in its sole discretion. In such an event the Borrower shall provide such additional security and in this regard execute such agreements, undertakings, documents, power of attorney/s that may be required by the Lender, failing with the Loan may be recalled/Repayment of the Loan may be accelerated by the Lender with immediate effect.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The security interest created in favour of the Lender shall continue in full force till all the Outstanding Obligation have been fully paid or discharged by the Borrower(s) to the Lender and until the Lender issues a ‘No Objection Certificate’ in this regard. The Security Interest of the Lender and the obligation of the Borrower shall not be affected, impaired or discharged by the winding up, or insolvency or by merger, amalgamation, reconstruction, or takeover of the management, dissolution or appropriation of the business or assets of the Borrower /Security Provider (as thecase may be).`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`If at any time during the subsistence of the Agreement, the Lender is of the opinion that any of the security provided by the Borrower has become inadequate to cover the balance of the Outstanding Obligations, then the Borrower shall provide and furnish such additional security including hypothecation and/or mortgage of or charge over such of the Borrower’s movable or immovable properties as may beacceptable to the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`h.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall, until the full repayment of the Outstanding Obligations, fully insure, and keep the Immovable Property and all other properties over which the Security Interest are created in favour of the Lender so insured against all comprehensive risks and assign the benefits of such policy/ies in with the name of the Lender appropriately endorsed and recorded as 'Assignee' in such insurance policy/ies, for a value as required by the Lender and produce evidence there of to the Lender from time to time and wherever called upon to do so.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall, until the full repayment of the Outstanding Obligations ensuresthat the above-mentioned insurance policy/ies are valid, subsisting and operative and shall make timely payments of the premium. The Lender reserves the right to pay the pay the premium on behalf of the Borrower and reimburse the same from the Borrower.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`j.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Lender shall have the right to receive and adjust any payment that it may receive in connection with any insurance policy / policies against the Loan and alter the repayment schedule as set out in Schedule II here under in any manner as it may deem fit not with standing anything to the contrary contained in this Agreement or any other document.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`k.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower here by irrevocably authorizes the Lender to act on the Borrower’s behalf, at the Borrower’s sole risks and costs and to take all necessary steps, actions and proceedings as the Lender deems fit to safeguard its interests: (i) to adjust, settle, compromise or refer to arbitration any dispute arising under or in connection withany insurance and such adjustment, settlement, compromise, and any award made on such arbitration shall be valid and binding on the Borrower, and (ii) to receive all monies payable under any such insurance or under any claim made there under and to give a valid receipt there for and apply such proceeds in accordance with the terms here of or in such other manner as deemed fit by the Lender.`,{lineGap: 1})


//--------------------------------------------------new page 8 ----------------------------------
doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica-Bold').text(`l.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall not be entitled to raise any claim against the Lender, in case the Lender chooses not to take any action in relation to the insurance claims or proceedings and/or on the grounds that a larger sum or amount of claims / settlement might or ought to have been received or be entitled to dispute the liability of the Borrower for the balance amount of Outstanding Obligations remaining due after such adjustment.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`m.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall permit the Lender, its employee, representative or its agents at all times, to have free access of the Immovable Property to inspect, view or examine the state and condition of the Immovable Property.`,{lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`10. BORROWER’S REPRESENTATIONS, WARRANTIES AND COVENANTS`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower here by represents, warrants and undertakers to the Lender that:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All the particulars and details provided by the Borrower to the Lender in this or any other Transaction Documents submitted are true correct, complete and up to date in all respect and no material details have been concealed which would have an effect on the decision of grant of the Loan`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower has full power, capacity, and authority to execute, deliver and perform the Transaction Documents and have taken all necessary action (corporate, statutory or otherwise) for the authorization, execution, delivery, and performance of this Agreement and Transaction Documents.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`It has not taken any corporate action nor has any steps been taken or legal proceeding been initiated or threatened against the Borrower for its winding up, insolvency, dissolution, administration, reorganization or for appointment of receiver, administrator of the Borrower or all or any of its assets or undertakings`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`As of the date of this Agreement, there are no litigation, proceedings or disputes pending or threatened against or affecting the Borrower which could have as ubstantially adverse effect on the Borrower, its business or operations, its assets orits ability to perform its obligations under this Agreement and other Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`the Borrower or the Security Provider (as the case may be) has absolute clear and marketable title to the Immovable Property and that the Immovable Property is absolutely unencumbered and free from any liability whatsoever`,{continued: false,lineGap: 1})
// doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
// doc.fontSize(9).font('Helvetica').text(`The Borrower or the Security Provider (as the case may be) shall continue to remainin occupation/possession of the Immovable Property and shall not part with thepossession thereof either partly or wholly until the entire Loan with interest has beenrepaid to the Lender.`,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower or the Security Provider (as the case may be) shall continue to remainin occupation/possession of the Immovable Property and shall not part with the possession thereof either partly or wholly until the entire Loan with interest has been repaid to the Lender.`,{lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`11. AFFIRMATIVE COVENANTS`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower covenants and undertakes that at so long as the amounts due under this Agreement shall remain outstanding and until the full and final payment of all the Outstanding Obligations, it shall, unless the Lender waives compliance in writing:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Utilize the Loan solely for the purpose stated by it to the Lender`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Maintain the Immovable Property in good order and condition and all necessary repairs, additions and improvements there to will be made during the currency of the Loan and that the Borrower will ensure that the value of the Property does not diminish`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. The Borrower shall notify the Lender of any change in the Borrower's employment, business or profession. In the event the Borrower is self-employed, the Borrower hereby undertakes to keep the Lender informed about the financials of his business on a regular basis as may be notified to him by the Lender. In the event the Borrower is a company, partnership or sole proprietary, the Borrower shall provide the Lender such information and/or documents as may be required by the Lender.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Comply with all the terms and conditions of holding the Immovable Property and all the rules, regulations, bye-laws, etc., of the concerned co-operative society,association, company or any other competent government authority and pay maintenance charges, municipal tax and other charges in relation to the Immovable Property as also any other dues, etc., as may be payable in respect of the Immovable Property and/or of the use thereo.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Promptly inform the Lender of any loss or damage to Property due to any act of God or damage or other risks against which the Property may not have been insured.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Regularly and punctually repay and discharge all the Outstanding Obligations in the manner set out herein. Not with standing the Repayment Schedule here under, the Borrower agrees that the Lender shall have the right to be paid on demand the entire Outstanding Obligations.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Maintain its corporate existence and obtain, comply with the terms of and do all that is necessary to maintain in full force and effect all authorisation, approvals, licenses and consents required to enable it to law fully carry on its business`,{lineGap: 1})


//-----------------------------------------------------new page 9 ------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(6);

doc.fontSize(9).font('Helvetica-Bold').text(`h.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Obtain, comply with the terms of and do all that is necessary to maintain in full force and effect all authorization, approvals, licenses and consents required to enable it to enter into and perform its obligation under this Agreement and to ensurelegality validity, enforceability or admissibility in evidence of any of the Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Inform the Lender of any material litigation, arbitration or other proceedings which affect the Borrower and/or the Immovable Property, forthwith upon such proceedings being instituted or threatened by any persons making a claim for money against the Borrower and/or the Immovable Property;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`j.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Promptly inform the Lender of any occurrence of which it becomes aware which might adversely affect the Borrower or affect its ability to perform its obligations under any of the Transaction Documents;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`k.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Promptly inform the Lender of the occurrence of any Event of Default and of the steps being taken to remedy the same and will from time to time, if so requested by the Lender, confirm to the Lender in writing that save as otherwise stated in such confirmation, no other Event of Default has occurred and is continuing`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`l.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`appraise the Lender of the occurrence or likely occurrence of any event which is likely to affect the capacity of the Borrower(s) to repay the Outstanding Obligations or likely to affect the security for the said Loan or the obligations of the Borrower to FICCL in respect of the said Loan`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`m.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. forth with inform the Lender on the occurrence or likely occurrence of, inter alia, any of the following events, namely, the occurrence of any event which is likely to affect the Borrower(s) business, steps taken by authorities for recovery of statutory,dues, etc.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`n.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`pay regularly all taxes, assessment dues, duties and impositions as may, from time to time, be payable to any Government body or authority`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`o.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`pay and reimburse to the Lender all governmental charges, taxes or penalties imposed on or in pursuance of this Agreement or on any instruments issued here under;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`p.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`bear all costs of making good any deficit in stamp duty on the documents executedby the Borrower or any other person in relation to the Loan and/or security createdby the Borrower in favour of the Lender; and`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`q.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`perform and execute, on request of the Lender, such acts and deeds, as may be necessary to carry out the intent of this Agreement.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`12. NEGATIVE COVENANTS`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica').text(`The Borrower covenants and undertakes that at so long as the amounts due under this Agreement shall remain outstanding and until the full and final payment of all the Outstanding Obligations, it shall not, unless previously approved by the Lender in writing:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Make any changes in its constitution, business management, ownership or control and shall not alter its constitutional / incorporation documents (as applicable)`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Undertake or permit any merger, de-merger, consolidation, reorganization, scheme of arrangement or compromise with its creditors or shareholders or effect any scheme of amalgamation or reconstruction`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Create any encumbrance or lien of any nature whatsoever over the ImmovableProperty;`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Sell, transfer, lease, give on leave and license basis, alienate, or otherwise part with the possession of the Immovable Property or any part thereof`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Enter into any agreement or arrangement with any Person, institution or local or Government body for the use, occupation or disposal of the Immovable Property or any part there of.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Stand surety for anybody or guarantee the repayment of any loan or the purchase price of any asset`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Execute any document, such as power of attorney, or any other similar or other deed, in favour of any Person to deal with the Immovable Property in any manner`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`h.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Effect any oral or other partition of the immoveable Property or enter into any family arrangement in this regard.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`i.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Borrow from any source or charge any property until the Borrower's Outstanding Obligations are paid in full.`,{continued: false,lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`13. EVENT OF DEFAULT`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(` The occurrence of any one or more of the following events or events similar there to, shall each constitute an event of default`,{lineGap: 1,continued: true})
doc.fontSize(9).
font('Helvetica-Bold')
   .text(`(“Event of Default”):\n`, { lineGap: 1 });
doc.fontSize(9).
font('Helvetica')
   .text(
      `i. Default or delay in payment/repayment of any Instalment or any part there of, whether for principal or interest or otherwise due and payable from the Borrower under this Agreement, within the time stipulated here under and/or other Transaction Documents\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )


//---------------------------------------------- new page 10 ---------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica')
   .text(
      `ii. Any breach or omission or default (other than a payment default) in performance of any covenant, condition, obligations or undertaking under this Agreement or the Transaction Documents by the Borrower, guarantor or any other person (as the case may be) and such default has continued for a period of 7 (seven) days after the notice in writing there of has been given to the Borrower or as the case may be to any other person by the Lender(except where the Lender is of the opinion that such default is incapable of remedy, in which case, no notice shall be required);\n\n`, 
      { lineGap: 1, indent: 20 }
   )

doc.fontSize(9).font('Helvetica')
   .text(`iii. Any representation or warranty or covenant on the part of the Borrower made or deemed to be made in or pursuant to the Transaction Documents is or proves to be incorrect, incomplete or misleading in any material respect;\n\n`, { lineGap: 1,indent: 20  })
   .text(
      `iv. Failure by the Borrower to keep the immovable property full and comprehensively insured from time to time and punctually pay the insurance premium on such policies as and when due;\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
      `v. Failure by the Borrower to provide the insurance policies of the Immovable Property with endorsement of hypothecation in favour of the Lender as per Clause 9.h of the Agreement;\n\n`, 
      { lineGap: 1, indent: 20 }
   )
   .text(
    `vi. The Immovable Property or any part there of is let out, given on leave and Version 1.3 14of66license, sold, disposed of, charged, encumbered or otherwise alienated in anymanner whatsoever without written approval of the Lender\n\n`, 
    { lineGap: 1, indent: 20 }
 )
 .text(
  `vii. The Borrower or guarantors, if any (in case of either of them being acorporation or partnership firm) takes any action or other steps are taken or legal proceedings are started for insolvency, winding up, dissolution or reorganization or for the appointment of a liquidator, receiver, trustee or similar officer on its assets\n\n`, 
  { lineGap: 1, indent: 20 }
)
.text(
  `viii. The Borrower or guarantors, if any (in case of being an individual) dies or takes any steps or any steps are taken with a view to his being made in solvent in any jurisdiction or with a view to the appointment of a receiver, trustee or similar officer of any of his assets\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `ix. if the Borrower ceases or threatens to cease to carry on any of its businesses or gives notice of its intention to do so or if all or any part of the assets of the Borrower required or essential for its business or operations are damaged or destroyed or there occurs any change from the date of this Agreement in thegeneral nature or scope of the business, operations, management, orownership of the Borrower, which could have a material adverse effect\n\n `, 
  { lineGap: 1, indent: 20 }
) .text(
  `x. The Immoveable Property or any part there of is (or sought to be) attached, taken into custody by any official, authority or any other person or made the subject of any legal or execution proceedings\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `xi. The Immoveable Property depreciate in value to such an extent that the Lender is of the opinion that further security should be given and such further security is not given on written demand\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `xii. An event of default howsoever described (or any event which with the giving of notice, lapse of time, determination of materiality, or fulfilment of any other applicable condition or any combination of the foregoing would constitute an event of default) occurs under any agreement or document relating to any in debtedness of the Borrower or if any other financial institutions or banks with whom the Borrower has entered into agreements for financial assistance have recalled its assistance or any part there of\n\n`, 
  { lineGap: 1, indent: 20 }
) .text(
  `xiii. The Borrower is unable or has admitted in writing its inability to pay any of its Borrower(s) Dues as they mature or when due and /or demanded by the Lender\n\n`, 
  { lineGap: 1, indent: 20 }
)
.text(
  `xiv. One or more events, conditions or circumstances (including any change in law) occur or exist, which in the sole opinion of the Lender, could have a material adverse effect on the ability of the Borrower to pay / repay the Loan or`, 
  { lineGap: 1, indent: 20 }
)
.text(
  `xv. The Borrower fails to inform the Lender of the occurrence of any Event of Default or any event which after the notice or lapse of time, or both, would become an Event of Default.\n\n`, 
  { lineGap: 1, indent: 20 }
)

doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall promptly notify the Lender in writing upon becoming aware of any default and any event which constitutes an Event of Default and the steps, if any, being taken to remedy it. The decision of the Lender as to whether or not an Event of Default has occurred shall be final and binding upon the Borrower.`,{lineGap: 1})


//--------------------------------------------------new page 11 ----------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(9).font('Helvetica-Bold').text(`14. EFFECT OF EVENT OF DEFAULT`,{align:"true",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`With out prejudice to the other rights or remedies available to the Lender under Applicable Law, on the occurrence of an Event of Default, the Lender shall been titled to exercise any or all of the following rights (whether simultaneously orother wise), at the sole discretion of the Lender:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica')
   .text(`i. Declare that the obligation of the Lender to make or continue to make the Loan available, stands terminated`, { lineGap: 1,indent: 20  })
   .text(
      `ii. Declare that the entire Outstanding Obligation is immediately due and payable to the Lender, where upon the same shall become immediately due and payable by the Borrower and the Borrower shall pay the entire Outstanding Obligation in accordance with the terms of the notice without any further notice or other legal formalities of any kind;\n\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
    `iii. Invoke the guarantee, if any for payment of the Outstanding Obligations and/or\n\n`, 
    { lineGap: 1, indent: 20 } // Adjust `indent` as needed
 )
 .text(
  `iv. Exercise any right, power or remedy permitted to it by law, including by suit, in equity or by action at law, or both, or otherwise (including appointment of receiver), whether for specific performance of any covenant, condition or term contained in this Agreement or for an injunction against a violation of any of the terms and conditions of this Agreement, or in aid of the exercise ofany power or right granted in this Agreement.\n\n`, 
  { lineGap: 1, indent: 20 } // Adjust `indent` as needed
)
 
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(` If the Borrower defaults in the repayment of the Outstanding Obligation any part there of, as stated in the Clause a.ii, on the notified date, the Lender shall have the right to enter upon and take possession of the Immovable Property or any part of it and enforce its security interest over the Immovable Property and exercise such other rights and remedies as permitted or available under Applicable Law.`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall pay all costs/ expenses/ charges / fees in connection with the enforcement of the Lender’s rights including cheque bouncing charges, possession charges, legal charges, charges of agencies hired for disposal of the Immovable Property auction charges, expenses for making the Immovable Property market able or for its preservation (including insurance, taxes etc.), if incurred, or any expense other wise how so ever incurred in relation to the Immovable Property and other miscellaneous charges either due to default of the Borrower(s), or at the time of enforcement of the security interest over the Immoveable Property.`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`15. INDEMNITY`,{align:"left",lineGap: 1})
doc.moveDown(1)

doc.fontSize(9).font('Helvetica').text(`The Borrower shall, without prejudice any right of the Lender, indemnify and hold harmless the Lender, its directors, officers, employees, consultants, agencies, appointees or representatives against all costs (including advocates’ fee), expenses, penalties, losses, compensation, damage, damages, suits, actions, proceedings, claims, liabilities, consequences of whatsoever nature arising from:`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Occurrence of Events of Default or`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any failure by any of the Borrower to comply with the provisions of this Agreement and/or other Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any acts of omission and commission or breach of this Agreement or theTransaction Documents or any representation, warranty, covenant being false, misleading, untrue or incorrect or`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Enforcement of its rights in relation to the Immovable Property`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`non-payment or insufficient payment of stamp duty by the Borrower on thisAgreement or any other Transaction Documents`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Borrower failing to take necessary action to protect the interest of the Lender andwhole or any part of the Immovable Property`,{lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`16. ASSIGNMENT/TRANSFER/SECURITISATION`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower expressly recognizes and accepts that the Lender shall be absolutely entitled to, and has full power and authority to sell, assign or otherwise transfer in Version 1.3 16of66any manner whatsoever, in whole or in part, and in such manner and on such terms as the Lender may decide (including if deemed appropriate by the Lender reserving a right to retain its power to proceed against the Borrower on behalf of the purchaser, assignee or transferee) any or all outstanding and dues of the Borrower, to any third party of the Lender’s choice without any further reference or intimation or notice tothe Borrower, and without seeking any consent of the Borrower. Any such action and any such sale, assignment or transfer shall bind the Borrower to accept such third party as creditor exclusively or as a joint creditor with the Lender or any other person, as the case may be. Any costs in this behalf, whether on account of such sale, assignment or transfer or enforcement of rights and recovery of outstanding and dues, shall be to the account of the Borrower.\n\n`,{lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.   `,{continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower shall not assign this Agreement or any of the rights, duties or obligations of the Borrower here under, except with prior written consent of the Lender.`,{lineGap: 1})


//------------------------------------------new page -----------------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(10).font('Helvetica-Bold').text(`17. CROSS COLLATERAL`,{align:"left",lineGap: 1})
doc.moveDown(1);

doc.fontSize(9).font('Helvetica').text(`The Borrower acknowledges that in the event of repayment by the Borrower of the Outstanding Obligation under this Agreement but there being any outstanding by the Borrower under any other financial facility availed by the Borrower or its affiliates from the Lender, then in such event the Lender shall not be obliged to release the securitycreated by the Borrower under this Agreement/Transaction Documents and the Borrower hereby authorizes the Lender to extend the security to cover such outstanding financial facility. Likewise, in the event of there being any outstanding by the Borrower under this Agreement, the Lender shall not be obliged to release the security created by the Borrower for any other financial facility availed of by the Borrower from the Lender and the Borrower undertakes to extend such security to cover the outstanding due under this Agreement.`,{lineGap: 1})
doc.moveDown(1);
doc.fontSize(10).font('Helvetica-Bold').text(`18. SUBORDINATE DEBT`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica').text(`The Borrower does hereby agree declare confirm and undertake that all loans, advances, and other monies advanced by its group companies/ associates/ the directors, partners, and/or their friends and relatives or any of them shall stand and be regarded as subordinate debt in comparison with the Loan hereby granted. The Borrower does here by further declare and undertake that the Borrower shall not repay any of such loans and advances in whole or in part or pay any interest thereon until such time as the entire Outstanding Obligation of the Lender under and in pursuance of the Loan and/or this Agreement are repaid in full.`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(10).font('Helvetica-Bold').text(`19. DISCLOSURE OF INFORMATION`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`a.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Lender shall, as it may deem appropriate and necessary, be entitled to disclose all or any: (i) information and data relating to the Borrower; (ii) information or data relating to the Loan / Transaction Documents; (iii) obligations assumed / to be assumed by the Borrower in relation to the Loan under this Agreement and other Transaction Documents; (iv) default, if any, committed by the Borrower of the a fore said obligations, to the CIBIL and any other agency authorized in this behalf bythe RBI. The CIBIL and/or any other agency so authorized may use and/or processthe aforesaid information and data disclosed by the Lender in any manner as deemedfit by them. The CIBIL and/or any other agency so authorized may furnish for consideration, the processed information and data or products thereof prepared by them, to Lender / financial institutions and other credit grantors or registered users, as may be specified by RBI in this behalf.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`In case the Borrower commits any default in payment or repayment of the Outstanding Obligations, the Lender and/or the RBI will have an unqualified right to disclose or publish the details of such default along with the name of the Borrower and/or its directors / partners / co-applicants, as applicable, as defaulters in such manner as the Lender and/or RBI may, in their absolute discretion, think fit. The Borrower shall not hold the Lender responsible for sharing and/or disclosing the information now or in the future and also for any consequences suffered by the Borrowers and/or others by reason thereof. The provisions of this clause shall survive ever after the termination of this Agreement and the repayment of the Borrower’s Outstanding Obligations`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(10).font('Helvetica-Bold').text(`20. DISPUTE RESOLUTION`,{align:"left",lineGap: 1})
doc.moveDown(1);
doc.fontSize(9).font('Helvetica-Bold').text(`a.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All disputes, differences and / or claims arising out of this Agreement including constructions, meaning or effect hereof or as to the right and liabilities of the parties here under shall be settled by arbitration to be held in accordance with the provisions of the Arbitration and Conciliation Act, 1996 or any statutory amendments or reenactments there of and shall be referred to a sole arbitrator to be nominated by the Lender. In the event of death, refusal, neglect, inability or incapability of a person soappointed to act as an arbitrator, the Lender shall appoint another person in his placeas the arbitrator. The venue and seat of the arbitration shall be Ahmedabad. The award of the arbitrator shall be final and binding on all parties concerned.\n\n`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.`,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All legal actions and/or proceedings arising out of / in connection with this Agreement and the Transaction Documents shall be brought in / before the courts or tribunals at Ahmedabad and the Borrower irrevocably submits itself in the jurisdiction of such courts and tribunals. The Lender may, however, in its absolute discretion commence any legal action or proceedings arising out of the Agreement in any other court, tribunal or other appropriate forum and Borrower(s) here by consents to that jurisdiction.`,{align:"left",lineGap: 1})


//--------------------------------------------------new page 13--------------------------------
doc.addPage();
// addLogo();
doc.moveDown(2);

doc.fontSize(10).font('Helvetica-Bold').text(`21. NOTICES`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`a.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`All notices or other communications under this Agreement or the Transaction Documents shall be given by the Borrower to the Lender in writing at the addresses specified in the Schedule I hereto. Such notice, demand, request or other communication shall be deemed to have been duly given or made when it shall be (a)delivered personally or (b) sent by facsimile; or (c) sent by registered mail with acknowledgement due, postage prepaid or courier; or (d) sent by email.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any communication or document made or delivered by one person to another under or in connection with the Finance Documents will be effective:\n\n`,{align:"left",lineGap: 1})

doc.fontSize(9).font('Helvetica')
   .text(
      `i. if delivered personally, on delivery; or\n`, 
      { lineGap: 1, indent: 20 } // Adjust `indent` as needed
   )
   .text(
    `ii. if by way of facsimile, when received in legible form; or\n`, 
    { lineGap: 1, indent: 20 } // Adjust `indent` as needed
 )
 .text(
  `iii. if by way of registered mail/courier, the date of receipt of such registered mail/courier (as demonstrated by the acknowledgement); or\n`, 
  { lineGap: 1, indent: 20 } // Adjust `indent` as needed
)
.text(
  `iv. if by way of email, as soon as the email leaves the system of the sender to be transmitted to the addressee.`, 
  { lineGap: 1, indent: 20 } // Adjust `indent` as needed
)
doc.fontSize(9).font('Helvetica-Bold').text(`c.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any notice given or communication made under any Finance Document must be in English Language.`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`22. MISCELLANEOUS`,{align:"left",lineGap: 1})
doc.moveDown(1)
doc.fontSize(9).font('Helvetica-Bold').text(`a.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The entries made in the account books/ record of the Lender maintained in accordance with its usual practice and in compliance with statutory requirements and / or a statement signed by a designated officer of the Lender, shall be final and binding on the Borrower. Such entries and / or statement shall be prima facie conclusive evidence of the existence and amount of obligations of the Borrower recorded in respect of the Loan.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`b.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`This Agreement and any other Transaction Documents integrate all the terms and conditions mentioned here in or incidental hereto, and supersede all oral negotiations and prior writings in respect of the subject matter hereof, except for those provisions of the Sanction Letter issued prior to this Agreement which are in addition to and complement, and are not in conflict with the terms of this Agreement. In the event ofany conflict between the terms and conditions of this Agreement and any agreement or documents, then in such event the terms and conditions of this Agreement shall prevail.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`c.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. The Lender reserves the right to use the information provided by the Borrower in this Agreement and the Transaction Documents and during surveys, informationfrom external sources, including consumer reports, for marketing activities carried out by the Lender / its affiliates/group companies. The Lender may use this information to develop mailing lists that may be used by companies with whom the Lender shall work to develop marketing offers for the Borrower`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`d.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`Any provision of this Agreement or any other Transaction Document, which is prohibited or unenforceable in any jurisdiction, shall, as to such jurisdiction, beineffective to the extent of the prohibition or unenforceability but that shall not invalidate the remaining provisions of this Agreement or such other Transaction Document or affect such provision in any other jurisdiction.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`e.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No delay in exercising or omission to exercise any right, power, or remedy accruing to the Lender under this Agreement or the other Transaction Documents shall impair any such right, power, or remedy or shall be construed to be a waiver there of or any acquiescence in such default, nor shall the action or inaction of the Lender in respect of any default or any acquiescence by it in any default, affect or impair any right, power, or remedy of the Lender in respect of any other default. The rights of the Lender under this Agreement and the other Transaction Documents may be exercised as often as necessary, are cumulative and not exclusive of their rights under the general law and may be waived only in writing and specifically and at the Lender’s sole discretion.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`f.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`No suit, action, prosecution, or other legal action shall lie against the Lender or anyof its directors, officers, employees, consultants, appraisers, valuers, auditors, Version 1.3 19of66agencies for any act done in good faith or intended to be done in pursuance of thisAgreement or any Transaction Documents.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`g.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`The Borrower acknowledges that he/authorizedx representative has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower in the language understood by the Borrower and the Borrower has understood the entire meaning of the terms and conditions and has affixed its signature after verifying and understanding the contents of this Agreement.`,{align:"left",lineGap: 1})
doc.fontSize(9).font('Helvetica-Bold').text(`h.    `,{align:"left",continued: true,lineGap: 1})
doc.fontSize(9).font('Helvetica').text(`. Nothing herein contained shall prejudice or adversely affect any general or special lien or right to set-off to which the Lender is or may by law or otherwise be entitled or any rights or remedies of the Lender including in respect of any present or future security, guarantee, obligations of the Borrower.`,{align:"left",lineGap: 1})



// -------------------------------------------- new page --------------------------------------  
 
 doc.addPage();
 // addLogo();
 //drawBorder();
 doc.moveDown(2);

    function DRAWTABLE(tableTitle, tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
      // Draw table title with a colored header
      doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
      doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5)
          .text(tableTitle, startX + 5, startY + 5, { align: 'center' });
    
      startY += 20; // Move down for the first row
    
      let sectionIndex = null; // Track the section index to span the column
      
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
    
          // Calculate row height based on the tallest content
          const rowHeight = Math.max(20, field1Height, value1Height) + 10; // Adding padding for better spacing
    
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
    
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Stroke color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
    
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
    
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
    
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
    }
    
    
    function DrawTablewithoutHeader(tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
      let sectionIndex = null; // Track the section index to span the column
      
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
    
          // Calculate row height based on the taller content
          const rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding
    
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
    
           if (["penal Charges"].includes(row.field1)) {
            rowHeight = Math.max(rowHeight, 38.5); 
                   }
    
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Line color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
    
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
    
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
    
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
    }
    
    
    // function DRawTable(tableTitle, tableData, spanIndex) {
    //   const startX = 50;
    //   let startY = doc.y + 10;
    //   const columnWidths = [500];
    //   const indexWidth = 30;
    //   const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
    //   const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
    //   // Add table title
    //   doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
    //   doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5).text(tableTitle, startX + 5, startY + 5, { align: 'center' });
    
    //   startY += 20; // Move down for the first row
    
    //   let sectionIndex = null;
    
    //   // Helper function to calculate the height of the text
    //   function calculateTextHeight(text, width) {
    //     return doc.font('Helvetica').fontSize(8.3).heightOfString(text, { width });
    //   }
    
    //   // Render each row in the table
    //   tableData.forEach((row, rowIndex) => {
    //       // Calculate the height needed for each cell's text
    //       const field1Height = calculateTextHeight(row.field1, keyWidth);
    //       const value1Height = calculateTextHeight(row.value1, valueWidth);
    //       const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
    
    //       // Display the index only once if it matches a section needing a span
    //       const indexLabel = row.index && spanIndex ? row.index : '';
    
    //       if (row.index) {
    //           sectionIndex = row.index;
    //       }
    
    //       // Draw the index in the first column (only once if spanIndex is true)
    //       if (indexLabel) {
    //           doc.fillColor('#ffffff')
    //               .rect(startX, startY, indexWidth, rowHeight * tableData.length).stroke().fill(); // Span vertically for entire section
    //           doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //               .text(indexLabel, startX + 5, startY + 5, { width: indexWidth - 10, height: rowHeight * tableData.length });
    //       }
    
    //       // Draw the key in the second column
    //       doc.fillColor('#f5f5f5')
    //           .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
    //       doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //           .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
    
    //       // Draw the value in the third column
    //       doc.fillColor('#ffffff')
    //           .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
    //       doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //           .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
    
    //       startY += rowHeight; // Move down to the next row, based on dynamic height
    //   });
    // }
    function DRawTable(tableTitle, tableData, spanIndex) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
      // Add table title
      doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
      doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5).text(tableTitle, startX + 5, startY + 5, { align: 'center' });
  
      startY += 20; // Move down for the first row
  
      let sectionIndex = null;
      let totalSectionHeight = 0;
  
      // Calculate total height needed for all rows if spanIndex is true
      tableData.forEach(row => {
          const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth - 10 });
          const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth - 10 });
          totalSectionHeight += Math.max(field1Height, value1Height) + 10;
      });
  
      // Draw the index as a single cell spanning the full height if spanIndex is true
      if (spanIndex && tableData[0].index) {
          sectionIndex = tableData[0].index;
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, totalSectionHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(sectionIndex, startX + 5, startY + (totalSectionHeight / 2) - 5, {
                  width: indexWidth - 10,
                  align: 'center',
                  height: totalSectionHeight
              });
      }
  
      // Render each row in the table without the index label
      tableData.forEach(row => {
          // Calculate the height needed for each cell's text
          const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth - 10 });
          const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth - 10 });
          const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
  
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
  
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
  
          startY += rowHeight; // Move down to the next row, based on dynamic height
      });
  }
  

  //   function DRawTable(tableTitle, tableData, spanIndex) {
  //     const startX = 50;
  //     let startY = doc.y + 10;
  //     const columnWidths = [500];
  //     const indexWidth = 30;
  //     const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
  //     const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
  //     // Add table title
  //     doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
  //     doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5).text(tableTitle, startX + 5, startY + 5, { align: 'center' });
  
  //     startY += 20; // Move down for the first row
  
  //     let sectionIndex = null;
  //     let totalSectionHeight = 0;
  
  //     // Calculate total height needed for all rows if spanIndex is true
  //     tableData.forEach(row => {
  //         const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth });
  //         const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth });
  //         totalSectionHeight += Math.max(field1Height, value1Height) + 10;
  //     });
  
  //     // Draw the index as a single cell spanning the full height if spanIndex is true
  //     if (spanIndex && tableData[0].index) {
  //         sectionIndex = tableData[0].index;
  //         doc.fillColor('#ffffff')
  //             .rect(startX, startY, indexWidth, totalSectionHeight).stroke().fill();
  //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
  //             .text(sectionIndex, startX + 5, startY + (totalSectionHeight / 2) - 5, {
  //                 width: indexWidth - 10,
  //                 align: 'center',
  //                 height: totalSectionHeight
  //             });
  //     }
  
  //     // Render each row in the table without the index label
  //     tableData.forEach(row => {
  //         // Calculate the height needed for each cell's text
  //         const field1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.field1, { width: keyWidth });
  //         const value1Height = doc.font('Helvetica').fontSize(8.3).heightOfString(row.value1, { width: valueWidth });
  //         const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
  
  //         // Draw the key in the second column
  //         doc.fillColor('#f5f5f5')
  //             .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
  //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
  //             .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
  
  //         // Draw the value in the third column
  //         doc.fillColor('#ffffff')
  //             .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
  //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
  //             .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
  
  //         startY += rowHeight; // Move down to the next row, based on dynamic height
  //     });
  // }
   
    function DRAWTable(tableData, spanIndex) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    
      doc.strokeColor('#000000'); // Set border line color to black for the entire table
    
    
      let sectionIndex = null;
    
      // Helper function to calculate the height of the text
      function calculateTextHeight(text, width) {
        return doc.font('Helvetica').fontSize(8.3).heightOfString(text, { width });
      }
    
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Calculate the height needed for each cell's text
          const field1Height = calculateTextHeight(row.field1, keyWidth);
          const value1Height = calculateTextHeight(row.value1, valueWidth);
          const rowHeight = Math.max(field1Height, value1Height) + 10; // Add padding for readability
    
          // Display the index only once if it matches a section needing a span
          const indexLabel = row.index && spanIndex ? row.index : '';
    
          if (row.index) {
              sectionIndex = row.index;
          }
    
          // Draw the index in the first column (only once if spanIndex is true)
          if (indexLabel) {
              doc.fillColor('#ffffff')
                  .rect(startX, startY, indexWidth, rowHeight * tableData.length).stroke().fill(); // Span vertically for entire section
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                  .text(indexLabel, startX + 5, startY + 5, { width: indexWidth - 10, height: rowHeight * tableData.length });
          }
    
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + 5, { width: keyWidth - 10 });
    
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
    
          startY += rowHeight; // Move down to the next row, based on dynamic height
      });
    }

  doc
    .fontSize(12)
    .font(fontBold)
    .text("Schedule I", { align: "center", underline: true });
  doc.moveDown(0.6);

  // Format the borrower details to the left side
  doc
    .font(fontBold)
    .fontSize(12)
    .fillColor("black")
    .text(
      "Details of the Loan",
        
      {
        lineGap: 1,
        align: "center",
         underline: true
      }
    );
    doc.moveDown(1);
    
//  unworked
    const AgreementDetails = [
      {index: '1',field1:"Date of the Agreement",value1:`${allPerameters.agreementdate}` },
      {index: '2',field1: "Place of Execution ",value1: `${allPerameters.placeOfExecution}` },
    ];
    DRAWTABLE("Agreement Details", AgreementDetails,false)
    doc.moveDown();

      const DetailsoftheBorrower = [
        {index: '3', field1: "Name of the Borrower(s)", value1: `${allPerameters.borrowerName}` },
        { field1: 'Constitution of the Borrower(s) ', value1: `${allPerameters?.constitutionBorrower}` },
        { field1: 'PAN/TAN/CIN of the Borrower(s)', value1: `${allPerameters.borrowerpanNo}` }, //unworked constitution
        { field1: 'Address of the Borrower(s)', value1: `${allPerameters.borroewraddress}` },
        { field1: 'Email – address(es)', value1: `${allPerameters.borroweremail}` },
        { field1: 'Phone No. (s)', value1: `${allPerameters.borrwermobileNo}` },
        {field1: 'Attention: Mr./Ms.', value1: `${allPerameters.borrowerName}` },// unworked mr/ms
    ];
    DRawTable("Details of the Borrower",DetailsoftheBorrower,true)
    
    doc.moveDown();
    
    const DetailsoftheCoBorrower = [
      { index: '4',field1: 'Name of the Borrower(s)', value1: `${allPerameters.coBorrowername}` },
      { field1: 'Constitution of the Co-Borrower(s) ', value1: `${allPerameters.constitutionCoBorrower}` },
      { field1: 'PAN/TAN/CIN of the Co-Borrower(s)', value1: `${allPerameters.panTanCin}` },
      { field1: 'Address of the Co-Borrower(s)', value1: `${allPerameters.coBorroweraddress}` },
      { field1: 'Email – address(es)', value1: `${allPerameters.coBorroeremail}` },
      { field1: 'Phone No. (s)', value1:  `${allPerameters.coBorrowerphoneNo}` },
      { field1: 'Attention: Mr./Ms.', value1: `${allPerameters.coBorrowername}` },
    ];
    
    DRawTable("Details of the Co-Borrower", DetailsoftheCoBorrower,true);
    doc.moveDown();

    // const DetailsoftheCoBorrower2 = [
    //   { index: '4',field1: 'Name of the 2nd Borrower(s)', value1: `${allPerameters.coBorrowername2}` },
    //   { field1: 'Constitution of the 2nd Co-Borrower(s) ', value1: `${allPerameters.constitutionCoBorrower2}` },
    //   { field1: 'PAN/TAN/CIN ', value1: `${allPerameters.panTanCin2}` },
    //   { field1: 'Address of the 2nd Co-Borrower(s)', value1: `${allPerameters.coBorroweraddress2}` },
    //   { field1: 'Email – address(es)', value1: `${allPerameters.coBorroeremail2}` },
    //   { field1: 'Phone No. (s)', value1:  `${allPerameters.coBorrowerphoneNo2}` },
    //   { field1: 'Attention: Mr./Ms.', value1: `${allPerameters.coBorrowername2}` },
    // ];
    
    // DRawTable("Details of the 2nd Co-Borrower", DetailsoftheCoBorrower2,true);
    // doc.moveDown();
    
    // const DetailsoftheGuarantor = [
    //   { index: '5', field1: "Name of the Guarantor", value1: `${allPerameters.guarantorname}` },
    //   { field1: 'Constitution of the Guarantor', value1:  `${allPerameters.constitutionGuarentor}` },
    //   { field1: 'PAN/TAN/CIN of the Guarantor', value1: `${allPerameters.guarantorpanTanCin}` },
    //   { field1: 'Address of the Guarantor', value1:  `${allPerameters.guarantoraddress}` },
    //   // { field1: 'Email – address(es)', value1: `${req.body.detailsoftheGuarantor?.email}` },
    
    //   // { field1: 'Phone No. (s)', value1: `${req.body.detailsoftheGuarantor?.phoneNo}` },
    //   // { field1: 'Attention: Mr./Ms', value1: `${req.body.detailsoftheGuarantor?.attentioMrMs}`},
    
    
    // ];
    // DRawTable("Details of the Guarantor", DetailsoftheGuarantor, true);
    
    
    
      ////addFooter();
    
//       //---------------------------------NEW PAGE ------------------------------------------------
      
    
//       // //---------------------------------------------------new page---------------------------------------------------------------
      doc.addPage();
      // addLogo();
      //drawBorder();
    
      doc.moveDown(2);

      // const DetailsoftheGuarantor = [
      //   { index: '5', field1: "Name of the Guarantor", value1: `${allPerameters.guarantorname}` },
      //   { field1: 'Constitution of the Guarantor', value1:  `${allPerameters.constitutionGuarentor}` },
      //   { field1: 'PAN/TAN/CIN of the Guarantor', value1: `${allPerameters.guarantorpanTanCin}` },
      //   { field1: 'Address of the Guarantor', value1:  `${allPerameters.guarantoraddress}` },
      //   { field1: 'Email – address(es)', value1: `${allPerameters.guarantoremail}` },
      
      //   { field1: 'Phone No. (s)', value1: `${allPerameters.guarantorphoneNo}` },
      //   { field1: 'Attention: Mr./Ms', value1: `${allPerameters.guarantorname}`},
      
      
      // ];
      // DRawTable("Details of the Guarantor", DetailsoftheGuarantor, true);
    
      // const DetailsoftheGuarantorr = [
        
      //   { index:'.',field1: 'Email – address(es)', value1: `${allPerameters.guarantoremail}` },
      
      //   { field1: 'Phone No. (s)', value1: `${allPerameters.guarantorphoneNo}` },
      //   { field1: 'Attention: Mr./Ms', value1: `${allPerameters.guarantorname}`},
      
      
      // ];
      // DRAWTable( DetailsoftheGuarantorr, true);
    
      const DetailsoftheBranch = [
        {index: '6', field1: 'Place of the Branch ', value1: `${allPerameters.branchplace}` },
        { field1: 'Address of the Branch', value1: `${allPerameters.branchaddress}` },
        { field1: 'Email – address(es)', value1: `${allPerameters.branchemail}` },
        { field1: 'Phone No. (s)', value1: `${allPerameters.branchphoneNo}` },
        { field1: 'Attention: Mr./Ms.', value1: `${allPerameters.attentionMrMs}` },
      ];
    
      DRawTable("Details of the Branch", DetailsoftheBranch,true);
    
      doc.moveDown();
    
    
      const DetailsoftheLoan = [
        { index: '7',field1: 'Sanction Letter No.', value1: `${allPerameters.sanctionLetterNo}` },
        {index: '8', field1: 'Date of Sanction Letter', value1: `${allPerameters.sanctionLetterDate}` },
      
        { index: '9',field1: 'Facility Type ', value1: `${allPerameters.facilityType}` },
        { index: '10',field1: 'Specified Purpose ', value1: `${allPerameters.specifiedPurpose}` },
        {index: '11', field1: 'Amount of Loan', value1: `${allPerameters.amountOfLoan}/-(${allPerameters.loanAmountInWord})`},
        {index: '12', field1: 'Rate of Interest', value1: `${allPerameters.rateOfInterest}% Per Annum (FRR – 19.20% + ${allPerameters.interestType1}%)` },
        // {index: '13', field1: 'Login Fees .', value1: `${allPerameters.loginFees}` },
        { index: '13',field1: 'Loan Processing fee', value1: `${allPerameters.loanProcessingFees}` },
        // { index: '15',field1: 'Documentation Charges', value1: `${allPerameters.documentCharges}` },
        { index: '14',field1: 'Tenure of Loan ', value1: `${allPerameters.tenureOfLoan} months` },
        {index: '15', field1: 'Penal charges', value1: `${allPerameters.penalCharges}`},
        {index: '16', field1: 'Repayment Method ', value1: `${allPerameters.repaymentMethod}` },
        { index: '17',field1: 'Monthly Installment Date', value1: `10th of the month` },
        { index: '18',field1: `Repayment Date of all Outstanding Obligations\n(End date of loan Tenure)`, value1: `${allPerameters.endDateOfLoanTenure}` },
        { index: '19',field1: 'Number of Installments', value1:`${allPerameters.tenureOfLoan} months` },
        // { index: '19',field1: 'Monthly Installment Date ', value1: '10th of the month' },
        // { index: '20',field1: `Repayment Date of all Outstanding Obligations\n(End date of loan Tenure)`, value1: 'As per Repayment Schedule' },
        // { index: '21',field1: 'Number of Installments', value1: '60 months' },
        // {index: '22', field1: 'Foreclosure of Loan ', value1: 'No Foreclosure allowed till completion of 12 months from the date of 1st disbursement.After completion of 12 months from the date of 1st disbursement, Foreclosure from personal funds may be made without incurring any fees.In case of balance transfer, 4% charges will be applicable.' },
        // {index: '23', field1: 'Taxes', value1: 'Goods and Services tax (GST) will be charged extra as per the applicable rates, on interest, penal charges,other charges and fees (wherever GST is applicable)' },
    //     {index: '24', field1: 'Security', value1: `1. Personal guarantee of PAWAN NAGAR ) \n 2. Corporate guarantee of NA \n 3. Demand Promissory Notes \n 4. Cheques as per UDC Covering Letter. \n 5. First and exclusive charge over the Immovable Property as mentioned in Schedule III.`},
    //     { index: '25',field1: 'Security Deposit/DSRA ', value1: 'NIL' },
    //     { index: '26',field1: 'Lock–in Period  ', value1: `The borrower shall not repay/prepay/foreclose any portion of the outstanding loan amount
    //   either in part or in full within 1 year completion of loan tenure from the date of 1st
    // disbursement of the loan.` },
    
      ];
      
      DRAWTABLE("Details of the Loan", DetailsoftheLoan);
      
      
      
      //addFooter();
    //=================-------------------------------------------------------
      doc.addPage();
      // addLogo();
      //drawBorder();
      // Add title and content from the image
      doc.moveDown(2);

    //   function DrawTablewithoutHeaderpenal(tableData) {
    //     const startX = 50;
    //     let startY = doc.y + 10;
    //     const columnWidths = [500];
    //     const indexWidth = 30;
    //     const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
    //     const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
      
    //     let sectionIndex = null; // Track the section index to span the column
        
    //     // Render each row in the table
    //     tableData.forEach((row, rowIndex) => {
    //         // Measure text height for row.field1 and row.value1
    //         const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
    //         const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
      
    //         // Calculate row height based on the taller content
    //         let rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding

    //         if (rowIndex === 0) { // Example for a specific row index
    //           rowHeight = Math.max(rowHeight, 50); // Custom height for row at index 5
    //       }

    //       else if (rowIndex === 1) { // Example for a specific row index
    //         rowHeight = Math.max(rowHeight, 10); // Custom height for row at index 5
    //     }

    //     else if (rowIndex === 2) { // Example for a specific row index
    //       rowHeight = Math.max(rowHeight, 10); // Custom height for row at index 5
    //   }

    //   else if (rowIndex === 8) { // Example for a specific row index
    //     rowHeight = Math.max(rowHeight, 10); // Custom height for row at index 5
    // }
      
    //         // Only display the index once per section, in the first row
    //         const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
    //         if (row.index) {
    //             sectionIndex = row.index; // Set current section index
    //         }
      
    //          if (["penal Charges"].includes(row.field1)) {
    //           rowHeight = Math.max(rowHeight, 45.5); 
    //                  }
      
    //         // Draw the index in the first column (only for the first row of each section)
    //         doc.fillColor('#ffffff')
    //             .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Line color set to black
    //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //             .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
      
    //         // Draw the key in the second column
    //         doc.fillColor('#f5f5f5')
    //             .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
    //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //             .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
      
    //         // Draw the value in the third column
    //         doc.fillColor('#ffffff')
    //             .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
    //         doc.font('Helvetica').fillColor('black').fontSize(8.3)
    //             .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
      
    //         // Move startY down by rowHeight for the next row
    //         startY += rowHeight;
    //     });
    //   }
    function DrawTablewithoutHeaderpenal(tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
      let sectionIndex = null; // Track the section index to span the column
  
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
  
          // Calculate row height based on the taller content
          let rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding
  
          // Custom adjustments for specific rows (if any)
          if (["penal Charges"].includes(row.field1)) {
              rowHeight = Math.max(rowHeight, 45.5);
          }
  
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
  
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Line color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
  
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
  
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3);
  
          if (row.field1 === 'Monthly Installment Date' && row.value1.includes('10th')) {
              const mainText = '10'; // The main numeric part
              const superscriptText = 'th'; // The superscript part
              const remainder = ' of the month'; // The rest of the string
  
              // Render "10"
              doc.text(mainText, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, {
                  continued: true, // Indicate that the next text is part of the same line
              });
  
              // Render "th" as superscript
              doc.fontSize(6).text(superscriptText, {
                  baseline: 'top', // Adjust baseline for superscript effect
                  continued: true,
              });
  
              // Render the remainder
              doc.fontSize(8.3).text(remainder);
          } else {
              // Default rendering for other rows
              doc.text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, {
                  width: valueWidth - 10,
              });
          }
  
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
  }
  
    
      const DetailsoftheBranchh =[
        // {index: '15', field1: 'Penal charges', value1: `${allPerameters.penalCharges}`},
        // {index: '16', field1: 'Repayment Method ', value1: `${allPerameters.repaymentMethod}` },
        // { index: '17',field1: 'Monthly Installment Date', value1: `10th of the month` },
        // { index: '18',field1: `Repayment Date of all Outstanding Obligations\n(End date of loan Tenure)`, value1: `${allPerameters.endDateOfLoanTenure}` },
        // { index: '19',field1: 'Number of Installments', value1:`${allPerameters.tenureOfLoan} months` },
        {index: '20', field1: 'Foreclosure of Loan ', value1: `${allPerameters.foreClosereOfLoan}` },
        {index: '21', field1: 'Taxes', value1: `${allPerameters.taxes}` },
        
        {index: '22', field1: 'Security', value1: `1. Personal guarantee of ${allPerameters.guarantorname} ) \n 2. Corporate guarantee of NA \n 3. Demand Promissory Notes \n 4. Cheques as per UDC Covering Letter. \n 5. First and exclusive charge over the Immovable Property as mentioned in Schedule III.`},
        { index: '23',field1: 'Security Deposit/DSRA ', value1: `${allPerameters.securityDepositOrDsra}` },
        { index: '24',field1: 'Lock–in Period  ', value1: `${allPerameters.lockPeriod}` },
    
      ];
      
      DrawTablewithoutHeaderpenal(DetailsoftheBranchh);

    
    
    function DrawCombinedTable(doc, sections) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const keyWidth = Math.round(columnWidths[0] * 1 / 3);
      const valueWidth = Math.round(columnWidths[0] * 2 / 3);
    
      sections.forEach(section => {
        // Section Header
        doc.rect(startX, startY, columnWidths.reduce((a, b) => a + b), 20)
            .fillAndStroke('#00a7ff', "#000000");
        doc.font(fontBold).fillColor('black').fontSize(9.5)
            .text(section.title, startX + 5, startY + 5, { baseline: 'hanging', align: 'center' });
    
        startY += 20;
    
        section.data.forEach((row, rowIndex) => {
            let valueRowHeight = 22;
    
            // Calculate dynamic row height
            const field1TextHeight = doc.heightOfString(row.field1, { width: keyWidth - 10 });
            const value1TextHeight = doc.heightOfString(row.value1, { width: valueWidth - 10 });
            valueRowHeight = Math.max(valueRowHeight, field1TextHeight, value1TextHeight);
    
            const backgroundColor = rowIndex % 2 === 0 ? '#f5f5f5' : '#ffffff';
    
            if (["Prepayment Charges"].includes(row.field1)) {
                       valueRowHeight = Math.max(valueRowHeight, 38.5); 
                   }

             if (["Installment Amount"].includes(row.field1)) {
                    valueRowHeight = Math.max(valueRowHeight, 38.5); 
                }
    
            // Render field and value cells
            doc.fillColor(backgroundColor).rect(startX, startY, keyWidth, valueRowHeight).stroke().fill();
            doc.font(font).fillColor('black').fontSize(8.3)
                .text(row.field1, startX + 5, startY + 5, { width: keyWidth - 10 });
    
            doc.fillColor(backgroundColor).rect(startX + keyWidth, startY, valueWidth, valueRowHeight).stroke().fill();
            doc.font(font).fillColor('black').fontSize(7.2)
                .text(row.value1, startX + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
    
            startY += valueRowHeight;
    
      });
    
        // Additional spacing between sections
        startY += 15;
      });
    
     
    }

    function DrawCombinedTable1(doc, sections) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const keyWidth = Math.round(columnWidths[0] * 1 / 3);
      const valueWidth = Math.round(columnWidths[0] * 2 / 3);
  
      sections.forEach(section => {
          // Section Header
          doc.rect(startX, startY, columnWidths.reduce((a, b) => a + b), 20)
              .fillAndStroke('#00a7ff', "#000000");
          doc.font(fontBold).fillColor('black').fontSize(9.5)
              .text(section.title, startX + 5, startY + 5, { baseline: 'hanging', align: 'center' });
  
          startY += 20;
  
          section.data.forEach((row, rowIndex) => {
              let valueRowHeight = 22;
  
              // Calculate dynamic row height
              const field1TextHeight = doc.heightOfString(row.field1, { width: keyWidth - 10 });
              const value1TextHeight = doc.heightOfString(row.value1, { width: valueWidth - 10 });
              valueRowHeight = Math.max(valueRowHeight, field1TextHeight, value1TextHeight);
  
              const backgroundColor = rowIndex % 2 === 0 ? '#f5f5f5' : '#ffffff';
  
              if (["Prepayment Charges"].includes(row.field1)) {
                  valueRowHeight = Math.max(valueRowHeight, 38.5);
              }
  
              if (["Installment Amount"].includes(row.field1)) {
                  valueRowHeight = Math.max(valueRowHeight, 38.5);
              }
  
              // Render field and value cells
              doc.fillColor(backgroundColor).rect(startX, startY, keyWidth, valueRowHeight).stroke().fill();
              doc.font(font).fillColor('black').fontSize(8.3)
                  .text(row.field1, startX + 5, startY + 5, { width: keyWidth - 10 });
  
              doc.fillColor(backgroundColor).rect(startX + keyWidth, startY, valueWidth, valueRowHeight).stroke().fill();
              doc.font(font).fillColor('black').fontSize(7.2)
                  .text(row.value1, startX + keyWidth + 5, startY + 5, { width: valueWidth - 10 });
  
              startY += valueRowHeight;
          });
  
          // Add blank row and custom content
          const blankRowHeight = 38.5; // Adjust height as needed
          doc.fillColor('#ffffff').rect(startX, startY, columnWidths[0], blankRowHeight).stroke().fill();
          doc.font(font).fillColor('black').fontSize(8)
              .text(
                  "NOTE: Goods and Services tax (GST) will be charged extra as per the applicable rates, on all the charges and fees (wherever GST is applicable). The aforementioned charges/fees may be modified by Ratnaafin Capital Private Limited from time to time upon prior intimation via acceptable modes of communication from Ratnaafin Capital Private Limited in this regard.",
                  startX + 5, startY + 5, { width: columnWidths[0] - 10, align: 'justify' }
              );
  
          startY += blankRowHeight;
  
          // Additional spacing between sections
          startY += 15;
      });
  }
  
  
    
    // Define data for each section
    const charges = {
      title: "CHARGES",
      data: [
        { field1: "Details", value1: `Particulars` },
        { field1: 'Processing Fees ', value1: `${allPerameters.processingFees}` },
        { field1: 'Document Processing Charges', value1: `${allPerameters.documentProcessingCharges}(For under construction cases 3% of loan amount + Applicable taxes)` },
        { field1: 'Prepayment Charges', value1: `${allPerameters.prepaymentCharges}` },
        { field1: 'Bounce Charges', value1: `${allPerameters.bounceCharges}` },
        { field1: 'Outstation Collection Charges', value1: `${allPerameters.outstationCollectionCharges}` },
        { field1: 'Cheque Swap Charges', value1: `${allPerameters.chequeSwapCharges}` },
        { field1: 'Stamp Duty', value1: `${allPerameters.stampDuety}` },
        { field1: 'Duplicate NOC charges', value1: `${allPerameters.duplicateNocCharges}` },
        
      ]
    };
    
    

    // Draw combined table
    DrawCombinedTable1(doc, [charges]);

    // doc.font(fontBold).fontSize(10)
    // .text(, 50, doc.y + 10);    
    
    //addFooter();
    
    doc.addPage();
      // addLogo();
      //drawBorder();
      // Add title and content from the image
      doc.moveDown(2);
      
      const chequeDetails = {   
        title: "CHEQUE DETAILS",
        data: [
            { field1: "Bank Name", value1: `${allPerameters.bankDetail}` },
            //accountNumber
            { field1: "Bank Account Number", value1: `${allPerameters.chequebankaccountNumber}` },
            { field1: "Number of Cheques", value1: `5` },
            { field1: "Chq S.N. (From-To)", value1: `${allPerameters.chequeNo1}-${allPerameters.chequeNo5}` },
            { field1: "Amount (in INR)", value1: `${allPerameters.chequeaccountInINR}` },
            { field1: "Local/Outstation", value1: `${allPerameters.chequelocalOutstation} ` }
        ]
      };
      
      const ecsNachDetails = {
        title: "DETAILS OF ECS/NACH",
        data: [
            { field1: "Bank Name", value1: `${allPerameters.bankDetail}` },
            { field1: "Bank Account Number", value1: `${allPerameters.chequebankaccountNumber}` },
            { field1: "Installment Amount", value1: `Rs.${allPerameters.ecsNachinstallmentAmounts}/-(if Applicable for the said case:-Interest & EMI has been Charged as Per Disbursement Amount. Once Your Case Gets Fully Disbursed EMI will be revised as per Principal Outstanding which may vary to the EMI as per sanction Letter.)` }
        ]
      };
    
      DrawCombinedTable(doc, [ chequeDetails, ecsNachDetails]);
    
    
    doc.moveDown()
    
    const sections = [
      {
        title: "LOAN DISBURSEMENT MODE",
        data: [
          {
            col1: "Account Transfer Type",
            col2: [
              { text: "Bank Name" },
              { text: "Type of Account (Savings/ Current)" }
            ],
            col3: [
              { text: `${allPerameters.bankDetail}` },
              { text: `${allPerameters.accTransfertypeOfAccount}` }
            ]
          },
          {
            col1: "RTGS/NEFT/IMPS",
            col2: [
              { text: "IFSC Code" },
              { text: "Bank Account Number" }
            ],
            col3: [
              { text: `${allPerameters.rtgifscCode}` },
              { text: `${allPerameters.chequebankaccountNumber}` }
            ]
          },
          {
           col1: "Use of Existing\nECS/NACH",  // Added gap with double newlines
            col2: [
              // { text: "e A/c Holder Name as per Bank Account" },
              // { text: "Cheque in favour of" },
              { text: `(yes/No)[Use]`}
            ],
            col3: [
              // { text: `${allPerameters.accountHolderName}` },
              // { text: `${allPerameters.inFavorOf}` },
              { text: "Cheque in favor of: Sheetal Kulkarni" }
            ],
            col3Split: {  // Split last row in col3 into two parts
              part1: "Use of Existing KYC documents",
              part2: `(yes/No)[Use]`
            }
          },
        ]
      }
    ];

    
    
    
    function DrawCTable(doc, sections) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [160, 160, 160];
    
      sections.forEach(section => {
        // Section Header
        doc.rect(startX, startY, columnWidths.reduce((a, b) => a + b), 20)
          .fillAndStroke('#00a7ff', "#000000");
        doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5)
          .text(section.title, startX + 5, startY + 5, { baseline: 'hanging', align: 'center' });
    
        startY += 20;
    
        section.data.forEach((row, index) => {
          let rowHeight = 22;
          const backgroundColor = index % 2 === 0 ? '#f5f5f5' : '#ffffff';
    
          // Calculate the height of col1 and check if nested rows exist in col2 and col3
          const col1Height = doc.heightOfString(row.col1, { width: columnWidths[0] - 10 });
          const maxRowHeight = Math.max(col1Height, rowHeight * row.col2.length);
    
          // Column 1 - Render with gap between lines
          doc.fillColor(backgroundColor).rect(startX, startY, columnWidths[0], maxRowHeight).stroke().fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
            .text(row.col1, startX + 5, startY + 5, { width: columnWidths[0] - 10, lineBreak: true });
    
          // Column 2 - Nested rows
          let nestedY = startY;
          row.col2.forEach(nestedRow => {
            doc.fillColor(backgroundColor).rect(startX + columnWidths[0], nestedY, columnWidths[1], rowHeight).stroke().fill();
            doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(nestedRow.text, startX + columnWidths[0] + 5, nestedY + 5, { width: columnWidths[1] - 10 });
            nestedY += rowHeight;
          });
    
          // Column 3 - Nested rows with last row split into two columns
          nestedY = startY;
          row.col3.forEach((nestedRow, rowIndex) => {
            if (rowIndex === row.col3.length - 1 && row.col3Split) {
              // Split the last row in col3 into two parts
              const halfWidth = columnWidths[2] / 2;
    
              // Part 1
              doc.fillColor(backgroundColor).rect(startX + columnWidths[0] + columnWidths[1], nestedY, halfWidth, rowHeight).stroke().fill();
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                .text(row.col3Split.part1, startX + columnWidths[0] + columnWidths[1] + 5, nestedY + 5, { width: halfWidth - 10 });
    
              // Part 2
              doc.fillColor(backgroundColor).rect(startX + columnWidths[0] + columnWidths[1] + halfWidth, nestedY, halfWidth, rowHeight).stroke().fill();
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                .text(row.col3Split.part2, startX + columnWidths[0] + columnWidths[1] + halfWidth + 5, nestedY + 5, { width: halfWidth - 10 });
            } else {
              // Regular nested row in col3
              doc.fillColor(backgroundColor).rect(startX + columnWidths[0] + columnWidths[1], nestedY, columnWidths[2], rowHeight).stroke().fill();
              doc.font('Helvetica').fillColor('black').fontSize(8.3)
                .text(nestedRow.text, startX + columnWidths[0] + columnWidths[1] + 5, nestedY + 5, { width: columnWidths[2] - 10 });
            }
            nestedY += rowHeight;
          });
    
          startY += maxRowHeight;
        });
    
        startY += 15;
      });
    };
    
    DrawCTable(doc, sections);

    const pageWidth = doc.page.width;
    doc.moveDown(2);

    
    doc
       .fontSize(12) 
       .text("Schedule II", (pageWidth / 2) - (doc.widthOfString("Schedule II") / 2), doc.y, {
           baseline: 'hanging'
       });
    
    doc.moveDown(1);
    
    // Center "Repayment Schedule"
    doc.fontSize(12)
       .text("Repayment Schedule", (pageWidth / 2) - (doc.widthOfString("Repayment Schedule") / 2), doc.y);
    
    doc.moveDown(1);
    
    // Center "As Separately Provided"
    doc
       .fontSize(12)
       .text("As Separately Provided", (pageWidth / 2) - (doc.widthOfString("As Separately Provided") / 2), doc.y, {
           lineGap: 1
       });
    
    doc.moveDown(1);

  //   function tableFunction1(tableData) {
  //     const startX = 53; // Starting X position
  //     let startY = doc.y + 10; // Starting Y position
  //     const boxWidth = 500; // Total width of the box
  //     const numFields = 7; // Fixed to 7 columns
  //     const fieldWidth = boxWidth / numFields; // Width per column
    
  //     let totalHeight = 0;
    
  //     // Calculate total height for the first 6 rows
  //     tableData.slice(0, 6).forEach((row) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
  //         let rowHeight = 0;
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }
  //         totalHeight += rowHeight;
  //     });
  
  //     // Add height for the 7th row (text-only, no columns)
  //     const finalRowHeight = doc
  //         .font('Helvetica')
  //         .fontSize(7.2)
  //         .heightOfString("As Separately Provided", { width: boxWidth }) + 10;
  //     totalHeight += finalRowHeight;
    
  //     // Draw the outer box
  //     doc.fillColor("#f0f0f0")
  //         .rect(startX, startY, boxWidth, totalHeight)
  //         .stroke("black")
  //         .fill();
    
  //     // Draw table content for the first 6 rows
  //     tableData.slice(0, 6).forEach((row, rowIndex) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
  //         let currentX = startX;
  //         let rowHeight = 0;
    
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10;
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }
  
  //         for (let field in row) {
  //             doc.fillColor("#f5f5f5")
  //                 .rect(currentX, startY, fieldWidth, rowHeight)
  //                 .stroke("black")
  //                 .fill();
    
  //             const isHeader = rowIndex === 0;
  //             doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
  //                 .fillColor("black")
  //                 .fontSize(7.2)
  //                 .text(row[field], currentX + 5, startY + 5, {
  //                     baseline: "hanging",
  //                     width: fieldWidth - 10,
  //                     align: 'left',
  //                 });
    
  //             currentX += fieldWidth;
  //         }
    
  //         startY += rowHeight; // Move to next row
  //     });
  
  //     // Draw the 7th row with no columns
  //     doc.font('Helvetica-Bold')
  //         .fillColor("black")
  //         .fontSize(7.2)
  //         .text("As Separately Provided", startX + 5, startY + 5, {
  //             width: boxWidth - 10,
  //             align: 'center',
  //         });
    
  //     // Adjust starting Y for the final row
  //     startY += finalRowHeight;
  // }
  function tableFunction1(tableData) {
    const startX = 53; // Starting X position
    let startY = doc.y + 10; // Starting Y position
    const boxWidth = 500; // Total width of the box
    const numFields = 7; // Fixed to 7 columns
    const fieldWidth = boxWidth / numFields; // Width per column
    const padding = 5; // Padding between text and cell boundaries
  
    let totalHeight = 0;
  
    // Calculate total height for the first 6 rows
    tableData.slice(0, 6).forEach((row) => {
      if (Object.values(row).every((value) => !value || value.trim() === "")) return;
  
      let rowHeight = 0;
      for (let field in row) {
        const fieldTextHeight = doc
          .font("Helvetica")
          .fontSize(7.2)
          .heightOfString(row[field] || "", { width: fieldWidth - 2 * padding }) + 2 * padding; // Add padding
        rowHeight = Math.max(rowHeight, fieldTextHeight);
      }
      totalHeight += rowHeight;
    });
  
    // Add height for the 7th row (text-only, no columns)
    const finalRowHeight =
      doc
        .font("Helvetica")
        .fontSize(7.2)
        .heightOfString("As Separately Provided", { width: boxWidth - 2 * padding }) +
      2 * padding;
    totalHeight += finalRowHeight;
  
    // Draw the outer box
    doc
      .fillColor("#f0f0f0")
      .rect(startX, startY, boxWidth, totalHeight)
      .stroke("black")
      .fill();
  
    // Draw table content for the first 6 rows
    tableData.slice(0, 6).forEach((row, rowIndex) => {
      if (Object.values(row).every((value) => !value || value.trim() === "")) return;
  
      let currentX = startX;
      let rowHeight = 0;
  
      for (let field in row) {
        const fieldTextHeight =
          doc
            .font("Helvetica")
            .fontSize(7.2)
            .heightOfString(row[field] || "", { width: fieldWidth - 2 * padding }) + 2 * padding;
        rowHeight = Math.max(rowHeight, fieldTextHeight);
      }
  
      for (let field in row) {
        doc
          .fillColor("#f5f5f5")
          .rect(currentX, startY, fieldWidth, rowHeight)
          .stroke("black")
          .fill();
  
        const isHeader = rowIndex === 0;
        doc
          .font(isHeader ? "Helvetica-Bold" : "Helvetica")
          .fillColor("black")
          .fontSize(7.2)
          .text(row[field], currentX + padding, startY + padding, {
            baseline: "hanging",
            width: fieldWidth - 2 * padding,
            align: "left",
          });
  
        currentX += fieldWidth;
      }
  
      startY += rowHeight; // Move to next row
    });
  
    // Draw the 7th row with no columns
    doc
      .font("Helvetica-Bold")
      .fillColor("black")
      .fontSize(7.2)
      .text("As Separately Provided", startX + padding, startY + padding, {
        width: boxWidth - 2 * padding,
        align: "center",
      });
  
    // Adjust starting Y for the final row
    startY += finalRowHeight;
  }
  

  const tableData1 = [
    {
      installmentNo: "Installment No.",
      dueDate: "Due Date",
      installmentAmount: "Installment Amount",
      openingPrincipal: "Opening Principal",
      interestComponent: "Interest Component",
      principalComponent: "Principal Component",
      outstandingPrincipal: "Outstanding Principal",
  },
    {
        installmentNo: "1st",
        dueDate: "_ _/_ _/_ _",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "2nd",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "3rd",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "4th",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "5th",
        dueDate: "__/__/____",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    {
        installmentNo: "",
        dueDate: "",
        installmentAmount: "",
        openingPrincipal: "",
        interestComponent: "",
        principalComponent: "",
        outstandingPrincipal: ""
    },
    // 7th Row: No columns, text only
    {
        text: "As Separately Provided"
    }
];

tableFunction1(tableData1);

    // doc.addPage();
    // // addLogo();
    
    // doc.moveDown(2);

    
    
//     const pageWidth = doc.page.width;
    
//     doc
//        .fontSize(12) 
//        .text("Schedule II", (pageWidth / 2) - (doc.widthOfString("Schedule II") / 2), doc.y, {
//            baseline: 'hanging'
//        });
    
//     doc.moveDown(1);
    
//     // Center "Repayment Schedule"
//     doc.fontSize(12)
//        .text("Repayment Schedule", (pageWidth / 2) - (doc.widthOfString("Repayment Schedule") / 2), doc.y);
    
//     doc.moveDown(1);
    
//     // Center "As Separately Provided"
//     doc
//        .fontSize(12)
//        .text("As Separately Provided", (pageWidth / 2) - (doc.widthOfString("As Separately Provided") / 2), doc.y, {
//            lineGap: 1
//        });
    
//     doc.moveDown(1);

//     function tableFunction1(tableData) {
//       const startX = 53; // Starting X position
//       let startY = doc.y + 10; // Starting Y position
//       const boxWidth = 500; // Total width of the box
//       const numFields = 7; // Fixed to 7 columns
//       const fieldWidth = boxWidth / numFields; // Width per column
    
//       let totalHeight = 0;
    
//       // Calculate total height for the first 6 rows
//       tableData.slice(0, 6).forEach((row) => {
//           if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
//           let rowHeight = 0;
//           for (let field in row) {
//               const fieldTextHeight = doc
//                   .font('Helvetica')
//                   .fontSize(7.2)
//                   .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
//               rowHeight = Math.max(rowHeight, fieldTextHeight);
//           }
//           totalHeight += rowHeight;
//       });
  
//       // Add height for the 7th row (text-only, no columns)
//       const finalRowHeight = doc
//           .font('Helvetica')
//           .fontSize(7.2)
//           .heightOfString("As Separately Provided", { width: boxWidth }) + 10;
//       totalHeight += finalRowHeight;
    
//       // Draw the outer box
//       doc.fillColor("#f0f0f0")
//           .rect(startX, startY, boxWidth, totalHeight)
//           .stroke("black")
//           .fill();
    
//       // Draw table content for the first 6 rows
//       tableData.slice(0, 6).forEach((row, rowIndex) => {
//           if (Object.values(row).every(value => !value || value.trim() === '')) return;
    
//           let currentX = startX;
//           let rowHeight = 0;
    
//           for (let field in row) {
//               const fieldTextHeight = doc
//                   .font('Helvetica')
//                   .fontSize(7.2)
//                   .heightOfString(row[field] || '', { width: fieldWidth }) + 10;
//               rowHeight = Math.max(rowHeight, fieldTextHeight);
//           }
  
//           for (let field in row) {
//               doc.fillColor("#f5f5f5")
//                   .rect(currentX, startY, fieldWidth, rowHeight)
//                   .stroke("black")
//                   .fill();
    
//               const isHeader = rowIndex === 0;
//               doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
//                   .fillColor("black")
//                   .fontSize(7.2)
//                   .text(row[field], currentX + 5, startY + 5, {
//                       baseline: "hanging",
//                       width: fieldWidth - 10,
//                       align: 'left',
//                   });
    
//               currentX += fieldWidth;
//           }
    
//           startY += rowHeight; // Move to next row
//       });
  
//       // Draw the 7th row with no columns
//       doc.font('Helvetica-Bold')
//           .fillColor("black")
//           .fontSize(7.2)
//           .text("As Separately Provided", startX + 5, startY + 5, {
//               width: boxWidth - 10,
//               align: 'center',
//           });
    
//       // Adjust starting Y for the final row
//       startY += finalRowHeight;
//   }

//   const tableData1 = [
//     {
//       installmentNo: "Installment No.",
//       dueDate: "Due Date",
//       installmentAmount: "Installment Amount",
//       openingPrincipal: "Opening Principal",
//       interestComponent: "Interest Component",
//       principalComponent: "Principal Component",
//       outstandingPrincipal: "Outstanding Principal",
//   },
//     {
//         installmentNo: "1st",
//         dueDate: "_ _/_ _/_ _",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "2nd",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "3rd",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "4th",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "5th",
//         dueDate: "__/__/____",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     {
//         installmentNo: "",
//         dueDate: "",
//         installmentAmount: "",
//         openingPrincipal: "",
//         interestComponent: "",
//         principalComponent: "",
//         outstandingPrincipal: ""
//     },
//     // 7th Row: No columns, text only
//     {
//         text: "As Separately Provided"
//     }
// ];

// tableFunction1(tableData1);


  
    
    

    
      
    
      //addFooter();
    
//       //------------------------------------------------------------new page----------------------------------------------
      doc.addPage();
      // addLogo();
      //drawBorder();
      // Add title and content from the image
      doc.moveDown(2);
    
      doc
      .fontSize(7)
      .font(fontBold)
      .text("Schedule III", { align: "center" })
      .text("Description of Immovable Property", { align: "center" })
      .moveDown(0.5)
      .text("Property 1:", { align: "center" })
      .moveDown(0.5)
      .text(`${allPerameters.techfullAdress}`, { align: "center" })
      // .moveDown(0.5)
      // .text("Gram Panchyat Sikandari Tehsil Khilchipur District Rajgarh", { align: "center" })
      // .moveDown(0.5)
      // .text("State Madhya Pradesh Pin Code 465687", { align: "center" })
      .fontSize(9)
      .moveDown(0.5)
      .text("SCHEDULE OF CHARGES", { align: "center" });
    
    doc.moveDown(1);
    // Add a function to draw black table borders
    // function drawTable(tableData) {
    //     // Add Table Header
    //     const startX = 50;
    //     let startY = doc.y + 10;
    //     const columnWidths = [50, 150, 150, 150]; // Adjust column widths as needed
    //     const totalWidth = columnWidths.reduce((a, b) => a + b, 0);
    
    //     // Draw the title row (first row)
    //     const titleRow = tableData[0];
    //     const titleWidth = totalWidth; // Span all columns
    
    //     // Calculate title row height based on text height
    //     const titleHeight = doc
    //         .font(font)
    //         .fontSize(7.2)
    //         .heightOfString(titleRow.field1, { width: titleWidth });
    
    //     // Draw a single rectangle for the title row
    //     doc
    //         .fillColor("blue") // Light sky blue color
    //         .rect(startX, startY, titleWidth, titleHeight + 10) // Height adjusted for title text
    //         .stroke("black")
    //         .fill();
    
    //     // Draw the title text centered and bold
    //     doc
    //         .font('Helvetica-Bold') // Make title bold
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(titleRow.field1, startX, startY + 5, {
    //             baseline: "hanging",
    //             width: titleWidth,
    //             align: "center" // Center align the title text
    //         });
    
    //     // Move startY down for the next row
    //     startY += titleHeight + 10;
    
    //     // Draw column headers (second row)
    //     const headers = tableData[1];
    //     const headerHeight = 15; // Fixed height for headers
    
    //     columnWidths.forEach((colWidth, index) => {
    //         const headerX = startX + columnWidths.slice(0, index).reduce((a, b) => a + b, 0);
    //         doc
    //             .fillColor("#f5f5f5")
    //             .rect(headerX, startY, colWidth, headerHeight)
    //             .stroke("black") // Draw border around header cell
    //             .fill();
    
    //         // Draw header text centered and bold
    //         const headerText = headers[`field${index + 1}`]; // Adjust index for field names
    //         doc
    //             .font('Helvetica-Bold') // Make header bold
    //             .fillColor("black")
    //             .fontSize(7.2)
    //             .text(headerText, headerX, startY + 5, {
    //                 baseline: "hanging",
    //                 width: colWidth,
    //                 align: "center" // Center align header text
    //             });
    //     });
    
    //     // Move startY down for the next row
    //     startY += headerHeight;
    
    //     // Draw data rows (starting from the third row)
    //     for (let i = 2; i < tableData.length; i++) {
    //         const row = tableData[i];
    
    //         // Calculate row height based on the cell contents
    //         const rowHeight = Math.max(
    //             doc.font(font).fontSize(7.2).heightOfString(row.value1 || "", { width: columnWidths[0] }),
    //             doc.font(font).fontSize(7.2).heightOfString(row.value2 || "", { width: columnWidths[1] }),
    //             doc.font(font).fontSize(7.2).heightOfString(row.value3 || "", { width: columnWidths[2] }),
    //             doc.font(font).fontSize(7.2).heightOfString(row.value4 || "", { width: columnWidths[3] })
    //         ) + 10; // Additional space for padding
    
    //         // Alternate row background color
    //         doc.fillColor(i % 2 === 0 ? "#f5f5f5" : "#ffffff");
    //         doc.rect(startX, startY, totalWidth, rowHeight).stroke("black").fill();
    
    //         // Draw cells normally
    //         doc.fillColor("#ffffff"); // Ensure cell background is white for content
    
    //         // Check if value4 is missing and determine how to draw the cells
    //         if (!row.value4) {
    //             // If value4 is missing, span value3 across the last two columns
    //             const spanWidth = columnWidths[2] + columnWidths[3]; // Combine width of value3 and value4
    //             const cellX = startX + columnWidths[0] + columnWidths[1]; // Starting position for value3
    
    //             doc.rect(cellX, startY, spanWidth, rowHeight).stroke("black").fill();
    //             doc.font('Helvetica-Bold').fillColor("black").fontSize(7.2)
    //                 .text(row.value3 || "", cellX, startY + 5, {
    //                     baseline: "hanging",
    //                     width: spanWidth,
    //                     align: "center" // Center align cell text
    //                 });
    
    //             // Draw value1, value2 normally
    //             columnWidths.slice(0, 2).forEach((colWidth, index) => {
    //                 const cellText = row[`value${index + 1}`] || ""; // Adjust index for value names
    //                 const cellX = startX + columnWidths.slice(0, index).reduce((a, b) => a + b, 0);
    
    //                 doc.rect(cellX, startY, colWidth, rowHeight).stroke("black").fill();
    //                 doc.font('Helvetica-Bold').fillColor("black").fontSize(7.2)
    //                     .text(cellText, cellX, startY + 5, {
    //                         baseline: "hanging",
    //                         width: colWidth,
    //                         align: "center" // Center align cell text
    //                     });
    //             });
    //         } else {
    //             // Draw each column in the row normally
    //             columnWidths.forEach((colWidth, index) => {
    //                 const cellText = row[`value${index + 1}`] || ""; // Adjust index for value names
    //                 const cellX = startX + columnWidths.slice(0, index).reduce((a, b) => a + b, 0);
    
    //                 doc.rect(cellX, startY, colWidth, rowHeight).stroke("black").fill();
    //                 doc.font('Helvetica-Bold').fillColor("black").fontSize(7.2)
    //                     .text(cellText, cellX, startY + 5, {
    //                         baseline: "hanging",
    //                         width: colWidth,
    //                         align: "center" // Center align cell text
    //                     });
    //             });
    //         }
    
    //         startY += rowHeight;
    //     }
    // }
    
    // const loanTableData = [
    //     { field1: "Other Charges during the term of loan" },
    //     { field1: "Sr. No.", field2: "Particulars of Charges", field3: "Charges (In Rs./%)", field4: "Charge Details" },
    //     { value1: "1", value2: "Repayment Instruction / Instrument Return Charge", value3: `Rs. 750`, value4: "Per Instance of dishonor of cheque / ECS debit instruction + GST as Applicable" },
    //     { value1: "2", value2: "Repayment mode Swap Charges", value3:  `Rs. 750`, value4: "Per occasion of swapping of the PDCs / ECS mandate + GST as Applicable" },
    //     { value1: "3", value2: "Penal Charges", value3:`- 2% per month on the overdue amount plus applicable taxes in the event of default in repayment of loan instalments \n\n - 2 % per month on the outstanding loan facility amount plus applicable taxes for non-compliance of agreed terms and conditions mentioned in the Sanction Letter`},
    //     { value1: "4", value2: "Duplicate statement issuance charges", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable" },
    //     { value1: "5", value2: "Cheque re-presentation charges", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable" },
    //     { value1: "6", value2: "Duplicate Amortization schedule issuance charges", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable" },
    //     { value1: "7", value2: "Document Retrieval Charges", value3: `Rs.500`, value4: "Per Instance per set + GST as Applicable"},
    //     { value1: "8", value2: "Charges for subsequent set of Photocopy of loan agreement/documents were requested by Borrower", value3: `Rs.250`, value4: "Per Instance per set + GST as Applicable"},
    //     { value1: "9", value2: "Stamp Duty Charges", value3:`As applicable in the state stamp act`},
    //     { value1: "10", value2: "Prepayment/Pre-loan closure charges (including part payment) ", value3: `As per Sanction Terms and Conditions`},
    //     { value1: "11", value2: "Administrative Charges/Processing Fees & Other Charges", value3: `As per Sanction Terms and Conditions`},
    //     { value1: "12", value2: "Charges for duplicate NOC / No due certificate", value3:`Rs. 250`, value4: "Per Instance per set + GST as Applicable"},
    //     { value1: "13", value2: "Charges for revalidation NOC", value3:`Rs. 250`, value4: "Per Instance per set + GST as Applicable"}, 
    // ];
      
    // drawTable(loanTableData);

    function DRAWTABLE123(tableTitle, tableData) {
      const startX = 50;
      let startY = doc.y + 10;
      const columnWidths = [500];
      const indexWidth = 30;
      const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
      const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
  
      // Draw table title with a colored header
      doc.rect(startX, startY, columnWidths[0], 20).fillAndStroke('#00a7ff', "#000000");
      doc.font('Helvetica-Bold').fillColor('black').fontSize(9.5)
          .text(tableTitle, startX + 5, startY + 5, { align: 'center' });
  
      startY += 20; // Move down for the first row
  
      let sectionIndex = null; // Track the section index to span the column
  
      // Render each row in the table
      tableData.forEach((row, rowIndex) => {
          // Apply custom style for row 1 (title2)
          
  
          // Measure text height for row.field1 and row.value1
          const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
          const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
  
          // Calculate row height based on the tallest content
          const rowHeight = Math.max(20, field1Height, value1Height) + 10; // Adding padding for better spacing
  
          // Only display the index once per section, in the first row
          const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
          if (row.index) {
              sectionIndex = row.index; // Set current section index
          }
  
          // Draw the index in the first column (only for the first row of each section)
          doc.fillColor('#ffffff')
              .rect(startX, startY, indexWidth, rowHeight).stroke('#000000').fill(); // Stroke color set to black
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(indexLabel, startX + 5, startY + (rowHeight - field1Height) / 2, { width: indexWidth - 10 });
  
          // Draw the key in the second column
          doc.fillColor('#f5f5f5')
              .rect(startX + indexWidth, startY, keyWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.field1, startX + indexWidth + 5, startY + (rowHeight - field1Height) / 2, { width: keyWidth - 10 });
  
          // Draw the value in the third column
          doc.fillColor('#ffffff')
              .rect(startX + indexWidth + keyWidth, startY, valueWidth, rowHeight).stroke('#000000').fill();
          doc.font('Helvetica').fillColor('black').fontSize(8.3)
              .text(row.value1, startX + indexWidth + keyWidth + 5, startY + (rowHeight - value1Height) / 2, { width: valueWidth - 10 });
  
          // Move startY down by rowHeight for the next row
          startY += rowHeight;
      });
  }
 



  const scheduleOfCharges = [
    { index: "sr.No", field1: "Particulars of Charges", value1: "Charge Details" },

    { index: "1", field1: "Repayment Instruction / Instrument Return Charges / PDC / ECS / NACH Bounce Charges", value1: "Rs 750/- Per Instance (Plus GST as applicable)" },
    { index: "2", field1: "Repayment Mode Swap Charges", value1: "Rs 750/- Per Instance (Plus GST as applicable)" },
    { index: "3", field1: "Penal Charges", value1: " 2% per month on the overdue amount plus applicable taxes in the event of default in repayment of loan installments\n 2% per month on the outstanding loan facility amount plus applicable taxes for non-compliance of agreed terms and conditions mentioned in the Sanction Letter" },
    { index: "4", field1: "Duplicate Statement Issuance Charges (SOA / RPS)", value1: "Free once in a Financial Year.Thereafter Rs 250/- (Plus GST as applicable)" },
    { index: "5", field1: "Cheque / NACH Representation Charges", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "6", field1: "Duplicate Amortization Schedule Issuance Charges", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "7", field1: "Document Retrieval Charges", value1: "Rs 500/- Per Instance per set (Plus GST as applicable)" },
    { index: "8", field1: "Charges for Subsequent Set of Photocopy of Loan Agreement/Documents Were Requested by Borrower", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "9", field1: "Stamp Duty Charges", value1: "As applicable in the state stamp act" },
    { index: "10", field1: "Prepayment Charges", value1: "No prepayment allowed till completion of 12 months from the date of 1st disbursement. After completion of 12 months from the date of 1st disbursement, prepayment from personal funds may be made without incurring any fees. In case of balance transfer, 4% charges will be applicable." },
    { index: "11", field1: "Foreclosure Charges", value1: "In case of foreclosure of Loan from Owned Funds, no Foreclosure Charges will be applicable. In case of balance transfer, 4% of the Outstanding Principal Amount will be applicable." },
    { index: "12", field1: "Administrative Charges / Processing Fees & Other Charges", value1: "Nil" },
    { index: "13", field1: "Charges for Duplicate NOC / No Due Certificate", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "14", field1: "Charges for Revalidation NOC", value1: "Rs 250/- Per Instance per set (Plus GST as applicable)" },
    { index: "15", field1: "Cersai Charge", value1: "- When facility amount is equal to Rs 5 Lacs or lesser, Rs 50 plus GST\n- When facility amount is greater than Rs 5 Lacs, Rs 100 plus GST" },
    // { index: "16", field1: "Login Fees", value1: "₹1950/- (Inclusive of all Applicable Taxes)" },
    // { index: "17", field1: "Processing Fees", value1: "2% of loan amount + Applicable taxes" },
    // { index: "18", field1: "Documentation Charges", value1: "2% of loan amount + Applicable taxes (For under construction cases 3% of loan amount + Applicable taxes)" },
    // { index: "19", field1: "Issuance of Duplicate Income Tax Certificate", value1: "NIL" },
    // { index: "20", field1: "Legal / Collections / Vehicle Storage / Repossession and Incidental Charges", value1: "As per Actuals" }
  ];

  DRAWTABLE123("Schedule of Charges (MITC)", scheduleOfCharges);
  doc.addPage();
  // addLogo();
  //drawBorder();
  doc.moveDown(6);
  const scheduleOfCharges1 = [
   
    { index: "16", field1: "Login Fees", value1: "Rs 1950/- (Inclusive of all Applicable Taxes)" },
    { index: "17", field1: "Processing Fees", value1: "2% of loan amount + Applicable taxes" },
    { index: "18", field1: "Documentation Charges", value1: "2% of loan amount + Applicable taxes (For under construction cases 3% of loan amount + Applicable taxes)" },
    { index: "19", field1: "Issuance of Duplicate Income Tax Certificate", value1: "NIL" },
    { index: "20", field1: "Legal / Collections / Vehicle Storage / Repossession and Incidental Charges", value1: "As per Actuals" }
  ];

    DRAWTABLE123("Schedule of Charges (MITC)", scheduleOfCharges1);


  
  
    
    doc.moveDown(2);
    const startX = 50; // Starting position for text from the left (adjust as per your margins)
    
    doc
    .font(fontBold) // Ensure bold font is applied
    .fontSize(8)
    .fillColor("black")
    .text(
    `IN WITNESS WHEREOF the Parties have executed this Agreement on the day and the year as mentioned in the Schedule,\n`,
    startX, // Start from the left position (left margin)
    doc.y, // Current vertical position (doc.y)
    {
      align: 'left', // Align the text to the left (default)
      align: "justify",
      width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    }
    ).moveDown()
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
    `SIGNED AND DELIVERED BY WITHIN NAMED BORROWER/ CO-BORROWER \n`,
    startX, // Start from the left position (left margin)
    doc.y, // Current vertical position (doc.y)
    {
      align: 'left', // Align the text to the left (default)
      align: "justify",
      width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    }
    ).moveDown()
    .font(fontBold)
    .fontSize(8)
    .fillColor("black")
    .text(
    `If Company/Trust/Society, by its Authorized Signatory with its seal/stamp OR If Limited Liability Partnership, by its Designated Partner and Authorized Signatory seal/stamp OR If Partnership Firm, by its Designated Partner and Authorized Signatory seal/stamp OR If HUF, through its Karta or If Individual, by the individual Borrower; AND by the Co-Borrower (if applicable)\n
    SIGNED AND DELIVERED BY WITHIN NAMED GUARANTOR(s)\n
    If Company, by its Authorized Signatory OR If Limited Liability Partnership, by its Designated Partner and Authorized Signatory OR If Partnership Firm, by its Designated Partner and Authorized Signatory OR If HUF, through its Karta Or If Individual, by the individual Borrower`,
    startX, // Start from the left position (left margin)
    doc.y, // Current vertical position (doc.y)
    {
      align: 'left', // Align the text to the left (default)
      align: "justify",
      width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    }
    );
    
    
    doc.moveDown(2);

    function firstBoxTable(tableData) {
      // Add Table Header
      const startX = 50; // Starting X position for the box
      let startY = doc.y + 10; // Starting Y position for the box
      const boxWidth = 500; // Adjust the width of the box as per your need
    
      // Calculate the total height needed for the entire box
      let totalHeight = 0;
    
      // Calculate the height for each row and determine the total height of the box
      tableData.forEach((row) => {
        const rowHeight = doc
          .font(font)
          .fontSize(7.2)
          .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
    
        totalHeight += rowHeight; // Accumulate the total height
      });
    
      // Draw the outer rectangle for the box
      doc
        .fillColor("#f0f0f0") // Box background color
        .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
        .stroke("black") // Border color
        .fill();
    
      // Loop through the data and draw the text inside the box
      tableData.forEach((row, rowIndex) => {
        // Calculate row height based on the content
        const rowHeight = doc
          .font(font)
          .fontSize(7.2)
          .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
    
        // Alternate row background color (optional)
        doc
          .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff") // Alternate row colors
          .rect(startX, startY, boxWidth, rowHeight) // Draw rectangle for each row
          .stroke("black") // Border color for each row
          .fill();
    
        // Draw the text in the box
        doc
          .font(font)
          .font('Helvetica-Bold')
          .fillColor("black")
          .fontSize(7.2)
          .text(row.field1, startX + 5, startY + 5, {
            baseline: "hanging",
            width: boxWidth - 10, // Adjust width to provide padding inside the box
            align: "left", // Align text to the left
          });
    
        // Move to the next row
        startY += rowHeight;
      });
    }
    
    const firstBoxLine = [
      { field1: `BORROWER'S NAME : ${allPerameters.borrowerName}` },
      { field1: `CO-APPLICANT'S NAME : ${allPerameters.coBorrowername}` },
      // { field1: `2nd CO-APPLICANT'S NAME : ${allPerameters.coBorrowername2}` },
      // { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
    ];
    
    firstBoxTable(firstBoxLine);
    //addFooter();
    
//     //---------------------------------------------------new page---------------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(2);
    
    // function firstBoxTable(tableData) {
    //     // Add Table Header
    //     const startX = 50; // Starting X position for the box
    //     let startY = doc.y + 10; // Starting Y position for the box
    //     const boxWidth = 500; // Adjust the width of the box as per your need
      
    //     // Calculate the total height needed for the entire box
    //     let totalHeight = 0;
      
    //     // Calculate the height for each row and determine the total height of the box
    //     tableData.forEach((row) => {
    //       const rowHeight = doc
    //         .font(font)
    //         .fontSize(7.2)
    //         .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
      
    //       totalHeight += rowHeight; // Accumulate the total height
    //     });
      
    //     // Draw the outer rectangle for the box
    //     doc
    //       .fillColor("#f0f0f0") // Box background color
    //       .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    //       .stroke("black") // Border color
    //       .fill();
      
    //     // Loop through the data and draw the text inside the box
    //     tableData.forEach((row, rowIndex) => {
    //       // Calculate row height based on the content
    //       const rowHeight = doc
    //         .font(font)
    //         .fontSize(7.2)
    //         .heightOfString(row.field1, { width: boxWidth }) + 10; // Add padding
      
    //       // Alternate row background color (optional)
    //       doc
    //         .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff") // Alternate row colors
    //         .rect(startX, startY, boxWidth, rowHeight) // Draw rectangle for each row
    //         .stroke("black") // Border color for each row
    //         .fill();
      
    //       // Draw the text in the box
    //       doc
    //         .font(font)
    //         .font('Helvetica-Bold')
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(row.field1, startX + 5, startY + 5, {
    //           baseline: "hanging",
    //           width: boxWidth - 10, // Adjust width to provide padding inside the box
    //           align: "left", // Align text to the left
    //         });
      
    //       // Move to the next row
    //       startY += rowHeight;
    //     });
    //   }
      
    //   const firstBoxLine = [
    //     { field1: `BORROWER'S NAME : ${allPerameters.borrowerName}` },
    //     { field1: `CO-APPLICANT'S NAME : ${allPerameters.coBorrowername}` },
    //     { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
    //   ];
      
    //   firstBoxTable(firstBoxLine);
    //   doc.moveDown(1);
    //   doc
    //   .font(fontBold) // Ensure bold font is applied
    //   .fontSize(8)
    //   .fillColor("black")
    //   .text(
    //     `AND SIGNED AND DELIVERED BY THE WITHIN NAMED LENDER,\n
    //     Ratnaa fin Capital Private Limited, by the hands of pls confirm authorized name its authorized official.`,
    //     startX, // Start from the left position (left margin)
    //     doc.y, // Current vertical position (doc.y)
    //     {
    //       align: 'left', // Align the text to the left (default)
    //       align: "justify",
    //       width: doc.page.width - 2 * startX, // Width to ensure margins are respected
    //     }
    //   );
    
    //   function secondBoxLine(tableData) {
    //     // Add Table Header
    //     const startX = 50; // Starting X position for the box
    //     let startY = doc.y + 10; // Starting Y position for the box
    //     const boxWidth = 500; // Total width of the box
    //     const field1Width = 100; // Width for the field1 column
    //     const valueWidth = boxWidth - field1Width; // Width for the value column
        
    //     // Calculate the total height needed for the entire box
    //     let totalHeight = 0;
      
    //     // Calculate the height for each row and determine the total height of the box
    //     tableData.forEach((row) => {
    //       // Calculate row height based on the content in the value field
    //       const valueTextHeight = doc
    //         .font('Helvetica') // Regular font for calculating height
    //         .fontSize(7.2)
    //         .heightOfString(row.value || '', { width: valueWidth }) + 10; // Add padding
      
    //       totalHeight += valueTextHeight; // Accumulate the total height
    //     });
      
    //     // Draw the outer rectangle for the box
    //     doc
    //       .fillColor("#f0f0f0") // Box background color
    //       .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    //       .stroke("black") // Border color
    //       .fill();
      
    //     // Loop through the data and draw the text inside the box
    //     tableData.forEach((row) => {
    //       // Calculate row height based on the content in value field
    //       const valueTextHeight = doc
    //         .font('Helvetica') // Regular font for calculating height
    //         .fontSize(7.2)
    //         .heightOfString(row.value || '', { width: valueWidth }) + 10; // Add padding
      
    //       // Draw rectangle for the field1 box
    //       doc
    //         .fillColor("#f5f5f5") // Background color for field1 (empty box)
    //         .rect(startX, startY, field1Width, valueTextHeight)
    //         .stroke("black") // Border for field1 box
    //         .fill();
      
    //       // Draw rectangle for the value box
    //       doc
    //         .fillColor("#ffffff") // Background color for value
    //         .rect(startX + field1Width, startY, valueWidth, valueTextHeight)
    //         .stroke("black") // Border for value box
    //         .fill();
      
    //       // Draw the field1 text in the left column (in bold)
    //       doc
    //         .font('Helvetica-Bold') // Set font to bold for field1
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(row.field1, startX + 5, startY + 5, {
    //           baseline: "hanging",
    //           width: field1Width - 10, // Adjust width to provide padding inside the box
    //           align: "left", // Align text to the left
    //         });
      
    //       // Draw the value text in the right column (regular font)
    //       doc
    //         .font('Helvetica') // Set font back to regular for value
    //         .fillColor("black")
    //         .fontSize(7.2)
    //         .text(row.value, startX + field1Width + 5, startY + 5, {
    //           baseline: "hanging",
    //           width: valueWidth - 10, // Adjust width to provide padding inside the box
    //           align: "left", // Align text to the left
    //         });
      
    //       // Move to the next row
    //       startY += valueTextHeight;
    //     });
    //   }
      
    //   const secondBox = [
    //     { field1: " ", value: `Authorised official's Name: ${allPerameters.borrowerName}\n\nAuthorised official's Signature: ` }
    //   ];
    //   secondBoxLine(secondBox); 
      // doc.moveDown(6);
    
    // // Define the left margin and the width for centering
    const leftX = 50; // Left margin for left-aligned text
    const titleWidth = 400; // Width for the title text
    const centerX = (doc.page.width - titleWidth) / 2; // Calculate center position manually
    
    // Title (Centered and Bold)
    const startXX= 50; // Starting position for text from the left (adjust as per your margins)

    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`Place: ${allPerameters.placeOfExecution}`, startXX, doc.y, { align: "left", width: 470 ,continued:true});
    doc.moveDown(1);

    doc
    .fontSize(9)
    .font('Helvetica')
    .text(` Date: ${allPerameters.agreementdate}`, startXX, doc.y, { align: "right", width: 470 });
    doc.moveDown(1);
    doc
    .fontSize(9)
    .font(fontBold) // Bold for title
    .text("DECLARATIONS CUM UNDERTAKINGS CUM AUTHORITY", centerX, doc.y, { width: titleWidth, align: "center" }) // Manually centered
    .moveDown(0.7);
    
    // Left-aligned text
    doc
    .font(font) // Regular font for left-aligned text
    .fontSize(8)
    .text(`IN CONSIDERATION OF Ratnaafin Capital Private limited, (the Lender) providing or agreeing to provide the Agri Micro LOAN AGAINST PROPERTY to me/us on the terms and conditions contained in the Loan Agreement dated ${allPerameters.agreementdate} and other Transaction Documents,`, leftX, doc.y, { width: doc.page.width - 100, align: "left" })
    .moveDown(0.8);
    
    // Center-aligned bold text
    // doc
    // .font(fontBold) // Bold for center-aligned text
    // .fontSize(8)
    // .text("In case of Individual Borrower", centerX, doc.y, { width: titleWidth, align: "center", underline: true })
    // .moveDown(0.8);
    
    // Left-aligned text
    doc
    .font(font) // Regular font for left-aligned text
    .fontSize(9)
    .text(`I/We, ${allPerameters.borrowerName} residing at ${allPerameters.borroewraddress} (hereinafter referred to as “the Borrower”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" })
    .moveDown(0.8);
    
    // Center-aligned bold "AND"
    doc
    .font(fontBold) // Bold for center-aligned text
    .fontSize(9)
    .text("AND", centerX, doc.y, { width: titleWidth, align: "center" })
    .moveDown(0.8);
    
    // Left-aligned text
    doc
    .font(font) // Regular font for left-aligned text
    .text(`I/We,${allPerameters.coBorrowername} residing at ${allPerameters.coBorroweraddress} (hereinafter referred to as “the CO Borrower”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    // .moveDown(0.8);
    
    // Center-aligned bold "AND"
    // doc
    // .font(fontBold) // Bold for center-aligned text
    // .fontSize(9)
    // .text("AND", centerX, doc.y, { width: titleWidth, align: "center" })
    // .moveDown(0.8);

    // doc
    // .font(font) // Regular font for left-aligned text
    // .text(`I/We,${allPerameters.coBorrowername2} residing at ${allPerameters.coBorroweraddress2} (hereinafter referred to as “the CO Borrower”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    // doc
    // .font(font) // Regular font for left-aligned text
    // .text(`I/We,${allPerameters.guarantorname} residing at ${allPerameters.guarantoraddress} (hereinafter referred to as “the Guarantor”)`, leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    // Left-aligned text
    // doc
    // .font(fontBold) // Regular font for left-aligned text
    // .text(` ${allPerameters.guarantorname} `, leftX, doc.y, { width: doc.page.width - 100, align: "left" })
    doc.moveDown(0.8);
    
    // Final paragraph (Left-aligned)
    
    doc
    .fontSize(9)
    .text("(Hereinafter referred to as ”the Guarantors”/”Co-Borrowers”) hereby jointly and severally, agree, undertake, authorize, assure and affirm as follows:", leftX, doc.y, { width: doc.page.width - 100, align: "left" });
    
    doc.moveDown(2);
    // Format the borrower details to the left side
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `1. I/We agree and undertake that for the credit facilities granted to the Borrowers and/or availed by the Borrowers, the Lender will be entitled/authorized/permitted to charge and/or deduct/debit/recover from my/our Accounts such sum or sums of money as the Lender may stipulate, incur or bear by way of guarantee fee, document verification fees, or any other levy or charge payable by the Borrower to the Lender for availing finance, including for verification of security documents by the Lender’s Advocate/s and other such fees as payable by the Borrower to the Lender in respect of facilities extended to the Borrowers.\n\n
       2. I/We further agree, authorize, assure and confirm that in the event of any default committed by me/us in compliance Of the terms and conditions or any of them stipulated by the Lender from time to time, the Lender shall be entitled, permitted and authorized to charge without any intimation to us penal charges at such rate and in accordance with such rules/regulation of the Lender and/or such Rules or regulations or stipulations/directives/guidelines of the Reserve Bank of India on the amount due and payable by the Borrowers to the Lender in respect of the credit facilities/financial accommodation extended to the Borrowers by the Lender.\n\n
       3. I/We further agree, authorize, assure and confirm that in the event of the Lender obtaining any insurance cover or cover for financial risk from an insurance company/ies or any other institution/firm/Body Corporate or otherwise over the assets charged/ hypothecated/ pledged or mortgaged to the Lender or otherwise taken possession of by the Lender on account of or in consideration of the dues payable by the Borrower for the facilities extended to my/our Account/s without any further formalities and intimation by the Lender of having obtained such insurance, or financial risk cover and such letter informing about the Lender having taken such insurance cover, etc., would be sufficient proof there of enabling the Lender to recover and/or charge the same to my/our accounts/s.\n\n
       4. I/We further agree, authorize, assure and confirm that the Lender shall be entitled to charge interest at the rate as may be decided by the Lender for the adhoc facility/facilities agreed to be extended/may be extended by the Lender to the Borrower and such interest may be continued to be charged to me/us by the Lender as long as the Borrower avail such adhoc facility and/or earlier, as may be decided by the Lender from time to time.\n\n
       5. I/We further agree, assure and undertake that in the event of Lender requiring any information for processing/review of my/our account including furnishing of statements of stocks/Balance Sheet (audited or otherwise), CMA Data statement of  other particulars  may be required by the Lender within the stipulated period or at the time of processing/review of my/our account, and if for any reason whatsoever I am/we are unable to furnish the same within a week or such other reasonable time as the Lender may, upon specific request by me/us, agree to in writing, then the Lender shall be entitled to charge to my/our account and/or claim penal charges at the rate of 24% P.A. on outstanding dues, not with standing the technical review of my/our account as may be otherwise carried out by the Lender in the absence of such information, submission as required by the Lender.\n\n`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    
    
    //addFooter();
    
//     //---------------------------------------------new page ------------------------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(2);
    
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `
       6. In case if the information about legal heirs is incomplete, inadequate, or not provided, I/We, the undersigned, hereby irrevocably agree, declare, undertake, assure, and confirm that the legal heirs, as mandated under the relevant applicable laws of India, represent the comprehensive enumeration of all my/our legal heirs, both known and unknown, at the time of executing this agreement. I hereby provide my irrevocable consent to the Lender, its successors, and assigns, to pursue any and all legal remedies for the recovery of any outstanding obligations, including but not limited to, the repayment of loans, accrued interest, fees, and charges, from any and all of my/our legal heirs, including those who may come into existence after the execution of this agreement, in the event of my/our demise or the demise of any and all of us during the existence or pendency of credit facilities extended by the Lender to the Borrower. Furthermore, I acknowledge that this consent shall remain in full force and effect throughout the entire term of any credit facility and beyond until all outstanding obligations to the Lender have been fully discharged and satisfied. I also undertake to promptly notify the Lender of any changes in the composition of my/our legal heirs, including additions or alterations.\n\n
       7. I/We further agree, undertake, and assure that I/We shall promptly inform you in writing of any change in the above particulars of my/our legal heirs that may be occasioned by birth, death, marriage, etc., and/or, on account of any amendment/change in the general statutes/laws of the country.\n\n
       8. . I/We also hereunder submit the particulars of immovable properties belonging to me/us, which have been charged to the Lender as security for financial assistance granted to the Borrower`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    doc.moveDown(1);
    
    // function tableFunction(tableData) {
    //     // Add Table Header
    //     const startX = 50; // Starting X position for the box
    //     let startY = doc.y + 10; // Starting Y position for the box
    //     const boxWidth = 500; // Total width of the box
    //     const numFields = Object.keys(tableData[0]).length; // Get number of fields from the first row
    //     const fieldWidth = boxWidth / numFields; // Calculate width for each column
    
    //     // Calculate the total height needed for the entire box
    //     let totalHeight = 0;
    
    //     // Calculate the height for each row and determine the total height of the box
    //     tableData.forEach((row) => {
    //         // Calculate row height based on the content in each field
    //         let rowHeight = 0;
    //         for (let field in row) {
    //             const fieldTextHeight = doc
    //                 .font('Helvetica') // Regular font for calculating height
    //                 .fontSize(7.2)
    //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
    //             rowHeight = Math.max(rowHeight, fieldTextHeight); // Get the maximum height for the row
    //         }
    //         totalHeight += rowHeight; // Accumulate the total height

           

    //     });
    
    //     // Draw the outer rectangle for the box
    //     doc
    //         .fillColor("#f0f0f0") // Box background color
    //         .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    //         .stroke("black") // Border color
    //         .fill();
    
    //     // Loop through the data and draw the text inside the box
    //     tableData.forEach((row, rowIndex) => {
    //         let currentX = startX; // Reset the starting X position for each row
    //         // Calculate row height based on the content in each field
    //         let rowHeight = 0;
    //         for (let field in row) {
    //             const fieldTextHeight = doc
    //                 .font('Helvetica') // Regular font for calculating height
    //                 .fontSize(7.2)
    //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
    //             rowHeight = Math.max(rowHeight, fieldTextHeight);

    //             // const keyWidth = Math.round((columnWidths[0] - indexWidth) / 3);
    //             // const valueWidth = Math.round((columnWidths[0] - indexWidth) * 2 / 3);
    //             //  // Get the maximum height for the row
    //             // const field1Height = doc.heightOfString(row.field1, { width: keyWidth - 10, fontSize: 8.3 });
    //             // const value1Height = doc.heightOfString(row.value1, { width: valueWidth - 10, fontSize: 8.3 });
    //             // let rowHeight = Math.max(20, field1Height, value1Height) + 10; // 10 for padding
                 

    //             if (rowIndex === 0) { // Example for a specific row index
    //               rowHeight = Math.max(rowHeight, 50); // Custom height for row at index 5
    //           }
    //           // const indexLabel = row.index && sectionIndex !== row.index ? row.index : '';
    //           // if (row.index) {
    //           //     sectionIndex = row.index; // Set current section index
    //           // }
    //           }
    
    //         // Draw rectangles for each field in the row
    //         for (let field in row) {
    //             // Draw rectangle for the field box
    //             doc
    //                 .fillColor("#f5f5f5") // Background color for field (empty box)
    //                 .rect(currentX, startY, fieldWidth, rowHeight)
    //                 .stroke("black") // Border for field box
    //                 .fill();
    
    //             // Set font style based on whether it's the header row
    //             const isHeader = rowIndex === 0; // Check if it's the header row
    //             doc
    //                 .font(isHeader ? 'Helvetica-Bold' : 'Helvetica') // Set font to bold for header
    //                 .fillColor("black")
    //                 .fontSize(7.2);
    
    //             // Determine text alignment based on field index (you can customize this as needed)
    //             const align = (field === 'field3') ? 'center' : 'left'; // Center field3, left for others
    
    //             // Draw the field text in the box
    //             doc.text(row[field], currentX + 5, startY + 5, {
    //                 baseline: "hanging",
    //                 width: fieldWidth - 10, // Adjust width to provide padding inside the box
    //                 align: align, // Align text based on content
    //             });
    
    //             // Move to the next column
    //             currentX += fieldWidth; // Update X position for the next field
    //         }
    
    //         // Move to the next row
    //         startY += rowHeight; // Update Y position for the next row
    //     });
    // }
    function tableFunction(tableData) {
      const startX = 53; // Starting X position
      let startY = doc.y + 10; // Starting Y position
      const boxWidth = 500; // Total width of the box
      const numFields = Object.keys(tableData[0]).length; // Number of columns
      const fieldWidth = boxWidth / numFields; // Width per column
  
      let totalHeight = 0;
  
      // Calculate total height
      tableData.forEach((row) => {
          if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
          let rowHeight = 0;
          for (let field in row) {
              const fieldTextHeight = doc
                  .font('Helvetica')
                  .fontSize(7.2)
                  .heightOfString(row[field] || '', { width: fieldWidth - 10 }) + 10; // Add padding
              rowHeight = Math.max(rowHeight, fieldTextHeight);
          }
          totalHeight += rowHeight;
      });
  
      // Draw the outer box
      doc.fillColor("#f0f0f0")
          .rect(startX, startY, boxWidth, totalHeight)
          .stroke("black")
          .fill();
  
      // Draw table content
      tableData.forEach((row, rowIndex) => {
          if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
          let currentX = startX;
          let rowHeight = 0;
  
          // Calculate row height for the current row
          for (let field in row) {
              const fieldTextHeight = doc
                  .font('Helvetica')
                  .fontSize(7.2)
                  .heightOfString(row[field] || '', { width: fieldWidth - 10 }) + 10; // Add padding
              rowHeight = Math.max(rowHeight, fieldTextHeight);
          }
  
          // Draw cells and their content
          for (let field in row) {
              doc.fillColor("#f5f5f5")
                  .rect(currentX, startY, fieldWidth, rowHeight)
                  .stroke("black")
                  .fill();
  
              const isHeader = rowIndex === 0;
              doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
                  .fillColor("black")
                  .fontSize(7.2)
                  .text(row[field], currentX + 5, startY + 5, { // 5px padding inside the cell
                      baseline: "hanging",
                      width: fieldWidth - 10, // Leave 5px padding on each side
                      align: 'left',
                  });
  
              currentX += fieldWidth;
          }
  
          startY += rowHeight; // Move to next row
      });
  
      // Set the `doc.y` position after the table ends
      doc.y = startY + 10; // Add extra 10 points for spacing after the table
  }
  
  
  //   function tableFunction(tableData) {
  //     const startX = 53; // Starting X position
  //     let startY = doc.y + 10; // Starting Y position
  //     const boxWidth = 500; // Total width of the box
  //     const numFields = Object.keys(tableData[0]).length; // Number of columns
  //     const fieldWidth = boxWidth / numFields; // Width per column
  
  //     let totalHeight = 0;
  
  //     // Calculate total height
  //     tableData.forEach((row) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
  //         let rowHeight = 0;
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10; // Add padding
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }
  //         totalHeight += rowHeight;
  //     });
  
  //     // Draw the outer box
  //     doc.fillColor("#f0f0f0")
  //         .rect(startX, startY, boxWidth, totalHeight)
  //         .stroke("black")
  //         .fill();
  
  //     // Draw table content
  //     tableData.forEach((row, rowIndex) => {
  //         if (Object.values(row).every(value => !value || value.trim() === '')) return;
  
  //         let currentX = startX;
  //         let rowHeight = 0;
  
  //         for (let field in row) {
  //             const fieldTextHeight = doc
  //                 .font('Helvetica')
  //                 .fontSize(7.2)
  //                 .heightOfString(row[field] || '', { width: fieldWidth }) + 10;
  //             rowHeight = Math.max(rowHeight, fieldTextHeight);
  //         }

          
  
  //         for (let field in row) {
  //             doc.fillColor("#f5f5f5")
  //                 .rect(currentX, startY, fieldWidth, rowHeight)
  //                 .stroke("black")
  //                 .fill();
  
  //             const isHeader = rowIndex === 0;
  //             doc.font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
  //                 .fillColor("black")
  //                 .fontSize(7.2)
  //                 .text(row[field], currentX + 5, startY + 5, {
  //                     baseline: "hanging",
  //                     width: fieldWidth - 10,
  //                     align: 'left',
  //                 });
  
  //             currentX += fieldWidth;
  //         }
  
  //         startY += rowHeight; // Move to next row
  //     });
  //     doc.moveDown(); // Adds two lines of vertical space OR:
  // }
  
        
    const tableData = [
        { field1: "Item No.", field2: `Particulars of Immovable properties with full address (where situate, etc.)\n\n`, field3: "In whose name the property stands", field4: "Present Encumbrance", field5: "Whether leasehold or ownership", field6: "Present Market Value" },
        { field1: "1", field2: `${allPerameters.techfullAdress}\n\n`, field3:`${allPerameters.sellerName}&${allPerameters.buyerName}`, field4: `NO`, field5: `OWNERSHIP`, field6: `Rs.${allPerameters.presentMarketValue} - ${allPerameters.marketValuetowor}` }
    ];

//     const tableData = [
//     { 
//         field1: "Item No.", 
//         field2: "Particulars of Immovable properties with full address (where situate, etc.)",
//         field3: "Charges (In Rs./%)",
//         field4: "In whose name the property stands",
//         field5: "Whether leasehold or ownership",
//         field6: "Present Market Value"
//     },
//     { 
//         field1: "1",
//         field2: allPerameters.particularsImmovablePropertiesFullAddress || '',
//         field3: allPerameters.inWhoseNameThePropertyStands || '',
//         field4: allPerameters.presentEncumbrance || '',
//         field5: allPerameters.whetherLeaseholdOrOwnership || '',
//         field6: allPerameters.presentMarketValue || ''
//     }
// ].filter(row => Object.values(row).some(value => value.trim() !== '')); // Remove blank rows

    
    // Call the function to create the table
    tableFunction(tableData);   
    
    // doc.moveDown(14);
    
    
    const leftMargin = 50; // Set a custom left margin if needed
    const startY = doc.y;  // Start at the current y position
    
    doc
      .moveDown()
      .font(font)
      .fontSize(8)
      .fillColor("black")
      .text(
        `9. I/We also undertake, agree, assure and confirm that I/we shall not transfer, dispose of, alienate encumber or deal with in any manner, without prior permission in writing of the Lender, the assets, properties, tangible or intangible or immovable, as are charged or mortgaged to the Lender same in the usual course of my/our business or as provided for in documents executed in that behalf.`,
        leftMargin, // Set X position explicitly
        startY,     // Set Y position explicitly
        {
          lineGap: 2,
          width: 500, // Set a maximum width
          align: "left", // Align text to the left
          
        }
      );
    
    //addFooter();
    
//     //------------------------------------------new page ------------------------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(8);
    
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `10. I/We hereby declare further that the particulars of legal heirs, assets, etc., furnished by me/us as above are correct and complete, and that we are fully aware that the Lender will be granting credit/other facility to the Borrower inter-alia on the faith of this Undertaking-cum-Declaration-cum-authority.
        
    11. I/We also agree, undertake and assure that charging or non-charging of penal charges in terms aforesaid shall not in any way be construed as a waiver or satisfaction of any of the terms and conditions stipulated by the Lender for compliance in terms of this undertaking or otherwise howsoever.
        
    12.I/We say that I/We am/are absolutely seized and possessed of or otherwise well and suficiently entitled to the Immovable property being of (1) ${allPerameters.techfullAdress} more particularly described in the Schedule hereunder written (hereinafter referred to as the “said Immovable Property”).
        
    13. I/We declare that I/We have not created any charges or encumbrances in respect of the Immovable Property more particularly described in the Schedulehereunder.
        
    14. I/We declare that the said Immovable Property is proposed to be mortgaged and charged to `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        // width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(fontBold).text(
      `Ratnaafin Capital Private Limited, Ahmedabad Branch`,
      {
        lineGap: 2,
        align: "left",
        // align: "justify",
        // width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(font).text(
      `, to secure by way of First Charge for the due repayment and discharge of the secured Loan of Rs.`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc.font(fontBold).text(
      `, ${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord})`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc.font(font).text(
      `, granted by `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(fontBold).text(
      `, RCPL `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(font).text(
      `,to `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    ); 
    doc.font(fontBold).text(
      `, ${allPerameters.borrowerName}`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc.font(font).text(
      `, together with interest, penal charges, and other monies payable to Ratnaafin Capital Private Limited under their loan agreements, letter of sanction, and other transaction documents, as amended from time to time.`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
       
      }
    ).moveDown();
    doc.font(font).text(
      `15. The said `,
      {
        lineGap: 2,
        align: "left",
        // align: "justify",
        // width: 500, // Set a maximum width
        continued:true
      }
    );
    doc
    .font(fontBold)
    .fontSize(8)
    .fillColor("black")
    .text(
      ` Ratnaafin Capital Private Limited,Ahmedabad Branch `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
        continued:true
      }
    );
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      ` is/are hereinafter referred to as the "Lender."
        
    16. I/We say that the said Immovable Property is free from all encumbrances or charges (statutory or otherwise), claims and demands, and that the same or any of them or any part thereof are/is not subject to any Lien/Lispendens, attachment or any other process issued by any Court or Authority and that I/we have not created any Trust in respect thereof and that the said Immovable Property is/are in my/our exclusive, uninterrupted and undisturbed possession and enjoyment since the date of purchase/acquisition thereof and no adverse claims have been made against me in respect of the said Immovable Property or any of them or any part thereof and the same are not affected by any notices of acquisition or requisition, and that no proceedings are pending or initiated against me under the Income Tax Act, 1961, or under any other law in force in India for the time being and that no notice has been received by or served on me under the Income Tax Act, 1961 and/or under any law and there is no pending attachment whatsoever issued or initiated against the said Immovable Property or any of them or any part thereof.
        
    17. I/We say that I have duly paid all rents, royalties and all public demands including Income Tax, Corporation/Municipal Tax and all other taxes and revenue payable to the Government of India or to the Government of any State or to any Local Authority and that at present there are no arrears of such dues, rents, royalties, taxes and revenue dues and outstanding and that no attachments or warrants have been served on me of Income Tax, Government Revenues and other taxes.
        
    18. I/We also agree and undertake to give such declarations, undertakings and other writings as may be required by the Lender or their solicitors and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the lender.
        
    19. I/We say that I have obtained the requisite consent from the Income Tax authorities pursuant to the provisions contained in Section 281 of the Income Tax Act, 1961 for the alienation of my property in favour of the Lender.
        
    20. I/We assure, agree and declare that the security to be created in favour of the Lender shall ensure in respect of my Immovable Property, both present & future and that the documents of title, evidences, deeds and writings in relation to the said Immovable Property are the only documents of title relating to the said Immovable Property.
        
    21. I/We hereby agree and undertake that the MORTGAGOR shall, within a period of three months from the date hereof or such extended date as may be permitted by the Lender in writing:
        
    a) Perfectly assure the title to the properties comprised in the mortgage security and comply with all requisitions that may be made from time to time by or on behalf of the Lender in that regard.
    
    b) Provide such declarations, undertakings, and other writings as may be required by the Lender and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the Lender.`,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    //addFooter();
    
//     // ------------------------------------------------- new page --------------------------------------------------------------------
    
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(2);
    
    
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `c) Pay all rents, rates, taxes, cesses, fees, revenues, assessments, duties, and other outgoings due in respect of the said Immovable Property. I/We shall observe and perform all the rules and regulations pertaining to the same and will not do or omit to do or suffer to be done anything whereby the mortgaged security, as proposed to be created in favor of the Lender, may be affected or prejudiced in any manner whatsoever.
    
    22. I/We further undertake that no mortgage, charge, lien or other encumbrance whatsoever will be created on the properties compromised in the mortgaged security save & except with the permission of the Lender.
    
    23. I/We are not aware of any act, deeds, matter or thing or circumstance which prevents me from charging/further charging in favour of the Lender on the said Immovable Property.
    
    24. I/We (for borrower/s) do hereby unconditionally and irrevocably agree as a condition of such loan/advances extended to the Borrower by the Lender that in case I/we commit default in the repayment of such loan/advances of in the repayment of interest thereon or any of the agreed installment of the loan on due date/the Lender and/or the Reserve Bank of India will have an unqualified right to disclose or publish my/our name or the name of the our company/firm/unit and/or its directors/partners/proprietors as defaulter/s in such manner and through such medium as the Lender or Reserve Bank of India in their absolute discretion may think fit.
    
    25. I/We further understand that as a pre-condition, relating to grant of the loans/advances/ credit facilities to the Borrower, the Lender, requires my/our consent for the disclosure by the Lender of, information and data relating to me/us, of the credit facility availed of/to be availed, by me/us, obligations assumed/to be assumed, by me/us, in relation thereto and default, if any, committed, in discharge thereof.`,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
      //  continued:true // Set a maximum width
       // Set a maximum width
     }
    ).moveDown()
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text( 
  `26. Accordingly, I/We, hereby agree and give consent of the disclosure by the Lender of all or any such:
     
  a. Information and data relating to me/us.
     
  b. The information or data relating to any credit facility availed of/to be availed, by me/ us, and;
     
  c. Default, if any, committed by me/us, in discharge of my/our such obligation, as the Lender may deem appropriate and necessary to disclose and furnish to any agency authorized by RBI.
    
  I/We declare that the information and data furnished by me/us to the Lender are true and correct.
    
  27. Further, in consideration of the Lender agreeing to grant the `,
     {
       lineGap: 2,
       align: "left",
      //  align: "justify",
       width: 500,
       continued:true // Set a maximum width
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica-Bold`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `Agri Micro Loan against Property `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       continued:true // Set a maximum width
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `and in consideration of the Lender at our request continuing and having continued the above-mentioned facilities, I/we,agree, confirm and undertake: 
    `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica`)
    .fontSize(8)
    .fillColor("black")
    .text(
     `
    a) To keep mortgaged security fully insured against fire and such other risks as may be required by the Lender and to submit the respective insurance policies to the Lender.
    
    b) To allow Lender to carry out inspection of the mortgaged securities at periodical intervals and to bear the inspection charges and other incidental charges incurred by the Lender in connection therewith.
    
   c) To allow Lender to charge penal charges @ 2 % P.M above the rate applicable to loan Account on the entire outstanding in `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       continued:true // Set a maximum width
       // Set a maximum width
     }
    )
    doc
    .font(`Helvetica-Bold`)
    .fontSize(8)
    .fillColor("black")
    .text(
     ` Agri Micro Loan against Property `,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500,
       continued:true // Set a maximum width
     }
    )
    // doc
    // .font(`Helvetica` )
    // .fontSize(8)
    // .fillColor("black")
    // .text(
    //  `facilities under the following circumstances:
     
    //    ● Entire overdue amount in case of default in repayment of loan installments
       
    //    ● Entire outstanding amount of loan facilities for non-compliance of agreedterms and conditions mentioned in the Sanction Letter
     
    // d) To obtain the Lender's written consent in respect of the following matters:
     
    //    ● Making investment in or giving loans to subordinates, associate concerns, individuals or other parties.
       
    //    ● Effecting mergers and acquisitions.
       
    //    ● Paying dividend other than out of current year's earnings after making due provisions.
       
    //    ● Giving guarantees on behalf of third parties.
    // `,
    //  {
    //    lineGap: 2,
    //    align: "left",
    //    align: "justify",
    //    width: 500, // Set a maximum width
    //  }
    // );
    doc
    .font(`Helvetica` )
    .fontSize(8)
    .fillColor("black")
    .text(
     `facilities under the following circumstances:`,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500, // Set a maximum width
     }
    );
    doc.moveDown(1)

    const bulletPoints = [
      'Entire overdue amount in case of default in repayment of loan installments.',
      'Entire outstanding amount of loan facilities for non-compliance of agreedterms and conditions mentioned in the Sanction Letter.',
    ];
    
    bulletPoints.forEach((point) => {
      doc.text(`• ${point}`, {
        lineGap: 2,
        indent: 20, // Indent bullet points
        align: 'left',
      });
    });
    doc
    doc.moveDown(1)

    .font(`Helvetica` )
    .fontSize(8)
    .fillColor("black")
    .text(
     ` d) To obtain the Lender's written consent in respect of the following matters:`,
     {
       lineGap: 2,
       align: "left",
       align: "justify",
       width: 500, // Set a maximum width
     }
    );
    const bulletPoints1 = [
      `Making investment in or giving loans to subordinates, associate concerns, individuals or other parties.`,
      `Effecting mergers and acquisitions`,
      `Paying dividend other than out of current year's earnings after making due provisions.`,
      `Giving guarantees on behalf of third parties.`,
      `Premature repayment of loans and discharge of other liabilities`
    ];
    
    bulletPoints1.forEach((point) => {
      doc.text(`• ${point}`, {
        lineGap: 2,
        indent: 20, // Indent bullet points
        align: 'left',
      });
    });

    
    
    

    
    
    //addFooter();
//     //-------------------------------------------- new page --------------------------------------------------------------------
    
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(8);
    
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
      `
    e) Not to create without Lender's prior written consent, charges on all or any of the assets and properties, other than the existing /proposed charges in favour of other Financial Institution/Banks (if any).
    
    f) That all the moneys advanced or to be advanced by the Lender under the facilities mentioned herein above shall be utilized exclusively for the purpose set-forth in our proposal and for no other purpose and if the said loan/advance is utilized or attempted to be utilized for any other purpose or if the Lender apprehends or has reasons to believe that the said loan/advance is being utilized for any other purpose, the Lender shall have the right to forthwith recall the entire or any part of the loan/advance without assigning any reason thereof.
    
    g) That notwithstanding anything to the contrary contained in any of the documents/agreements executed/to be executed by us as also in the Letter of Sanction by the Lender, the Lender shall be entitled to charge the contractual rate of interest at its own discretion without any intimation to us to bring it in conformity with the rate of interest prescribed by the Reserve Bank of India or any other eventuality such as reintroduction of Interest Tax, etc. from time to time and the same shall be binding on us as if such change were already incorporated in the documents executed by us.
    
    h) That in the event of any irregularity, the Lender at its discretion shall be entitled to charge on the entire outstanding or any portion thereof interest at such enhanced rates as it may fix during the continuance of such irregularity. We understand that it is on the faith of the aforesaid representations and express undertakings that the Lender has consented to entertain our proposal for the said facilities.

    28. I/We undertake that:
    
    a. The Credit Information Bureau (India) Ltd. and any other agency so authorized may use, process the said information and data disclosed by the Lender in the manner as deemed fit by them and;
    
    b. The Credit Information Bureau (India) Ltd. and other agency so authorized may furnish for consideration, the processed information and data or products thereof prepared by them, to Lenders/Financial Institutions and other credit grantors or registered users, as may be specified by the Reserve Bank of India in this behalf.
    
    c. I/We certify that (i) all information furnished by me/us is true, (ii) except as indicated in this application that there is no over dues/statutory dues against me/us (iii) except as indicated in this application that no legal action has been/is being taken against me/us; (iv) I/We shall furnish the details of legal action/s or recovery process, if any, initiated against me/us in future by any person/body/authority/together with the details of the liability/claim therein and the action/s taken by me/us to defend/counter the same forthwith on my/our coming to know of such litigations; (v) I/We shall furnish all other Information that may be required by you in connection with this credit facilities (vi)this may also be exchanged by you with any agency you may deem fit and you, your representatives, representatives of the Reserve Bank of India or any other agency.
    
    29. I/We, the Borrower/s, hereby declare, state and confirm as follows:
    
    a) There is no litigation, suit, recovery proceedings/execution application or any other coercive action or process issued, undertaken or adjudication or pending against us in any judicial forum/court of law/DRT/any tribunal/Revenue or other Recovery Authorities in respect of any loan, borrowing or advance availed by me/us from any Lender/FI/Co-operative Society/NBFC or any other private/government/semi government or public sector undertaking or institution. In case any such litigation/action or process is issued/field of undertaken against us in future we shall immediately arrange to intimate/furnish (i) details /particulars thereof in writing to the Lender/Branch and (ii) the details of action/s initiated/taken by me/us to counter/defend the same appropriately.
    
    b) There is litigation /insolvency proceedings/dispute/claim/coercive process /execution petition, presently pending/adjudicated though not finally, earlier against me/us the details whereof are as under:

    We further agree that it is on the faith of the above declaration/undertaking that the Lender has granted/sanctioned or proposes to sanction to the Borrowers the proposed/present/reviewed loan/advance facility(ies) and in case the above is found incomplete, in correct or false, then the Lender shall have the right to recall the advance /loan account and take/initiate any or all actions against me/us including civil or criminal action or proceedings and to enforce its rights in court of competent jurisdiction under any rules /regulations, act/s or law/s in force.
    
    `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    
    //addFooter();
    
//     // -------------------------------------------------- new page -----------------------------------------------------------------------------
    
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(8);
    doc
    .font(font)
    .fontSize(8)
    .fillColor("black")
    .text(
    `
    30. The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower also has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the Borrower and the Borrower has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.
    `,
      {
        lineGap: 2,
        align: "left",
        align: "justify",
        width: 500, // Set a maximum width
      }
    );
    
    doc
    .fontSize(9)
    .font(fontBold)
    .text("-: SCHEDULE ABOVE REFEERED TO :-", { align: "center" })
    .moveDown(0.8)
    .fontSize(8)
    .text("(Description of the Immovable Property)", { align: "center" })
    .moveDown(0.9)
    
    doc
    .font('Helvetica')
    .fontSize(8)
    .fillColor("black") // Normal text color
    .text("Address of Immovable Property - 1: ", { continued: true })  // Keep this text inline
    .text(`${allPerameters.techfullAdress}`, 
          { align: "left", indent: 235 })  // Indentation for the second line onwards
    .moveDown(0.9)
    .font(fontBold)
    .fontSize(9)
    .text("Boundaries of Property", { align: "left" });
    
    doc.moveDown(0.5);
    
    function BoundariesFunction(tableData) {
        // Add Table Header
        const startX = 50; // Starting X position for the box
        let startY = doc.y + 10; // Starting Y position for the box
        const boxWidth = 500; // Total width of the box
        const numFields = 3; // Fixed number of columns (Direction, Separator, Description)
    
        // Adjusted widths for columns: first and last wider, middle narrower
        const firstColumnWidth = boxWidth * 0.4; // 40% for the first column
        const middleColumnWidth = boxWidth * 0.2; // 20% for the middle column
        const lastColumnWidth = boxWidth * 0.4; // 40% for the last column
    
        // Calculate the total height needed for the entire box
        let totalHeight = 0;
    
        // Calculate the height for each row and determine the total height of the box
        tableData.forEach((row) => {
            let rowHeight = 0;
            Object.values(row).forEach((field) => {
                const fieldTextHeight = doc
                    .font('Helvetica') // Regular font for calculating height
                    .fontSize(7.2)
                    .heightOfString(field || '', { width: firstColumnWidth }) + 10; // Add padding
                rowHeight = Math.max(rowHeight, fieldTextHeight); // Get the maximum height for the row
            });
            totalHeight += rowHeight; // Accumulate the total height
        });
    
        // Draw the outer rectangle for the box
        doc
            .fillColor("#f0f0f0") // Box background color
            .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
            .stroke("black") // Border color (normal line)
            .fill();
    
        // Loop through the data and draw the text inside the box
        tableData.forEach((row) => {
            let currentX = startX; // Reset the starting X position for each row
            // Calculate row height based on the content in each field
            let rowHeight = 0;
            Object.values(row).forEach((field) => {
                const fieldTextHeight = doc
                    .font('Helvetica') // Regular font for calculating height
                    .fontSize(7.2)
                    .heightOfString(field || '', { width: firstColumnWidth }) + 10; // Add padding
                rowHeight = Math.max(rowHeight, fieldTextHeight); // Get the maximum height for the row
            });
    
            // Draw rectangles for each field in the row
            Object.entries(row).forEach(([key, field], fieldIndex) => {
                // Set the width for each column
                const fieldWidth = fieldIndex === 1 ? middleColumnWidth : (fieldIndex === 0 ? firstColumnWidth : lastColumnWidth);
    
                // Draw rectangle for the field box
                doc
                    .fillColor("#f5f5f5") // Background color for field (empty box)
                    .rect(currentX, startY, fieldWidth, rowHeight)
                    .stroke("black") // Normal line border for field box
                    .fill();
    
                // Set font style based on whether it's a field (bold) or value (normal)
                const isFieldValue = key === 'value'; // Check if it's the value field
                doc
                    .font(isFieldValue ? 'Helvetica' : 'Helvetica-Bold') // Bold for field, normal for value
                    .fillColor("black")
                    .fontSize(7.2);
    
                // Align text properly based on column index
                const align = fieldIndex === 1 ? 'left' : (fieldIndex === 0 ? 'left' : 'left'); // Align all to left
    
                // Draw the field text in the box
                doc.text(field, currentX + 5, startY + 5, {
                    baseline: "hanging",
                    width: fieldWidth - 10, // Adjust width to provide padding inside the box
                    align: align, // Align text based on content
                });
    
                // Move to the next column
                currentX += fieldWidth; // Update X position for the next field
            });
    
            // Move to the next row
            startY += rowHeight; // Update Y position for the next row
        });
    }
    
    const boundariesData = [
        { field1: "On or towards North", field2: ": ", value: `${allPerameters.OnOrTowardsNorth}` },
        { field1: "On or towards South", field2: ": ", value: `${allPerameters.OnOrTowardsSouth}` },
        { field1: "On or towards East",  field2: ": ", value: `${allPerameters.OnOrTowardsEast}` },
        { field1: "On or towards West",  field2: ": ", value: `${allPerameters.OnOrTowardsWest}` },
    ];
    
    // Call the function to create the table
    BoundariesFunction(boundariesData);
    
    doc.moveDown(2);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`DATE This: ${allPerameters.agreementdate}`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
    
    // Set initial font and size
    doc
    .font(font) // Assuming 'font' is defined elsewhere as your base font
    .fontSize(9)
    .fillColor("black")
    .text(`IN WITNESS WHEREOF the Borrower, Co-Borrowers & Guarantors set and subscribed their hands to these presents on the day and year first hereinabove written.\n\n`, {
    lineGap: 2,
    align: "left",
    width: 500, // Set a maximum width
    });
    
    // Bold text for "SIGNED & DELIVERED BY THE"
    doc
    .fontSize(9)
    .font('Helvetica-Bold') // Change to bold font
    .text(`SIGNED & DELIVERED BY THE`, {
    lineGap: 2,
    align: "left",
    width: 500, // Set a maximum width
    });
    
    // Change back to normal font for the rest of the text
    doc
    .fontSize(9)
    .font(font) // Switch back to normal font
    .text(`\n\nWITH IN NAMED\n\n(1) ${allPerameters.borrowerName}\n\n\[Borrower]\n\n\(2)${allPerameters.coBorrowername}\n\n\[Co-Borrower]\n\n`, {
    lineGap: 2,
    align: "left",
    width: 500, // Set a maximum width
    });
    
    //addFooter();
    
//     //------------------------------------- new page -----------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(9);
    
    doc
    .fontSize(9)
    .font('Helvetica-Bold')
    .text(`DEMAND PROMISSORY NOTE`, startX, doc.y, { align: "center", width: 500 });
    doc.moveDown(1);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`Place:  ${allPerameters.placeOfExecution} \n\n Date: ${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
    doc.moveDown(2);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`ON DEMAND,I/We (1) ${allPerameters.borrowerName} (2) ${allPerameters.coBorrowername}  `, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(1);
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`${allPerameters.borrowerName}, Residing At ${allPerameters.borroewraddress}`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(3);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`(Hereinafter referred to as “Borrowers”/”Co-Borrowers”/”Guarantors” which term shall, unless repugnant to the context be deemed to include in case of (a) an individual, my/ our heirs, legal representatives, executors, administrators and permitted assigns, (b) a proprietorship firm, the proprietor(ess) (both in my/our personal capacity and as proprietor(ess) of the concern) and my/our heirs, legal representatives, executors, administrators, permitted assigns and successors of the concern, (c) a company, its successors and permitted assigns, (d) a limited liability partnership, its successors and permitted assigns, (e) a partnership firm, any or each of the partners and survivor(s) of them and the partners from time to time (both in their personal capacity and as partners of the firm) and their respective heirs, legal representatives , executors, administrators, permitted assigns and successors of the firm) jointly and severally promise to pay to `,
      startX, // Starting X position
    doc.y, // Current Y position
    {
      align: "justify", // Align text for justification
      width: 500,      // Set a maximum width
      lineGap: 2,
      continued:true      // Optional line spacing
    }
    )
    .font('Helvetica-Bold')

    .text(`RATNAAFIN CAPITAL PRIVATE LIMITED,`,
      startX, // Starting X position
      doc.y, // Current Y position
      {
        align: "justify", // Align text for justification
        width: 500,      // Set a maximum width
        lineGap: 2,
        continued:true      // Optional line spacing
      }
      ) 
      .font('Helvetica')

      .text(` a company incorporated under the provisions of the Companies Act, 2013, having its registered office at 402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place Near Hyatt Hotel, New Delhi- 110066, Delhi, India and corporate office at 2nd & 3rd Floor,The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India-380060 (hereinafter referred to as the “Lender”, which expression shall, unless repugnant to the context, include its successors and assigns) the sum of Rs. `,
        startX, // Starting X position
    doc.y, // Current Y position
    {
      align: "justify", // Align text for justification
      width: 500,      // Set a maximum width
      lineGap: 2,
      continued:true
          // Optional line spacing
    }
    ) 
    .font('Helvetica-Bold')

    .text(` ${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord}) `,
        startX, // Starting X position
    doc.y, // Current Y position
    {
      align: "justify", // Align text for justification
      width: 500,      // Set a maximum width
      lineGap: 2,
      continued:true
          // Optional line spacing
    }
    )  
    .font('Helvetica')

    .text(`and with rate of interest at ${allPerameters.rateOfInterest}% Per Annum (FRR – 19.20% + ${allPerameters.interestType1}%) and/or such other rate as RCPL may ix from time to time for value received (to be paid monthly and to be calculated on the basis of 365 (three hundred and sixty five days)) and other amounts payable to the Lender in terms of the loan agreement dated ${allPerameters.agreementdate}, executed by and amongst the Borrowers and the Lender`,
      startX, // Starting X position
  doc.y, // Current Y position
  {
    align: "justify", // Align text for justification
    width: 500,      // Set a maximum width
    lineGap: 2,
        // Optional line spacing
  }
  ) ;
    
    doc.moveDown(3); // Move down after the text block
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Presentment for payment, notice of non-payment and noting and protest of the note are hereby unconditionally and irrevocably waived.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    // paymentTable
    
    function presentment(tableData) {
    // Add Table Header
    const startX = 50; // Starting X position for the box
    let startY = doc.y + 10; // Starting Y position for the box
    const boxWidth = 500; // Adjust the width of the box as per your need
    
    // Calculate the total height needed for the entire box
    let totalHeight = 0;
    
    // Calculate the height for each row and determine the total height of the box
    tableData.forEach((row) => {
    const rowHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(row.field1, { width: boxWidth }) + 40; // Add padding
    
    totalHeight += rowHeight; // Accumulate the total height
    });
    
    // Draw the outer rectangle for the box
    doc
    .fillColor("#f0f0f0") // Box background color
    .rect(startX, startY, boxWidth, totalHeight) // Total height of the box
    .stroke("black") // Border color
    .fill();
    
    // Loop through the data and draw the text inside the box
    tableData.forEach((row, rowIndex) => {
    // Calculate row height based on the content
    const rowHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(row.field1, { width: boxWidth }) + 40; // Add padding
    
    // Alternate row background color (optional)
    doc
      .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff") // Alternate row colors
      .rect(startX, startY, boxWidth, rowHeight) // Draw rectangle for each row
      .stroke("black") // Border color for each row
      .fill();
    
    // Draw the text in the box
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(row.field1, startX + 5, startY + 5, {
        baseline: "hanging",
        width: boxWidth - 10, // Adjust width to provide padding inside the box
        align: "left", // Align text to the left
      });
    
    // Move to the next row
    startY += rowHeight;
    });
    }


    
    // const presentmentpayment = [
    // { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
    // { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
    // { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
    // ];
    
    // presentment(presentmentpayment);

    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the Borrower and the Borrower has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`,{ align: "left", });
    doc.moveDown(1);
    // presentmentpayment
    //addFooter();
    
    
//     // ------------------------------------------------------ new page ------------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(9);
    
    doc
    .fontSize(9)
    .font('Helvetica-Bold')
    .text(`LETTER OF CONTINUITY FOR DEMAND PROMISSORY NOTE`, startX, doc.y, { align: "center", width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`Place: ${allPerameters.placeOfExecution} \n\n  Date: ${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`To,`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Ratnaafin Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);

    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
     doc.moveDown(2)

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`Dear Sirs, \n\n\n I/We (1) ${allPerameters.borrowerName} (2)${allPerameters.coBorrowername} ,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`${allPerameters.borrowerName}, Residing At ${allPerameters.borroewraddress}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(4);
    
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`(Hereinafter referred to as “Borrowers”/”Co-Borrowers”/”Guarantors” which term shall, unless repugnant to the context be deemed to include in case (a) an individual, his/her heirs, legal representatives, executors, administrators and permitted assigns, (b) a proprietorship firm, the proprietor(ess) (both in my/our personal capacity and as proprietor(ess) of the concern) and his/her heirs, legal representatives, executors, administrators, permitted assigns and successors of the concern, (c) a company, its successors and permitted assigns, (d) a limited liability partnership, its successors and permitted assigns, (e) a partnership firm, any or each of the partners and survivor(s) of them and the partners from time to time (both in their personal capacity and as partners of the firm) and their respective heirs, legal representatives, executors, administrators, permitted assigns and successors of the firm) have executed a Demand Promissory Note for Rs. `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
    .font('Helvetica-Bold')

      .text(`${allPerameters.loanAmount}/- (${allPerameters.loanAmountInWord}) `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
      .font('Helvetica')

      .text(` and with rate of interest at ${allPerameters.rateOfInterest}% Per Annum and/or such other rate as `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
      .font('Helvetica-Bold')
      .text(`RCPL `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
      .font('Helvetica')
      .text(`may fix from time to time for value received, dated ${allPerameters.agreementdate} duly signed and delivered by me/us to you, as security for the repayment of all amounts due and/or payable by us under the loan agreement dated ${allPerameters.agreementdate} and/or any amendment(s)/addendum(s) thereto (“Loan Agreement”).\n\n\nWe hereby irrevocably and unconditionally, agree, confirm and undertake that the said Demand Promissory Note shall operate as a continuing security to you to be enforceable for the repayment of the ultimate balance and/or all sums remaining unpaid under the Loan Agreement now or hereafter,including all interest to become payable under the Loan Agreement, and also all monies lent, advanced, paid or incurred in respect of/under the Loan Agreement or which may in future be advanced or incurred together with interest, discount, commission and other charges and all other costs, charges and expenses which may be or become payable in connection therewith.\n\n\nThe Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the Borrower and the
       Borrower has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.\n\n\n Thanking you `, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    
    // presentment(presentmentpayment);
    
    //addFooter();
    
    
//     // ----------------------------------------------new page ------------------------------------------------
    doc.addPage();
    // addLogo();
    //drawBorder();
    doc.moveDown(9);
    
    doc
    .fontSize(9)
    .font('Helvetica-Bold')
    .text(`UDC Covering Letter (APPLICANT)`, startX, doc.y, { align: "center",underline: true, width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(9)
    .font('Helvetica')
    .text(`${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`To,`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Ratnaafin Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(1);

    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`Sirs, \n `, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(2);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`subject:Credit Facility of Rs. ${allPerameters.loanAmount}(${allPerameters.loanAmountInWord}) sanctioned to ${allPerameters.borrowerName}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`In consideration of and towards repayment of the aforesaid credit facilities granted/agreed to be granted by Ratnaafin Capital Pvt. Ltd (Lender)\n I/We, ${allPerameters.borrowerName} hereby inter alia deliver to the Lender the cheques (as detailed hereunder) drawn in favour of the Lender being blank as regards the date of the cheque and the amount.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    
    function chequeTable(tableData) {
    // Add Table Header
    const startX = 50; // Starting X position for the box
    let startY = doc.y + 10; // Starting Y position for the box
    
    // Define custom column widths
    const columnWidths = {
        field1: 50,   // Sr. No.
        field2: 100,  // Cheque No.
        field3: 200,  // Bank Details
        field4: 150,  // Name of the account holder
    };
    
    // Function to calculate row height dynamically based on content
    const calculateRowHeight = (row) => {
        let maxHeight = 0;
        Object.keys(row).forEach((field) => {
            const text = row[field] || ''; // Default to empty string if no value
            const columnWidth = columnWidths[field] || 100; // Default width
            const textHeight = doc
                .font('Helvetica')
                .fontSize(7.2)
                .heightOfString(text, { width: columnWidth }) + 10; // Add padding
            maxHeight = Math.max(maxHeight, textHeight);
        });
        return maxHeight;
    };
    
    // Calculate total height for the table
    let totalHeight = 0;
    tableData.forEach(row => {
        totalHeight += calculateRowHeight(row);
    });
    
    // Draw the outer rectangle for the box
    doc
        .fillColor("#f0f0f0")
        .rect(startX, startY, 500, totalHeight) // Adjust box width to the total width of columns
        .stroke("black")
        .fill();
    
    // Loop through the data and draw the text inside the box
    tableData.forEach((row, rowIndex) => {
        let currentX = startX; // Reset the starting X position for each row
        const rowHeight = calculateRowHeight(row);
    
        // Draw rectangles and fill in data
        Object.keys(columnWidths).forEach((field) => {
            const columnWidth = columnWidths[field];
            const text = row[field] || ''; // Handle blank fields
    
            // Draw rectangle for the field box
            doc
                .fillColor("#f5f5f5") // Background color for the box
                .rect(currentX, startY, columnWidth, rowHeight)
                .stroke("black")
                .fill();
    
            // Set font style for header or regular row
            const isHeader = rowIndex === 0; // Check if it's the header row
            doc
                .font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
                .fillColor("black")
                .fontSize(7.2);
    
            // Draw the field text, align left
            doc.text(text, currentX + 5, startY + 5, {
                baseline: "hanging",
                width: columnWidth - 10, // Adjust width for padding
                align: 'left', // Align text to the left
            });
    
            currentX += columnWidth; // Update X for next field
        });
    
        // Move to the next row
        startY += rowHeight;
    });
    }
    
    // Updated applicant table with dynamic fields
    const applicantTable = [
    { field1: "Sr. No.", field2: "Cheque No.", field3: "Bank Details", field4: "Name of the account holder" },
    { field1: "1", field2: `${allPerameters.table?.[0]?.appchequeNo1}`, field3: `${allPerameters.table?.[0]?.bankDetail1},A/c No.${allPerameters.table?.[0]?.bankaccNo1}`, field4: `${allPerameters.table?.[0]?.accountHolderName1}` },
    { field1: "2", field2: `${allPerameters.table?.[1]?.appchequeNo2}`, field3: `${allPerameters.table?.[1]?.bankDetail1},A/c No.${allPerameters.table?.[1]?.bankaccNo2}`, field4: `${allPerameters.table?.[1]?.accountHolderName2}` },
    { field1: "3", field2: `${allPerameters.table?.[2]?.appchequeNo3}`, field3: `${allPerameters.table?.[2]?.bankDetail1},A/c No.${allPerameters.table?.[2]?.bankaccNo3}`, field4: `${allPerameters.table?.[2]?.accountHolderName3}` },
    { field1: "4", field2: `${allPerameters.table?.[3]?.appchequeNo4}`, field3: `${allPerameters.table?.[3]?.bankDetail4},A/c No.${allPerameters.table?.[3]?.bankaccNo4}`, field4: `${allPerameters.table?.[3]?.accountHolderName4}` },
    { field1: "5", field2:`${allPerameters.table?.[4]?.appchequeNo5}`, field3: `${allPerameters.table?.[4]?.bankDetail5},A/c No.${allPerameters.table?.[4]?.bankaccNo5}`, field4: `${allPerameters.table?.[4]?.accountHolderName5}` },
    // { field1: "6", field2: `${allPerameters.table?.[5]?.appchequeNo6}`, field3: `${allPerameters.table?.[5]?.bankDetail6}`, field4: `${allPerameters.table?.[5]?.accountHolderName6}` },
    // { field1: "7", field2: `${allPerameters.table?.[6]?.appchequeNo7}`, field3: `${allPerameters.table?.[6]?.bankDetail7}`, field4: `${allPerameters.table?.[6]?.accountHolderName7}` },
    ];
    
    // Call the function to create the table
    chequeTable(applicantTable);
    doc.moveDown(2);
    doc.moveDown(2);

    
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`I/we do hereby agree and acknowledge in accordance with the provisions of section 20 of the Negotiable Instruments Act ("The Act") the Lender in the present case as the holder of the said cheques shall have the authority to complete the said cheques.\n\n In addition to the express provisions of the Act as mentioned above authorizing the Lender to complete the said cheques to the extent of credit facility outstanding including any interest, penal charges , other charges, etc. that the Lender may incur I / We hereby unconditionally and irrevocably authorize and confirm the authority of the Lender to fill in the date and the amount on the said cheques and to present the same for payment.\n\nI/We hereby undertake to be absolutely bound as the drawer of the said cheques so completed by the Lender as above and shall be liable in the same manner as the said cheques were drawn and completed by me/us and shall ensure that the said cheques are honored on presentation for payment\n\nI/We agree and acknowledge that any dishonoring of the said cheques would make me/us liable including under the provisions of section 138 of the Negotiable Instruments Act,1881.\n\nFor and on behalf of:
    `, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);
    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`___________________________`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`I/we do hereby agree and acknowledge in accordance with the provisions of section 20 of the Negotiable Instruments Act ("The Act") the Lender in the present case as the holder of the said cheques shall have the authority to complete the said cheques.\n\n In addition to the express provisions of the Act as mentioned above authorizing the Lender to complete the said cheques to the extent of credit facility outstanding including any interest, penal charges , other charges, etc. that the Lender may incur I / We hereby unconditionally and irrevocably authorize and confirm the authority of the Lender to fill in the date and the amount on the said cheques and to present the same for payment.\n\nI/We hereby undertake to be absolutely bound as the drawer of the said cheques so completed by the Lender as above and shall be liable in the same manner as the said cheques were drawn and completed by me/us and shall ensure that the said cheques are honored on presentation for payment\n\nI/We agree and acknowledge that any dishonoring of the said cheques would make me/us liable including under the provisions of section 138 of the Negotiable Instruments Act,1881.\n\nFor and on behalf of:
// `, startX, doc.y, { align: "left",align: "justify", width: 500 });
//  doc.moveDown(1);

  //addFooter();

//   //------------------------------- new page 12 ----------------------------------------------

  doc.addPage();
  // addLogo();
  //drawBorder();
  doc.moveDown(9);

  doc
  .fontSize(9)
  .font('Helvetica-Bold')
  .text(`UDC Covering Letter (co-applicant/Guarantor)`, startX, doc.y, { align: "center",underline: true, width: 500 });
  doc.moveDown(2);

  doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`To,`, startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(1);

  doc
  .fontSize(8)
  .font('Helvetica-Bold')
  .text(`Ratnaafin Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(1);

  doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`Dear Madam/Sir, \n `, startX, doc.y, { align: "left",align: "justify", width: 500 });
  doc.moveDown(2);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`subject:Credit Facility of Rs. ${allPerameters.loanAmount}(${allPerameters.loanAmountInWord}) sanctioned to ${allPerameters.borrowerName}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
  doc.moveDown(1);

  doc
  .fontSize(8)
  .font('Helvetica')
  .text(`In consideration of and towards repayment of the aforesaid credit facilities granted/agreed to be granted by Ratnaafin Capital Pvt. Ltd Lender I/We, ${allPerameters.guarantorname} hereby inter alia deliver to the Lender the cheques (as detailed hereunder) drawn in favour of the Lender being blank as regards the date of the cheque and the amount.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
   doc.moveDown(1);


   function ChequETaBLE(tableData) {
    // Add Table Header
    const startX = 50; // Starting X position for the box
    let startY = doc.y + 10; // Starting Y position for the box
    
    // Define custom column widths
    const columnWidths = {
        field1: 50,   // Sr. No.
        field2: 100,  // Cheque No.
        field3: 200,  // Bank Details
        field4: 150,  // Name of the account holder
    };
    
    // Function to calculate row height dynamically based on content
    const calculateRowHeight = (row) => {
        let maxHeight = 0;
        Object.keys(row).forEach((field) => {
            const text = row[field] || ''; // Default to empty string if no value
            const columnWidth = columnWidths[field] || 100; // Default width
            const textHeight = doc
                .font('Helvetica')
                .fontSize(7.2)
                .heightOfString(text, { width: columnWidth }) + 10; // Add padding
            maxHeight = Math.max(maxHeight, textHeight);
        });
        return maxHeight;
    };
    
    // Calculate total height for the table
    let totalHeight = 0;
    tableData.forEach(row => {
        totalHeight += calculateRowHeight(row);
    });
    
    // Draw the outer rectangle for the box
    doc
        .fillColor("#f0f0f0")
        .rect(startX, startY, 500, totalHeight) // Adjust box width to the total width of columns
        .stroke("black")
        .fill();
    
    // Loop through the data and draw the text inside the box
    tableData.forEach((row, rowIndex) => {
        let currentX = startX; // Reset the starting X position for each row
        const rowHeight = calculateRowHeight(row);
    
        // Draw rectangles and fill in data
        Object.keys(columnWidths).forEach((field) => {
            const columnWidth = columnWidths[field];
            const text = row[field] || ''; // Handle blank fields
    
            // Draw rectangle for the field box
            doc
                .fillColor("#f5f5f5") // Background color for the box
                .rect(currentX, startY, columnWidth, rowHeight)
                .stroke("black")
                .fill();
    
            // Set font style for header or regular row
            const isHeader = rowIndex === 0; // Check if it's the header row
            doc
                .font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
                .fillColor("black")
                .fontSize(7.2);
    
            // Draw the field text, align left
            doc.text(text, currentX + 5, startY + 5, {
                baseline: "hanging",
                width: columnWidth - 10, // Adjust width for padding
                align: 'left', // Align text to the left
            });
    
            currentX += columnWidth; // Update X for next field
        });
    
        // Move to the next row
        startY += rowHeight;
    });
    }

// Updated applicant table with dynamic fields
const guarantorTable = [
  { field1: "Sr. No.", field2: "Cheque No.", field3: "Bank Details", field4: "Name of the account holder" },
  { field1: "1", field2: `${allPerameters.tableno2?.[0]?.guchequeNo1}`, field3: `${allPerameters.tableno2?.[0]?.gubankDetail1},A/c No.${allPerameters.tableno2?.[0]?.gubankaccNo1}`, field4: `${allPerameters.tableno2?.[0]?.guaccountHolderName1}` },
  { field1: "2", field2: `${allPerameters.tableno2?.[1]?.guchequeNo2}`, field3: `${allPerameters.tableno2?.[1]?.gubankDetail2},A/c No.${allPerameters.tableno2?.[1]?.gubankaccNo2}`, field4: `${allPerameters.tableno2?.[1]?.guaccountHolderName2}` },
  { field1: "3", field2: ``, field3: ``, field4: `` },
  { field1: "4", field2: ``, field3: ``, field4: `` },
  { field1: "5", field2:``, field3: ``, field4: `` },
  // { field1: "6", field2: `${allPerameters.tableno2?.[5]?.guchequeNo6}`, field3: `${allPerameters.tableno2?.[5]?.gubankDetail6}`, field4: `${allPerameters.tableno2?.[5]?.guaccountHolderName6}` },
  // { field1: "7", field2: `${allPerameters.tableno2?.[6]?.guchequeNo7}`, field3: `${allPerameters.tableno2?.[6]?.gubankDetail7}`, field4: `${allPerameters.tableno2?.[6]?.guaccountHolderName7}` },
  ];
// Call the function to create the table
ChequETaBLE(guarantorTable);
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`I/we do hereby agree and acknowledge in accordance with the provisions of section 20 of the Negotiable Instruments Act ("The Act") the Lender in the present case as the holder of the said cheques shall have the authority to complete the said cheques.\n\n In addition to the express provisions of the Act as mentioned above authorizing the Lender to complete the said cheques to the extent of credit facility outstanding including any interest, penal charges , other charges, etc. that the Lender may incur I / We hereby unconditionally and irrevocably authorize and confirm the authority of the Lender to fill in the date and the amount on the said cheques and to present the same for payment.\n\nI/We hereby undertake to be absolutely bound as the drawer of the said cheques so completed by the Lender as above and shall be liable in the same manner as the said cheques were drawn and completed by me/us and shall ensure that the said cheques are honored on presentation for payment\n\nI/We agree and acknowledge that any dishonoring of the said cheques would make me/us liable including under the provisions of section 138 of the Negotiable Instruments Act,1881.\n\nFor and on behalf of:
`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
    .fontSize(8)
    .font('Helvetica')
    .text(`___________________________`, startX, doc.y, { align: "left",align: "justify", width: 500 });
    doc.moveDown(1);

  //addFooter();

  //--------------------------------disbursment demand for our loan-------------------
  doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`DISBURSEMENT DEMAND FOR OUR LOAN`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`The Manager,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`RATNAAFIN CAPITAL PRIVATE LIMITED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });


doc.moveDown(3);


doc
.fontSize(8)
.font('Helvetica')
.text(`Dear Sir,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
 .fontSize(8)
 .font('Helvetica')
 .text(`We have been sanctioned a Loan against Property from Ratnaafin Capital Private limited for an amount of Rs. `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(`${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord}) `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica')
 .text(`for the purpose of `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(`${allPerameters.specifiedPurpose}`, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
 .font('Helvetica')
 .text(`. We have accepted all terms and conditions for the Agri Micro Loan against Property against property and executed all the documents for the loan.`, startX, doc.y, { align: "left",align: "justify", width: 500 });

 doc.moveDown(3);
 
 doc
 .fontSize(8)
 .font('Helvetica')
 .text(`We request a disbursement for an amount of Rs. `, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(`${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord})`, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica')
 .text(` are deducting all the necessary fees & charges, in favour of Ratnaafin Capital Private Limited from our Loan account number`, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica-Bold')
 .text(` ${allPerameters.sanctionLetterNo}`, startX, doc.y, { align: "left", width: 500,continued:true })
 .font('Helvetica')
 .text(` as a full/part disbursement towards this Loan.`, startX, doc.y, { align: "left", width: 500 })
 doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`We also agree to pay interest on the amount disbursed as per our request starting from the date of disbursement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`Thanking you,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(`Yours Faithfully,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(`Primary Borrower Name :${allPerameters.borrowerName}`, startX, doc.y, { align: "left",align: "justify", width: 500 });
 doc.moveDown(1);

// const confirmationTable = [
//   { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
//   { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
//   { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
// ];

// presentment(confirmationTable);
//addFooter();

// // -------------------------------------------new page 13 --------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`VERNACULAR CONFIRMATION LETTER`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`To,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`RATNAAFIN CAPITAL PRIVATE LIMITED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`201-202, Shilp Aperia,\n Near Ashok Vatika,\n Bopal-Ambli Road,\n Ahmedabad, Gujarat – 380054`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);


doc
.fontSize(8)
.font('Helvetica')
.text(`I/We hereby acknowledge and confirm that I/we have received the copy of the loan Agreement dated ${allPerameters.agreementdate} executed between `, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
.font('Helvetica-Bold')
.text(` RCPL`, startX, doc.y, { align: "left",align: "justify", width: 500,continued:true })
.font('Helvetica')
.text(`and me/us ('Loan Agreement') and the contents of the loan Agreement have been fully explained to and understood by me/us at the time of availing the loan in the language understood by me/us) \n\n I/We further confirm that am/are fully aware of and completely understand the rights and obligations contained in the loan documents mentioned below:`, startX, doc.y, { align: "left",align: "justify", width: 500 });


doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(` 1. Loan application form\n 2. KYC form\n 3. Sanction letter\n 4. DP Note\n 5. Declaration cum Undertaking Cum Authority by the Borrower,Co-Borrower & Guarantor\n 6. Guarantee Agreement \n 7. Loan Facility Agreement\n 8. Mortgage Deed \n 9. Any other document related to loan\n10. Declaration of Immoval property.\n11.Interest rate Declaration.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(3);

doc
.fontSize(8)
.font('Helvetica')
.text(`The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The the Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers / Guarantors in the language understood by the the Borrower / Co-borrowers / Guarantors and the the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(3);
doc
.fontSize(8)
.font('Helvetica-Bold')
.text(
  `Name of the Borrower : ${allPerameters.borrowerName}` )
  .text(
    `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` )
    // .text(
    //   `2nd CO-BORROWERS NAME : ${allPerameters.coBorrowername2}` )
      // .text(
      //   `GUARANTOR'S NAME : ${allPerameters.guarantorname}` )

//addFooter();
// //---------------------------------------------------- new page 14-------------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`VERNACULAR DECLARATION FORM`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);


function declarationTableFunction(tableData) {
  const startX = 50;
  let startY = doc.y + 10;

  const columnWidths = {
    field1: 50,
    field2: 100,
    field3: 330,
  };

  // Define min and max row height to avoid extremes
  const MIN_ROW_HEIGHT = 15;
  const MAX_ROW_HEIGHT = 45;

  // Function to calculate row height based on text content
  const calculateRowHeight = (row) => {
    let maxHeight = 0;
    Object.keys(row).forEach((field) => {
      const text = row[field] || '';
      const columnWidth = columnWidths[field] || 100;

      // Calculate the text height for each field
      const textHeight = doc
        .font(field === 'field3' ? fontKerlaTamil : 'Helvetica')
        .fontSize(7.2)
        .heightOfString(text, { width: columnWidth });

      // Track the highest text height in the row
      maxHeight = Math.max(maxHeight, textHeight);
    });

    // Ensure the row height stays within the defined min and max limits
    return Math.max(MIN_ROW_HEIGHT, Math.min(maxHeight, MAX_ROW_HEIGHT));
  };

  const totalWidth = Object.values(columnWidths).reduce((sum, width) => sum + width, 0);

  tableData.forEach((row, rowIndex) => {
    let currentX = startX;
    const rowHeight = calculateRowHeight(row); // Calculate the row height based on text content

    // Set up the table border at the beginning
    doc
      .lineWidth(0.25)
      .rect(startX, startY, totalWidth, rowHeight)
      .stroke("black");

    Object.keys(columnWidths).forEach((field) => {
      const columnWidth = columnWidths[field];
      const content = row[field] || '';

      doc
        .lineWidth(0.25)
        .rect(currentX, startY, columnWidth, rowHeight)
        .stroke("black");

      const isHeader = rowIndex === 0;
      const paddingTop = 2;  // Adjust padding from the top (increase if needed)
      const textYPosition = startY + paddingTop;

      if (field === 'field1' && content) {
        doc.image(content, currentX + 5, textYPosition + (rowHeight - 8) / 2, { width: 8, height: 8 });
      } else {
        doc
          .font(isHeader ? 'Helvetica-Bold' : 'Helvetica')
          .fillColor("black")
          .fontSize(7.2);

        const text = content || '';
        if (field === 'field3') {
          // Checking for specific languages to apply respective fonts
          if (/[\u0C00-\u0C7F]/.test(text)) {  // Telugu Unicode range
            doc.font(fontTelugu)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else if (/[\u0D00-\u0D7F]/.test(text)) {  // Malayalam Unicode range
            doc.font(fontMalayam).text(text, currentX + 3, textYPosition, {
              baseline: "top",
              width: columnWidth - 6,
              align: 'left',
            });
          } else if (/[\u0C80-\u0CFF]/.test(text)) {  // Kannada Unicode range
            doc.font(fontKannada).text(text, currentX + 3, textYPosition, {
              baseline: "top",
              width: columnWidth - 6,
              align: 'left',
            });
          } else if (/[\u0A80-\u0AFF]/.test(text)) {  // Gujarati Unicode range
            doc.font(fontGujarati)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else if (/[\u0600-\u06FF]/.test(text)) {  // Urdu Unicode range
            doc.font(fontUrdu)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'right',
               });
          } else if (/[\u0A00-\u0A7F]/.test(text)) {  // Punjabi Unicode range
            doc.font(fontPanjabi)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else if (/[\u0B80-\u0BFF]/.test(text)) {  // Tamil Unicode range
            doc.font(fontKerlaTamil).text(text, currentX + 3, textYPosition, {
                baseline: "top",
                width: columnWidth - 6,
                align: 'left',
            });
          } else if (/[\u0900-\u097F]/.test(text)) {  // Hindi Unicode range
            doc.font(fontHindi)
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          } else  if (/[\u0B00-\u0B7F]/.test(text)) {  // Odia Unicode range
            doc.font(fontOriya)  // Make sure 'fontOdia' is defined and points to the correct font file
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
           } else if (/[\u0900-\u097F]/.test(text)) {  // Marathi (Devanagari Unicode range)
            doc.font(fontMarathi)  // Ensure you have the Marathi font file available
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
        } else if (/[\u0980-\u09FF]/.test(text)) {  // Bengali Unicode range
          doc.font(fontBengali)  // Ensure you have the Bengali font file available
             .text(text, currentX + 3, textYPosition, {
               baseline: "top",
               width: columnWidth - 6,
               align: 'left',
             });
        }else {
            doc.font('Helvetica')
               .text(text, currentX + 3, textYPosition, {
                 baseline: "top",
                 width: columnWidth - 6,
                 align: 'left',
               });
          }
        } else {
          doc.font('Helvetica')
             .text(text, currentX + 3, textYPosition, {
               baseline: "top",
               width: columnWidth - 6,
               align: 'left',
             });
        }
      }

      currentX += columnWidth;
    });

    startY += rowHeight; // Adjust to the row's actual height
  });
}

const gujratiFont = [
'આ અરજી/કરાર/પત્ર/નિયમો અને શરતોનો સામગ્રી અરજીકર્તા/ઋણગ્રાહક અને સહ-ઋણગ્રાહકને અંગ્રેજીમાં વાંચીને સમજાવી',
'  અને વ્યાખ્યા કરવામાં આવી છે અને અરજીકર્તા/ઋણગ્રાહક અને સહ-ઋણગ્રાહક દ્વારા તેને સમજવામાં આવી છે',
]

const declarationTable = [
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "English", 
    field3: "The content of this Application/ Agreement/letter/Terms and Conditions has been read out, explained and interpreted to the applicant(s)/Borrower and to the Co-Borrower(s) in English and understood by the applicant(s)/Borrower and Co-Borrower(s).",  // English text
  },
  { 
    field1: CheckedLogo,  // Path to the image file (not doc.image)
    field2: "Hindi", 
    field3: "इसआवेदन / समझौ ते / पत्र / नि यमों औमों रशर्तों की सा मग्री को आवेदक (ओं)ओं / उधा रकर्ता औरअंग्रेजीग्रे जीमेंसह-उधा रकर्ता (ओं)ओं को समझा औरसमझा यागयाहैऔहै रआवेदक (ओं)ओं याउधा रकर्ता द्वा रा समझा गया है ।",  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Punjabi", 
    field3: "ਇਸਬਿ ਨੈ-ਪੱਤਰ / ਸਮਝੌਤੇਝੌਤੇ/ ਪੱਤਰ / ਨਿ ਯਮਾਂ ਅਮਾਂ ਤੇਸ਼ਰਤਾਂ ਦੀਤਾਂ ਦੀਸਮੱਗਰੀ ਨੂੰਬਿ ਨੈਕਾ ਰ /ਉਧਾ ਰਲੈਣਵਾ ਲੇਅਤੇਅੰਗ੍ਰੇਜ਼ੀ ਵਿ ਚਸਹਿ -ਉਧਾ ਰਲੈਣਵਾ ਲੇਨੂੰਸਮਝਾ ਕੇਸਮਝਾ ਇਆਗਿ ਆਹੈਅਤੇਬਿ ਨੈਕਾ ਰਦੁਆਰਾ ਸਮਝੇਗਝੇ ਏਅਤੇਸਹਿ -ਉਧਾ ਰਲੈਣਵਾ ਲੇ।",  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Kannada", 
    field3: "ಈ ಅಪ್ಲಿಕೇ ಶನ್/ಒಪ್ಪಂ ದ/ಪತ್ರ / ನಿಯಮಗಳುಮತ್ತು ಷರತ್ತು ಗಳವಿಷಯವನ್ನು ಅರ್ಜಿ ದಾ ರ (ರು )/ ಸಾ ಲಗಾರಮತ್ತು ಇಂ ಗ್ಲಿಷ್ನಲ್ಲಿಸಹ-ಸಾ ಲಗಾರ(ಗಳು)ಗೆಓದಿ, ವಿವರಿಸಲಾ ಗಿದೆಮತ್ತು ವ್ಯಾ ಖ್ಯಾ ನಿಸಲಾ ಗಿದೆಮತ್ತು ಅರ್ಜಿ ದಾ ರರು (ಗಳು ) /ಸಾ ಲಗಾರರಿಂ ದಅರ್ಥ ಮಾ ಡಿಕೊ ಳ್ಳಲಾ ಗಿದೆಮತ್ತು ಸಹ-ಸಾ ಲಗಾ ರ (ಗಳು).  ",  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Telugu", 
    field3: "ఈ అప్లికేప్లిషన్ / ఒప్పం దం / లేఖ / నిబం ధనలుమరియుషరతులయొక్క కం టెం ట్దరట్ద ఖాస్తుదారు(లు) / రుణగ్ర హీతమరియుఆం గ్లం లోసహ-రుణగ్ర హీత (ల)కుచదవబడిం ది, వివరిం చబడిం దిమరియువివరిం చబడిం దిమరియుదరఖాస్తుదారు(లు) / రుణగ్ర హీతఅర్థం చేసుకున్నా రుమరియుసహ-రుణగ్ర హీత (లు)."
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Tamil", 
    field3: "இந்தவிண்ணப்பம் / ஒப்பந்தம் / கடிதம்வி தி முறைகள்மற்றும்நி பந்தனை களி ன்உள்ளடக்கம்விண்ணப்பதா ரர்(கள்)/கடன்வா ங்குபவர் மற்றும்இணைக்கடன்வா ங்குபவர்(கள்) ஆகி யோ ருக்குஆங்கி லத்தி ல்படித்துவி ளக்கப்பட்டுவி ளக்கம்அளி க்கப்பட்டுள்ளதுமற்றும்விண்ணப் பதா ரர்(கள்)/கடன்வா ங்குபவர்புர",  // Tamil text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Malayalam", 
    field3: 'ഈ ആപ്ലി ക്കേ ഷന്റെ ഉള്ളടക്കം / കരാ ർ / കത്ത് / നി ബന്ധനകളും വ്യ വസ്ഥകളും അപേ ക്ഷകന് / കടം വാ ങ്ങു ന്നയാ ൾക്കും ഇം ഗ്ലീ ഷി ൽ സഹ-കടം വാ ങ്ങു ന്നയാ ൾക്കും വാ യിക്കു കയും വി ശദീ കരിക്കു കയും വ്യാ ഖ്യാ നിക്കു കയും ചെ യ്തു കൂ ടാ തെ അ പേ ക്ഷകൻ (ങ്ങൾ) / കടം വാ ങ്ങു ന്നയാ ൾ മനസ്സി ലാ ക്കു കയും ചെ യ്യു ന്നു . ഒപ്പം സഹ-കടം വാ ങ്ങു ന്നവരും .',  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Oriya", 
    field3: 'ଏହିଆହି ବେ ଦନ / ଚୁକ୍ତିନା ମା / ଚିଠିଚି ଠି/ ସର୍ତ୍ତା ବଳୀ ଏବଂ ଚୁକ୍ତିନା ମା ଗୁଡିକଡି ଆବେ ଦନକା ରୀ (()) / orrଣଗ୍ରହୀ ତା ଏବଂ ସହ-orrଣଗ୍ରହୀ ତା ଙ୍କୁଇଂ ରା ଜୀ ରେ ପ read ା ଯା ଇଛି,ଛିବ୍ୟା ଖ୍ୟା କରା ଯା ଇଛିଏବଂ ଆବେ ଦନକା ରୀ (ମା ନେ ) / orrଣଦା ତା ଦ୍ୱା ରା ବୁଝିଛଝିନ୍ତିଏନ୍ତିବଂ ସହ-orrଣଦା ତା (ଗୁଡିକଡି ) |',  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Marathi", 
    field3: 'याअर्जा ची / करा रा ची / पत्रा ची / अटी व शर्तीं ची मा हि ती वा चूनका ढली गेली आहे,हेअर्जदा रा ला /कर्जदा रा ला आणि इंग्रजी मध्येसह-कर्जदा रा ला /केली आहे व अर्जदा रा ने /कर्जदा रा नेसमजूनघेतली आहे.हेआणि सह-कर्जदा र',  // English text
  },
  { 
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Gujarati", 
    field3: gujratiFont.join('\n'),  // English text
  },
  {
    field1: unCheckedLogo,  // Path to the image file (not doc.image)
    field2: "Urdu", 
    field3: "درخواست/معاہدہ/خط/شرائط و ضوابط کا مواد درخواست دہندہ/قرض دہندہ اور شریک قرض دہندہ کو انگریزی میں پڑھ کر سنایا گیا، وضاحت کی گئی اور اس کی تشریح کی گئی اور درخواست دہندہ/قرض دہندہ اور شریک قرض دہندہ نے اسے سمجھ لیا۔",  // Urdu text
  },
];

// // Call the table function to render the data
declarationTableFunction(declarationTable);
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica')
.text(`___________________________`, startX, doc.y, { align: "left",underline: true, width: 500 });
doc.moveDown(0.5);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`Lender (Authorised Signatory`, startX, doc.y, { align: "left",underline: true, width: 500 });
doc.moveDown(1);
  
//addFooter();
// // -------------------------------------- new page ------------------------------------------------------------------

// doc.addPage();
// // addLogo();
// //drawBorder();
// doc.moveDown(10);

// const lenderpayment = [
//   { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
//   { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
//   { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
// ];

// presentment(lenderpayment);

//addFooter();

// // -------------------------------------- new page ------------------------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`Annexure-I`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`The Borrower and Co-Borrower(s) (“Borrowers”) hereby accept and acknowledge that they have been made aware of the terms set out in this Annexure below in accordance with applicable provisions under Reserve Bank of India (RBI) notification and that the terms set out in this Annexure shall from an integral part of this Loan Agreement (“Agreement”) executed between Borrowers and Ratnaafin Capital Private Limited (“the Company”/ “Ratnaafin Capital Pvt Ltd”/ “Lender”) on ${allPerameters.agreementdate}. `, startX, doc.y, { align: "left", width: 500,  align: "justify", })
doc.moveDown()
.fontSize(8)
.font('Helvetica')
.text(`Please note that Clause 1 and 2 of this Annexure may be amended in the Welcome Letter or Disbursement letter and/or by such additional amendments from time to time.\n\n 1. Due Dates of Repayment\n\n The Due Date of Repayment, Frequency of Repayment, Principal and Interest Amount* shall be as per the Schedule II attached hereof.\n\n *The principal and Interest amount indicated under Schedule II attached here to may change depending on the actual disbursement terms and conditions.\n\n 2.  Repayment Due Dates, in case, payment moratorium on principle and/or interest, if any, may be changed depending on the actual disbursement terms and conditions. * \n\n *In case of Interest Moratorium Period, the principal amount will continue to be paid.`, startX, doc.y, { align: "left", width: 500,  align: "justify", });
doc.moveDown(0.5);

function dateTableFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    const rowContent = row.field1 || ""; // Fallback to an empty string if field1 is undefined
    const rowHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowContent, { width: boxWidth - 10 }) + 9; // Add padding

    // Set row color to gray for specific field values, keep border black
    const rowColor = (rowContent === "Interest Moratorium Start Date" || rowContent === "Repayment Start Date")
      ? "#d3d3d3"  // Gray for specific fields
      : (rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff"); // Alternate colors for other rows

    // Draw the background rectangle for the row with gray fill color
    doc
      .lineWidth(0.5)
      .fillColor(rowColor) // Set the fill color to gray for specific fields
      .rect(startX, startY, boxWidth, rowHeight)
      .fill(); // Only fill, no stroke yet

    // Draw the black border for the row
    doc
      .lineWidth(0.5) // Black border color
      .stroke("black") // Black border color
      .rect(startX, startY, boxWidth, rowHeight) // Apply the black border
      .stroke(); // Stroke to outline the rectangle

    // Draw the text inside the row
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(rowContent, startX + 5, startY + 5, {
        baseline: "hanging",
        width: boxWidth - 10,
        align: "left",
      });

    // Move to the next row's starting Y position
    startY += rowHeight;
  });
}

const dateTable = [
  { field1: ` Interest Moratorium Start Date` },
  { field1: ``},
  { field1:  `Repayment Start Date` },
  { field1:  `` },

];

dateTableFunction(dateTable);
doc.moveDown(2);
doc
.fontSize(8)
.font('Helvetica')
.text(`3. Consequences of delayed Repayment- Classification as Special Mention Account (SMA) and Non-Performing Asset (NPA):\n\n In addition to the consequences of delayed or defaulted repayments under the Agreement, the Borrower’s account immediately on default shall be classified as Special Mention Accounts (“SMA”) or a Non-Performing Asset (“NPA”) on the following basis in accordance with RBI notifications and regulations:\n\nClassification of Special Mention Accounts and NPAs`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(0.2);

function revolvingFacilitiesFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;  // Total table width
  const minColWidth = 150; // Minimum width for columns
  const fixedColWidth = 230; // Fixed column width (each column)

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    const rowContent = row.field1 || ""; // Fallback to an empty string if field1 is undefined
    const rowValue = row.value || ""; // Value for the second column, fallback to empty string

    // Calculate the text height based on the content for both columns
    const rowContentHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowContent, { width: fixedColWidth - 10 });
    const rowValueHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowValue, { width: fixedColWidth - 10 });

    // Maximum row height (to keep row heights uniform)
    const rowHeight = Math.max(rowContentHeight, rowValueHeight) + 10; // Add padding

    // Set row color (alternating colors)
    const rowColor = (rowIndex === 0) ? "#d3d3d3" : (rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff");

    // Draw the background rectangle for the row with fill color
    doc
      .lineWidth(0.5)
      .fillColor(rowColor)
      .rect(startX, startY, boxWidth, rowHeight)
      .fill();

    // Draw the black border for the row
    doc
      .lineWidth(0.5)
      .stroke("black")
      .rect(startX, startY, boxWidth, rowHeight)
      .stroke();

    // Draw the text for the first column
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(rowContent, startX + 5, startY + 5, {
        baseline: "hanging",
        width: fixedColWidth - 10,
        align: "left",
      });

    // If there's a value for the second column, draw it
    if (rowValue) {
      doc
        .font(font)
        .font('Helvetica-Bold')
        .fillColor("black")
        .fontSize(7.2)
        .text(rowValue, startX + fixedColWidth + 5, startY + 5, {
          baseline: "hanging",
          width: fixedColWidth - 10,
          align: "left",
        });
    }

    // Draw the vertical line between the two columns
    doc
      .lineWidth(0.5)
      .stroke("black")
      .moveTo(startX + fixedColWidth, startY)  // Position of the first vertical line
      .lineTo(startX + fixedColWidth, startY + rowHeight) // Extend the line down
      .stroke();

    // Move to the next row's starting Y position
    startY += rowHeight;
  });
}

const revolvingFacilitiesTable = [
  { field1: "Loans other than revolving facilities" },
  { field1: "SMA Sub-categories", value: "Basis for classification – Principal or interest payment or any other amount wholly or partly overdue" },
  { field1: "SMA - 0", value:  ` Upto 30 days` },
  { field1: "SMA – 1", value: ` More than 31 days and upto 60 days` },
  { field1: "SMA – 2", value: ` More than 61 days and upto 90 days` },
  { field1: "NPA", value: ` More than 90 days` },
];

revolvingFacilitiesFunction(revolvingFacilitiesTable);

doc.moveDown(3);
doc
.fontSize(8)
.font('Helvetica')
.text(`The aforesaid categorization will apply only when the time intervals are continuous.\n\n\nFurther, the classifications shall be triggered/flagged by the Lender as part of its day- end processes irrespective of the time of running such processes. Similarly, classification of Borrower accounts as SMA as well as NPA shall be done as part of the day-end process for the relevant date and the SMA or NPA classification date shall be the calendar date for which the day-end process is run. In other words, the date of SMA/NPA shall reflect the asset classification status of an account at the day-end of that calendar date.\n\n\nExample: If the due date of a loan account is March 31,2021, and full dues are not received before the lending institution runs the day-end process for this date, the date of overdue shall be March 31, 2021. If it continues to remain overdue, then this account shall get tagged as SMA-1 upon running the day-end process on April 30, 2021 i.e. upon completion of 30 days of being continuously overdue.Accordingly, the date of SM A-1 classification for that account shall be April 30, 2021.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(0.2);

//addFooter();

// // ------------------------------------------- new page ----------------------------------------------------
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(10);
 

doc
.fontSize(8)
.font('Helvetica')
.text(`Similarly, if the account continues to remain overdue, it shall get tagged as SMA- 2 upon running day-end process on May 30, 2021 and if continues to remain overdue further, it shall get classified as NPA upon running day-end process onJune 30,2021.\n\nFurther, loan accounts classified as NPAs may be upgraded as ‘standard’ assets only if entire arrears of interest and principal are paid by the Borrowers.`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`Acknowledged & Signed\n${allPerameters.borrowerName}\n\n`, startX, doc.y, { align: "left",underline: true, width: 500 });
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`Annexure – II`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`1. Without prejudice to the right of the RCPL to proceed against the Borrower(s) under the civil law for recovery of the amount due, the Borrower(s) hereby give consent that the RCPL will be entitled to recover the dues under the provisions of the Securitisation and Reconstruction of Financial Assets and Enforcement of Security Interest Act, 2002 and the Borrower(s) further agree(s) that he/ she/ they will be liable to pay to the RCPL all cost, charges and expenses incurred in that score. The Borrower(s) understand that the RCPL may at its sole discretion avail services of recovery agency/ agents of RCPL’s choice for initiating and continuing the recovery proceedings against the Borrower(s) until the full amounts due to the RCPL are recovered. The Borrower(s) further agree to reimburse to the RCPL, any fees,charges, costs or expenses paid to such recovery agency engaged by the RCPL, in this regard.\n\n\n2. For any grievances in relation to the loan the customer can call / write to us at 9512011220 / grievance@ratnaafin.com. The other details and the process for the Grievance Redressal Mechanism is available on the website of the Company www.ratnaafin.com`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);

//addFooter();

// //------------------------------------------------- new page ------------------------------------


//addFooter();

// // -------------------------------------------new page 21 ------------------------------------------------------
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`END USE LETTER FROM THE RESIDENT INDIAN CUSTOMER`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc 
.fontSize(9)
.font('Helvetica')
.text(`Date:${allPerameters.agreementdate}`, startX, doc.y, { align: "right", width: 470 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`To,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
.fontSize(8)
.font('Helvetica')
.text(`The Manager,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Ratnaain Capital Private Limited`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text(`Dear Madam/Sir,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Sub: Application for Loan\n\n I/We, ${allPerameters.borrowerName} refer to the Application No./Sanction Letter No.${allPerameters.sanctionLetterNo} Dated:${allPerameters.sanctionLetterDate} submitted by me/us to Ratnaafin Capital Pvt Ltd. for availing of a Loan from Ratnaafin Capital Pvt Ltd.)`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`The said Facility is for the purpose of (tick one)`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

// doc
// .fontSize(8)
// .font('Helvetica')
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Education\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Business\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Agriculture & Allied Activity O Home Repair\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Other personal need. specify:`, startX, doc.y, { align: "left", width: 500 })
// doc.moveDown(1);

// const addCheckbox = (doc, x, y, fieldName, label) => {
//   // Draw a rectangle for the checkbox
//   doc
//     .rect(x, y, 8, 8) // x, y, width, height
//     .stroke();

//   // Add label text next to the checkbox
//   doc.fontSize(8).text(label, x + 20, y - 2);

//   // Add the interactive form field annotation for the checkbox
//   doc.annotate(x, y, 8, 8, {
//     Type: 'Annot',
//     Subtype: 'Widget',
//     FT: 'Btn', // Form type is Button (used for checkboxes and radio buttons)
//     T: fieldName, // Field name for the checkbox
//     Ff: 49152, // Flags to set checkbox behavior (49152 makes it toggleable)
//     V: 'Off', // Default value (unchecked state)
//     AP: {
//       N: {
//         On: '/Yes', // Name for the "checked" state
//         Off: '/Off' // Name for the "unchecked" state
//       }
//     }
//   });
//   doc.moveDown()
// };

// Add the checkboxes with labels
// addCheckbox(doc, 50, 100, 'education', 'Education');
// addCheckbox(doc, 50, 110, 'business', 'Business');
// addCheckbox(doc, 50, 120, 'agriculture', 'Agriculture & Allied Activity');
// addCheckbox(doc, 50, 130, 'home_repair', 'Home Repair/Home Improvement/Home Renovation/Home Construction');
// addCheckbox(doc, 50, 140, 'cattle', 'Cattle Purchase');
// addCheckbox(doc, 50, 150, 'other_personal', 'Other Personal');

let currentY = doc.y;

const addCheckbox = (doc, x, y, fieldName, label) => {
  // Draw a rectangle for the checkbox
  doc
    .rect(x, y, 8, 8) // x, y, width, height
    .stroke();

  // Add label text next to the checkbox
  doc.font('Helvetica').fontSize(8).text(label, x + 20, y - 2);

  // Add the interactive form field annotation for the checkbox
  doc.annotate(x, y, 8, 8, {
    Type: 'Annot',
    Subtype: 'Widget',
    FT: 'Btn', // Form type is Button (used for checkboxes and radio buttons)
    T: fieldName, // Field name for the checkbox
    Ff: 49152, // Flags to set checkbox behavior (49152 makes it toggleable)
    V: 'Off', // Default value (unchecked state)
    AP: {
      N: {
        On: '/Yes', // Name for the "checked" state
        Off: '/Off' // Name for the "unchecked" state
      }
    }
  });
};

// Add checkboxes dynamically starting after the paragraph
const spacing = 10; // Adjust spacing between checkboxes
const startXy = 50; // X coordinate for checkboxes

addCheckbox(doc, startXy, currentY, 'education', 'Education');
currentY += spacing; // Increment y position for the next checkbox
addCheckbox(doc, startXy, currentY, 'business', 'Business');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'agriculture', 'Agriculture & Allied Activity');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'home_repair', 'Home Repair/Home Improvement/Home Renovation/Home Construction');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'cattle', 'Cattle Purchase');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'other_personal', 'Other Personal');
doc.moveDown()
currentY += spacing+spacing;


// const form = doc.form(); // Initialize form support

// const checkboxes = [
//   { name: 'education', label: 'Education', x: 50, y: 100 },
//   { name: 'business', label: 'Business', x: 50, y: 130 },
//   { name: 'agriculture', label: 'Agriculture & Allied Activity', x: 50, y: 160 },
//   { name: 'homeRepair', label: 'Home Repair / Improvement', x: 50, y: 190 },
//   { name: 'cattlePurchase', label: 'Cattle Purchase', x: 50, y: 220 },
//   { name: 'otherPersonal', label: 'Other Personal', x: 50, y: 250 },
// ];

// // Loop to add each checkbox with toggleable functionality
// checkboxes.forEach((checkbox) => {
//   doc.checkbox({
//     name: checkbox.name, // Unique field name
//     x: checkbox.x, // X position
//     y: checkbox.y, // Y position
//     width: 15, // Width of the checkbox
//     height: 15, // Height of the checkbox
//     value: 'Off', // Default value is "Off" (unchecked)
//     appearance: {
//       Off: { normal: {} }, // Define "unchecked" state
//       Yes: { normal: {} }, // Define "checked" state
//     },
//   });

//   // Add label text next to the checkbox
//   doc.text(checkbox.label, checkbox.x + 20, checkbox.y - 3);
// });


doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`If the facility is to be used for Business Purpose, then please tick one of a) OR b) the following`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
currentY += spacing+spacing;
doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`a) Investment in Plant & Machinery (only for Manufacturing industry) is:\n\n`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
currentY += spacing+spacing;


// doc
// .fontSize(8)
// .font('Helvetica')
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Less than or equal to Rs 5 lakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 5 lakh and up to Rs 25 lakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 25 lakh and up to Rs 5 Crore`, startX, doc.y, { align: "left", width: 500 })
// doc.moveDown(1);

addCheckbox(doc, startXy, currentY, 'five_lakh', 'Less than or equal to Rs 5 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'above', 'Above Rs 5 lakh and up to Rs 25 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'aboveCrore', ' Above Rs 25 lakh and up to Rs 5 Crore');
doc.moveDown(1)
currentY += spacing+spacing;


doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`b) Investment in Office Equipment (only for Service industry) is:`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
currentY += spacing+spacing;


// doc
// .fontSize(8)
// .font('Helvetica')
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Less than or equal to Rs 2 lakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 2 lakh and up to Rs 10Iakh\n`, startX, doc.y, { align: "left", width: 500 })
// .image(unCheckedLogo, { width: 8, height: 8 })
// .text(`         Above Rs 10 lakh and up to Rs 5 Crore`, startX, doc.y, { align: "left", width: 500 })
// doc.moveDown(1);

addCheckbox(doc, startXy, currentY, 'two_lakh', 'Less than or equal to Rs 2 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'above', 'Above Rs 2 lakh and up to Rs 10 lakh');
currentY += spacing;
addCheckbox(doc, startXy, currentY, 'aboveCrore', ' Above Rs 10 lakh and up to Rs 5 Crore');
doc.moveDown(1)

doc
.fontSize(8)
.font('Helvetica')
.text(`I/We hereby represent, warrant and confirm that the aforesaid purpose is a valid purpose and also agree and undertake to utilize the loan only for the above-mentioned purpose and that the loan shall not be used for any illegal and / or antisocial and/or speculative purposes including but not limited to participation in stock markets/IPOs.\n\nI/We further agree. confirm and undertake that the purpose of use of funds under the facility shall not be changed in any manner during the tenor of the facility or that such change in purpose shall take place only with the prior written permission of Ratnaafin Capital Pvt Ltd. I/We agree that any breach or default in complying with all or any of the aforesaid undertaking(s) will constitute an event of default under the Facility Agreement executed with the Ratnaafin Capital Pvt Ltd and accordingly the Ratnaafin Capital Pvt Ltd will have the right to initiate appropriate recovery proceedings for recovering the outstanding dues in the loan account.\n\n I/We are aware that it is on the faith representation, declaration and confirmation that you have agreed to consider my loan application for financial assistance under the category of Priority Advances defined in various circulars/guidelines of Reserve Bank Of India.\n\n The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers /Guarantors in the language understood by the Borrower / Co-borrowers / Guarantors and the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(2);
doc
.fontSize(8)
.font('Helvetica')
.text(`Thanking you\n\n\n`, startX, doc.y, { align: "left", width: 500 })
.text(`Yours Sincerely`, startX, doc.y, { align: "left", width: 500 })

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`Thanking you\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`Yours Sincerely\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`APPLICANT NAME : ${allPerameters.borrowerName}\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`CO-APPLICANT NAME : ${allPerameters.coBorrowername}`, startX, doc.y, { align: "left", width: 500 })

// doc.moveDown(1);

//addFooter();

// //------------------------------------------------------------- new page 22 -----------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`Thanking you\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`Yours Sincerely\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`APPLICANT NAME : ${allPerameters.borrowerName}\n\n\n`, startX, doc.y, { align: "left", width: 500 })
// .text(`CO-APPLICANT NAME : ${allPerameters.coBorrowername}`, startX, doc.y, { align: "left", width: 500 })
// .text(`2nd CO-APPLICANT NAME : ${allPerameters.coBorrowername2}`, startX, doc.y, { align: "left", width: 500 })

doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`Interest Rate Declaration \n Certificate to be signed by the borrower`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(3);

function rateTableFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;  // Total table width
  const minColWidth = 150; // Minimum width for columns
  const fixedColWidth = 230; // Fixed column width (each column)

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    const rowContent = row.field1 || ""; // Fallback to an empty string if field1 is undefined
    const rowValue = row.value || ""; // Value for the second column, fallback to empty string

    // Calculate the text height based on the content for both columns
    const rowContentHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowContent, { width: fixedColWidth - 10 });
    const rowValueHeight = doc
      .font(font)
      .fontSize(7.2)
      .heightOfString(rowValue, { width: fixedColWidth - 10 });

    // Maximum row height (to keep row heights uniform)
    const rowHeight = Math.max(rowContentHeight, rowValueHeight) + 10; // Add padding

    // Draw the background rectangle for the row with no fill color (no color logic)
    doc
      .lineWidth(0.5)
      .stroke("black")
      .rect(startX, startY, boxWidth, rowHeight)
      .stroke();

    // Draw the text for the first column (bold font)
    doc
      .font(font)
      .font('Helvetica-Bold')
      .fillColor("black")
      .fontSize(7.2)
      .text(rowContent, startX + 5, startY + 5, {
        baseline: "hanging",
        width: fixedColWidth - 10,
        align: "left",
      });

    // If there's a value for the second column, draw it in normal font
    if (rowValue) {
      doc
        .font(font)
        .font('Helvetica')  // Normal font for value
        .fillColor("black")
        .fontSize(7.2)
        .text(rowValue, startX + fixedColWidth + 5, startY + 5, {
          baseline: "hanging",
          width: fixedColWidth - 10,
          align: "left",
        });
    }

    // Draw the vertical line between the two columns
    doc
      .lineWidth(0.5)
      .stroke("black")
      .moveTo(startX + fixedColWidth, startY)  // Position of the first vertical line
      .lineTo(startX + fixedColWidth, startY + rowHeight) // Extend the line down
      .stroke();

    // Move to the next row's starting Y position
    startY += rowHeight;
  });
}

const rateTable = [
  { field1: "Name of the Borrower", value: ` ${allPerameters.borrowerName}(PAN):${allPerameters.borrowerpanNo}` },
  { field1: "Address", value:  ` ${allPerameters.borroewraddress}` },
  { field1: "Constitution", value:  ` ${allPerameters.constitutionBorrower}` },
];

rateTableFunction(rateTable);

function loanTableFunction(tableData) {
  // Set starting position and box width
  const startX = 50;
  let startY = doc.y + 10;
  const boxWidth = 500;  // Total table width
  const minColWidth = 150; // Minimum width for columns
  const numColumns = Math.max(...tableData.map(row => Object.keys(row).length)); // Get the max number of fields in any row
  const colWidth = boxWidth / numColumns; // Column width based on the number of columns

  // Define the fields to be bold in the second row
  const boldFields = ["Facility", "Limits", "Sanction Letter No.", "Sanction Date"];

  // Loop through the data to calculate and render each row individually
  tableData.forEach((row, rowIndex) => {
    let maxHeight = 0;
    const rowContentHeights = [];

    // For the first row, span the entire table width and center the content
    if (rowIndex === 0) {
      const rowContent = row.field1 || ""; // Fallback to empty string if field1 is undefined

      // Calculate the text height based on the content for the full-width row
      const rowContentHeight = doc
        .font(font)
        .fontSize(7.2)
        .heightOfString(rowContent, { width: boxWidth - 10 });

      // Draw the background rectangle for the row
      doc
        .lineWidth(0.5)
        .stroke("black")
        .rect(startX, startY, boxWidth, rowContentHeight + 10)  // Adjusted row height
        .stroke();

      // Draw the text for the first row (spanning full width and centered)
      doc
        .font(font)
        .font('Helvetica-Bold')
        .fillColor("black")
        .fontSize(7.2)
        .text(rowContent, startX + 5, startY + 5, {
          baseline: "hanging",
          width: boxWidth - 10,
          align: "center", // Center the text
        });

      // Move to the next row's starting Y position
      startY += rowContentHeight + 10;  // Adjusted for row height + padding
    } else {
      let maxRowHeight = 0;
      // Calculate the content heights for each column in this row
      Object.keys(row).forEach((field, colIndex) => {
        const fieldValue = row[field] || ""; // Fallback to empty string if undefined
        const fieldHeight = doc
          .font(font)
          .fontSize(7.2)
          .heightOfString(fieldValue, { width: colWidth - 10 });

        rowContentHeights.push(fieldHeight);
        maxRowHeight = Math.max(maxRowHeight, fieldHeight); // Track the max height of this row
      });

      const rowHeight = maxRowHeight + 5; // Add padding

      // Draw the background rectangle for the row
      doc
        .lineWidth(0.5)
        .stroke("black")
        .rect(startX, startY, boxWidth, rowHeight)
        .stroke();

      // Draw each column in the row
      Object.keys(row).forEach((field, colIndex) => {
        const fieldValue = row[field] || ""; // Fallback to empty string if undefined

        // Check if the field needs to be bold
        const isBold = boldFields.includes(field);

        // Draw the text for the current column, apply bold if necessary
        doc
          .font(font)
          .fontSize(7.2)
          .fillColor("black")
          .font(isBold ? 'Helvetica-Bold' : 'Helvetica') // Bold font for specified fields
          .text(fieldValue, startX + colIndex * colWidth + 5, startY + 5, {
            baseline: "hanging",
            width: colWidth - 10,
            align: "left",
          });

        // Draw the vertical line between columns
        if (colIndex < numColumns - 1) {
          doc
            .lineWidth(0.5)
            .stroke("black")
            .moveTo(startX + (colIndex + 1) * colWidth, startY)  // Position of the vertical line
            .lineTo(startX + (colIndex + 1) * colWidth, startY + rowHeight) // Extend the line down
            .stroke();
        }
      });

      // Draw the horizontal line at the bottom of the row
      doc
        .lineWidth(0.5)
        .stroke("black")
        .moveTo(startX, startY + rowHeight)
        .lineTo(startX + boxWidth, startY + rowHeight)
        .stroke();

      // Move to the next row's starting Y position
      startY += rowHeight;
    }
  });

  // Draw the horizontal line at the bottom of the table
  doc
    .lineWidth(0.5)
    .stroke("black")
    .moveTo(startX, startY)
    .lineTo(startX + boxWidth, startY)
    .stroke();
}

const loanTable = [
  { field1: "Details of Agri Micro Loan Against Property" }, // This will span full width and be centered
  { field1: "Facility", field2: "Limits", field3: "Sanction Letter No.", field4: "Sanction Date" }, // Multiple fields
  { field1:  `Agri Micro Lap`, field2: `Rs.${allPerameters.amountOfLoan}/-( ${allPerameters.loanAmountInWord})`, field3: ` ${allPerameters.sanctionLetterNo}`, field4: ` ${allPerameters.sanctionLetterDate} `}, // Multiple fields
];

loanTableFunction(loanTable);
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`RATE OF INTEREST:`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`FRR (Present FRR 19.20%) + ${allPerameters.interestType1} (Spread) current effective ${allPerameters.rateOfInterest}% P.A @.\n\n The rate of interest shall be subject to change from time to time including on account of changes in interest rates made by the RBI from time to time.\n\nThe Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers /Guarantors in the language understood by the Borrower / Co-borrowers / Guarantors and the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has afixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`Signature of Borrower(s)`, startX, doc.y, { align: "right", width: 470 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica')
.text(`Place:   ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica')
.text(`Date: ${allPerameters.agreementdate}`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

//addFooter();

// //-------------------------------------------- new page 22 --------------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(3);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`DECLARATION FOR IMMOVABLE PROPERTY \n (for facility backed by mortgage)`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(2);

doc
.fontSize(9)
.font('Helvetica')
.text(`I/We,  ${allPerameters.borrowerName} adult,Occupation ${allPerameters.appOccupatiion}  residing at ${allPerameters.borroewraddress}( hereinafter called as "MORTGAGOR")`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`AND`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);

doc
.fontSize(9)
.font('Helvetica')
.text(`I/We, ${allPerameters.coBorrowername} adult,Occupation ${allPerameters.coappOccupatiion},residing at ${allPerameters.coBorroweraddress}( hereinafter called as "MORTGAGOR")`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`AND`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);
doc
.fontSize(9)
.font('Helvetica')
.text(`I/We, ${allPerameters.coBorrowername2} adult,Occupation ${allPerameters.coappOccupatiion1},residing at ${allPerameters.coBorroweraddress2}( hereinafter called as "MORTGAGOR")`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`do hereby declare and say as follows :-`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`1) I/We say that I/We am/are absolutely seized and possessed of or otherwise well and sufficiently entitled to the Immovable property being of (1) ${allPerameters.addressImmovableProperty}, more particularly described in the Schedule hereunder written (hereinafter referred to as the “said Immovable Property\n\n 2) I/We say that I/we have not created any charges or encumbrances in respect of the Immovable Property more particularly described in the Schedule hereunder.\n\n `, startX, doc.y, { align: "left", width: 500,continued:true }).moveDown()
.font('Helvetica')
.text(`3) I/We say that the said Immovable Property is proposed to be mortgaged and charged to `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`Ratnaafin Capital Private Limited, Ahmedabad Branch.`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`, to secure by way of First Charge for the due repayment and discharge of the secured Loan of Rs.`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`${allPerameters.loanAmount}/- ( ${allPerameters.loanAmountInWord}) `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(` granted by `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`RCPL`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(` to `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`${allPerameters.borrowerName} `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`together with interest, Penal charges , commitment charges and other monies payable to `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(` Ratnaafin Capital Private Limited `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`under their loan agreements, letter of sanction and other transaction documents, amended from time to time.`, startX, doc.y, { align: "left", width: 500 }).moveDown()
.font('Helvetica')
.text(`The said `, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica-Bold')
.text(`Ratnaafin Capital Private Limited, Ahmedabad Branch`, startX, doc.y, { align: "left", width: 500,continued:true })
.font('Helvetica')
.text(`, Ahmedabad Branch, is/are hereinafter referred to as the “Lender”.`, startX, doc.y, { align: "left", width: 500 }).moveDown()
 
 
 
 
 
 
 
 .font('Helvetica')
 .text(`4) I/We say that the said Immovable Property is free from all encumbrances or charges (statutory or otherwise), claims and demands, and that the same or any of them or any part thereof are/is not subject to any Lien/Lispendens, attachment or any other process issued by any Court or Authority and that I/we have not created any Trust in respect thereof and that the said Immovable Property is/are in my/our exclusive, uninterrupted and undisturbed possession and enjoyment since the date of purchase/acquisition thereof and no adverse claims have been made against me in respect of the said Immovable Property or any of them or any part thereof and the same are not affected by any notices of acquisition or requisition, and that no proceedings are pending or initiated against me under the Income Tax Act, 1961, or under any other law in force in India for the time being and that no notice has been received by or served on me under the Income Tax Act,
 1961 and/or under any law and there is no pending attachment whatsoever issued or initiated against the said Immovable Property or any of them or any part thereof. \n\n 5) I/We say that I have duly paid all rents, royalties and all public demands including Income Tax, Corporation/Municipal Tax and all other taxes and revenue payable to the Government of India or to the Government of any State or to any Local Authority and that at present there are no arrears of such dues, rents, royalties, taxes and revenue dues and outstanding and that no attachments or warrants have been served on me of Income Tax, Government Revenues and other taxes.\n\n 6) I/We also agree and undertake to give such declarations, undertakings and other writings as may be required by the Lender or their solicitors and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the lender.\n\n 7) I/We say that I have obtained the requisite consent from the Income Tax authorities pursuant to the provisions contained in Section 281 of the Income Tax Act, 1961 for the alienation of my property in favour of the Lender.\n\n 8) I/We assure, agree and declare that the security to be created in favour of the Lender shall ensure in respect of my Immovable Property, both present & future and that the documents of title, evidences, deeds and writings in relation to the said Immovable Property are the only documents of title relating to the said Immovable Property.\n\n 9) I/We hereby agree and undertake that MORTGAGOR shall within a period of three months from the date hereof or such extended date as may be permitted by the Lender in writing :-\n\n a) perfectly assure the title to the properties comprised in the mortgage security and to comply with all requisitions, that may be made from time to time by or on behalf of the Lender in that behalf ;\n\n b) give such declarations, undertakings and other writings as may be required by the Lender and satisfactorily comply with all other requirements and requisitions submitted by or on behalf of the Lender;`, startX, doc.y, { align: "left", width: 500 })
doc.moveDown(1);

//addFooter();

// //------------------------------------------------------------- new page ----------------------------------------------------

doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(9);

doc
.fontSize(8)
.font('Helvetica')
.text(`c) pay all rents, rates, taxes, cesses, fees, revenues, assessments, duties and other outgoings and pay other amounts due in respect of the said Immovable Property and shall observe and perform all the rules and regulations pertaining to the same will not do or omit to do or suffer to be done anything whereby the mortgaged security as proposed to be created in favour of the Lender be affected or prejudiced in any manner whatsoever.\n\n 10) I/We further undertake that no mortgage, charge, lien or other encumbrance whatsoever will be created on the properties compromised in the mortgaged security save & except with the permission of the Lender.\n\n 11) I/We are not aware of any act, deeds, matter or thing or circumstance which prevents me from charging/further charging in favour of the Lender on the said Immovable Property.\n\n12)The Borrower / Co-borrowers / Guarantors acknowledges that he/authorised representative has read and understood all the terms and conditions of this Agreement. The Borrower / Co-borrowers / Guarantors also acknowledges that the aforesaid terms and condition of the Agreement and other documents have been explained to the Borrower / Co-borrowers /Guarantors in the language understood by the Borrower / Co-borrowers / Guarantors and the Borrower / Co-borrowers / Guarantors has understood the entire meaning of the terms and conditions and has affixed its signature (including signature through Aadhar OTP / thumb impression authorization) after verifying and understanding the contents of this Agreement. \n\nAND I/We make the aforesaid declaration solemnly and sincerely believing the same to be true and knowing full well that on the faith thereof the Lender has agreed to complete the said transaction of mortgage by legal mortgage in respect of the Immovable Property, described in the Schedule hereunder written.`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`-: SCHEDULE ABOVE REFERRED TO :-\n\n (Description of the Immovable Property)`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);

doc
.fontSize(7)
.font('Helvetica-Bold')
.text(` ${allPerameters.addressImmovableProperty}`, startX, doc.y, { align: "center", width: 500 });
doc.moveDown(1);
doc
.fontSize(7)
.font('Helvetica-Bold')
.text(`Boundaries of Property`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

const boundariesPropertyData = [
  { field1: "On or towards North", field2: ": ", value:  ` ${allPerameters.OnOrTowardsNorth}` },
  { field1: "On or towards South", field2: ": ", value:  ` ${allPerameters.OnOrTowardsSouth} `},
  { field1: "On or towards East",  field2: ": ", value:  ` ${allPerameters.OnOrTowardsEast}` },
  { field1: "On or towards West",  field2: ": ", value:  ` ${allPerameters.OnOrTowardsWest}` },
];

// Call the function to create the table
BoundariesFunction(boundariesPropertyData);
doc.moveDown(2);

doc
.fontSize(8)
.font('Helvetica')
.text( ` Date:${allPerameters.agreementdate}`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`SIGNED & DELIVERED BY THE WITH IN NAMED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(0.5);

doc
.fontSize(8)
.font('Helvetica-Bold')
  .text(`BORROWERS NAME :   ${allPerameters.borrowerName}`,
  startX, doc.y, { align: "left", width: 500 })
  .text(`CO-BORROWERS NAME :  ${allPerameters.coBorrowername}`,
    startX, doc.y, { align: "left", width: 500 })
    // .text(`2nd CO-BORROWERS NAME : ${allPerameters.coBorrowername2}`,
    //   startX, doc.y, { align: "left", width: 500 });
  doc.moveDown(0.5);
  


//addFooter();

//rcpl group loan secure
doc.addPage();
// addLogo();
//drawBorder();
doc.moveDown(7);

doc
.fontSize(9)
.font('Helvetica-Bold')
.text(`RCPL Group Loan Secure Customer Mandate`, startX, doc.y, { align: "center",underline: true, width: 500 });
doc.moveDown(2);

doc
  .fontSize(9)
  .font('Helvetica')
  .text(`Date:${allPerameters.agreementdate} \n\n Place: ${allPerameters.placeOfExecution}`, startX, doc.y, { align: "right", width: 470 });
  doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`To,`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica-Bold')
.text(`RATNAAFIN CAPITAL PRIVATE LIMITED`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);

doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Registered Office :`, startX, doc.y, { align: "left", width: 500 });

    

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`402, Bhikaji Cama Bhawan Ring Road, Bhikaji Cama Place, Near Hyatt Hotel, New Delhi- 110066, Delhi, India.`, startX, doc.y, { align: "left", width: 500 });
    doc.moveDown(2);
   
    doc
    .fontSize(8)
    .font('Helvetica-Bold')
    .text(`Corporate Ofice :`, startX, doc.y, { align: "left", width: 500 });

    doc
    .fontSize(8)
    .font('Helvetica')
    .text(`2nd & 3rd Floor, The Ridge, Opposite Novotel, Iscon Char Rasta, Ahmedabad, Gujarat, India- 380060`, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(3);


doc
.fontSize(8)
.font('Helvetica')
.text(`Dear Sir/Madam,`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(3);


// doc
// .fontSize(8)
// .font('Helvetica')
// .text(`I/We hereby acknowledge and confirm that I/we have received the copy of the loan Agreement dated ${allPerameters.agreementdate} executed between RCPL and me/us ('Loan Agreement') and the contents of the loan Agreement have been fully explained to and understood by me/us at the time of availing the loan in the language understood by me/us) \n\n I/We further confirm that am/are fully aware of and completely understand the rights and obligations contained in the loan documents mentioned below:`, startX, doc.y, { align: "left",align: "justify", width: 500 });
//  doc.moveDown(1);

 doc
.fontSize(8)
.font('Helvetica')
.text(`I would like to get insured with ICICI Prudenal for the loan protect policy. In case either of the following reason triggers:`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(3);

doc
.fontSize(8)
.font('Helvetica')
.text(`
1) Policy rejecon by ICICI Prudenal due to underwring reason.
2) Insured not interested in Medical.
3) Case rejected by ICICI Prudenal on the ground of Medical or income.
4) Medical is not completed by the Client ll 30 days from the Login.
5) For any other reasons not menoned above. `, startX, doc.y, { align: "left", width: 500 });
doc.moveDown(1);
doc
.fontSize(8)
.font('Helvetica')
.text(`I agree to get my policy placed with`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`
1. Bajaj Allianze Life Insurance Company Limited
2. Zuno General Insurance Limited
3. Raheja QBE General Insurance Company Limited
4. Niva Bupa Health Insurance Company Limited
5. Tata AIG General Insurance Company Limited
6. Care Health Insurance Company Limited
7. Aditya Birla Health Insurance Company Limited.
`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Request to kindly note and process accordingly`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Thanking you, `, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`Loanee – RCPL`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);

doc
.fontSize(8)
.font('Helvetica')
.text(`(Signature)`, startX, doc.y, { align: "left",align: "justify", width: 500 });
doc.moveDown(1);


// const confirmationTable = [
//   { field1: `BORROWERS NAME : ${allPerameters.borrowerName}`},
//   { field1: `CO-BORROWERS NAME : ${allPerameters.coBorrowername}` },
//   { field1: `GUARANTOR'S NAME : ${allPerameters.guarantorname}` },
// ];

// presentment(confirmationTable);
//addFooter();
// Finalize the PDF
    doc.end();
  
    // const pdfFileUrl = `/uploads/pdf/${pdfFilename}`;
  
    // return new Promise((resolve, reject) => {
    //   stream.on("finish", () => {
    //     resolve(pdfFileUrl);
    //   });
    //   stream.on("error", reject);
    // });

    return new Promise((resolve) => {
      doc.on('end', () => resolve(Buffer.concat(buffers)));
    });
  }








  // function numberToIndianWords1(num) {
  //   if (num === 0) return "Zero Rupees Only";
  
  //   const ones = ["", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"];
  //   const teens = ["Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"];
  //   const tens = ["", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"];
  //   const thousands = ["", "Thousand", "Lakh", "Crore"];
  
  //   function convertLessThanThousand(n) {
  //       let str = "";
  //       if (n >= 100) {
  //           str += ones[Math.floor(n / 100)] + " Hundred ";
  //           n %= 100;
  //       }
  //       if (n > 10 && n < 20) {
  //           str += teens[n - 11] + " ";
  //       } else {
  //           if (n >= 10) {
  //               str += tens[Math.floor(n / 10)] + " ";
  //               n %= 10;
  //           }
  //           if (n > 0) {
  //               str += ones[n] + " ";
  //           }
  //       }
  //       return str.trim();
  //   }
  
  //   let result = "";
  //   let unitIndex = 0;
  
  //   while (num > 0) {
  //       let part = num % 1000;
  //       if (part > 0) {
  //           let prefix = convertLessThanThousand(part);
  //           result = prefix + (unitIndex > 0 ? " " + thousands[unitIndex] + " " : "") + result;
  //       }
  //       num = Math.floor(num / (unitIndex === 0 ? 1000 : 100)); // First time divide by 1000, then by 100 for lakh/crore
  //       unitIndex++;
  //   }
  
  //   return result.trim() + " Rupees Only";
  // }

  function numberToIndianWords(num) {
    if (!num) return "";
    if (num === 0) return "Zero";
     
    const belowTwenty = ["", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"];
    const tens = ["", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"];
    const placeValues = ["", "Thousand", "Lakh", "Crore", "Ten Crore"];
     
    function helper(n) {
    if (n === 0) return "";
    else if (n < 20) return belowTwenty[n] + " ";
    else if (n < 100) return tens[Math.floor(n / 10)] + " " + helper(n % 10);
    else if (n < 1000) return belowTwenty[Math.floor(n / 100)] + " Hundred " + helper(n % 100);
    else if (n < 100000) return helper(Math.floor(n / 1000)) + " Thousand " + helper(n % 1000);
    else if (n < 10000000) return helper(Math.floor(n / 100000)) + " Lakh " + helper(n % 100000);
    else return helper(Math.floor(n / 10000000)) + " Crore " + helper(n % 10000000);
    }
     
    return helper(parseInt(num)).trim();
    }




  const LdAndPdDeed = async(customerId,selections = "ac") =>{
   // selections me ac.ac1c2g,acgor ac1 jayega query me

    // const { customerId, selections } = req.query;
    // const selections = "ac";

    const customerSelections = selections.split(',');

    // const customerId = "66daf42b267db736881e7c4c"
    try{
    // console.log(customerId,"in sanction latter")

      // const customerDetails = await customerModel.findOne({_id:customerId}).populate('productId')  
      // const coApplicantDetails = await coApplicantModel.find({customerId})
      // const guarantorDetails = await guarantorModel.findOne({customerId})  
      // const applicantDetails = await applicantModel.findOne({customerId})
      // const technicalDetails = await technicalModel.findOne({customerId})
      // const appPdcDetails = await appPdcModel.findOne({customerId})
      

      const customerDetails = await customerModel.findOne({ _id: customerId});
    const coApplicantDetails = await coApplicantModel.find({ customerId: new mongoose.Types.ObjectId(customerId) });
    const guarantorDetails = await guarantorModel.findOne({ customerId:new mongoose.Types.ObjectId(customerId) });
    const applicantDetails = await applicantModel.findOne({ customerId:new mongoose.Types.ObjectId(customerId) });
    const technicalDetails = await technicalModel.findOne({ customerId:new mongoose.Types.ObjectId(customerId) });
    const appPdcDetails = await appPdcModel.findOne({ customerId:new mongoose.Types.ObjectId(customerId) });
    const disbursementDetails = await disbursementModel.findOne({ customerId:new mongoose.Types.ObjectId(customerId) });
    const finalSanctionDetails = await finalSanctionModel.findOne({ customerId:new mongoose.Types.ObjectId(customerId) });
    const gtrPdcDetail= await gtrPdcModel.findOne({ customerId:new mongoose.Types.ObjectId(customerId) });
    const sancpendDetail= await sanctionPendency.findOne({ customerId:new mongoose.Types.ObjectId(customerId) });
    const tvrDetails= await tvrModel.findOne({ customerId:new mongoose.Types.ObjectId(customerId) });
    const creditPdDetails = await creditPdModel.findOne({ customerId });
    const sanctionPendencyDetails = await sanctionModel.findOne({ customerId });
    const finalsanctionDetails = await finalsanctionModel.findOne({ customerId });
    const bankKycsDEtails = await bankDeatilsKycs.findOne({ customerId });
    const internalLegalDATA = await internalLegalModel.findOne({ customerId });

    const marketValueNumber = technicalDetails?.fairMarketValueOfLand;
    // const marketValuetoword = marketValueNumber? numberToWords.toWords(marketValueNumber): "NA";
    const marketValuetoword =marketValueNumber ? numberToIndianWords(marketValueNumber) : "NA";

    const gtrStatementBankDetails = await gtrbankModel.findOne({ customerId:new mongoose.Types.ObjectId(customerId) });

const gtrPdcbankDetail = gtrStatementBankDetails?.bankDetails?.find(
  (detail) => detail.Type === "guarantor"
) || {}; 


   

    const bankDetail = bankKycsDEtails?.bankDetails?.find(
      (detail) => detail.E_Nach_Remarks === "true"
    ) || {}; // Default to an empty object if no bank details are found

    // Prepare bank details
    const bankDetails = {
      bankName: bankDetail?.bankName || "NA",
      branchName: bankDetail?.branchName || "NA",
      accNo: bankDetail?.accountNumber || "NA",
      accType: bankDetail?.accountType || "NA",
      ifscCode: bankDetail?.ifscCode || "NA",
      accHolder:bankDetail?.acHolderName || "NA",
    };      
      const address = [
        applicantDetails?.localAddress?.addressLine1,
        // applicantDetails?.permanentAddress?.addressLine2,
        // applicantDetails?.permanentAddress?.city,
        // applicantDetails?.permanentAddress?.district,
        // applicantDetails?.permanentAddress?.state,
        // applicantDetails?.permanentAddress?.pinCode
      ].filter(Boolean).join(', ');

     

      // const guarantorAddress =[
      //   guarantorDetails.permanentAddress?.addressLine1,
      //   // guarantorDetails.permanentAddress?.addressLine2,
      //   // guarantorDetails.permanentAddress?.city,
      //   // guarantorDetails.permanentAddress?.district,
      //   // guarantorDetails.permanentAddress?.state,
      //   // guarantorDetails.permanentAddress?.pinCode
      // ].filter(Boolean).join(', ');

      const coborroweraddress = coApplicantDetails?.[0] ? [
        coApplicantDetails[0].localAddress?.addressLine1,
        // coApplicantDetails[0].permanentAddress?.addressLine2,
        // coApplicantDetails[0].permanentAddress?.city,
        // coApplicantDetails[0].permanentAddress?.district,
        // coApplicantDetails[0].permanentAddress?.state,
        // coApplicantDetails[0].permanentAddress?.pinCode
      ].filter(Boolean).join(', ') : "NA";

      const coborroweraddress1= coApplicantDetails?.[1] ? [
        coApplicantDetails[1].localAddress?.addressLine1,
        // coApplicantDetails[0].permanentAddress?.addressLine2,
        // coApplicantDetails[0].permanentAddress?.city,
        // coApplicantDetails[0].permanentAddress?.district,
        // coApplicantDetails[0].permanentAddress?.state,
        // coApplicantDetails[0].permanentAddress?.pinCode
      ].filter(Boolean).join(', ') : "NA";

      const BranchNameId = customerDetails?.branch;
  // console.log("BranchNameId",BranchNameId)
        const branchData = await externalBranchModel.findById({_id:BranchNameId});
        // if (!branchData) {
        //     return badRequest(res, "Branch data not found for the given branchId");
        // }
        const branchName = branchData?.city; 

        const formatDate = (dob) => {
          if (!dob) return "NA"; // Agar DOB available nahi hai to "NA" return kare
          const date = new Date(dob); // Date object me convert kare
          const day = String(date.getDate()).padStart(2, '0'); // Day format me 2 digits
          const month = String(date.getMonth() + 1).padStart(2, '0'); // Month format me 2 digits (0-based index ke liye +1)
          const year = String(date.getFullYear()).slice(); // Sirf last 2 digits le
          return `${day}-${month}-${year}`; // Final format
      };

      const ecsNachinstallmentAmountss= finalsanctionDetails?.emiAmount  ;

          const roundedEMI = Math.round(ecsNachinstallmentAmountss);


          const endusofloan = finalsanctionDetails?.EndUseOfLoan;
     const purpose = await endUseOfLoanModeldata.findById( endusofloan );
     const loanPurpose = purpose?.name;

      const allPerameters = {
        marketValuetowor:marketValuetoword||"NA",


        placeOfExecution:branchData?.city||"NA",
        agreementdate:formatDate(sanctionPendencyDetails?.loanAgreementDate)||"NA",

        sellerName:internalLegalDATA?.sellerName||"NA",
        buyerName:internalLegalDATA?.buyerName||"NA",
        // Borrower details
        borrowerName : applicantDetails?.fullName || "NA",//page no.1
        constitutionBorrower:"INDIVIDUAL",
        borrowerpanNo : applicantDetails?.panNo || "FORM 60",
        place : applicantDetails?.localAddress?.city || "NA",
        borroewraddress : address||"NA",
        borroweremail : applicantDetails?.email || "NA",
        borrwermobileNo : applicantDetails?.mobileNo || "NA",
        appOccupatiion:applicantDetails?.occupation|| "NA",
        coappOccupatiion:coApplicantDetails?.[0]?.occupation|| "NA",
        coappOccupatiion1:coApplicantDetails?.[1]?.occupation|| "NA",


        //co borrower details

        coBorrowername: coApplicantDetails?.[0]?.fullName || "NA",
        constitutionCoBorrower:"INDIVIDUAL",
        panTanCin : coApplicantDetails?.[0]?.docType === 'panCard' ? coApplicantDetails?.[0]?.docNo || '':'FORM 60',
      coBorroweraddress: coborroweraddress||"NA",
      coBorroeremail: coApplicantDetails?.[0]?.email || "NA",
      coBorrowerphoneNo: coApplicantDetails?.[0]?.mobileNo || "NA",

      coBorrowername2: coApplicantDetails?.[1]?.fullName || "NA",
      constitutionCoBorrower2:"INDIVIDUAL",
        panTanCin2 :  coApplicantDetails?.[1]?.docType === 'panCard' ? coApplicantDetails?.[1]?.docNo || '':'FORM 60',
      coBorroweraddress2: coborroweraddress1||"NA",
      coBorroeremail2: coApplicantDetails?.[1]?.email || "NA",
      coBorrowerphoneNo2: coApplicantDetails?.[1]?.mobileNo || "NA",
 
      //guarantor details
      guarantorname: guarantorDetails?.fullName || "NA",
      constitutionGuarentor:"INDIVIDUAL",
      guarantorpanTanCin: guarantorDetails?.docType === 'panCard' ? guarantorDetails?.docNo || '':'FORM 60',
      guarantoraddress: guarantorDetails?.localAddress?.addressLine1||"NA",
      guarantoremail: guarantorDetails?.email || "NA",
      guarantorphoneNo: guarantorDetails?.mobileNo || "NA",

      techfullAdress:technicalDetails?.fullAddressOfProperty|| "NA",
      propertyHolderNmae:technicalDetails?.nameOfDocumentHolder|| "NA",
      presentMarketValue:technicalDetails?.fairMarketValueOfLand|| "NA",

      // details of Branch || page No 2

      branchplace:"Ahmedabad",
      branchaddress:"2nd and 3rd floor,The Ridge,opposite Novotel,Iscon Char Rasta, Ahmedabad-380060",
      branchemail:"pna.ops@ratnaafin.com",
      branchphoneNo:"1800 3098 013",
      attentionMrMs:"-------",

      //details of the Loan
      
      facilityType:"AGRI MICRO LOAN AGAINST PROPERTY",
      specifiedPurpose:loanPurpose || "NA",
      amountOfLoan:finalsanctionDetails?.finalLoanAmount|| "NA",
      rateOfInterest:finalsanctionDetails?.roi || "NA",
      loginFees:"Rs. 1950/- (Inclusive of Applicable Taxes)",
      loanProcessingFees:'2 % of Loan Amount + Applicable Taxes',
      documentCharges:'2 % of Loan Amount + Applicable Taxes(for under construction cases 3% of loan amount + applicable taxes)',
      tenureOfLoan:finalsanctionDetails?.tenureInMonth||"NA",

      //disbursement
      loanAmount:finalsanctionDetails?.finalLoanAmount|| "NA",
      sanctionLetterNo:sanctionPendencyDetails?.partnerLoanNo || "NA",
      sanctionLetterDate:formatDate(sanctionPendencyDetails?.sanctionDate) || "NA",

      // page  No : 3

      penalCharges:`2% per month on the overdue amount plus applicable taxes in the event of default in repayment of loan instalments.\n\n2 % per month on the outstanding loan facility amount plus applicable taxes for non-compliance of agreed terms and conditions mentioned in the Sanction Letter`,
      repaymentMethod:"NACH",
      monthlyInstallmentDate:"10th of the month",
      endDateOfLoanTenure:"As per Repayment Schedule",
      foreClosereOfLoan:`No prepayment allowed till completion of 12 months from the date of 1st disbursement.After completion of 12 months from the date of 1st disbursement, prepayment from personal funds may be made without incurring any fees.In case of balance transfer, 4% charges will be applicable.`,
      taxes:"Goods and Services tax (GST) will be charged extra as per the applicable rates, on interest, penal charges,other charges and fees (wherever GST is applicable)",
      security:`1. Personal guarantee of PAWAN NAGAR ) \n 2. Corporate guarantee of NA \n 3. Demand Promissory Notes \n 4. Cheques as per UDC Covering Letter. \n 5. First and exclusive charge over the Immovable Property as mentioned in Schedule III.`,
      securityDepositOrDsra:"NIL",
      lockPeriod:`The borrower shall not repay/prepay/foreclose any portion of the outstanding loan amount either in part or in full within 1 year completion of loan tenure from the 1st date of disbursement.`,

      // charges Details

      processingFees:"2% of Loan Amount + Applicable Taxes",
      documentProcessingCharges:"2% of Loan Amount + Applicable Taxes",
      prepaymentCharges:`No prepayment allowed till completion of 12 months from the date of 1st disbursement. After completion of 12 months from the date of 1st disbursement, prepayment from personal funds may be made without incurring any fees.In case of balance transfer, 4% charges will be applicable.`,
      bounceCharges:"As mentioned in Schedule of Charge ",
      outstationCollectionCharges:"-",
      chequeSwapCharges:"As mentioned in Schedule of Charge ",
      stampDuety:"As per State Stamp Duty ACT",
      duplicateNocCharges:"As mentioned in Schedule of Charge",

      chequebankName:appPdcDetails?.[0]?.fullName || "NA",
      accountTransfertypeOfAccount:appPdcDetails?.[0]?.fullName || "NA",
      rtgsifscCode:appPdcDetails?.[0]?.fullName || "NA",
      particularsImmovablePropertiesFullAddress:"hyderabad",


      interestType1 : disbursementDetails?.kfsDetails?.SpreadInterestRate||"NA",//cam

      // loanAmounts:finalsanctionDetails?.finalLoanAmount|| "NA",
      loanAmountInWord:finalsanctionDetails?.loanAmountInWords|| "NA",
      // also page 1
      // agreementdate:disbursementDetails?.preDisbursementForm?.dateOfTheAgreement||"NA",
      // placeOfExecution:disbursementDetails?.preDisbursementForm?.placeOfExecution||"NA",

      // dateOfTheAgreement
      chequebankaccountNumber:bankDetails?.accNo || "NA" ,
      totalChequeCount:appPdcDetails?.totalChequeCount || "NA",
      rtgifscCode:bankDetails?.ifscCode || "NA" ,
      accTransfertypeOfAccount:bankDetails?.accType || "NA" ,
      totalChequeCount:appPdcDetails?.totalChequeCount || "NA",

      bankDetail: bankDetails?.bankName  || "NA" ,
      chequeNo1:bankDetail?.chequeDetail?.[0]  ||"NA" ,

      chequeNo5: bankDetail?.chequeDetail?.[4] ||"NA" ,


      //ech nach
      // ecsNachbankName:creditPdDetails?.bankDetail?.nameOfBank || "NA",
      // accTransfertypeOfAccoun:creditPdDetails?.bankDetail?.accountType || "NA",
      // rtgifscCoe:creditPdDetails?.bankDetail?.IFSCCode || "NA",
      // accountHolderName:creditPdDetails?.bankDetail?.accountHolderName || "NA",

      ecsNachbankAccountNumber:creditPdDetails?.bankDetail?.accountNo || "NA",
      ecsNachinstallmentAmounts: roundedEMI || "NA" ,
      

      chequeaccountInINR:"Not Over Emi or Not Over Loan Amount",
      chequelocalOutstation:"Local",
        table: [
          {
              appchequeNo1: bankDetail?.chequeDetail?.[0] ||"NA" ,

              bankDetail1:  bankDetails?.bankName  || "NA" ,
              bankaccNo1:bankDetails?.accNo || "NA" ,
              accountHolderName1: bankDetails?.accHolder || "NA" ,
          },
          {
              appchequeNo2: bankDetail?.chequeDetail?.[1]||"NA",

              bankDetail1:  bankDetails?.bankName  || "NA" ,
              bankaccNo2:bankDetails?.accNo || "NA" ,
              accountHolderName2: bankDetails?.accHolder || "NA" ,
          },
          {
              appchequeNo3: bankDetail?.chequeDetail?.[2]||"NA" ,

              bankDetail1:  bankDetails?.bankName  || "NA" ,
              bankaccNo3:bankDetails?.accNo || "NA" ,
              accountHolderName3: bankDetails?.accHolder || "NA" ,
          },
          {
              appchequeNo4: bankDetail?.chequeDetail?.[3]||"NA" ,

              bankDetail4:  bankDetails?.bankName  || "NA" ,
              bankaccNo4:bankDetails?.accNo || "NA" ,
              accountHolderName4: bankDetails?.accHolder || "NA" ,
          },
          {
              appchequeNo5: bankDetail?.chequeDetail?.[4] ||"NA" ,

              bankDetail5:  bankDetails?.bankName  || "NA" ,
              bankaccNo5:bankDetails?.accNo || "NA" ,
              accountHolderName5: bankDetails?.accHolder || "NA" ,
          }
      ],

      //page No 15
      tableno2: [
          {
            guchequeNo1: gtrPdcbankDetail?.chequeDetail?.[0] ||"NA" ,

            gubankDetail1: gtrPdcbankDetail?.bankName || "NA" ,

            gubankaccNo1:gtrPdcbankDetail?.accountNumber || "NA" ,

            guaccountHolderName1: gtrPdcbankDetail?.acHolderName || "NA" ,
          },
          {
            guchequeNo2: gtrPdcbankDetail?.chequeDetail?.[1] ||"NA" ,

            gubankDetail2: gtrPdcbankDetail?.bankName || "NA" ,

            gubankaccNo2:gtrPdcbankDetail?.accountNumber || "NA" ,
            guaccountHolderName2: gtrPdcbankDetail?.acHolderName || "NA" ,
          },
          {
            guchequeNo3: disbursementDetails?.pdcAndBsv?.guarantorChequeAndBSV?.chequeDetail?.[3] ||"NA" ,
            gubankDetail3: gtrPdcDetail?.guarantorDetails?.[0]?.bankName || "NA" ,
            gubankaccNo3:gtrPdcDetail?.guarantorDetails?.[0]?.acHolderName || "NA" ,

            guaccountHolderName3: gtrPdcDetail?.guarantorDetails?.[0]?.acHolderName || "NA" ,
          },
          {
            guchequeNo4: disbursementDetails?.pdcAndBsv?.guarantorChequeAndBSV?.chequeDetail?.[3] ||"NA" ,
            gubankDetail4: disbursementDetails?.pdcAndBsv?.guarantorChequeAndBSV?.chequeDetail?.[3] 
            ? gtrPdcDetail?.guarantorDetails?.[0]?.bankName || "NA"
            : "NA",
            gubankaccNo4:disbursementDetails?.pdcAndBsv?.guarantorChequeAndBSV?.chequeDetail?.[3] 
            ?gtrPdcDetail?.guarantorDetails?.[0]?.acHolderName || "NA" : "NA",

            guaccountHolderName4: disbursementDetails?.pdcAndBsv?.guarantorChequeAndBSV?.chequeDetail?.[3] 
            ?gtrPdcDetail?.guarantorDetails?.[0]?.acHolderName || "NA" : "NA",
          },
          {
            guchequeNo5: disbursementDetails?.pdcAndBsv?.guarantorChequeAndBSV?.chequeDetail?.[4] ||"NA" ,
            gubankDetail5: gtrPdcDetail?.guarantorDetails?.[0]?.bankName || "NA" ,
            gubankaccNo5:gtrPdcDetail?.guarantorDetails?.[0]?.acHolderName || "NA" ,

            guaccountHolderName5: gtrPdcDetail?.guarantorDetails?.[0]?.acHolderName || "NA" ,
          },
          {
            guchequeNo6: gtrPdcDetail?.chequeNo6 || "NA",
            gubankDetail6: gtrPdcDetail?.bankName || "NA",
            guaccountHolderName6: gtrPdcDetail?.acHolderName || "NA",
          },
          {
            guchequeNo7: gtrPdcDetail?.chequeNo7 || "NA",
            gubankDetail7: gtrPdcDetail?.bankName || "NA",
            guaccountHolderName7: gtrPdcDetail?.acHolderName || "NA",
          }
      ],
      addressImmovableProperty:technicalDetails?.fullAddressOfProperty|| "NA",
      //page no 29
      OnOrTowardsNorth: technicalDetails?.northBoundary|| "NA",
      OnOrTowardsSouth: technicalDetails?.southBoundary|| "NA",
      OnOrTowardsEast: technicalDetails?.eastBoundary|| "NA",
      OnOrTowardsWest: technicalDetails?.westBoundary|| "NA",
      };
      console.log(allPerameters,"allPerameters ld pd")
      
      // if (customerSelections.includes("acg") ) {
      //   const pdfPath = await RcplLdAndPgDeedpdf1(allPerameters);
      //   console.log(RcplLdAndPgDeedpdf1,"ld anf pd deed acg")

      //   // return success(res, "PDF generated successfully", pdfPath);
      //   return pdfPath
    
  
      // }

      // if (customerSelections.includes("accg") ) {
      //   const pdfPath = await RcplLdAndPgDeedpdf(allPerameters);
      //   console.log(pdfPath,"ld anf pd deed accg")
      //   // return success(res, "PDF generated successfully", pdfPath);
      //   return pdfPath

  
      // }

      // if (customerSelections.includes("ac") ) {
        
      //   const pdfPath = await RcplLdAndPgDeedpdf3(allPerameters );
      //   console.log(RcplLdAndPgDeedpdf3,"loan ac")

      //   // return success(res, "PDF generated successfully", pdfPath);
      //   return pdfPath

  
      // }

      // if (customerSelections.includes("acc") ) {
      //   const pdfPath = await RcplLdAndPgDeedpdf2(allPerameters );
      //   console.log(RcplLdAndPgDeedpdf1,"loan acc")
      //   // return success(res, "PDF generated successfully", pdfPath);
      //   return pdfPath

  
      // }
      const partnerData = await finalsanctionModel.findOne({ customerId });
          
          if (!partnerData) {
            return badRequest(res, "partner's is required.");
          } 
      
          let selectionData = partnerData?.pdfSelection || "acg";
      if (selectionData && typeof selectionData === "string") {
      selectionData = selectionData.toLowerCase();
      }
      let pdfPath = ""; // Initialize pdfPath to avoid undefined errors

    if (selectionData === "acg") 
    {
       pdfPath = await RcplLdAndPgDeedpdf1(allPerameters );
            console.log(pdfPath, "applicant");
    } 
    else if (selectionData === "accg") 
    {
       pdfPath = await RcplLdAndPgDeedpdf(allPerameters );
      console.log(pdfPath, "coapplicant");
    } 
    else if (selectionData === "acc")
    {
       pdfPath = await RcplLdAndPgDeedpdf2(allPerameters );
      console.log(pdfPath, "gaurantor");
    }
     else if (selectionData === "ac")
   {
      pdfPath = await RcplLdAndPgDeedpdf3(allPerameters );
     console.log(pdfPath, "gaurantor");
   } 
    else 
    {
      throw new Error("Invalid selection type");
    }

    if (!pdfPath) {
      console.log("Error generating the Sanction Letter PDF");
      return { error: "PDF generation failed" };
    }
   
          const uploadResponse = await uploadPDFToBucket(pdfPath, `RatnaLdAndPgDeed${Date.now()}.pdf`);
          const url = uploadResponse.url
          console.log(url,"url")    
          
              
          await finalsanctionModel.findOneAndUpdate(
            { customerId }, // Query to find the specific customer document
            {
              $set: { "ratnaPdfUrls.LdAndPdDeed": url } // Dot notation for nested update
            },
            { new: true, upsert: false } // Options: Return updated doc, don't create new one
          );


          console.log(pdfPath,"sanction pdfpath")
          // return pdfPath
          // success(res, "PDF generated successfully", pdfPath);
          // return pdfPath
          return (
            {
              LOAN_AGREEMENT:url,
          });

        

      } catch (error) {
        console.log(error);
        // unknownError(res, error);
      }
}

const uploadPDFToBucket = async (pdfBuffer, fileName) => {
  try {
    const filePathInBucket = `${process.env.PATH_BUCKET}/LOS/PDF/${fileName}`;
    const bucketName = 'finexe'; 
    const contentType = 'application/pdf';

    const uploadResult = await uploadToSpaces(bucketName, filePathInBucket, pdfBuffer, 'public-read', contentType);

    return { url: `https://cdn.fincooper.in/${filePathInBucket}` };
  } catch (error) {
    console.error('Error uploading PDF to bucket:', error);
    throw new Error('Upload failed');
  }
};
  

// const rcplLdAndPdDeed = async(req,res) =>{
//     try {
//         const errors = validationResult(req);
//         if (!errors.isEmpty()) {
//           return serverValidation({
//             errorName: "serverValidation",
//             errors: errors.array(),
//           });
//         }
    
    
//         const pdfPath = await RcplLdAndPgDeedpdf(req);
//         console.log("pdfPath", pdfPath);
//         console.log("http://localhost:5500" + pdfPath);
    
//         if (!pdfPath) {
//           return res.status(500).json({
//             errorName: "pdfGenerationError",
//             message: "Error generating the Sanction Letter Pdf",
//           });
//         }
//         success(res, "PDF generated successfully", pdfPath);
//       } catch (error) {
//         console.log(error);
//         unknownError(res, error);
//       }
// }

module.exports = {
    LdAndPdDeed
}

