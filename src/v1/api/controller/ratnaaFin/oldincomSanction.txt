const {
    success,
    unknownError,
    serverValidation,
    badRequest,
  } = require("../../../../../globalHelper/response.globalHelper");
  const PDFDocument = require("pdfkit");
  const mongoose = require("mongoose");

  const path = require("path");
  const fs = require("fs");
  const moment = require("moment");
  const { validationResult } = require("express-validator");
  const stream = require('stream')
  //   const { uploadToSpaces } = require("../../services/spaces.service.js")
  const uploadToSpaces = require("../../services/spaces.service.js");
  
    const { EventEmitter } = require('events');
  const myEmitter = new EventEmitter(); 
   const pdfLogo = path.join(
    __dirname,
    "../../../../../assets/image/FINCOOPERSLOGO.png"
  );
  const customerModel = require('../../model/customer.model')
  const coApplicantModel = require('../../model/co-Applicant.model')
  const guarantorModel = require('../../model/guarantorDetail.model')
  const applicantModel = require('../../model/applicant.model')
  const technicalModel = require('../../model/branchPendency/approverTechnicalFormModel')
  const appPdcModel = require('../../model/branchPendency/appPdc.model')
  const cibilModel = require('../../model/cibilDetail.model')
  const DISBURSEMENTModel = require('../../model/fileProcess/disbursement.model.js')
  const creditPdModel = require('../../model/credit.Pd.model')
  const sanctionModel =  require('../../model/finalApproval/sanctionPendency.model')
  const finalsanctionModel =  require('../../model/finalSanction/finalSnction.model')
  const bankDeatilsKycs = require('../../model/branchPendency/bankStatementKyc.model');


  
  
  
  const { initESign } = require('../../services/legality.services.js');
  const { calculateLoanAmortization } = require("../../services/amotization.services.js");
  
  
  // Helper function to capitalize the first letter of each word in a name
  function capitalizeFirstLetter(name) {
    return name
      .split(" ")
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(" ");
  }
  
  async function ratannaFinSanctionLetterPdf(allPerameters) {
  
    const font = "assets/font/Cambria.ttf";
    const fontBold = "assets/font/Cambria-Bold.ttf";
    // const baseDir = path.join("./uploads/");
    // const outputDir = path.join(baseDir, "pdf/");

    const PDFDocument = require('pdfkit');
    const doc = new PDFDocument({ margin: 50, size: "A4" });
  
    // Buffer to hold the PDF content
    const buffers = [];
    doc.on('data', (chunk) => buffers.push(chunk));
    doc.on('end', () => console.log('PDF generated successfully!'));
    
  
    // draw a border around the page
    function drawBorder() {
      const pageWidth = doc.page.width;
      const pageHeight = doc.page.height;
      const margin = 30;
      const lineWidth = 2;
  
      // Draw a simple border rectangle
      doc.lineWidth(lineWidth);
      doc
        .rect(margin, margin, pageWidth - 2 * margin, pageHeight - 2 * margin)
        .strokeColor("#324e98") // Set the color of the border
        .stroke();
    }
    // add logo to every page
    function addLogo() {
      // doc.moveDown(-5)
      if (fs.existsSync(pdfLogo)) {
        doc.image(pdfLogo, 403, 40, {
          fit: [150, 32],
          align: "right",
          valign: "bottom",
        });
      } else {
        console.error(`Logo file not found at: ${pdfLogo}`);
      }
    }
  
    // Footer with border and stylized text
    // Footer with border and stylized text
    function addFooter() {
        const pageWidth = doc.page.margins.left;
        const pageHeight = doc.page.height;
    
        doc
          .font(fontBold)
          .fontSize(6.3)
          .fillColor("#324e98")
          .text("FinCoopers Capital Pvt Ltd", pageWidth, pageHeight - 80, {
            align: "center",
          });
        doc
          .font(fontBold)
          .fontSize(6.3)
          .fillColor("#000000")
          .text("Registered Office: 174/3, Nehru Nagar, Indore-452011 (M.P.)", {
            align: "center",
          });
        doc
          .font(fontBold)
          .fontSize(6.3)
          .fillColor("#000000")
          .text("CIN: 67120MP1994PTC008686", { align: "center" });
        doc
          .font(fontBold)
          .fontSize(6.3)
          .fillColor("#000000")
          .text("Phone: +91 7374911911 | Email: hr@fincoopers.com", {
            align: "center",
          });
    
        // Add a separator line above the footer
        doc
          .moveTo(50, doc.page.height - 100)
          .lineTo(doc.page.width - 50, doc.page.height - 100)
          .strokeColor("#324e98")
          .lineWidth(1)
          .stroke();
      }
  
    // if (!fs.existsSync(outputDir)) {
    //   fs.mkdirSync(outputDir, { recursive: true });
    // }
  
    const timestamp = Date.now();
    // const pdfFilename = `IncomeSanctionLetter.pdf`;
    // const pdfPath = path.join(outputDir, pdfFilename);
  
    // const doc = new PDFDocument({ margin: 50, size: "A4" });
    // const stream = fs.createWriteStream(pdfPath);
  
    // doc.pipe(stream);
  
    // Add logo and border to the first page
    addLogo();
    drawBorder();
    doc.moveDown(3);
    
      doc
      .fontSize(9)
      .font(fontBold)
      .text("INCOME SANCTION LETTER", { align: "center", underline: true });
    doc.moveDown(2);
  
    const startX = 50; // Set a left margin
    const startY = doc.y; // Get the current Y position
    doc
      .fontSize(7)
      .font('Helvetica')
      .text(`FIN No.:-${allPerameters.FINId}`, startX, doc.y, { align: "left", x: 50 }) // Adjusting x to align left
      .text(`Date: ${allPerameters.sanctionpendencyDate}`, { align: "right", x: 450 })
      .moveDown(1);
    
    doc
      .font(fontBold)
      .fontSize(8)
      .text(`CUSTOMER NAME:${allPerameters.customerName}`, startX, doc.y, { align: "left", x: 50 })
      .moveDown(1);
    
    doc
      .font("Helvetica")
      .fontSize(8)
      .text(`ADDRESS AS PER ADDHAR :${allPerameters.address}`,startX, doc.y, { align: "left", x: 50 })
      .moveDown(1);
    
    // doc
    //   .font(fontBold)
    //   .fontSize(8)
    //   .text(`K/A: ${allPerameters.KAndA}`,startX, doc.y, { align: "left", x: 50 })
    //   .moveDown(1);
    
    doc
      .font('Helvetica')
      .fontSize(8)
      .text(`(Borrower & Co-Borrower hereinafter collectively referred to as the “Borrower”)\nWith reference to your application for financial assistance and further to our recent discussions we set out below the broad terms and conditions of the proposed facility.\nYour loan account details and the loan repayment schedule are attached herewith for your reference.`, { align: "left", x: 50 })
      .moveDown(1);
    
    // Define table drawing function with left alignment adjustments
    // function drawTable(tableData) {
    //     const startX = 50; // Adjusting startX for left alignment
    //     let startY = doc.y + 10;
    //     const columnWidths = [500];
      
    //     const keyWidth = Math.round((columnWidths[0] * 1) / 2);
    //     const valueWidth = Math.round((columnWidths[0] * 1) / 2);
      
    //     tableData.forEach((row, rowIndex) => {
    //         let rowHeight = 15;
    
    //         const field1TextHeight = doc
    //             .font(font)
    //             .fontSize(7.2)
    //             .heightOfString(row.field1, { width: keyWidth });
            
    //         let value1TextHeight = 0;
    //         if (row.value1) {
    //             value1TextHeight = doc
    //                 .font(font)
    //                 .fontSize(7.2)
    //                 .heightOfString(row.value1, { width: valueWidth });
    //         }
    
    //         rowHeight = Math.max(field1TextHeight, value1TextHeight) + 10;
    
    //         if (!row.value1) {
    //             doc
    //                 .fillColor("blue")
    //                 .rect(startX, startY, columnWidths[0], rowHeight)
    //                 .stroke("black")
    //                 .fill();
    
    //             doc
    //                 .font(font)
    //                 .fillColor("black")
    //                 .fontSize(7.2)
    //                 .text(row.field1, startX + 5, startY + 5, {
    //                     baseline: "hanging",
    //                     width: columnWidths[0],
    //                 });
    //         } else {
    //             doc.lineWidth(0.5);
    //             doc
    //                 .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff")
    //                 .rect(startX, startY, keyWidth, rowHeight)
    //                 .stroke("black")
    //                 .fill();
    
    //             doc
    //                 .font(font)
    //                 .fillColor("black")
    //                 .fontSize(7.2)
    //                 .text(row.field1, startX + 5, startY + 5, {
    //                     baseline: "hanging",
    //                     width: keyWidth,
    //                 });
    
    //             doc
    //                 .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff")
    //                 .rect(startX + keyWidth, startY, valueWidth, rowHeight)
    //                 .stroke()
    //                 .fill();
    
    //             doc
    //                 .font(font)
    //                 .fillColor("black")
    //                 .fontSize(7.2)
    //                 .text(row.value1, startX + keyWidth + 5, startY + 5, {
    //                     baseline: "hanging",
    //                     width: valueWidth,
    //                 });
    //         }
    //         startY += rowHeight;
    //     });
    // }
    function drawTable(tableData) {
      const startX = 50; // Adjusting startX for left alignment
      let startY = doc.y + 10;
      const columnWidths = [500];
    
      const keyWidth = Math.round((columnWidths[0] * 1) / 2);
      const valueWidth = Math.round((columnWidths[0] * 1) / 2);
    
      tableData.forEach((row, rowIndex) => {
        let rowHeight = 15;
    
        // Calculate text height for dynamic row size
        const field1TextHeight = doc
          .font(font)
          .fontSize(7)
          .heightOfString(row.field1, { width: keyWidth });
    
        let value1TextHeight = 0;
        if (row.value1) {
          value1TextHeight = doc
            .font(font)
            .fontSize(7)
            .heightOfString(row.value1, { width: valueWidth });
        }
    
        rowHeight = Math.max(field1TextHeight, value1TextHeight) + 10;
    
        // Check if field1 matches "CHARGES" or "NEW LOAN DETAILS"
        const isSpecialRow =
          row.field1.toUpperCase() === "CHARGES" ||
          row.field1.toUpperCase() === "NEW LOAN DETAILS";
    
        // Row background and border for special rows
        if (isSpecialRow) {
          doc
            .fillColor("#00BFFF") // Background color
            .rect(startX, startY, columnWidths[0], rowHeight)
            .fill()
            .stroke("black", 0.5); // Thin border
    
          doc
            .font(font)
            .fillColor("black") // Text color
            .fontSize(7)
            .text(row.field1, startX + 5, startY + 5, {
              baseline: "hanging",
              width: columnWidths[0],
            });
        } else {
          // Normal rows
          doc.lineWidth(0.5); // Thin border for regular rows
    
          // Key Column
          doc
            .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff")
            .rect(startX, startY, keyWidth, rowHeight)
            .stroke("black")
            .fill();
    
          doc
            .font(font)
            .fillColor("black")
            .fontSize(7)
            .text(row.field1, startX + 5, startY + 5, {
              baseline: "hanging",
              width: keyWidth,
            });
    
          // Value Column
          doc
            .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff")
            .rect(startX + keyWidth, startY, valueWidth, rowHeight)
            .stroke("black")
            .fill();
    
          doc
            .font(font)
            .fillColor("black")
            .fontSize(7)
            .text(row.value1, startX + keyWidth + 5, startY + 5, {
              baseline: "hanging",
              width: valueWidth,
            });
        }
    
        // Move to the next row
        startY += rowHeight;
      });
    }
    
        
      const loanTableData = [
        { field1: "NEW LOAN DETAILS" },
        { field1: "FIN NO", value1: `${allPerameters.FINId}` },
        { field1: "Loan Borrower name", value1: `${allPerameters.loanBorrowerName}` },
        { field1: "Loan Co-borrower name", value1: `${allPerameters.loanCoborrowerName}` },
        { field1: "Loan Co-borrower name-2", value1: `${allPerameters.loanCoborrowerNameTwo}` },
        { field1: "Loan Guarantor name", value1: `${allPerameters.loanGuarantorName}` },
        { field1: "Product", value1: `${allPerameters.product}` },
        { field1: "Loan Amount", value1: `${allPerameters.loanAmount}` },
        { field1: "Description of Collateral Property", value1: `As per Annexure I
  ` },
        // { field1: "Property Owner", value1: `${allPerameters.propertyOwner}` },
        {
          field1: "Property Owner", value1: `${allPerameters.propertyOwner}`,
        },
        {
          field1: "Purpose of Loan ", value1: `${allPerameters.PURPOSEoFlOAN}`,
        },
        {
          field1: "Tenure", value1: `${allPerameters.tenureinMonths} months`,
        },
        {
          field1: "Interest Rate",
          value1: `${allPerameters.interestRate} %`,
        },
        {
          field1: "Interest Type",
          value1:
            `Linked to Floating Reference Rate (FRR – 19.20% + ${allPerameters.interestType})`,
        },
        {
          field1: "EMI Amount",
          value1:
            `Rs ${allPerameters.emiAmount} for a period of ${allPerameters.tenureinMonths} months`,
        },
        { field1: "Penal charges", value1: `${allPerameters.penalCharges}` },
        {
          field1:"Prepayment Charges",
          value1: `No prepayment allowed till completion of 12 months from the date of 1st\n disbursement. After completion of 12 months from the date of 1st disburseme\n-nt, prepayment from personal funds may be made without incurring any fees.\n In case of balance transfer, 4% charges will be applicable.`,
        },
        { field1: "DSRA", value1: `${allPerameters.DSRA}` },
        {
          field1: "EMI Payment Bank ",
          value1:
           `${allPerameters.emiPaymentBank}`,
        },
        { field1: "EMI Payment Bank A/c Number", value1: `${allPerameters.accNumber}` },
        {
          field1: "Mode of Payment ",
          value1:
            `${allPerameters.modeOfPayment}`,
        },
       
      ];
      drawTable(loanTableData);
      // addFooter()
  
      //-------------------------------------- new page 2-------------------------------------------------------
    
      doc.addPage();
      addLogo();
      drawBorder();
      doc.moveDown(7);
  
      doc
      .font('Helvetica-Bold')
      .fontSize(8)
      .text(`Special Terms & Conditions: Pre-disbursement Conditions`,startX, doc.y, { align: "center", x: 50 })
      .moveDown(1);
  
  
    function latterTableFunction(tableData) { 
      // Add Table Header
      const startX = 50;
      let startY = doc.y + 10;
      const totalWidth = 500; // Total column width
      const keyWidth = Math.round(totalWidth * 0.20); // 30% of the total width
      const valueWidth = totalWidth - keyWidth; // Remaining width for the value column
  
      tableData.forEach((row, rowIndex) => {
          // Set default row height
          let rowHeight = 15;
  
          // Calculate the height of the text for field1 with word wrapping
          const field1TextHeight = doc
              .font(font)
              .fontSize(7.2)
              .heightOfString(row.field1, { width: keyWidth, wordBreak: 'break-word' });
  
          // Calculate the height of the text for value1 with word wrapping if it exists
          let value1TextHeight = 0;
          if (row.value1) {
              value1TextHeight = doc
                  .font(font)
                  .fontSize(7.2)
                  .heightOfString(row.value1, { width: valueWidth, wordBreak: 'break-word' });
          }
  
          // Determine the maximum height between field1 and value1 to set row height
          rowHeight = Math.max(field1TextHeight, value1TextHeight) + 10;
  
          // Check if field1 contains "S. No" (case-insensitive)
          const isSpecialRow = row.field1.toUpperCase().includes("S. NO");
  
          // Apply special row styling
          if (isSpecialRow) {
              doc
                  .fillColor("#00BFFF") // Background color for "S. No" rows
                  .rect(startX, startY, totalWidth, rowHeight)
                  .fill()
                  .stroke("black", 0.5); // Thin border
  
              // Draw text in field1 cell with special styling
              doc
                  .font(font)
                  .fillColor("black")
                  .fontSize(7.2)
                  .text(row.field1, startX + 5, startY + 5, {
                      baseline: "hanging",
                      width: keyWidth,
                      height: rowHeight - 10, // Adjust the height so the text stays inside
                      align: "left",
                      wordBreak: 'break-word' // Enable word wrapping for field1
                  });
  
              const keyValueText = row.value1 ? row.value1 : ""; // Show only value1 text if present
              doc
                  .font(font)
                  .fillColor("black")
                  .fontSize(7.2)
                  .text(keyValueText, startX + keyWidth + 5, startY + 5, {
                      baseline: "hanging",
                      width: valueWidth,
                      height: rowHeight - 10, // Adjust the height so the text stays inside
                      align: "left",
                      wordBreak: 'break-word' // Enable word wrapping for value1
                  });
          } else {
              // Alternate row background color for non-"S. No" rows
              doc.lineWidth(0.5);
              doc
                  .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff")
                  .rect(startX, startY, keyWidth, rowHeight)
                  .stroke("black")
                  .fill();
  
              // Draw text in field1 cell
              doc
                  .font(font)
                  .fillColor("black")
                  .fontSize(7.2)
                  .text(row.field1, startX + 5, startY + 5, {
                      baseline: "hanging",
                      width: keyWidth,
                      height: rowHeight - 10, // Adjust the height so the text stays inside
                      align: "left",
                      wordBreak: 'break-word' // Enable word wrapping for field1
                  });
  
              // Draw the second column, even if value1 is absent
              doc
                  .fillColor(rowIndex % 2 === 0 ? "#f5f5f5" : "#ffffff")
                  .rect(startX + keyWidth, startY, valueWidth, rowHeight)
                  .stroke("black")
                  .fill();
  
              // Draw text in value1 cell
              const keyValueText = row.value1 ? row.value1 : ""; // Show only value1 text if present
              doc
                  .font(font)
                  .fillColor("black")
                  .fontSize(7.2)
                  .text(keyValueText, startX + keyWidth + 5, startY + 5, {
                      baseline: "hanging",
                      width: valueWidth,
                      height: rowHeight - 10, // Adjust the height so the text stays inside
                      align: "left",
                      wordBreak: 'break-word' // Enable word wrapping for value1
                  });
          }
  
          // Draw vertical line between the columns
          doc.lineWidth(0.5);
          doc.strokeColor("black");
          doc.moveTo(startX + keyWidth, startY);
          doc.lineTo(startX + keyWidth, startY + rowHeight);
          doc.stroke();
  
          // Move to the next row position
          startY += rowHeight;
      });
  }
  
    const  PreDisbursementTablee = [
      { field1: "S. NO", value1: `Pre-disbursement Terms and Conditions` },
      { field1: "1", value1: `${allPerameters.specialTermsCondition1}` },
      { field1: "2", value1: `${allPerameters.specialTermsCondition2}` },
      { field1: "3", value1: `${allPerameters.specialTermsCondition3}` },
      { field1: "4", value1: `${allPerameters.specialTermsCondition4}` },
      { field1: "5", value1: `${allPerameters.specialTermsCondition5}` },
      { field1: "6", value1: `${allPerameters.specialTermsCondition6}` },
      { field1: "7", value1: `${allPerameters.specialTermsCondition7}` },
      // { field1: "8", value1: `Hypothecation on machinery to be done.` },
      // { field1: "9", value1: `Prepayment of 20% of principal outstanding can be done post one year of disbursement.` },
    ];
    
    latterTableFunction(PreDisbursementTablee);
    doc.moveDown(2);
    doc
      .font('Helvetica')
      .fontSize(8)
      .text(`*This is System generated sanction letter Doesn't require signature `,startX, doc.y, { align: "center", x: 50 })
      .moveDown(1);

      addFooter()
  
  
      doc.end();
    
      // const pdfFileUrl = `/uploads/pdf/${pdfFilename}`;
      // console.log(pdfFileUrl,"pdfFileUrl")
      // doc.pipe(fs.createWriteStream(pdfPath));
      
    //   const objData = {
    //     fileName: pdfFileUrl,
    //     // file: doc.toString('base64')
    //  }
    //   await initESign(objData)
    
      // return new Promise((resolve, reject) => {
      //   stream.on("finish", () => {
      //     resolve(pdfFileUrl);
      //   });
      //   stream.on("error", reject);
      // });
      return new Promise((resolve) => {
        doc.on('end', () => resolve(Buffer.concat(buffers)));
      });
    }
    
  
  
  const incomesectionLatter = async(customerId) =>{
      try {
        // console.log(customerId,"in sanction latter") cibilModel finalsanctionModel
        // if (!mongoose.Types.ObjectId.isValid(customerId)) {
        //   // badRequest("Invalid customerId format.");
        //   return badRequest(res, "No loan details provided");

        // }``

  // const incomesectionLatter = async(req,res) =>{
  //   // const naamdevPdf = async(customerId,logo) =>{
  
  //   // const customerId = "673de5ee3ecb1d6e805654a3"
  //        const { customerId } = req.query;

  //   try{
  //   console.log(customerId,"in sanction latter")
    
        // Fetch data using the validated `customerId`
        const customerDetails = await customerModel.findById({ _id: (customerId) });
        const coApplicantDetails = await coApplicantModel.find({customerId})
        const guarantorDetails = await guarantorModel.findOne({customerId})  
        const applicantDetails = await applicantModel.findOne({customerId})
        const technicalDetails = await technicalModel.findOne({customerId})
        const appPdcDetails = await appPdcModel.findOne({customerId})
        const cibilDetail = await cibilModel.findOne({customerId})
        const disbuDetail  = await DISBURSEMENTModel.findOne({customerId})
        const creditPdDetails = await creditPdModel.findOne({ customerId });
        const sanctionPendencyDetails = await sanctionModel.findOne({ customerId });
        const finalsanctionDetails = await finalsanctionModel.findOne({ customerId });
        const bankKycsDEtails = await bankDeatilsKycs.findOne({ customerId });

  
        const address = [
          applicantDetails?.localAddress?.addressLine1,
          // applicantDetails?.permanentAddress?.addressLine2,
          // applicantDetails?.permanentAddress?.city,
          // applicantDetails?.permanentAddress?.district,
          // applicantDetails?.permanentAddress?.state,
          // applicantDetails?.permanentAddress?.pinCode
        ].filter(Boolean).join(', ');
  
        const KAndA = [
          applicantDetails?.fullName,
          coApplicantDetails[0]?.fullName,
          guarantorDetails?.fullName
        ].filter(Boolean).join(', ');
  
        // console.log("KAndA",KAndA)
        const formatDate = (praMANpATRADate) => {
          if (!praMANpATRADate) return "NA"; // Agar DOB available nahi hai to "NA" return kare
          const date = new Date(praMANpATRADate); // Date object me convert kare
          const day = String(date.getDate()).padStart(2, '0'); // Day format me 2 digits
          const month = String(date.getMonth() + 1).padStart(2, '0'); // Month format me 2 digits (0-based index ke liye +1)
          const year = String(date.getFullYear()).slice(); // Sirf last 2 digits le
          return `${day}-${month}-${year}`; // Final format
          };
  
          const timestamp = Date.now();
  
          // Convert timestamp to a Date object
          const currentDate = new Date(timestamp);
          
          // Format the date to dd/mm/yy
          const formattedDate = currentDate.toLocaleDateString('en-GB', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
          });

          const bankDetail = bankKycsDEtails?.bankDetails?.find(
            (detail) => detail.E_Nach_Remarks === "true"
          ) || {}; // Default to an empty object if no bank details are found
      
          const bankDetails = {
            bankName: bankDetail?.bankName || "NA",
            branchName: bankDetail?.branchName || "NA",
            accNo: bankDetail?.accountNumber || "NA",
            accType: bankDetail?.accountType || "NA",
            ifscCode: bankDetail?.ifscCode || "NA",
          }; 

        const allPerameters = {
          FINId:customerDetails.customerFinId||"NA",
          processingfees:disbuDetail?.kfsDetails?.processingFees || "NA",//page no.1
          insuranceCharges:disbuDetail?.kfsDetails?.insuranceCharges || "NA",//page no.1
          docCharges:disbuDetail?.kfsDetails?.documentsCharges || "NA",//page no.1
          cersaiCharges:disbuDetail?.kfsDetails?.cersaiCharges || "NA",//page no.1
          pENDENCYlOANnumber:disbuDetail?.preDisbursementForm?.loanNumber || "NA",//page no.1
          sanctionpendencyDate:formattedDate|| "NA",//page no.1
          customerName : applicantDetails?.fullName || "NA",//page no.1
          address : address,
          KAndA: KAndA,
          customerID: disbuDetail?.preDisbursementForm?.partnerCustomerID || "NA",
          loanBorrowerName : applicantDetails?.fullName || "NA",
          loanCoborrowerName : coApplicantDetails[0]?.fullName || "NA" ,
          loanCoborrowerNameTwo : coApplicantDetails[1]?.fullName || "NA" ,
          loanGuarantorName : guarantorDetails?.fullName || "NA",
          product :  "Agri Micro Loan Against Property",
          loanAmount :finalsanctionDetails?.finalLoanAmount|| "NA",
          loanAmountinwords :finalsanctionDetails?.loanAmountInWords|| "NA",
          tenureinMonths: finalsanctionDetails?.tenureInMonth||"NA",
          emiAmount:finalsanctionDetails?.emiAmount|| "NA",
          interestRate : finalsanctionDetails?.roi || "NA",//roi
          interestType : disbuDetail?.kfsDetails?.SpreadInterestRate||"NA",//cam
          annualPercentageRateAprPercentage: disbuDetail?.kfsDetails?.annualPercentageRateAprPercentage||"NA",//cam
          epi:disbuDetail?.kfsDetails?.epi||"NA",//cam
          noOfEpi:disbuDetail?.kfsDetails?.noOfEpi||"NA",//cam
          prepaymentCharges : "NA",
          PURPOSEoFlOAN:finalsanctionDetails?.EndUseOfLoan || "NA",
          penalCharges: "2 % per month on the overdue amount plus applicable Taxes in the event of default in repayment of loan instalments.\n\n 2 % per month on the outstanding loan facility amount plus applicable taxes\n for non-compliance of agreed terms and conditions mentioned in the\n Sanction Letter.",
          DSRA : "NIL",

          
          // emiPaymentBank : appPdcDetails?.bankName || 'NA',
          // accNumber: appPdcDetails?.accountNumber || "NA",
          // modeOfPayment: "NACH",

          emiPaymentBank : bankDetails?.bankName || 'NA',
          accNumber: bankDetails?.accNo || "NA",
          modeOfPayment: "NACH",


          loginFees: `Rs. 1950 /- (Inclusive of Applicable Taxes)`,//page 2
          nonRefundableProcessingFee:"2% of loan amounts + Applicable taxes",
          documentationCharges:"2% of loan amounts + Applicable taxes (For under construction cases 3 % of Loan amount + Applicable taxes)",
          stampDutyCharges: "As applicable and to be borne by the Customer",
          lifeInsurancePremiumForIndividual:"Life Insurance is mandatory and the premium is to be borne by customer.",
          insurancePremiumForCollateralSecurity:"Not Applicable",
          borrowersName: applicantDetails?.fullName || "NA",// page 3
          coBorrowersName: coApplicantDetails[0]?.fullName || "NA",
          coBorrowersNameTwo: coApplicantDetails[1]?.fullName || "NA",
          guarantorsName : guarantorDetails?.fullName || "NA",
          specialTermsConditionOne: `Repayment to be taken from ${appPdcDetails?.bankName} - saving account of M/s ${appPdcDetails?.acHolderName}  – A/c ${appPdcDetails?.accountNumber}`,
          AddressDetails: technicalDetails?.fullAddressOfProperty || "NA",//page 4
          propertyOwner: technicalDetails?.nameOfDocumentHolder || "NA",
          SecurityDetailsArea: `Land Area - ${technicalDetails?.totalLandArea}`,
          Construction: ` ${technicalDetails?.totalBuiltUpArea} __ Sq. Ft`,

          specialTermsCondition1:finalsanctionDetails?.sanctionConditionQuery?.query?.[0]||"NA",
          specialTermsCondition2:finalsanctionDetails?.sanctionConditionQuery?.query?.[1]||"NA",
          specialTermsCondition3:finalsanctionDetails?.sanctionConditionQuery?.query?.[2]||"NA",
          specialTermsCondition4:finalsanctionDetails?.sanctionConditionQuery?.query?.[3]||"NA",
          specialTermsCondition5:finalsanctionDetails?.sanctionConditionQuery?.query?.[4]||"NA",
          specialTermsCondition6:finalsanctionDetails?.sanctionConditionQuery?.query?.[5]||"NA",
          specialTermsCondition7:finalsanctionDetails?.sanctionConditionQuery?.query?.[6]||"NA",

        }
  
          const pdfPath = await ratannaFinSanctionLetterPdf(allPerameters);
          // console.log("pdfPath", ratannaFinSanctionLetterPdf);
          // console.log("http://localhost:5500" + pdfPath);
      
          if (!pdfPath) {
           console.log("Error generating the Sanction Letter Pdf")
          }
          // success(res, "PDF generated successfully", pdfPath);
          // console.log(pdfPath,"pdfPath pdfPath")
          const uploadResponse = await uploadPDFToBucket(pdfPath, `IncomeSanctionLetter${Date.now()}.pdf`);
          const url = uploadResponse.url
          console.log(url,"url")        
          await finalsanctionModel.findOneAndUpdate(
          { customerId }, // Query to find the specific customer document
          {
            preSanctionStatus: "approve",
            incomesectionLatterUrl: url,
            generateSanctionLatterStatus:"complete"          },
          { new: true, upsert: false } // Options: Return the updated document, don't create a new one
        );
          console.log(pdfPath,"sanction pdfpath")
          // return pdfPath
          // success(res, "PDF generated successfully", pdfPath);
          // return pdfPath
          return (
            {
              incomesectionLatter:url,
          });
           } catch (error) {
          console.log(error);
          // unknownError(res, error);
        }
  }

  const uploadPDFToBucket = async (pdfBuffer, fileName) => {
    try {
      const filePathInBucket = `${process.env.PATH_BUCKET}/LOS/PDF/${fileName}`;
      const bucketName = 'finexe'; 
      const contentType = 'application/pdf';
  
      const uploadResult = await uploadToSpaces(bucketName, filePathInBucket, pdfBuffer, 'public-read', contentType);
  
      return { url: `https://cdn.fincooper.in/${filePathInBucket}` };
    } catch (error) {
      console.error('Error uploading PDF to bucket:', error);
      throw new Error('Upload failed');
    }
  };
  
  
  
  // const sectionLatter = async(req,res) =>{
  //     try {
  //         const errors = validationResult(req);
  //         if (!errors.isEmpty()) {
  //           return serverValidation({
  //             errorName: "serverValidation",
  //             errors: errors.array(),
  //           });
  //         }
      
  //    const customerDetails = await customerModel.findOne({})     
      
  //         const pdfPath = await ratannaFinSanctionLetterPdf(req);
  //         console.log("pdfPath", pdfPath);
  //         console.log("http://localhost:5500" + pdfPath);
      
  //         if (!pdfPath) {
  //           return res.status(500).json({
  //             errorName: "pdfGenerationError",
  //             message: "Error generating the Sanction Letter Pdf",
  //           });
  //         }
  //         success(res, "PDF generated successfully", pdfPath);
  //       } catch (error) {
  //         console.log(error);
  //         unknownError(res, error);
  //       }
  // }
  
  module.exports = {
      incomesectionLatter
  }