const {
  success,
  unknownError,
  serverValidation,
  badRequest,
  notFound,
  parseJwt,
  badRequestwitherror
} = require("../../../../globalHelper/response.globalHelper");
const { validationResult } = require("express-validator");
const mongoose = require("mongoose");
const ObjectId = mongoose.Types.ObjectId;
const moment = require("moment-timezone");
const { PDFDocument } = require("pdf-lib");
const employeModel = require("../model/adminMaster/employe.model.js");
const coApplicantModel = require("../model/co-Applicant.model");
const applicantModel = require("../model/applicant.model.js");
const guarantorModel = require("../model/guarantorDetail.model");
const referenceModel = require("../model/reference.model");
const customerModel = require("../model/customer.model");
const bankAccountModel = require("../model/banking.model");
const vendorModel = require("../model/adminMaster/vendor.model.js")
const vendorTypeModel = require("../model/adminMaster/vendorType.model.js")
const bankModel = require("../model/bankAccount.model.js");
const productModel = require("../model/adminMaster/product.model");
const processModel = require("../model/process.model.js");
const cibilModel = require("../model/cibilDetail.model.js");
const { createOrder } = require("../services/razorpay.js");
const salesCaseModel = require("../model/salesCase.model.js");
const { updateFileFields } = require("./functions.Controller.js");
const aadharModel = require("../model/aadhaar.model.js");
const aadharOcrModel = require("../model/aadhaarOcr.model.js");
const panFatherModel = require("../model/panFather.model.js");
const panComprehensiveModel = require("../model/panComprehensive.model.js");
const permissionModel = require("../model/adminMaster/permissionForm.model.js");
const leadGenerateModel = require("../model/leadGenerate.model.js");
const employeeModel = require("../model/adminMaster/employe.model.js");
// const branchModel = require("../model/adminMaster/branch.model.js");
const newBranchModel = require("../model/adminMaster/newBranch.model.js");
const creditPdModel = require("../model/credit.Pd.model.js");
const { paginationData } = require("../helper/pagination.helper.js");
const udyamModel = require("../model/branchPendency/udhyamKyc.model.js");
const gtrPdcModel = require("../model/branchPendency/gtrPdc.model.js");
const appPdcModel = require("../model/branchPendency/appPdc.model.js");
const approverFormModel = require("../model/branchPendency/approverTechnicalFormModel.js");
const electricityKycModel = require("../model/branchPendency/electricityKyc.model.js");
const samagraIdModel = require("../model/branchPendency/samagraIdKyc.model.js");
const udhyamKycModel = require("../model/branchPendency/udhyamKyc.model.js");
const bankStatementModel = require("../model/branchPendency/bankStatementKyc.model.js");
const salaryAndOtherIncomeModel = require("../model/branchPendency/salaryAndOtherIncomeModel.js");
const milkIncomeModel = require("../model/branchPendency/milkIncomeModel.js");
const otherBuisnessModel = require("../model/branchPendency/otherBusinessModel.js");
const propertyPaperKycModel = require("../model/branchPendency/propertyPaper.model.js");
const nachRegistrationKyModel = require("../model/branchPendency/nachRegistration.model.js");
const physicalFileCourierModel = require("../model/physicalFileCourier.model.js");
const rmPaymentUpdateModel = require("../model/branchPendency/rmPaymentUpdateModel.js");
const agricultureModel = require("../model/branchPendency/agricultureIncomeModel.js");
const externalVendorFormModel = require("../model/externalManager/externalVendorDynamic.model.js");
const technicalApproveFormModel = require("../model/branchPendency/approverTechnicalFormModel.js");
const tvrModel = require("../model/fileProcess/tvr.model.js");
// const finalSanctionModel = require("../model/fileProcess/finalSanction.model.js");
const final = require("../model/finalSanction/finalSnction.model.js");
const legalReportModel = require("../model/branchPendency/approveLegalForm.model.js");
const esignPhotoModel = require("../model/branchPendency/esignPhoto.model.js");
const disbursementModel = require("../model/fileProcess/disbursement.model.js");
const jinamEntryModel = require("../model/fileProcess/jinamEntry.model.js");
const fileEnventoryModel = require("../model/fileProcess/fileEnventory.model.js");
const camReportModel = require("../model/fileProcess/camReport.model.js");
const lendersModel = require("../model/lender.model.js");
const finalModel = require("../model/finalSanction/finalSnction.model.js");
const SignKycModel = require("../model/branchPendency/signkyc.model.js");
const lenderDocumentModel = require("../model/lenderDocument.model.js");
const sanctionPendencyModel = require("../model/finalApproval/sanctionPendency.model.js");
const newfinalSanctionModel = require("../model/finalSanction/finalSnction.model.js");
const internalLegalModel = require("../model/finalApproval/internalLegal.model.js");
const customerDocumentModel = require("../model/customerPropertyDetail.model.js");
const documentQueryModel = require("../model/finalApproval/documentQuery.model.js");
const decisionModel = require("../model/finalApproval/decision.model.js");
const guarantorStatementDetails = require("../model/branchPendency/gurrantorbankStatment.model.js");
const bankDeatilsKycs = require('../model/branchPendency/bankStatementKyc.model');
const { ratnaEmDeedPdf } = require('./ratnaaFin/emDeed.controller')

// const finalScantionModel = require("../model/fileProcess/finalSanction.model");
const queryFormModel = require("../model/queryForm.model.js");
const { sendEmail } = require("../controller/functions.Controller.js");
const uploadToSpaces = require('../services/spaces.service');

const { mailSendPartnerToSanction } = require('../controller/MailFunction/finalApprovalMail.js')

const {sendEmailByVendor} = require("./functions.Controller.js")
const {
  sectionLatter,
} = require("../controller/ratnaaFin/sectionLatter.controller.js");
const {
  applicantLatter,
} = require("../controller/ratnaaFin/newApplicant.controller.js");
const {
  incomesectionLatter,
} = require("../controller/ratnaaFin/IncomeSanctionLetter.controller.js");
const {
  ratnaDobSignForm,
} = require("../controller/ratnaaFin/ratnaDobSign.controller.js");
const {
  growDualNamepdf,
} = require("../controller/growMoneyPdf/dualName.controller.js");
const {
  growSignaturepdf,
} = require("../controller/growMoneyPdf/growSignature.controller.js");
const {
  rcplLoanAgreement,
} = require("../controller/growMoneyPdf/rcplLoanAggrement.js");
const {
  LdAndPdDeed,
} = require("../controller/ratnaaFin/loanDocument.controller.js");
const {
  legalPdf,
} = require("../controller/legalTechnicalPdfs/legal.controller.js");
const {
  finallegalPdf,
} = require("../controller/legalTechnicalPdfs/finalLegal.controller.js");
const {
  vettingPdf,
} = require("../controller/legalTechnicalPdfs/vetting.controller.js");
const {
  sevenPagerpdf,
} = require("../controller/legalTechnicalPdfs/SevenPagerLegal.controller.js");
const {
  sevenPagervettingPdf,
} = require("../controller/legalTechnicalPdfs/sevenPagerVetting.controller.js");
const {
  BtsevenPagerLegalpdf,
} = require("../controller/legalTechnicalPdfs/btSevenPagerLegal.controller.js");
const {
  bt7PagervettingPdf,
} = require("../controller/legalTechnicalPdfs/bt7pagerVetting.controller.js");
const {
  executedvettingPdf,
} = require("../controller/legalTechnicalPdfs/executedVetting.controller.js");
const {
  executedfinallegalPdf,
} = require("../controller/legalTechnicalPdfs/executedFinalLegal.controller.js");
const {
  btexecutedvettingPdf,
} = require("../controller/legalTechnicalPdfs/btexecutedVetting.controller.js");
const {
  btexecutedfinallegalPdf,
} = require("../controller/legalTechnicalPdfs/btexecutedFinalLegal.controller.js");

const {
  namDevApplicantLatter,
} = require("../controller/naamDevPdfs/nammDevApplicantLatter.controller.js");

const {
  namdevSectionLatter,
} = require("../controller/naamDevPdfs/naamdevSectionLatter.controller.js");

const {
  namdevLoanPdf,
} = require("../controller/naamDevPdfs/namdevLoan.controller.js");
const { uploadZip } = require("../controller/adminMaster/server.controller.js");
const btDetailsModel = require("../model/finalApproval/btBankDetail.model");



const axios = require("axios");
const path = require("path");
const fs = require("fs");
const FormData = require("form-data");
const { initESign } = require("../services/legality.services.js");
const FinpdfLogo = path.join(
  __dirname,
  "../../../../assets/image/FINCOOPERSLOGO.png"
);
const RatnapdfLogo = path.join(
  __dirname,
  "../../../../assets/image/image_1727359738344.file_1727075312891.ratnaafin (1).png"
);
const growPdfLogo = path.join(
  __dirname,
  "../../../../assets/image/gmcpl logo.png"
);
const {
  growPgDeedPdf,
} = require("../controller/growMoneyPdf/pdDeed.contorller.js");
const {
  growSanctionLetterPdf,
} = require("../controller/growMoneyPdf/sanctionLetter.controller.js");
const {
  growApplicantPdf,
} = require("../controller/growMoneyPdf/aplication.controller.js");
const {
  FincooperPgDeedPdf,
} = require("../controller/fincoopersPdf/pdDeed.contorller.js");
const {
  FincooperApplicantionPdf,
} = require("./fincoopersPdf/aplication.controller.js");
const {
  FincooperLoanAgreement,
} = require("../controller/fincoopersPdf/finLoanAggrement.controller.js");
const {
  FincooperSanctionLetterPdf,
} = require("../controller/fincoopersPdf/sanctionLetter.controller.js");

const {
  GmRmDeedPdf,
} = require("../controller/growMoneyPdf/rmDeed.controller.js");
const {
  GmemDeedPdf,
} = require("../controller/growMoneyPdf/emDeed.controller.js");

const {
  fcplRmDeedPdf} = require("../controller/fincoopersPdf/fcplrmdeeDeed.comtroller.js");
const { google } = require("googleapis");
const credentials = require("../../../../liveSheet.json");
const loanDocumentModel = require("../model/finalApproval/allDocument.model.js");
const lenderModel = require("../model/lender.model.js");
const ExcelJS = require("exceljs");
// const {finalApprovalSheet} = require("../controller/googleSheet.controller.js");
require('dotenv').config();

const {finalApprovalSheet,fileProcessSheet } = require("../controller/finalSanction/faGoogleSheet.controller.js");

// --------Dission box ---------

const DissionBox = async (data) => {
  console.log("Data:", data);

  // Destructure the data with default values set to "pending" if not provided
  const {
    customerId,
    employeeId,
    SendtoPatner,
    finalSanction,
    IncomeSanction,
    preDisbusment,
    postDisbusment,
  } = data;
  try {
    if (!customerId) {
      return {
        status: false,
        message: "customerId is required to create or update the document.",
      };
    }

    // Check if the document already exists
    const existingData = await decisionModel.findOne({ customerId });
    console.log("Existing Data:", existingData);

    // Prepare fields for update, using upcoming data or fallback to existing data
    const updateFields = {
      SendtoPatner: SendtoPatner || existingData?.SendtoPatner || "pending",
      finalSanction: finalSanction || existingData?.finalSanction || "pending",
      IncomeSanction:
        IncomeSanction || existingData?.IncomeSanction || "pending",
      preDisbusment: preDisbusment || existingData?.preDisbusment || "pending",
      postDisbusment:
        postDisbusment || existingData?.postDisbusment || "pending",
    };

    // Update or insert the document
    const result = await decisionModel.findOneAndUpdate(
      { customerId }, // Match by customerId
      {
        $set: updateFields, // Update the provided fields
        $setOnInsert: { employeeId }, // Set employeeId if inserting a new document
      },
      { new: true, upsert: true } // Return the new document after update/insert
    );

    // Return success response
    return {
      status: true,
      message: "Document created or updated successfully.",
      data: result,
    };
  } catch (error) {
    console.error("Error in DissionBox function:", error);
    // Return error response
    return {
      status: false,
      message: "An error occurred while processing the request.",
      error: error.message,
    };
  }
};

const customerLoanType = async (req, res) => {
  try {
    // let { customerId } = req.query;
    const { customerId } = req.query;
    if (!mongoose.isValidObjectId(customerId)) {
      return badRequest(res, "Invalid customerId format");
    }

    const data = await customerModel.findOne({ _id: customerId });
    if (!data) {
      return badRequest(res, "Customer not found");
    }
    const creditPdData = await creditPdModel.findOne({
      customerId: new mongoose.Types.ObjectId(customerId),
    });
    const responseData = {
      LoanAmountRequested:
        creditPdData?.approveLoanDetails?.demandLoanAmountByCustomer || "",
      LoanTenureRequested: creditPdData?.approveLoanDetails?.Tenure || "",
      LoanPurpose: creditPdData?.approveLoanDetails?.endUseOfLoan || "",
      LoanType: creditPdData?.approveLoanDetails?.loanType || "",
      roi: creditPdData?.approveLoanDetails?.ROI || "",
      emi: creditPdData?.approveLoanDetails?.EMI || "",
    };
    return success(res, "loan type details", {
      data: responseData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

// get Dission box data by customerId //

const getDissionBox = async (req, res) => {
  try {
    const { customerId } = req.query;
    if (!customerId) {
      return badRequest(res, "customerId is required");
    }

    //----------FINAL SENCTION DETAILS ------------//
    let finalsanctiondata = false;

    const findDataFromFinal = await finalModel.findOne({ customerId });
    if (!findDataFromFinal) {
      finalsanctiondata = false;
    }

    // Check if all fields are non-empty or non-null
    if (
      findDataFromFinal &&
      findDataFromFinal.finalLoanAmount &&
      findDataFromFinal.loanAmountInWords &&
      findDataFromFinal.tenureInMonth &&
      findDataFromFinal.roi &&
      findDataFromFinal.emiAmount &&
      findDataFromFinal.customerSegment &&
      findDataFromFinal.customerProfile &&
      findDataFromFinal.EndUseOfLoan
    ) {
      finalsanctiondata = true;
    }

    //-----  CAM DETAILS  ----//

    let Cam = true;

    const updatedDetail = await finalModel.findOne({ customerId });
    if (!updatedDetail) {
      Cam = false;
    }
    const cibilData = await cibilModel.findOne({ customerId });
    if (!cibilData) {
      Cam = false;
    }
    const creditPdData = await creditPdModel.findOne({ customerId });
    if (!creditPdData) {
      Cam = false;
    }

    const responseData = {
      sanctionConditionQuery: updatedDetail?.sanctionConditionQuery || [],
      branchPendencyQuery: updatedDetail?.branchPendencyQuery || [],
      deviation: updatedDetail?.deviation || [],
      mitigate: updatedDetail?.mitigate || [],
      department_info: updatedDetail?.department_info || [],
      cibilDetails: cibilData?.applicantCibilDetail || [],
      applicantTotalObligation: cibilData?.applicantTotalObligation || 0,
      applicantTotalObligationMonthly:
        cibilData?.applicantTotalObligationMonthly || 0,
      agricultureIncome: updatedDetail?.agricultureIncome || {},
      milkIncomeCalculation: updatedDetail?.milkIncomeCalculation || {},
      otherIncomeCalculation: updatedDetail?.otherIncomeCalculation || {},
      totalIncomeMonthlyCalculation:
        updatedDetail?.totalIncomeMonthlyCalculation || {},
      department_info: creditPdData?.department_info || [],
      agricultureRatnaIncome: updatedDetail?.agricultureRatnaIncome || {},
      milkRatnaIncomeCalculation:
        updatedDetail?.milkRatnaIncomeCalculation || {},
      otherBusinessIncomeCalculation:
        updatedDetail?.otherBusinessIncomeCalculation || {},
      expensesDetails: updatedDetail?.expensesDetails || {},
      grossCalculation: updatedDetail?.grossCalculation || {},
      netCalculation: updatedDetail?.netCalculation || {},
      Allow_Permission: updatedDetail?.Allow_Permission || true, // Default to true
    };

    // For senction query //

    if (responseData.sanctionConditionQuery?.query) {
      responseData.sanctionConditionQuery.query.forEach((item) => {
        if (!item) {
          Cam = false; // If any query item is invalid, set the flag to false.
        }
      });
    }

    // Check if cibilDetails is valid
    if (
      responseData.cibilDetails.some(
        (item) =>
          !item.loanType ||
          !item.loanAmount ||
          !item.outstandingAmount ||
          !item.emiMonthly ||
          !item.emiAnnual
      )
    ) {
      Cam = false;
    }

    // Check if agricultureRatnaIncome has data
    if (
      !responseData.agricultureRatnaIncome.grossYearlyIncome &&
      !responseData.agricultureRatnaIncome.grossMonthlyIncome
    ) {
      Cam = false;
    }

    if (
      responseData.agricultureRatnaIncome.details &&
      responseData.agricultureRatnaIncome.details.length > 0
    ) {
      responseData.agricultureRatnaIncome.details.forEach((item) => {
        if (
          !item.district ||
          !item.season ||
          !item.AreaCultivationAcres ||
          !item.crop ||
          !item.netIncome
        ) {
          Cam = false;
        }
      });
    }

    // Check if milkRatnaIncomeCalculation has required values
    if (
      !responseData.milkRatnaIncomeCalculation.grossYearlyIncome ||
      !responseData.milkRatnaIncomeCalculation.grossMonthlyIncome ||
      !responseData.milkRatnaIncomeCalculation.totalNoOfMilkGivingCatel ||
      !responseData.milkRatnaIncomeCalculation
        .incomeConsideredPerMilkGivingCatel
    ) {
      Cam = false;
    }

    // Check if otherBusinessIncomeCalculation has required values
    if (
      !responseData.otherBusinessIncomeCalculation.grossBusinessYearlyIncome ||
      !responseData.otherBusinessIncomeCalculation.grossBusinessMonthlyIncome
    ) {
      Cam = false;
    }

    // Check if grossCalculation has required values
    if (
      !responseData.grossCalculation.totalAnnualIncome ||
      !responseData.grossCalculation.agricultureIncome ||
      !responseData.grossCalculation.incomeFromMilk ||
      !responseData.grossCalculation.incomeFromOtherSource
    ) {
      Cam = false;
    }

    // Check if netCalculation has required values
    if (
      // !responseData.netCalculation.totalNetAnnualIncome ||
      !responseData.netCalculation.totalNetAnnualExpenses ||
      !responseData.netCalculation.totalNetMonthlyIncome ||
      !responseData.netCalculation.totalNetAnnualIncome
    ) {
      Cam = false;
    }

    if (!responseData.expensesDetails.grossExpensesFromExisting) {
      Cam = false;
    }

    //-------  UDHYAM CHECK  ----//

    const udhyamKyc = await udhyamKycModel.findOne({ customerId });

    let Udhyam = true; // Default to true, assuming all fields are valid

    if (!udhyamKyc) {
      Udhyam = false; // If no data is found, set Udhyam to false
    } else if (udhyamKyc.udyamDetails) {
      const {
        enterpriseName,
        udyamRegistrationNo,
        organisationType,
        socialCategory,
        dateofIncorporation,
        majorActivity,
        DateofCommencementofProductionBusiness,
        enterpriseType,
        classificationDate,
        classificationYear,
        officialAddressOfEnterprise: {
          FlatDoorBlockNo,
          VillageTown,
          RoadStreetLane,
          state,
          mobile,
          nameofPremisesBuilding,
          block,
          city,
          district,
          pin,
        },
        nationalIndustryClassificationCode: {
          activity,
          date,
          nic2Digit,
          nic4Digit,
          nic5Digit,
          dicName,
          msmeDFO,
          DateofUdyamRegistration,
        },
        unitsDetails: { unitName, flat, building },
      } = udhyamKyc.udyamDetails;

      // Check if any required field is missing or empty
      const isAnyFieldMissing = [
        enterpriseName,
        udyamRegistrationNo,
        organisationType,
        socialCategory,
        dateofIncorporation,
        majorActivity,
        DateofCommencementofProductionBusiness,
        enterpriseType,
        classificationDate,
        classificationYear,
        FlatDoorBlockNo,
        VillageTown,
        RoadStreetLane,
        state,
        mobile,
        nameofPremisesBuilding,
        block,
        city,
        district,
        pin,
        activity,
        date,
        nic2Digit,
        nic4Digit,
        nic5Digit,
        dicName,
        msmeDFO,
        DateofUdyamRegistration,
        unitName,
        flat,
        building,
      ].some((field) => !field || field === "");

      // If any required field is missing or empty, set Udhyam to false
      Udhyam = !isAnyFieldMissing;
    }

    // ---------------   for bank statement  --------------- //

    let Bank = true;
    const existingBankStatement = await bankStatementModel.findOne({
      customerId,
    });

    if (!existingBankStatement) {
      Bank = false;
    } else {
      for (const bankDetail of existingBankStatement.bankDetails) {
        const {
          bankName,
          acHolderName,
          accountNumber,
          ifscCode,
          branchName,
          accountType,
          e_Nachamount,
          mandate_end_date,
          E_Nach_Remarks,
        } = bankDetail;

        if (
          !bankName ||
          !acHolderName ||
          !accountNumber ||
          !ifscCode ||
          !branchName ||
          !accountType
        ) {
          Bank = false;
          break;
        }

        if (
          E_Nach_Remarks !== "false" &&
          (!e_Nachamount || !mandate_end_date)
        ) {
          Bank = false;
          break;
        }
      }
    }

    if (Bank) {
      console.log("All bank details are valid.");
      // Add logic here for valid bank details
    } else {
      console.log("Bank details are incomplete or invalid.");
      // Add logic here for invalid or incomplete bank details
    }

    //  --------------  Chargress Details  -------------- //
    let checkstatuss = true;
    const data = await disbursementModel.findOne({ customerId });
    if (!data) {
      checkstatuss = false;
    }

    const chargesDetails = {
      processingFees: data?.kfsDetails?.processingFees || "",
      documentsCharges: data?.kfsDetails?.documentsCharges || "",
      cersaiCharges: data?.kfsDetails?.cersaiCharges || "",
      insuranceCharges: data?.kfsDetails?.insuranceCharges || "",
      preEmiInterest: data?.kfsDetails?.preEmiInterest || "",
    };

    const kfsDetails = {
      benchmarkinterestRate: data?.kfsDetails?.benchmarkinterestRate || "",
      SpreadInterestRate: data?.kfsDetails?.SpreadInterestRate || "",
      annualPercentageRateAprPercentage:
        data?.kfsDetails?.annualPercentageRateAprPercentage || "",
      epi: data?.kfsDetails?.epi || "",
      noOfEpi: data?.kfsDetails?.noOfEpi || "",
    };

    for (const key in chargesDetails) {
      if (!chargesDetails[key]) {
        checkstatuss = false;
        break;
      }
    }

    // Validate kfsDetails if chargesDetails are valid
    if (checkstatuss) {
      for (const key in kfsDetails) {
        if (!kfsDetails[key]) {
          checkstatuss = false;
          break;
        }
      }
    }

    let finalApproval = "pending";

    // Check conditions
    if (
      Bank == true &&
      checkstatuss == true &&
      Udhyam == true &&
      Cam == true &&
      finalsanctiondata == true
    ) {
      finalApproval = "completed"; // All conditions are true
      console.log("All conditions are satisfied. finalApproval is completed.");
    } else {
      finalApproval = "pending"; // At least one condition is false
      console.log(
        "One or more conditions are not satisfied. finalApproval is pending."
      );
    }

    let Reject = "pending"; // Ensure 'pending' is defined or imported
    const externalVendor = await externalVendorFormModel.findOne({
      customerId,
    });
    if (!externalVendor) {
      Reject = "pending"; // Ensure 'pending' is defined or imported
    }

    if (externalVendor && externalVendor.fileStatus == "inactive") {
      console.log("externalVendor.fileStatus", externalVendor.fileStatus);
      Reject = "completed"; // Ensure 'completed' is defined or imported
    }

    console.log("Reject", Reject);

    // console.log("findDataFromFinal", findDataFromFinal?.esignLink);
    // console.log("gurrantorDetails", gurrantor?.guarantorDetails);
    // console.log("Nach", nach);
    // console.log("Kyc", kyc);
    // console.log("PdcAndBsv", pdcAndBsv);
    // console.log("Stamp", stamp);

    let isFindDataFromFinalValids = false;
    let isKycValid = true; // Start with a default of true

    const dis = await disbursementModel.findOne({ customerId });
    if (!dis) {
      isKycValid = false; // If no disbursement data is found, set isKycValid to false'
      isFindDataFromFinalValids = false;
    }
    const kyc = dis?.kycAndAffidavit?.kycDetail || [];
    const stamp = dis?.estampRequirement || [];
    const nach = dis?.eNachLinkSentToBranch || [];
    let pdcAndBsv = dis?.pdcAndBsv || [];
    const Dis = dis ? dis.postDisbursement : null;

    let newDis = "pending"; // Default to "pending"

    if (Dis) {
      // Check if every field in Dis has data
      const hasAllData = [
        Dis.loanNumber,
        Dis.actualPreEmi,
        Dis.dateOfDisbursement,
        Dis.dateOfFirstEmi,
        Dis.utrNumber1,
        Dis.utrNumber2,
        Dis.disbursementDoneBy,
      ].every((field) => field !== null && field !== undefined && field !== "");

      console.log("hasAllData", hasAllData);

      // Update newDis based on completeness
      newDis = hasAllData == false ? "pending" : "completed";
      console.log("newDis", newDis);
    } else {
      newDis = "pending"; // Dis is null or undefined
    }

    const sanctionData = await sanctionPendencyModel.findOne({ customerId });
    if (!sanctionData) {
      isFindDataFromFinalValids = false;
    }
    if (sanctionData) {
      isFinalSanctionFinal = false;
    }

    const isFinalSanctionCompleted =
      sanctionData &&
      (sanctionData.partnerLoanNo ||
        sanctionData.sanctionDate ||
        sanctionData.loanAgreementDate ||
        sanctionData.partnerCustomerId);

    // Check if required data for preDisbursement is available

    const dataNew = findDataFromFinal?.esignLink;
    // console.log("dataNew", dataNew);
    if (findDataFromFinal?.esignLink) {
      for (let i = 0; i < findDataFromFinal.esignLink.length; i++) {
        const item = findDataFromFinal.esignLink[i];
        if (item.pdf || item.pdfName) {
          isFindDataFromFinalValids = true;
          break;
        }
      }
    }

    // console.log("isFindDataFromFinalValids--------> ", isFindDataFromFinalValids);

    // const isGuarantorDetailsValid = gurrantor?.guarantorDetails.every(
    //   (item) =>
    //     item.bankName &&
    //     item.acHolderName &&
    //     item.accountNumber &&
    //     item.ifscCode &&
    //     item.branchName &&
    //     item.accountType
    // );

    const gurrantor = await guarantorStatementDetails
      .findOne({ customerId })
      .lean();
    let isGuarantorDetailsValid = true;
    if (!gurrantor) {
      isGuarantorDetailsValid = false;
    }
    if (gurrantor?.guarantorDetails) {
      for (let i = 0; i < gurrantor.guarantorDetails.length; i++) {
        const item = gurrantor.guarantorDetails[i];
        if (
          !item.bankName ||
          !item.acHolderName ||
          !item.accountNumber ||
          !item.ifscCode ||
          !item.branchName ||
          !item.accountType
        ) {
          isGuarantorDetailsValid = false;
          break;
        }
      }
    }

    let isNachValid = nach && nach.length > 0;
    if (!isNachValid) {
      isNachValid = false;
    }

    // console.log("isNachValid", isNachValid);

    /// KYC ///

    if (dis?.kycAndAffidavit?.kycDetail) {
      for (let i = 0; i < dis.kycAndAffidavit.kycDetail.length; i++) {
        const kyc = dis.kycAndAffidavit.kycDetail[i];

        // Check if any required field is missing or empty
        if (
          !kyc.type ||
          !kyc.nameAsPerAadhaar ||
          !kyc.nameAsPerPanCard ||
          !kyc.nameAsPerVoter ||
          !kyc.dobAsPerAadhaar ||
          !kyc.dobAsPerPanCard ||
          !kyc.dobAsPerVoter ||
          !kyc.kycUpload ||
          !kyc.dualNameUpload ||
          !kyc.dualDOBUpload
        ) {
          isKycValid = false;
          break;
        }
      }
    }

    // if (dis?.kycAndAffidavit?.kycDetail) {
    //   for (let i = 0; i < dis.kycAndAffidavit.kycDetail.length; i++) {
    //     const kyc = dis.kycAndAffidavit.kycDetail[i];

    //     if (
    //       !kyc.type ||
    //       !kyc.nameAsPerAadhaar ||
    //       !kyc.nameAsPerPanCard ||
    //       !kyc.nameAsPerVoter ||
    //       !kyc.dobAsPerAadhaar ||
    //       !kyc.dobAsPerPanCard ||
    //       !kyc.dobAsPerVoter ||
    //       !kyc.kycUpload ||
    //       !kyc.dualNameUpload ||
    //       !kyc.dualDOBUpload
    //     ) {
    //       isKycValid = false;
    //       break;
    //     }
    //   }
    // } else {

    //   isKycValid = false;
    // }

    // console.log("isKycValid------------ ", isKycValid);

    const isPdcAndBsvValid =
      pdcAndBsv?.applicantChequeAndBSV?.chequeDetail?.some(
        (detail) => detail.trim() !== ""
      ) && // Check that there is a valid non-empty chequeDetail
      pdcAndBsv?.applicantChequeAndBSV?.upload && // Ensure upload is present
      pdcAndBsv?.guarantorChequeAndBSV?.chequeDetail?.some(
        (detail) => detail.trim() !== ""
      ) && // Check that there is a valid non-empty chequeDetail
      pdcAndBsv?.guarantorChequeAndBSV?.upload; // Ensure upload is present

    console.log("isPdcAndBsvValid", isPdcAndBsvValid);

    const isStampValid = stamp.every(
      (item) =>
        item.denominator &&
        item.totalStampNo &&
        item.partnerName &&
        item.vendorName &&
        item.requiredFor
    );

    const isFindDataFromFinalValid =
      isFindDataFromFinalValids &&
      isGuarantorDetailsValid &&
      isNachValid &&
      isKycValid &&
      isPdcAndBsvValid &&
      isStampValid;

    console.log("preDisbursementCompleted", isFindDataFromFinalValid);
    console.log("finalSanctionCompleted", isFindDataFromFinalValids);
    console.log("isNachValid", isNachValid);
    console.log("isKycValid", isKycValid);
    console.log("isPdcAndBsvValid", isPdcAndBsvValid);
    console.log("isStampValid", isStampValid);
    console.log("isGuarantorDetailsValid", isGuarantorDetailsValid);

    // For Final Approval //

    // const fileProcess = await finalScantionModel.findOne({
    //   customerId: customerId,
    // })

    // console.log("fileProcess", fileProcess)

    const datas = await decisionModel.updateOne(
      { customerId }, // Find document by customerId
      {
        $set: {
          Reject: Reject,
          employeeId:
            findDataFromFinal &&
            mongoose.isValidObjectId(findDataFromFinal.employeeId)
              ? findDataFromFinal.employeeId
              : null,
          SendtoPatner: finalApproval,
          finalSanction: isFinalSanctionCompleted ? "completed" : "pending",
          IncomeSanction: findDataFromFinal?.incomesectionLatterUrl
            ? "completed"
            : "pending",
          postDisbusment: newDis,
          preDisbusment: isFindDataFromFinalValid ? "completed" : "pending",
        },
      },
      { upsert: true }
    );

    const updatedData = await decisionModel.findOne({ customerId });
    return success(res, "Dission box data", { datas: updatedData });
  } catch (error) {
    console.error("Error in getDissionBox:", error);
    return unknownError(res, error);
  }
};

//old api
const testecustomerDetailsList = async (req, res) => {
  // <<><><><><><><><><><>
  try {
    const { pageLimit, pageNumber, search } = req.query;
    const { offset, limit } = paginationData(pageLimit, pageNumber);

    console.log("api test------", offset, limit);
    // Build search filter
    const searchFilter = {};
    if (search) {
      searchFilter.$or = [
        { "nearestBranchData.name": { $regex: search, $options: "i" } },
        { "branchDetail.name": { $regex: search, $options: "i" } },
        { "applicantDetail.fullName": { $regex: search, $options: "i" } }, // Applicant name (case-insensitive)
        { customerFinId: { $regex: search, $options: "i" } },
        {
          $expr: {
            $regexMatch: {
              input: { $toString: "$mobileNo" }, // Convert numeric field to string
              regex: search,
              options: "i",
            },
          },
        }, // Mobile number as string (case-insensitive)
      ];
    }
    console.time("API Execution Time");
    const userData = await customerModel.aggregate([
      {
        $lookup: {
          from: "products",
          localField: "productId",
          foreignField: "_id",
          as: "productData",
        },
      },
      // {
      //   $unwind: {
      //     path: "$productData",
      //     preserveNullAndEmptyArrays: true,
      //   },
      // },
      {
        $lookup: {
          from: "employees",
          localField: "employeId",
          foreignField: "_id",
          as: "employeeDetail",
        },
      },
      {
        $unwind: {
          path: "$employeeDetail",
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $lookup: {
          from: "employees",
          localField: "employeeDetail.reportingManagerId",
          foreignField: "_id",
          as: "salesManagerDetails",
        },
      },
      // {
      //   $unwind: {
      //     path: "$salesManagerDetails",
      //     preserveNullAndEmptyArrays: true,
      //   },
      // },
      {
        $lookup: {
          from: "newbranches",
          localField: "employeeDetail.branchId",
          foreignField: "_id",
          as: "branchDetail",
        },
      },
      // {
      //   $unwind: {
      //     path: "$branchDetail",
      //     preserveNullAndEmptyArrays: true,
      //   },
      // },
      {
        $lookup: {
          from: "applicantdetails",
          localField: "_id",
          foreignField: "customerId",
          as: "applicantDetail",
        },
      },
      // {
      //   $unwind: {
      //     path: "$applicantDetail",
      //     preserveNullAndEmptyArrays: true,
      //   },
      // },
      {
        $lookup: {
          from: "cibildetails",
          localField: "_id",
          foreignField: "customerId",
          as: "cibildetailDetail",
        },
      },
      // {
      //   $unwind: {
      //     path: "$cibildetailDetail",
      //     preserveNullAndEmptyArrays: true,
      //   },
      // },
      {
        $lookup: {
          from: "pdformdatas",
          localField: "_id",
          foreignField: "customerId",
          as: "pdData",
        },
      },
      {
        $unwind: {
          path: "$pdData",
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $match: {
          $or: [
            { "pdData.status": "complete" },
            { "pdData.status": "approve" },
          ],
        },
      },
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "_id",
          foreignField: "customerId",
          as: "finalSanctionData",
        },
      },
      {
        $unwind: {
          path: "$finalSanctionData",
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $lookup: {
          from: "employees",
          localField: "finalSanctionData.employeeId",
          foreignField: "_id",
          as: "finalSanctionData.employeeDetail",
        },
      },
      {
        $unwind: {
          path: "$finalSanctionData.employeeDetail",
          preserveNullAndEmptyArrays: true,
        },
      },

      {
        $addFields: {
          isEmployeeIdMissing: {
            $not: { $ifNull: ["$finalSanctionData.employeeId", false] },
          },
        },
      },
      {
        $group: {
          _id: "$_id", // Use a unique field to group by
          document: { $first: "$$ROOT" }, // Retain the first occurrence of each record
        },
      },
      {
        $replaceRoot: { newRoot: "$document" }, // Replace the grouped document as the root
      },
      {
        $sort: {
          isEmployeeIdMissing: -1, // True means missing employeeId
        },
      },
      {
        $project: {
          _id: 1,
          // finalSanctionData: 1,
          finalSanctionData: {
            _id: 1,
            status: 1,
            employeeId: 1,
            "employeeDetail.employeName":
              "$finalSanctionData.employeeDetail.employeName", // Add the employee name
            // Add the selfAssignStatus field based on the presence of employeeId
            selfAssignStatus: {
              $cond: {
                if: { $gt: ["$finalSanctionData.employeeId", null] }, // Check if employeeId exists
                then: true,
                else: false,
              },
            },
          },
          employeId: 1,
          productId: 1,
          customerFinId: 1,
          mobileNo: 1,
          loanAmount: 1,
          roi: 1,
          tenure: 1,
          emi: 1,
          executiveName: 1,
          createdAt: 1,
          updatedAt: 1,
          "pdData.status": 1,
          // "finalSanctionData.employeeDetail.employeName":1,
          "applicantDetail.fullName": 1,
          "applicantDetail.fatherName": 1,
          "applicantDetail.mobileNo": 1,
          "applicantDetail.applicantPhoto": 1,
          "applicantDetail.applicantAddress":
            "$applicantDetail.permanentAddress.addressLine1",
          "cibildetailDetail.applicantCibilScore": 1,
          "nearestBranchData.name": 1,
          "branchDetail.name": 1,
          "productData.productName": 1,
          "employeeDetail.employeName": 1,
          "employeeDetail.userName": 1,
          "employeeDetail.employeUniqueId": 1,
          "salesManagerDetails.employeName": 1,
          "salesManagerDetails.employeUniqueId": 1,
          "salesManagerDetails.userName": 1,
          tvrDetails: {
            income: "7%",
            propertyValue: "50L",
            foir: "30%",
            ltv: "9%",
          },
        },
      },
      // Apply search filter
      { $match: searchFilter },
      {
        $skip: offset,
      },
      {
        $limit: limit,
      },
    ]);

    // Fetch total count without pagination for accurate results
    const totalCount = await customerModel.aggregate([
      {
        $lookup: {
          from: "newbranches",
          localField: "nearestBranchId",
          foreignField: "_id",
          as: "nearestBranchData",
        },
      },
      {
        $lookup: {
          from: "newbranches",
          localField: "branch",
          foreignField: "_id",
          as: "branchDetail",
        },
      },
      {
        $lookup: {
          from: "applicantdetails",
          localField: "_id",
          foreignField: "customerId",
          as: "applicantDetail",
        },
      },
      // {
      //   $unwind: {
      //     path: "$applicantDetail",
      //     preserveNullAndEmptyArrays: true,
      //   },
      // },
      {
        $lookup: {
          from: "cibildetails",
          localField: "_id",
          foreignField: "customerId",
          as: "cibildetailDetail",
        },
      },
      // {
      //   $unwind: {
      //     path: "$cibildetailDetail",
      //     preserveNullAndEmptyArrays: true,
      //   },
      // },
      {
        $lookup: {
          from: "pdformdatas",
          localField: "_id",
          foreignField: "customerId",
          as: "pdData",
        },
      },
      // {
      //   $unwind: {
      //     path: "$pdData",
      //     preserveNullAndEmptyArrays: true,
      //   },
      // },
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "_id",
          foreignField: "customerId",
          as: "finalSanctionData",
        },
      },
      // {
      //   $unwind: {
      //     path: "$finalSanctionData",
      //     preserveNullAndEmptyArrays: true,
      //   },
      // },
      {
        $match: {
          $or: [
            { "pdData.status": "complete" },
            { "pdData.status": "approve" },
          ],
        },
      },
      {
        $group: {
          _id: "$_id", // Use a unique field to group by
          document: { $first: "$$ROOT" }, // Retain the first occurrence of each record
        },
      },
      {
        $replaceRoot: { newRoot: "$document" }, // Replace the grouped document as the root
      },
      {
        $project: {
          "nearestBranchData.name": 1,
          "branchDetail.name": 1,
          "applicantDetail.fullName": 1,
          mobileNo: 1,
        },
      },
      // Match filter for total count
      { $match: searchFilter },
    ]);
    console.timeEnd("API Execution Time");
    const result = await customerModel.aggregate([
      {
        $match: {
          customerFinId: {
            $regex: "FINS",
            $options: "i",
          },
        },
      },
      {
        $lookup: {
          from: "pdformdatas", // Secondary collection name
          localField: "_id", // Field in the customers collection
          foreignField: "customerId", // Field in the  collection
          as: "pdData", // Name of the joined array
          pipeline: [
            // Use pipeline to filter `pdformdatas`
            {
              $match: {
                status: { $in: ["complete", "approve"] }, // Filter on `status`
              },
            },
          ],
        },
      },
    ]);
    console.log(result.length, "result<><><><>");
    // console.log("all res data ===",totalCount)
    success(res, "All customer details List", {
      totalCount: totalCount.length,
      userDataLength: userData.length,
      userData,
    });

    // Execute final approval sheet for each user
    // for (const user of userData) {
    //   await finalApprovalSheet(user._id);
    // }
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

// const testecustomerDetailsList = async (req, res) => {
//   try {
//     const { pageLimit, pageNumber, search } = req.query;
//     const { offset, limit } = paginationData(pageLimit, pageNumber);

//     console.log('api test------',offset, limit)
//     // Build search filter
//     const searchFilter = {};
//     if (search) {
//       searchFilter.$or = [
//         { "nearestBranchData.name": { $regex: search, $options: "i" } },
//         { "branchDetail.name": { $regex: search, $options: "i" } },
//         { "applicantDetail.fullName": { $regex: search, $options: "i" } }, // Applicant name (case-insensitive)
//         { customerFinId: { $regex: search, $options: "i" } },
//         {
//           $expr: {
//             $regexMatch: {
//               input: { $toString: "$mobileNo" }, // Convert numeric field to string
//               regex: search,
//               options: "i",
//             },
//           },
//         }, // Mobile number as string (case-insensitive)
//       ];
//     }
//     console.time("API Execution Time");
//     const userData = await customerModel.aggregate([
//       {
//         $lookup: {
//           from: "pdformdatas",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "pdData",
//         },
//       },
//       {
//         $unwind: {
//           path: "$pdData",
//           preserveNullAndEmptyArrays: true,
//         },
//       },
//       {
//         $match: {
//           $or: [
//             { "pdData.status": "complete" },
//             { "pdData.status": "approve" }
//           ]
//         }
//       },
//       {
//         $lookup: {
//           from: "employees",
//           localField: "pdData.pdId",
//           foreignField: "_id",
//           as: "pdCompleteDetails",
//         },
//       },
//       {
//         $lookup: {
//           from: "employees",
//           localField: "employeId",
//           foreignField: "_id",
//           as: "employeeDetail",
//         },
//       },
//       {
//         $unwind: {
//           path: "$employeeDetail",
//           preserveNullAndEmptyArrays: true,
//         },
//       },
//       {
//         $lookup: {
//           from: "employees",
//           localField: "employeeDetail.reportingManagerId",
//           foreignField: "_id",
//           as: "salesManagerDetails",
//         },
//       },
//       {
//         $lookup: {
//           from: "newbranches",
//           localField: "employeeDetail.branchId",
//           foreignField: "_id",
//           as: "branchDetail",
//         },
//       },
//       {
//         $lookup: {
//           from: "applicantdetails",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "applicantDetail",
//         },
//       },
//       {
//         $lookup: {
//           from: "cibildetails",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "cibildetailDetail",
//         },
//       },
//       {
//         $lookup: {
//           from: "externalvendordynamics",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "externalVendorDetail",
//         },
//       },
//       {
//         $unwind: {
//           path: "$externalVendorDetail",
//           preserveNullAndEmptyArrays: true,
//         },
//       },
//       {
//         $unwind: {
//           path: "$externalVendorDetail.vendors",
//           preserveNullAndEmptyArrays: true,
//         },
//       },
//       {
//         $group: {
//           _id: "$_id",
//           document: { $first: "$$ROOT" },
//           vendors: { $push: "$externalVendorDetail.vendors" },
//         },
//       },
//       {
//         $addFields: {
//           "document.externalVendorDetail": "$vendors",
//         },
//       },
//       {
//         $replaceRoot: { newRoot: "$document" },
//       },
//       {
//         $lookup: {
//           from: "bankstatementkycs",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "bankStatementKycDetail",
//         },
//       },
//       {
//         $addFields: {
//           hasNachoLink: {
//             $cond: {
//               if: {
//                 $anyElementTrue: {
//                   $map: {
//                     input: "$bankStatementKycDetail",
//                     as: "kyc",
//                     in: { $and: [
//                       { $ne: ["$$kyc.Nachlink", ""] },  // Ensure Nachlink is not an empty string
//                       { $ne: ["$$kyc.Nachlink", null] } // Ensure Nachlink is not null
//                     ]}
//                   }
//                 }
//               },
//               then: true,
//               else: false,
//             },
//           },
//         },
//       },
//       {
//         $lookup: {
//           from: "finalsanctiondetaails",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "finalSanctionData",
//         },
//       },
//       {
//         $unwind: {
//           path: "$finalSanctionData",
//           preserveNullAndEmptyArrays: true,
//         },
//       },
//       {
//         $lookup: {
//           from: "employees",
//           localField: "finalSanctionData.employeeId",
//           foreignField: "_id",
//           as: "finalSanctionData.employeeDetail",
//         },
//       },
//       {
//         $unwind: {
//           path: "$finalSanctionData.employeeDetail",
//           preserveNullAndEmptyArrays: true,
//         },
//       },
//       {
//         $addFields: {
//           isEmployeeIdMissing: { $not: { $ifNull: ["$finalSanctionData.employeeId", false] } },
//         },
//       },
//       {
//         $group: {
//           _id: "$_id", // Use a unique field to group by
//           document: { $first: "$$ROOT" }, // Retain the first occurrence of each record
//         },
//       },
//       {
//         $replaceRoot: { newRoot: "$document" }, // Replace the grouped document as the root
//       },
//       {
//         $sort: {
//           isEmployeeIdMissing: -1, // True means missing employeeId
//         },
//       },
//       {
//         $project: {
//           _id: 1,
//           // "externalVendorDetail.vendors" : 1,
//           externalVendorDetail: 1,
//           // "bankStatementKycDetail":1,
//           hasNachoLink:1,
//           // vendors: {
//           //   $map: {
//           //     input: "$externalVendorDetail.vendors",
//           //     as: "vendor",
//           //     in: {
//           //       vendorType: "$$vendor.vendorType",
//           //       statusByVendor: "$$vendor.statusByVendor",
//           //     },
//           //   },
//           // },
//           finalSanctionData: {
//             _id: 1,
//             status: 1,
//             employeeId: 1,
//             "employeeDetail.employeName": "$finalSanctionData.employeeDetail.employeName",
//             "finalSanctionData.finalLoanAmount": "$finalSanctionData.finalLoanAmount",
//             "finalSanctionData.roi": "$finalSanctionData.roi",
//             "finalSanctionData.tenureInMonth": "$finalSanctionData.tenureInMonth",
//             // Add the selfAssignStatus field based on the presence of employeeId
//             selfAssignStatus: {
//               $cond: {
//                 if: { $gt: ["$finalSanctionData.employeeId", null] }, // Check if employeeId exists
//                 then: true,
//                 else: false,
//               },
//             },
//             esignLinkStatus: {
//               $cond: {
//                 if: {
//                   $and: [
//                     { $eq: [{ $type: "$finalSanctionData.esignLink" }, "array"] }, // Check if esignLink is an array
//                     { $gt: [{ $size: { $ifNull: ["$finalSanctionData.esignLink", []] } }, 0] } // Check if the array is not empty
//                   ]
//                 },
//                 then: "Yes",  // Return Yes if esignLink is an array and has elements
//                 else: "No",   // Return No if esignLink is not an array or is empty
//               },
//             },
//           },
//           employeId: 1,
//           productId: 1,
//           customerFinId: 1,
//           mobileNo: 1,
//           // loanAmount: 1,
//           // roi: 1,
//           // tenure: 1,
//           emi: 1,
//           executiveName: 1,
//           createdAt: 1,
//           updatedAt: 1,
//           "pdData.status":1,
//           "pdData.bdCompleteDate":1,
//           "pdCompleteDetails.employeName":1,
//           // "finalSanctionData.employeeDetail.employeName":1,
//           "applicantDetail.fullName": 1,
//           "applicantDetail.fatherName": 1,
//           "applicantDetail.mobileNo": 1,
//           "applicantDetail.applicantPhoto": 1,
//           "applicantDetail.applicantAddress": "$applicantDetail.permanentAddress.addressLine1",
//           "cibildetailDetail.applicantCibilScore": 1,
//           "nearestBranchData.name": 1,
//           "branchDetail.name":1,
//           "productData.productName": 1,
//           "employeeDetail.employeName":1,
//           "employeeDetail.userName":1,
//           "employeeDetail.employeUniqueId":1,
//           "salesManagerDetails.employeName":1,
//           "salesManagerDetails.employeUniqueId":1,
//           "salesManagerDetails.userName":1,
//           // tvrDetails: {
//           //   income: "7%",
//           //   propertyValue: "50L",
//           //   foir: "30%",
//           //   ltv: "9%",
//           // },
//         },
//       },
//       // Apply search filter
//       { $match: searchFilter },
//       {
//         $skip: offset,
//       },
//       {
//         $limit: limit,
//       },
//     ]);

//     // Fetch total count without pagination for accurate results
//     const totalCount = await customerModel.aggregate([
//       {
//         $lookup: {
//           from: "newbranches",
//           localField: "nearestBranchId",
//           foreignField: "_id",
//           as: "nearestBranchData",
//         },
//       },
//       {
//         $lookup: {
//           from: "newbranches",
//           localField: "branch",
//           foreignField: "_id",
//           as: "branchDetail",
//         },
//       },
//       {
//         $lookup: {
//           from: "applicantdetails",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "applicantDetail",
//         },
//       },
//       // {
//       //   $unwind: {
//       //     path: "$applicantDetail",
//       //     preserveNullAndEmptyArrays: true,
//       //   },
//       // },
//       {
//         $lookup: {
//           from: "cibildetails",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "cibildetailDetail",
//         },
//       },
//       // {
//       //   $unwind: {
//       //     path: "$cibildetailDetail",
//       //     preserveNullAndEmptyArrays: true,
//       //   },
//       // },
//       {
//         $lookup: {
//           from: "pdformdatas",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "pdData",
//         },
//       },
//       // {
//       //   $unwind: {
//       //     path: "$pdData",
//       //     preserveNullAndEmptyArrays: true,
//       //   },
//       // },
//       {
//         $lookup: {
//           from: "finalsanctiondetaails",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "finalSanctionData",
//         },
//       },
//       // {
//       //   $unwind: {
//       //     path: "$finalSanctionData",
//       //     preserveNullAndEmptyArrays: true,
//       //   },
//       // },
//       {
//         $match: {
//           $or: [
//             { "pdData.status": "complete" },
//             { "pdData.status": "approve" }
//           ]
//         }
//       },
//       {
//         $group: {
//           _id: "$_id", // Use a unique field to group by
//           document: { $first: "$$ROOT" }, // Retain the first occurrence of each record
//         },
//       },
//       {
//         $replaceRoot: { newRoot: "$document" }, // Replace the grouped document as the root
//       },
//       {
//         $project: {
//           "nearestBranchData.name": 1,
//           "branchDetail.name":1,
//           "applicantDetail.fullName": 1,
//           mobileNo: 1,
//         },
//       },
//       // Match filter for total count
//       { $match: searchFilter },
//     ]);
//     console.timeEnd("API Execution Time");
//     // console.log("all res data ===",totalCount)
//     success(res, "All customer details List", {
//       totalCount: totalCount.length,
//       userDataLength:  userData.length,
//       userData,
//     });

//     // Execute final approval sheet for each user
//     // for (const user of userData) {
//     //   await finalApprovalSheet(user._id);
//     // }

//   } catch (error) {
//     console.log(error);
//     return unknownError(res, error);
//   }
// };

//new updated
const customerDetailsList = async (req, res) => {
  try {
    const { pageLimit, pageNumber, search } = req.query;
    const { offset, limit } = paginationData(pageLimit, pageNumber);

    console.log("api test------", offset, limit);
    // Build search filter
    const searchFilter = {};
    if (search) {
      searchFilter.$or = [
        { "nearestBranchData.name": { $regex: search, $options: "i" } },
        { "branchDetail.name": { $regex: search, $options: "i" } },
        { "applicantDetail.fullName": { $regex: search, $options: "i" } }, // Applicant name (case-insensitive)
        { customerFinId: { $regex: search, $options: "i" } },
        {
          $expr: {
            $regexMatch: {
              input: { $toString: "$mobileNo" }, // Convert numeric field to string
              regex: search,
              options: "i",
            },
          },
        }, // Mobile number as string (case-insensitive)
      ];
    }
    console.time("API Execution Time");

    const results = await customerModel.aggregate([
      // Lookup pdData with filtered pipeline
      {
        $lookup: {
          from: "externalvendordynamics",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: { $eq: ["$customerId", "$$customerId"] },
                statusByCreditPd: { $in: ["complete", "approve"] },
                fileStatus: { $in: ["active"] },
              },
            },
            {
              $project: {
                customerId: 1,
                statusByCreditPd: 1,
                fileStatus: 1,
                creditPdId:1,
                creditPdCompleteDate:1
              },
            },
          ],
          as: "externalVenderData",
        },
      },
      { $match: { externalVenderData: { $ne: [] } } },
      // {
      //   $lookup: {
      //     from: "pdformdatas", // Collection name in MongoDB
      //     let: { 
      //       creditPdIds: {
      //         $map: {
      //           input: "$externalVenderData",
      //           as: "vendor",
      //           in: "$$vendor.creditPdId"
      //         }
      //       }
      //     },
      //     pipeline: [
      //       {
      //         $match: {
      //           $expr: {
      //             $in: [
      //               { $toObjectId: "$_id" }, 
      //               { $map: { input: "$$creditPdIds", as: "id", in: { $toObjectId: "$$id" } } }
      //             ]
      //           }
      //         }
      //       },
      //       {
      //         $project: {
      //           status: 1,
      //           bdCompleteDate: 1,
      //           pdId: 1,
      //           hoStatus: 1,
      //           hoRemark: 1,
      //           defaultStatus: 1,
      //           fileProcessStatus: 1,
      //           branchStatus: 1
      //         }
      //       }
      //     ],
      //     as: "pdData"
      //   }
      // },
      // Match customers with pdData
      // { $match: { pdData: { $ne: [] } } },
      {
        $lookup: {
          from: "employees",
          let: { 
            pdIds: "$externalVenderData.creditPdId"
          },
          pipeline: [
            {
              $match: {
                $expr: {
                  $in: ["$_id", "$$pdIds"]
                }
              }
            },
            {
              $project: {
                employeName: 1,
              }
            }
          ],
          as: "pdCompleteDetails"
        }
      },
      // Lookup employeeDetail and branchDetail in one go
      {
        $lookup: {
          from: "employees",
          let: { employeeId: "$employeId" },
          pipeline: [
            { $match: { $expr: { $eq: ["$_id", "$$employeeId"] } } },
            {
              $project: {
                employeName: 1,
                userName: 1,
                employeUniqueId: 1,
                reportingManagerId: 1,
                branchId: 1,
              },
            },
          ],
          as: "employeeDetail",
        },
      },
      // Lookup salesManagerDetails
      {
        $lookup: {
          from: "employees",
          let: {
            reportingManagerId: {
              $arrayElemAt: ["$employeeDetail.reportingManagerId", 0],
            },
          },
          pipeline: [
            { $match: { $expr: { $eq: ["$_id", "$$reportingManagerId"] } } },
            { $project: { employeName: 1, employeUniqueId: 1, userName: 1 } },
          ],
          as: "salesManagerDetails",
        },
      },
      // Lookup branchDetail
      {
        $lookup: {
          from: "newbranches",
          let: { branchId: { $arrayElemAt: ["$employeeDetail.branchId", 0] } },
          pipeline: [
            { $match: { $expr: { $eq: ["$_id", "$$branchId"] } } },
            { $project: { name: 1 } },
          ],
          as: "branchDetail",
        },
      },
      // Lookup applicantDetail
      {
        $lookup: {
          from: "applicantdetails",
          localField: "_id",
          foreignField: "customerId",
          pipeline: [
            {
              $project: {
                fullName: 1,
                fatherName: 1,
                mobileNo: 1,
                applicantPhoto: 1,
                applicantAddress: "$permanentAddress.addressLine1",
              },
            },
          ],
          as: "applicantDetail",
        },
      },
      // Lookup cibildetailDetail
      {
        $lookup: {
          from: "cibildetails",
          localField: "_id",
          foreignField: "customerId",
          pipeline: [{ $project: { applicantCibilScore: 1 } }],
          as: "cibildetailDetail",
        },
      },
      // Lookup finalSanctionData with nested employee details
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "_id",
          foreignField: "customerId",
          pipeline: [
            {
              $lookup: {
                from: "employees",
                localField: "employeeId",
                foreignField: "_id",
                as: "employeeDetail",
              },
            },
            {
              $addFields: {
                isEmployeeIdMissing: {
                  $not: { $ifNull: ["$employeeId", false] },
                },
                esignLinkStatus: {
                  $cond: [
                    {
                      $and: [
                        { $eq: [{ $type: "$esignLink" }, "array"] },
                        {
                          $gt: [{ $size: { $ifNull: ["$esignLink", []] } }, 0],
                        },
                      ],
                    },
                    "Yes",
                    "No",
                  ],
                },
              },
            },
          ],
          as: "finalSanctionData",
        },
      },
      {
        $lookup: {
          from: "bankstatementkycs",
          localField: "_id",
          foreignField: "customerId",
          pipeline: [
            { $match: { Nachlink: { $nin: ["", null] } } }, // Filter out empty/null Nachlink earlier
            { $project: { Nachlink: 1 } },
          ],
          as: "bankStatementKycDetail",
        },
      },

      // Add field to check if Nachlink exists
      {
        $addFields: {
          hasNachLink: {
            $cond: {
              if: { $gt: [{ $size: "$bankStatementKycDetail" }, 0] },
              then: true,
              else: false,
            },
          },
        },
      },
      {
        $lookup: {
          from: "externalvendordynamics",
          localField: "_id",
          foreignField: "customerId",
          as: "externalVendorDetail",
          pipeline: [
            {
              $project: {
                vendors: {
                  $map: {
                    input: "$vendors",
                    as: "vendor",
                    in: {
                      vendorType: "$$vendor.vendorType",
                      statusByVendor: "$$vendor.statusByVendor",
                    },
                  },
                },
              },
            },
          ],
        },
      },
      // Final Projection
      {
        $project: {
          _id: 1,
          employeId: 1,
          productId: 1,
          customerFinId: 1,
          mobileNo: 1,
          executiveName: 1,
          "externalVenderData.customerId": 1,
          "externalVenderData.statusByCreditPd": 1,
          "externalVenderData.fileStatus": 1,
          "externalVenderData.creditPdCompleteDate": 1,
          // debugPdIds: 1,
          // // pdData:1,
          // "pdData.fileProcessStatus": 1,
          // "pdData.fileProcessStatus": { $arrayElemAt: ["$pdData.fileProcessStatus", 0] },
          // "pdData.branchStatus": { $arrayElemAt: ["$pdData.branchStatus", 0] },
          // "pdData.status": { $arrayElemAt: ["$pdData.status", 0] },
          // "pdData.bdCompleteDate": { $arrayElemAt: ["$pdData.bdCompleteDate", 0] },
          // "pdData.hoStatus": { $arrayElemAt: ["$pdData.hoStatus", 0] },
          // "pdData.hoRemark": { $arrayElemAt: ["$pdData.hoRemark", 0] },
          // "pdData.defaultStatus": { $arrayElemAt: ["$pdData.defaultStatus", 0] },
          // "pdData.fileProcessStatus": 1,
          "pdCompleteDetails.employeName": 1,
          "employeeDetail.employeName": {
            $arrayElemAt: ["$employeeDetail.employeName", 0],
          },
          "employeeDetail.userName": {
            $arrayElemAt: ["$employeeDetail.userName", 0],
          },
          "employeeDetail.employeUniqueId": {
            $arrayElemAt: ["$employeeDetail.employeUniqueId", 0],
          },
          "salesManagerDetails.employeName": {
            $arrayElemAt: ["$salesManagerDetails.employeName", 0],
          },
          "salesManagerDetails.employeUniqueId": {
            $arrayElemAt: ["$salesManagerDetails.employeUniqueId", 0],
          },
          "salesManagerDetails.userName": {
            $arrayElemAt: ["$salesManagerDetails.userName", 0],
          },
          "branchDetail.name": { $arrayElemAt: ["$branchDetail.name", 0] },
          "applicantDetail.fullName": {
            $arrayElemAt: ["$applicantDetail.fullName", 0],
          },
          "applicantDetail.fatherName": {
            $arrayElemAt: ["$applicantDetail.fatherName", 0],
          },
          "applicantDetail.mobileNo": {
            $arrayElemAt: ["$applicantDetail.mobileNo", 0],
          },
          "applicantDetail.applicantPhoto": {
            $arrayElemAt: ["$applicantDetail.applicantPhoto", 0],
          },
          "applicantDetail.applicantAddress": {
            $arrayElemAt: ["$applicantDetail.applicantAddress", 0],
          },
          "cibildetailDetail.applicantCibilScore": {
            $arrayElemAt: ["$cibildetailDetail.applicantCibilScore", 0],
          },
          finalSanctionData: {
            _id: { $arrayElemAt: ["$finalSanctionData._id", 0] },
            status: { $arrayElemAt: ["$finalSanctionData.status", 0] },
            employeeId: { $arrayElemAt: ["$finalSanctionData.employeeId", 0] },
            employeeDetail: {
              employeName: {
                $arrayElemAt: [
                  {
                    $arrayElemAt: [
                      "$finalSanctionData.employeeDetail.employeName",
                      0,
                    ],
                  },
                  0,
                ],
              },
            },
            finalLoanAmount: {
              $arrayElemAt: ["$finalSanctionData.finalLoanAmount", 0],
            },
            roi: { $arrayElemAt: ["$finalSanctionData.roi", 0] },
            tenureInMonth: {
              $arrayElemAt: ["$finalSanctionData.tenureInMonth", 0],
            },
            selfAssignStatus: {
              $cond: {
                if: {
                  $gt: [
                    { $arrayElemAt: ["$finalSanctionData.employeeId", 0] },
                    null,
                  ],
                },
                then: true,
                else: false,
              },
            },
            esignLinkStatus: {
              $cond: {
                if: {
                  $and: [
                    {
                      $eq: [
                        {
                          $type: {
                            $arrayElemAt: ["$finalSanctionData.esignLink", 0],
                          },
                        },
                        "array",
                      ],
                    },
                    {
                      $gt: [
                        {
                          $size: {
                            $ifNull: [
                              {
                                $arrayElemAt: [
                                  "$finalSanctionData.esignLink",
                                  0,
                                ],
                              },
                              [],
                            ],
                          },
                        },
                        0,
                      ],
                    },
                  ],
                },
                then: "Yes",
                else: "No",
              },
            },
          },
          hasNachLink: 1,
          externalVendorDetail: {
            $arrayElemAt: ["$externalVendorDetail.vendors", 0],
          },
        },
      },
      { $match: searchFilter },
      {
        $skip: offset,
      },
      {
        $limit: limit,
      },
    ]);
    // const finalData = await creditPdModel.findOne({customerId: "676f8a4f4e55f86160f1804d"})
    // console.log(finalData,"finalData")
    // Fetch total count without pagination for accurate results
    const totalCount = await customerModel.aggregate([
      // Lookup pdData with filtered pipeline
      {
        $lookup: {
          from: "externalvendordynamics",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: { $eq: ["$customerId", "$$customerId"] },
                statusByCreditPd: { $in: ["complete", "approve"] },
                fileStatus: { $in: ["active"] },
              },
            },
            {
              $project: {
                customerId: 1,
                statusByCreditPd: 1,
                fileStatus: 1,
              },
            },
          ],
          as: "externalVenderData",
        },
      },
      { $match: { externalVenderData: { $ne: [] } } },
      // {
      //   $lookup: {
      //     from: "pdformdatas",
      //     let: { customerId: "$_id" },
      //     pipeline: [
      //       {
      //         $match: {
      //           $expr: {
      //             $and: [
      //               { $eq: ["$customerId", "$$customerId"] },
      //               // { $in: ["$status", ["complete", "approve"]] },
      //             ],
      //           },
      //         },
      //       },
      //       {
      //         $project: {
      //           status: 1,
      //           bdCompleteDate: 1,
      //           pdId: 1,
      //           hoStatus: 1,
      //           hoRemark: 1,
      //           defaultStatus: 1,
      //           fileProcessStatus: 1,
      //           branchStatus: 1,
      //         },
      //       },
      //     ],
      //     as: "pdData",
      //   },
      // },
      { $match: { pdData: { $ne: [] } } },
      { $match: searchFilter },
    ]);

    // Respond with success
    res.status(200).json({
      success: true,
      totalCount: totalCount.length,
      userDataLength: results.length,
      userData: results,
    });
  } catch (error) {
    // Log error and respond with failure
    console.error("Error fetching customer details:", error);
    res.status(500).json({
      success: false,
      message: "An error occurred while fetching customer details.",
    });
  }
};

const dashbordCountUser = async (req, res) => {
  try {
    const result = await customerModel.aggregate([
      // Join pdformdatas to get related pdData
      {
        $lookup: {
          from: "pdformdatas",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: { $eq: ["$customerId", "$$customerId"] },
                hoStatus: { $in: ["complete", "approve"] },
              },
            },
          ],
          as: "pdData",
        },
      },
      // Filter customers with at least one matching pdData
      {
        $match: {
          pdData: { $ne: [] },
        },
      },
      // Join finalsanctiondetaails to check employeeId and preSanctionStatus
      {
        $lookup: {
          from: "finalsanctiondetaails",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: { $eq: ["$customerId", "$$customerId"] },
                employeeId: { $ne: null }, // Ensure employeeId exists
              },
            },
          ],
          as: "finalSanctionData",
        },
      },
      // Add a condition for preSanctionStatus to track "approve" cases
      {
        $addFields: {
          preSanctionApproveCount: {
            $size: {
              $filter: {
                input: "$finalSanctionData",
                as: "item",
                cond: { $eq: ["$$item.preSanctionStatus", "approve"] },
              },
            },
          },
        },
      },
      // Calculate totalCount, selfAssignCount, and preSanctionToBanch
      {
        $group: {
          _id: null,
          totalCount: { $sum: 1 }, // Count all documents with matching pdData
          selfAssignCount: {
            $sum: {
              $cond: [{ $gt: [{ $size: "$finalSanctionData" }, 0] }, 1, 0],
            }, // Count if employeeId exists
          },
          preSanctionToBanch: { $sum: "$preSanctionApproveCount" }, // Count where preSanctionStatus is "approve"
        },
      },
    ]);

    // Extract counts
    const totalCount = result[0]?.totalCount || 0;
    const selfAssignCount = result[0]?.selfAssignCount || 0;
    const totalSanctionToBanch = result[0]?.preSanctionToBanch || 0;

    // Return the counts
    return success(res, "Counts fetched successfully", {
      totalCount,
      selfAssignCount,
      totalSanctionToBanch,
    });
  } catch (error) {
    console.error("Error fetching counts:", error);
    return res.status(500).json({
      message: "An unknown error occurred",
      error: error.message,
    });
  }
};

// dashbord file process api
const customerListFileProcess = async (req, res) => {
  try {
    const { pageLimit, pageNumber, search } = req.query;
    const { offset, limit } = paginationData(pageLimit, pageNumber);

    console.log("api test------", offset, limit);
    // Build search filter
    const searchFilter = {};
    if (search) {
      searchFilter.$or = [
        { "nearestBranchData.name": { $regex: search, $options: "i" } },
        { "branchDetail.name": { $regex: search, $options: "i" } },
        { "applicantDetail.fullName": { $regex: search, $options: "i" } }, // Applicant name (case-insensitive)
        { customerFinId: { $regex: search, $options: "i" } },
        {
          $expr: {
            $regexMatch: {
              input: { $toString: "$mobileNo" }, // Convert numeric field to string
              regex: search,
              options: "i",
            },
          },
        }, // Mobile number as string (case-insensitive)
      ];
    }
    console.time("API Execution Time");

    const results = await customerModel.aggregate([
      // Lookup pdData with filtered pipeline
      {
        $lookup: {
          from: "pdformdatas",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: {
                  $and: [
                    { $eq: ["$customerId", "$$customerId"] }, // Match customerId
                    { $eq: ["$defaultStatus", true] }, // Match defaultStatus as true
                    {
                      $or: [
                        { $eq: ["$status", "complete"] }, // Match status "complete"
                        { $eq: ["$status", "approve"] }, // Match status "approve"
                      ],
                    },
                  ],
                },
              },
            },
            {
              $project: {
                status: 1,
                bdCompleteDate: 1,
                pdId: 1,
                hoStatus: 1,
                hoRemark: 1,
              },
            },
          ],
          as: "pdData",
        },
      },
      // Match customers with pdData
      { $match: { pdData: { $ne: [] } } },
      {
        $lookup: {
          from: "employees",
          let: { pdId: { $arrayElemAt: ["$pdData.pdId", 0] } }, // Lookup using the first pdId
          pipeline: [
            { $match: { $expr: { $eq: ["$_id", "$$pdId"] } } },
            { $project: { employeName: 1 } },
          ],
          as: "pdCompleteDetails",
        },
      },
      // Lookup employeeDetail and branchDetail in one go
      {
        $lookup: {
          from: "employees",
          let: { employeeId: "$employeId" },
          pipeline: [
            { $match: { $expr: { $eq: ["$_id", "$$employeeId"] } } },
            {
              $project: {
                employeName: 1,
                userName: 1,
                employeUniqueId: 1,
                reportingManagerId: 1,
                branchId: 1,
              },
            },
          ],
          as: "employeeDetail",
        },
      },
      // Lookup salesManagerDetails
      {
        $lookup: {
          from: "employees",
          let: {
            reportingManagerId: {
              $arrayElemAt: ["$employeeDetail.reportingManagerId", 0],
            },
          },
          pipeline: [
            { $match: { $expr: { $eq: ["$_id", "$$reportingManagerId"] } } },
            { $project: { employeName: 1, employeUniqueId: 1, userName: 1 } },
          ],
          as: "salesManagerDetails",
        },
      },
      // Lookup branchDetail
      {
        $lookup: {
          from: "newbranches",
          let: { branchId: { $arrayElemAt: ["$employeeDetail.branchId", 0] } },
          pipeline: [
            { $match: { $expr: { $eq: ["$_id", "$$branchId"] } } },
            { $project: { name: 1 } },
          ],
          as: "branchDetail",
        },
      },
      // Lookup applicantDetail
      {
        $lookup: {
          from: "applicantdetails",
          localField: "_id",
          foreignField: "customerId",
          pipeline: [
            {
              $project: {
                fullName: 1,
                fatherName: 1,
                mobileNo: 1,
                applicantPhoto: 1,
                applicantAddress: "$permanentAddress.addressLine1",
              },
            },
          ],
          as: "applicantDetail",
        },
      },
      // Lookup cibildetailDetail
      {
        $lookup: {
          from: "cibildetails",
          localField: "_id",
          foreignField: "customerId",
          pipeline: [{ $project: { applicantCibilScore: 1 } }],
          as: "cibildetailDetail",
        },
      },
      // Lookup finalSanctionData with nested employee details
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "_id",
          foreignField: "customerId",
          pipeline: [
            {
              $lookup: {
                from: "employees",
                localField: "employeeId",
                foreignField: "_id",
                as: "employeeDetail",
              },
            },
            {
              $addFields: {
                isEmployeeIdMissing: {
                  $not: { $ifNull: ["$employeeId", false] },
                },
                esignLinkStatus: {
                  $cond: [
                    {
                      $and: [
                        { $eq: [{ $type: "$esignLink" }, "array"] },
                        {
                          $gt: [{ $size: { $ifNull: ["$esignLink", []] } }, 0],
                        },
                      ],
                    },
                    "Yes",
                    "No",
                  ],
                },
              },
            },
          ],
          as: "finalSanctionData",
        },
      },
      {
        $lookup: {
          from: "bankstatementkycs",
          localField: "_id",
          foreignField: "customerId",
          pipeline: [
            { $match: { Nachlink: { $nin: ["", null] } } }, // Filter out empty/null Nachlink earlier
            { $project: { Nachlink: 1 } },
          ],
          as: "bankStatementKycDetail",
        },
      },

      // Add field to check if Nachlink exists
      {
        $addFields: {
          hasNachLink: {
            $cond: {
              if: { $gt: [{ $size: "$bankStatementKycDetail" }, 0] },
              then: true,
              else: false,
            },
          },
        },
      },
      {
        $lookup: {
          from: "externalvendordynamics",
          localField: "_id",
          foreignField: "customerId",
          as: "externalVendorDetail",
          pipeline: [
            {
              $project: {
                vendors: {
                  $map: {
                    input: "$vendors",
                    as: "vendor",
                    in: {
                      vendorType: "$$vendor.vendorType",
                      statusByVendor: "$$vendor.statusByVendor",
                    },
                  },
                },
              },
            },
          ],
        },
      },
      // Final Projection
      {
        $project: {
          _id: 1,
          employeId: 1,
          productId: 1,
          customerFinId: 1,
          mobileNo: 1,
          executiveName: 1,
          "pdData.status": 1,
          "pdData.bdCompleteDate": 1,
          "pdCompleteDetails.employeName": 1,
          "pdData.hoStatus": 1,
          "pdData.hoRemark": 1,
          "employeeDetail.employeName": {
            $arrayElemAt: ["$employeeDetail.employeName", 0],
          },
          "employeeDetail.userName": {
            $arrayElemAt: ["$employeeDetail.userName", 0],
          },
          "employeeDetail.employeUniqueId": {
            $arrayElemAt: ["$employeeDetail.employeUniqueId", 0],
          },
          "salesManagerDetails.employeName": {
            $arrayElemAt: ["$salesManagerDetails.employeName", 0],
          },
          "salesManagerDetails.employeUniqueId": {
            $arrayElemAt: ["$salesManagerDetails.employeUniqueId", 0],
          },
          "salesManagerDetails.userName": {
            $arrayElemAt: ["$salesManagerDetails.userName", 0],
          },
          "branchDetail.name": { $arrayElemAt: ["$branchDetail.name", 0] },
          "applicantDetail.fullName": {
            $arrayElemAt: ["$applicantDetail.fullName", 0],
          },
          "applicantDetail.fatherName": {
            $arrayElemAt: ["$applicantDetail.fatherName", 0],
          },
          "applicantDetail.mobileNo": {
            $arrayElemAt: ["$applicantDetail.mobileNo", 0],
          },
          "applicantDetail.applicantPhoto": {
            $arrayElemAt: ["$applicantDetail.applicantPhoto", 0],
          },
          "applicantDetail.applicantAddress": {
            $arrayElemAt: ["$applicantDetail.applicantAddress", 0],
          },
          "cibildetailDetail.applicantCibilScore": {
            $arrayElemAt: ["$cibildetailDetail.applicantCibilScore", 0],
          },
          finalSanctionData: {
            _id: { $arrayElemAt: ["$finalSanctionData._id", 0] },
            status: { $arrayElemAt: ["$finalSanctionData.status", 0] },
            employeeId: { $arrayElemAt: ["$finalSanctionData.employeeId", 0] },
            employeeDetail: {
              employeName: {
                $arrayElemAt: [
                  {
                    $arrayElemAt: [
                      "$finalSanctionData.employeeDetail.employeName",
                      0,
                    ],
                  },
                  0,
                ],
              },
            },
            finalLoanAmount: {
              $arrayElemAt: ["$finalSanctionData.finalLoanAmount", 0],
            },
            roi: { $arrayElemAt: ["$finalSanctionData.roi", 0] },
            tenureInMonth: {
              $arrayElemAt: ["$finalSanctionData.tenureInMonth", 0],
            },
            selfAssignStatus: {
              $cond: {
                if: {
                  $gt: [
                    { $arrayElemAt: ["$finalSanctionData.employeeId", 0] },
                    null,
                  ],
                },
                then: true,
                else: false,
              },
            },
            esignLinkStatus: {
              $cond: {
                if: {
                  $and: [
                    {
                      $eq: [
                        {
                          $type: {
                            $arrayElemAt: ["$finalSanctionData.esignLink", 0],
                          },
                        },
                        "array",
                      ],
                    },
                    {
                      $gt: [
                        {
                          $size: {
                            $ifNull: [
                              {
                                $arrayElemAt: [
                                  "$finalSanctionData.esignLink",
                                  0,
                                ],
                              },
                              [],
                            ],
                          },
                        },
                        0,
                      ],
                    },
                  ],
                },
                then: "Yes",
                else: "No",
              },
            },
          },
          hasNachLink: 1,
          externalVendorDetail: {
            $arrayElemAt: ["$externalVendorDetail.vendors", 0],
          },
        },
      },
      { $match: searchFilter },
      {
        $skip: offset,
      },
      {
        $limit: limit,
      },
    ]);

    //     // Fetch total count without pagination for accurate results
    const totalCount = await customerModel.aggregate([
      {
        $lookup: {
          from: "newbranches",
          localField: "nearestBranchId",
          foreignField: "_id",
          as: "nearestBranchData",
        },
      },
      {
        $lookup: {
          from: "newbranches",
          localField: "branch",
          foreignField: "_id",
          as: "branchDetail",
        },
      },
      {
        $lookup: {
          from: "applicantdetails",
          localField: "_id",
          foreignField: "customerId",
          as: "applicantDetail",
        },
      },
      {
        $lookup: {
          from: "cibildetails",
          localField: "_id",
          foreignField: "customerId",
          as: "cibildetailDetail",
        },
      },
      {
        $lookup: {
          from: "pdformdatas",
          localField: "_id",
          foreignField: "customerId",
          as: "pdData",
        },
      },
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "_id",
          foreignField: "customerId",
          as: "finalSanctionData",
        },
      },
      // {
      //   $match: {
      //     $or: [
      //       { "pdData.defaultStatus": true },
      //       // { "pdData.status": "approve" }
      //     ]
      //   }
      // },
      {
        $match: {
          pdData: {
            $elemMatch: {
              defaultStatus: true,
              $or: [{ status: "complete" }, { status: "approve" }],
            },
          },
        },
      },
      {
        $group: {
          _id: "$_id", // Use a unique field to group by
          document: { $first: "$$ROOT" }, // Retain the first occurrence of each record
        },
      },
      {
        $replaceRoot: { newRoot: "$document" }, // Replace the grouped document as the root
      },
      {
        $project: {
          "nearestBranchData.name": 1,
          "branchDetail.name": 1,
          "applicantDetail.fullName": 1,
          mobileNo: 1,
        },
      },
      // Match filter for total count
      { $match: searchFilter },
    ]);
    // Extract totalCount and userData from results
    // const totalCount = results[0].totalCount[0]?.count || 0;
    // const userData = results[0].paginatedResults;
    console.log(totalCount, "totalCount<><><><><><><><><><>");
    // Respond with success
    return success(res, "customerDetails", {
      totalCount: totalCount.length,
      userDataLength: results.length,
      userData: results,
    });
  } catch (error) {
    // Log error and respond with failure
    console.error("Error fetching customer details:", error);
    res.status(500).json({
      success: false,
      message: "An error occurred while fetching customer details.",
    });
  }
};

const customerDetails = async (req, res) => {
  try {
    let { customerId } = req.params;
    customerId = new mongoose.Types.ObjectId(req.params.customerId);
    const userData = await customerModel.aggregate([
      {
        $match: {
          _id: customerId,
        },
      },
      {
        $lookup: {
          from: "employees",
          localField: "employeId",
          foreignField: "_id",
          as: "salesPersonDetail",
        },
      },
        {
          $unwind: {
            path: "$salesPersonDetail",
            preserveNullAndEmptyArrays: true,
          },
        },
      {
        $lookup: {
          from: "newbranches",
          localField: "branch",
          foreignField: "_id",
          as: "branchData",
        },
      },
        {
          $unwind: {
            path: "$branchData",
            preserveNullAndEmptyArrays: true,
          },
        },
      
      {
        $lookup: {
          from: "products",
          localField: "productId",
          foreignField: "_id",
          as: "productData",
        },
      },
      {
        $unwind: {
          path: "$productData",
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $lookup: {
          from: "newbranches",
          localField: "nearestBranchId",
          foreignField: "_id",
          as: "nearestBranchData",
        },
      },
      {
        $lookup: {
          from: "applicantdetails",
          localField: "_id",
          foreignField: "customerId",
          as: "applicantDetail",
        },
      },
      {
        $unwind: {
          path: "$applicantDetail",
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $lookup: {
          from: "cibildetails",
          localField: "_id",
          foreignField: "customerId",
          as: "cibildetailDetail",
        },
      },
      {
        $unwind: {
          path: "$cibildetailDetail",
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $lookup: {
          from: "externalvendordynamics",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: {
                  $and: [
                    { $eq: ["$customerId", "$$customerId"] },
                    { $ne: [{ $type: "$customerId" }, "missing"] }
                  ]
                }
              }
            }
          ],
          as: "pdDetail"
        }
      },
      {
        $unwind: {
          path: "$pdDetail",
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $lookup: {
          from: "employees",
          let: { creditPdId: "$pdDetail.creditPdId" },
          pipeline: [
            {
              $match: {
                $expr: {
                  $and: [
                    { $eq: ["$_id", "$$creditPdId"] },
                    { $ne: [{ $type: "$$creditPdId" }, "missing"] }
                  ]
                }
              }
            }
          ],
          as: "creditPdDetail"
        }
      },
      {
        $unwind: {
          path: "$creditPdDetail",
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $lookup: {
          from: "finalsanctiondetaails",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: {
                  $and: [
                    { $eq: ["$customerId", "$$customerId"] },
                    { $ne: [{ $type: "$customerId" }, "missing"] }
                  ]
                }
              }
            }
          ],
          as: "finalSanction"
        }
      },
      {
        $unwind: {
          path: "$finalSanction",
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $lookup: {
          from: "lenders",
          let: { partnerId: "$finalSanction.partnerId" },
          pipeline: [
            {
              $match: {
                $expr: {
                  $and: [
                    { $eq: ["$_id", "$$partnerId"] },
                    { $ne: [{ $type: "$$partnerId" }, "missing"] }
                  ]
                }
              }
            }
          ],
          as: "partnerDetail"
        }
      },
      {
        $unwind: {
          path: "$partnerDetail",
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $project: {
          _id: 1,
          employeId: 1,
          productId: 1,
          customerFinId: 1,
          mobileNo: 1,
          loanAmount: 1,
          roi: 1,
          tenure: 1,
          emi: 1,
          executiveName: 1,
          createdAt: 1,
          updatedAt: 1,
          "applicantDetail.fullName": 1,
          "applicantDetail.mobileNo": 1,
          "applicantDetail.applicantPhoto": 1,
          "cibildetailDetail.applicantCibilScore": 1,
          "salesPersonDetail.employeName":1,
          "creditPdDetail.employeName":1,
          "partnerDetail.fullName":1,
          "branchData.name":1,
          "productData.productName": 1,
          tvrDetails: {
            income: "7%",
            propertyValue: "50L",
            foir: "30%",
            ltv: "9%",
          },
        },
      },
      {
        $group: {
          _id: "$_id", // Group by customer ID to remove duplicates
          employeId: { $first: "$employeId" },
          productId: { $first: "$productId" },
          customerFinId: { $first: "$customerFinId" },
          mobileNo: { $first: "$mobileNo" },
          loanAmount: { $first: "$loanAmount" },
          roi: { $first: "$roi" },
          tenure: { $first: "$tenure" },
          emi: { $first: "$emi" },
          executiveName: { $first: "$executiveName" },
          createdAt: { $first: "$createdAt" },
          updatedAt: { $first: "$updatedAt" },
          applicantDetail: { $first: "$applicantDetail" },
          cibildetailDetail: { $first: "$cibildetailDetail" },
          salesPersonDetail:{$first: "$salesPersonDetail" },
          creditPdDetail:{$first: "$creditPdDetail" },
          partnerDetail:{$first: "$partnerDetail" },
          branchName:{$first:"$branchData"},
          productData: { $first: "$productData" },
          tvrDetails: { $first: "$tvrDetails" },
        },
      },
    ]);

    return success(res, "customer details", {
      userData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

// ----------------DEAL SUMMARY AC ,ACG , ACC , ACCG -------------------

async function dealSummaryType(req, res) {
  try {
    const { customerId } = req.query;

    if (!customerId) {
      return badRequest(res, "customerId is required");
    }

    // Check in Customer Detail
    const customer = await customerModel.findById(customerId);
    if (!customer) {
      return badRequest(res, "Customer not found");
    }

    // Check in Applicant Model
    const applicant = await applicantModel.findOne({ customerId });

    // Check in Co-Applicant Model
    const coApplicantCount = await coApplicantModel.countDocuments({ customerId });

    // Check in Guarantor Model
    const guarantorCount = await guarantorModel.countDocuments({ customerId });

    // Initialize an empty type array
    let typeArray = [];

    if (applicant) typeArray.push("A");
    if (coApplicantCount > 0) typeArray.push("C".repeat(coApplicantCount));
    if (guarantorCount > 0) typeArray.push("G".repeat(guarantorCount));

    // Generate type string
    const type = typeArray.join("");

    if (!type) {
      return badRequest(res, "Customer ID not found in any model");
    }

    const selectionData = await final.findOne({ customerId });
    let newSelectionData;
    
    // Check if selectionData exists before accessing pdfSelection
    if (!selectionData || !selectionData?.pdfSelection) {
      console.log("in if block");
    
      newSelectionData = await final.findOneAndUpdate(
        { customerId },
        { $set: { pdfSelection: type } },
        { new: true, upsert: true } // upsert ensures a document is created if it doesn't exist
      );
    }
    
    // Ensure selectionData is always defined
    const pdfSelectionValue = newSelectionData?.pdfSelection || selectionData?.pdfSelection || type;
    
    // console.log(pdfSelectionValue, "pdfSelectionValue<<>><<>>");
    
    return success(res, "Customer Deal Summary Type", 
       pdfSelectionValue.toUpperCase()
    );

  } catch (error) {
    console.error("Error in dealSummaryType:", error);
    return unknownError(res, error);
  }
}


const customerApplicantDetail = async (req, res) => {
  try {
    let { customerId } = req.query;
    customerId = new mongoose.Types.ObjectId(customerId);
    const data = await applicantModel.findOne({ customerId });
    const pdformdatasDetail = await creditPdModel.findOne({ customerId });
    const udyamdatasDetail = await udyamModel.findOne({ customerId });
    const camReportDetails = await camReportModel.findOne({ customerId });
    const civilDetails = await cibilModel.findOne({ customerId });

    const responseData = {
      ApplicantDetails: {
        ApplicantType: data?.applicantType || "",
        bussinessType: data?.businessType || " ",
        caste: data?.caste || "",
        noOfDependentWithCustomer: data?.noOfDependentWithCustomer || "",
        occupation: data?.occupation || "",
        residenceType: data?.residenceType || "",
        applicantPhoto: data?.applicantPhoto || "",
        fullName: data?.fullName || "",
        fatherName: data?.fatherName || "",
        motherName: data?.motherName || "",
        spouseName: data?.spouseName || "",
        dob: data?.dob || "",
        age: data?.age || "",
        gender: data?.gender || "",
        maritalStatus: data?.maritalStatus || "",
        educationalDetails: data?.education || "",
        religion: data?.religion || "",
        nationality: "Indian" || "",
        category: data?.category || "",
      },
      kycDetailsOf: {
        panNo: data?.panNo || "",
        aadharNo: data?.aadharNo || "",
        voterIdNo: data?.voterIdNo || "",
        udyamRegistrationNo:
          udyamdatasDetail?.udyamDetails?.udyamRegistrationNo || "",
          
      },
      kycUpload: {
        aadharFrontImage:data?.kycUpload?.aadharFrontImage || "",
        aadharBackImage: data?.kycUpload?.aadharBackImage || "",
        panFrontImage: data?.kycUpload?.panFrontImage || "",
        drivingLicenceImage: data?.kycUpload?.drivingLicenceImage || "",
        voterIdImage: data?.kycUpload?.voterIdImage || "",
      },
      
      contactInformation: {
        mobileNo: data?.mobileNo || "",
        mobileNoTwo: data?.alternateMobileNo || "",
        email: data?.email || "",
      },
      persnalDetails: {
        religion: data?.religion || "",
        nationality: data?.nationality || "",
        category: data?.category || "",
      },
      // permanentInformation: {
      //   fullAddress: data?.permanentAddress?.addressLine1 || "",
      //   addressLine2: data?.permanentAddress?.addressLine2 || "",
      //   presentAddress: data?.localAddress?.addressLine1 || "",
      //   landmark: pdformdatasDetail?.applicant?.houseLandMark || "",
      //   city: data?.permanentAddress?.city || "",
      //   state: data?.permanentAddress?.state || "",
      //   district: data?.permanentAddress?.district || "",
      //   pinCode: data?.permanentAddress?.pinCode || "",
      //   noOfyearsAtCurrentAddress:
      //     pdformdatasDetail?.applicant?.noOfyearsAtCurrentAddress || "",
      //   country: "India",
      // },
      presentInformation: {
        addressAsPerAdhar: data?.localAddress?.addressLine1 || "",
        addressLine2: data?.localAddress?.addressLine2 || "",
        landmark: data?.houseLandMark || "",
        city: data?.localAddress?.city || "",
        state: data?.localAddress?.state || "",
        district: data?.localAddress?.district || "",
        pinCode: data?.localAddress?.pinCode || "",
        noOfyearsAtCurrentAddress:
          data?.noOfyearsAtCurrentAddress || "",
        country: "India",
        residenceType: data?.residenceType || "",
      },
      basicInformation: {
        applicantCibilScore: civilDetails?.applicantCibilScore || "",
      },
      accountSummary: {
        totalAccounts: civilDetails?.applicantTotalAccount || "",
        overdueAccounts: civilDetails?.applicantOverdueAccount || "",
        zeroBalanceAccount: civilDetails?.applicantZeroBalanceAccount || "",
      },
      financialOverview: {
        HighCreditAndSanctionAmount:
          civilDetails?.applicantHighCreditSanctionAmount || "",
        TotalCurrentOutstanding:
          civilDetails?.applicantcurrentOutstanding || "",
        TotalOverdueAmount: civilDetails?.applicantTotalOverDueAmount || "",
        totalNoOfEnquiry: civilDetails?.applicantNumberOfEnquiry || "",
      },
      educationAndOccupation: {
        education: data?.education || "",
        occupation: camReportDetails?.applicationInformation?.occupation || "",
        monthlyIncome:
          camReportDetails?.applicationInformation?.monthlyIncome || "",
        otherMonthlyIncome:
          camReportDetails?.applicationInformation?.otherMonthlyIncome || "",
        sourceOfOtherIncome:
          camReportDetails?.applicationInformation?.sourceOfOtherIncome || "",
        annualIncome:
          camReportDetails?.applicationInformation?.annualIncome || "",
        totalHouseHoldExpenses:
          camReportDetails?.applicationInformation?.totalHouseHoldExpenses ||
          "",
      },
    };

    return success(res, "Customer applicant details", {
      data: responseData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

// const customerCoApplicantDetail = async (req, res) => {
//   try {
//     const { customerId } = req.query;
//     const data = await coApplicantModel.find({ customerId });
//     const pdformdatasDetail = await creditPdModel.findOne({ customerId });
//     const camReportDetails = await camReportModel.findOne({ customerId });
//     const udhyamKycData = await udhyamKycModel.findOne({ customerId });
//     // console.log(data, "datadatadata");

//     const coApplicantDetailsArray = (
//       pdformdatasDetail?.co_Applicant &&
//       pdformdatasDetail.co_Applicant.length > 0
//         ? pdformdatasDetail.co_Applicant
//         : [{}]
//     ).map((value = {}, index) => {
//       return {
//         [`coApplicantDetails`]: {
//           _id :data?.[index]?._id,
//           customerId:data?.[index]?.customerId,
//           ApplicantType: value.coApplicantType || "",
//           bussinessType: value.businessType || "",
//           coApplicantPhoto: data?.[index]?.coApplicantPhoto || "",
//           fullName: data?.[index]?.fullName || "",
//           fatherName: data?.[index]?.fatherName || "",
//           motherName: data?.[index]?.motherName || "",
//           dob: data?.[index]?.dob || "",
//           age: data?.[index]?.age || "",
//           gender: data?.[index]?.gender || "",
//           maritalStatus: data?.[index]?.maritalStatus || "",
//           educationDetails: data?.[index]?.education || "",
//           relationWithApplicant: data?.[index]?.relationWithApplicant || "",
//           religion: data?.[index]?.religion || "",
//           nationality: "indian",
//           caste: value.caste || "",
//           category: data?.[index]?.category || "",
//           occupation: value?.occupation || "",
          
//           contactInformation: {
//             mobileNo: data?.[index]?.mobileNo || "",
//             mobileNoTwo: value.alternateMobileNo || "",
//             email: data?.[index]?.email || "",
//           },
    
//           kycDetails: {
//             udyamRegistrationNo: "",
//             docType: data?.[index]?.docType || "",
//             aadharNo: data?.[index]?.aadharNo || "",
//             docNo: data?.[index]?.docNo || "",
//           },
//           kycUpload: {
//             aadharFrontImage: data?.[index]?.kycUpload?.aadharFrontImage || "",
//             aadharBackImage: data?.[index]?.kycUpload?.aadharBackImage || "",
//             docImage: data?.[index]?.kycUpload?.docImage || "",
//           },
    
//           presentAddressInformation: {
//             AddressAsPerAdhar: data?.[index]?.localAddress?.addressLine1 || "",
//             addressLine2: data?.[index]?.localAddress?.addressLine2 || "",
//             landmark: value.houseLandMark || "",
//             nameOfCity: data?.[index]?.localAddress?.city || "",
//             city: data?.[index]?.localAddress?.city || "",
//             state: data?.[index]?.localAddress?.state || "",
//             districtName: data?.[index]?.localAddress?.district || "",
//             pinCode: data?.[index]?.localAddress?.pinCode || "",
//             residenceType: value?.residenceType || "",
//             noOfyearsAtCurrentAddress: value.noOfyearsAtCurrentAddress || "",
//             country: "India",
//           },
    
//           employeDetails: {
//             education: data?.[index]?.education || "",
//             occupation:
//               camReportDetails?.coApplicationInformation?.[index]?.occupation || "",
//             monthlyIncome:
//               camReportDetails?.coApplicationInformation?.[index]?.monthlyIncome ||
//               "",
//             otherMonthlyIncome:
//               camReportDetails?.coApplicationInformation?.[index]
//                 ?.otherMonthlyIncome || "",
//             sourceOfOtherIncome:
//               camReportDetails?.coApplicationInformation?.[index]
//                 ?.sourceOfOtherIncome || "",
//             annualIncome:
//               camReportDetails?.coApplicationInformation?.[index]?.annualIncome ||
//               "",
//             totalHouseHoldExpenses:
//               camReportDetails?.coApplicationInformation?.[index]
//                 ?.totalHouseHoldExpenses || "",
//           },
//         },
//       };
//     });
    
//     const responseData = coApplicantDetailsArray.length > 0 ? coApplicantDetailsArray : [{}];
    
//     // Combine array into an object
//     // const responseData = coApplicantDetailsArray.reduce(
//     //   (acc, curr) => Object.assign(acc, curr),
//     //   {}
//     // );

//     if (!Object.keys(responseData).length) {
//       responseData = {
//         ApplicantType: "",
//         bussinessType: "",
//         fullName: "",
//         fatherName: "",
//         motherName: "",
//         dob: "",
//         age: "",
//         gender: "",
//         maritalStatus: "",
//         educationDetails: "",
//         relationWithApplicant: "",
//         religion: "",
//         nationality: "",
//         category: "",
//         caste: "",
//         occupation: "",
//         residenceType: "",

//         contactInformation: {
//           mobileNo: "",
//           mobileNoTwo: "",
//           email: "",
//         },

//         kycDetails: {
//           udyamRegistrationNo: "",
//           docType: "",
//           aadharNo: "",
//           docNo: "",
//         },

//         permanentAddressInformation: {
//           AddressAsPerAdhar: "",
//           // landmark: "",
//           nameOfCity: "",
//           city: "",
//           state: "",
//           districtName: "",
//           pinCode: "",
//           noOfyearsAtCurrentAddress: "",
//           country: "India",
//           residenceType: "",
//         },

//         presentAddressInformation: {
//           presentAddress: "",
//           fullAddress: "",
//           landmark: "",
//           nameOfCity: "",
//           addressLine1: "",
//           addressLine2: "",
//           city: "",
//           state: "",
//           districtName: "",
//           pinCode: "",
//           noOfyearsAtCurrentAddress: "",
//           country: "India",
//         },

//         employeDetails: {
//           education: "",
//           occupation: "",
//           monthlyIncome: "",
//           otherMonthlyIncome: "",
//           sourceOfOtherIncome: "",
//           annualIncome: "",
//           totalHouseHoldExpenses: "",
//         },
//       };
//     }

//     return success(res, "Customer co-applicant details", {
//       data: responseData,
//     });
//   } catch (error) {
//     console.log(error);
//     return unknownError(res, error);
//   }
// };


const customerCoApplicantDetail = async (req, res) => {
  try {
    const { customerId } = req.query;
    const data = await coApplicantModel.find({ customerId });
    const pdformdatasDetail = await creditPdModel.findOne({ customerId });
    const camReportDetails = await camReportModel.findOne({ customerId });

    const coApplicantDetailsArray = data.map((value, index) => {
      const pdDetail = pdformdatasDetail?.co_Applicant?.[index] || {};
      const camDetail = camReportDetails?.coApplicationInformation?.[index] || {};

      return {
        [`coApplicantDetails`]: {
          _id: value?._id,
          customerId: value?.customerId,
          ApplicantType: value.coApplicantType || "",
          bussinessType: value.businessType || "",
          coApplicantPhoto: value?.coApplicantPhoto || "",
          fullName: value?.fullName || "",
          fatherName: value?.fatherName || "",
          motherName: value?.motherName || "",
          dob: value?.dob || "",
          age: value?.age || "",
          gender: value?.gender || "",
          maritalStatus: value?.maritalStatus || "",
          educationDetails: value?.education || "",
          relationWithApplicant: value?.relationWithApplicant || "",
          religion: value?.religion || "",
          nationality: "Indian",
          caste: value.caste || "",
          category: value?.category || "",
          occupation: value?.occupation || "",
          
          contactInformation: {
            mobileNo: value?.mobileNo || "",
            mobileNoTwo: value?.alternateMobileNo || "",
            email: value?.email || "",
          },

          kycDetails: {
            udyamRegistrationNo: "",
            docType: value?.docType || "",
            aadharNo: value?.aadharNo || "",
            docNo: value?.docNo || "",
          },

          kycUpload: {
            aadharFrontImage: value?.kycUpload?.aadharFrontImage || "",
            aadharBackImage: value?.kycUpload?.aadharBackImage || "",
            docImage: value?.kycUpload?.docImage || "",
          },

          presentAddressInformation: {
            AddressAsPerAdhar: value?.localAddress?.addressLine1 || "",
            addressLine2: value?.localAddress?.addressLine2 || "",
            landmark: value.houseLandMark || "",
            nameOfCity: value?.localAddress?.city || "",
            city: value?.localAddress?.city || "",
            state: value?.localAddress?.state || "",
            districtName: value?.localAddress?.district || "",
            pinCode: value?.localAddress?.pinCode || "",
            residenceType: value?.residenceType || "",
            noOfyearsAtCurrentAddress: value?.noOfyearsAtCurrentAddress || "",
            country: "India",
          },

          employeDetails: {
            education: value?.education || "",
            occupation: camDetail?.occupation || "",
            monthlyIncome: camDetail?.monthlyIncome || "",
            otherMonthlyIncome: camDetail?.otherMonthlyIncome || "",
            sourceOfOtherIncome: camDetail?.sourceOfOtherIncome || "",
            annualIncome: camDetail?.annualIncome || "",
            totalHouseHoldExpenses: camDetail?.totalHouseHoldExpenses || "",
          },
        },
      };
    });

    const responseData = coApplicantDetailsArray.length > 0 ? coApplicantDetailsArray : [{}];

    return success(res, "Customer co-applicant details", { data: responseData });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};



const customerGuarantorDetail = async (req, res) => {
  try {
    const { customerId } = req.query;
    if (!customerId) {
      return badRequest(res, "customerId is required");
    }
    const data = await guarantorModel.findOne({ customerId });
    const pdformdatasDetail = await creditPdModel.findOne({ customerId });
    const camReportDetails = await camReportModel.findOne({ customerId });

    const responseData = {
      guarantorInformation: {
        name: data?.fullName,
        fatherName: data?.fatherName || "",
        motherName: data?.motherName || "",
        guarantorPhoto: data?.guarantorPhoto || "",
        relationWithApplicant: data?.relationWithApplicant || "",
        GuarantorType: data?.guarantorType || "",
        businessType: data?.businessType || "",
        dob: data?.dob || "",
        age: data?.age || "",
        gender: data?.gender || "",
        maritalStatus: data?.maritalStatus || "",
        educationalDetails: data?.education || "",
        religion: data?.religion || "",
        nationality: data?.nationality || "",
        caste: data?.caste || "",
        category: data?.category || "",
        occupation: data?.occupation || "",
        residenceType: data?.occupation || "",
      },
      kycDetails: {
        panNumber: data?.aadharNo || "",
        adharNumber: data?.aadharNo || "",
        docType: data?.docType || "", //base on the type
        docNo: data?.docNo || "",
      },
      kycUpload: {
        aadharFrontImage:data?.kycUpload?.aadharFrontImage || "",
        aadharBackImage: data?.kycUpload?.aadharBackImage || "",
        docImage: data?.kycUpload?.docImage || "",
        
      },
      contactInformation: {
        mobileNo: data?.mobileNo || "",
        MobileNoTwo: data?.alternateMobileNo || "",
        email: data?.email || "",
      },
      // permanentAddressInformation: {
      //   addressAsPerAdhar: data?.permanentAddress?.addressLine1 || "",
      //   presentAddress: data?.localAddress?.addressLine1 || "",
      //   // landmark: data?.permanentAddress?.houseLandMark || "",
      //   city: data?.permanentAddress?.city || "",
      //   state: data?.permanentAddress?.state || "",
      //   district: data?.permanentAddress?.district || "",
      //   pinCode: data?.permanentAddress?.pinCode || "",
      //   noOfyearsAtCurrentAddress:
      //     data?.noOfyearsAtCurrentAddress || "",
      //   country: "India",
      // },
      presentAddressInformation: {
        presentAddressAsPerAdhar: data?.localAddress?.addressLine1 || "",
        addressLine2: data?.localAddress?.addressLine2 || "",
        landmark: data?.houseLandMark || "",
        city: data?.localAddress?.city || "",
        state: data?.localAddress?.state || "",
        district: data?.localAddress?.district || "",
        pinCode: data?.localAddress?.pinCode || "",
        noOfyearsAtCurrentAddress:
          data?.noOfyearsAtCurrentAddress || "",
        country: "India",
        residenceType: data?.residenceType || "",
      },
      persnalDetails: {
        education: data?.education || "",
        occupation:
          camReportDetails?.guarantorInformation?.[0]?.occupation || "",
        monthlyIncome:
          camReportDetails?.guarantorInformation?.[0]?.monthlyIncome || "",
        otherMonthlyIncome:
          camReportDetails?.guarantorInformation?.[0]?.otherMonthlyIncome || "",
        sourceOfOtherIncome:
          camReportDetails?.guarantorInformation?.[0]?.sourceOfOtherIncome ||
          "",
        annualIncome:
          camReportDetails?.guarantorInformation?.[0]?.annualIncome || "",
        totalHouseHoldExpenses:
          camReportDetails?.guarantorInformation?.[0]?.totalHouseHoldExpenses ||
          "",
      },
    };
    return success(res, "Customer guarantor details", {
      data: responseData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};



const customerReferenceDetail = async (req, res) => {
  try {
    const { customerId } = req.query;
    const data = await creditPdModel.findOne({ customerId });
    const responseData =
      Array.isArray(data?.referenceDetails) && data?.referenceDetails.length > 0
        ? data?.referenceDetails.map((value) => ({
            name: value.name || " ",
            address: value.address || " ",
            relation: value.relation || " ",
            mobileNumber: value.mobileNumber || " ",
          }))
        : [
            {
              name: " ",
              address: " ",
              relation: " ",
              mobileNumber: " ",
            },
          ];

    return success(res, "Customer reference details", {
      referenceDetails: responseData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

const customerCibilDetail = async (req, res) => {
  try {
    const { customerId } = req.query;

    // Fetch necessary data from the database
    const data = await cibilModel
      .findOne({ customerId })
      .populate("customerId");

    const allData = await cibilModel.aggregate([
      {
        $match: { customerId: new ObjectId(customerId) },
      },
      {
        $project: {
          applicantPdf: { $ifNull: ["$applicantCibilReport", ""] },
          guarantorPdf: { $ifNull: ["$guarantorCibilReport", ""] },
          coApplicantOnePdf: {
            $ifNull: [
              {
                $arrayElemAt: [
                  {
                    $map: {
                      input: "$coApplicantData",
                      as: "coApplicant",
                      in: "$$coApplicant.coApplicantCibilReport",
                    },
                  },
                  0,
                ],
              },
              "",
            ],
          },
          coApplicantTwoPdf: {
            $ifNull: [
              {
                $arrayElemAt: [
                  {
                    $map: {
                      input: "$coApplicantData",
                      as: "coApplicant",
                      in: "$$coApplicant.coApplicantCibilReport",
                    },
                  },
                  1,
                ],
              },
              "",
            ],
          },
        },
      },
    ]);

    // Fetch additional related data
    const guarantorData = await guarantorModel.findOne({ customerId });
    const cibilKyc = await cibilModel.findOne({ customerId });

    // Define co-applicant data logic
    const coApplicantOne = data?.coApplicantData?.[0] || {};
    const coApplicantTwo = data?.coApplicantData?.[1] || {};

    // Build the response data
    const responseData = {
      applicantData: {
        applicantCibilReportPdf: allData[0]?.applicantPdf || "",
        customerName: data?.customerId?.executiveName || "",
        applicantCibilScore: data?.applicantCibilScore || "",
        totalAccounts: data?.applicantTotalAccount || "",
        overdueAccount: data?.applicantOverdueAccount || "",
        zeroBalanceAccount: cibilKyc?.applicantZeroBalanceAccount || "",
        totalNumberOfEnquiry: cibilKyc?.applicantNumberOfEnquiry || "",
        appFinancialOverview: {
          HighCreditAndSanctionAmount:
            cibilKyc?.applicantHighCreditSanctionAmount || "",
          TotalCurrentOutstanding: cibilKyc?.applicantcurrentOutstanding || "",
          TotalOverdueAmount: cibilKyc?.applicantTotalOverDueAmount || "",
          TotalNumberOfEnquiry: cibilKyc?.applicantNumberOfEnquiry || "",
        },
        applicantCibilDetail: (data?.applicantCibilDetail || []).map(
          (value) => ({
            loanType: value?.loanType || "",
            loanAmount: value?.loanAmount || "",
            outstandingAmount: value?.outstandingAmount || "",
            overDue: value?.overDue || "",
            emi: value?.emi || "",
            cibilScore: value?.cibilScore || "",
            ownership: value?.ownership || "",
            SanctionedAmount: value?.SanctionedAmount || "",
            CurrentBalance: value?.CurrentBalance || "",
            RateOfInterest: value?.RateOfInterest || "",
            TotalTenure: value?.TotalTenure || "",
            BalanceTenure: value?.BalanceTenure || "",
            LoanStatus: value?.LoanStatus || "",
            LoanObligated: value?.LoanObligated || "",
            ObligationConsidered: value?.ObligationConsidered || "",
          })
        ),
      },
      coApplicantOne: {
        coApplicantCibilReportPdf: allData[0]?.coApplicantOnePdf || "",
        coApplicantName: coApplicantOne?.fullName || "",
        coApplicantCibilScore: coApplicantOne?.coApplicantCibilScore || "",
        totalAccount: coApplicantOne?.coApplicantTotalAccount || "",
        zeroBalanceAccount: coApplicantOne?.coApplicantZeroBalanceAccount || "",
        overdueAccount: coApplicantOne?.coApplicantOverdueAccount || "",
        appFinancialOverview: {
          HighCreditAndSanctionAmount:
            coApplicantOne?.coApplicantHighCreditSanctionAmount || "",
          TotalCurrentOutstanding:
            coApplicantOne?.coApplicantcurrentOutstanding || "",
          TotalOverdueAmount:
            coApplicantOne?.coApplicantTotalOverDueAmount || "",
          TotalNumberOfEnquiry:
            coApplicantOne?.coApplicantNumberOfEnquiry || "",
        },
        coApplicantCibilDetail: (
          coApplicantOne?.coApplicantCibilDetail || []
        ).map((value) => ({
          loanType: value?.loanType || "",
          loanAmount: value?.loanAmount || "",
          outstandingAmount: value?.outstandingAmount || "",
          overDue: value?.overDue || "",
          emi: value?.emi || "",
          cibilScore: value?.cibilScore || "",
          ownership: value?.ownership || "",
          SanctionedAmount: value?.SanctionedAmount || "",
          CurrentBalance: value?.CurrentBalance || "",
          RateOfInterest: value?.RateOfInterest || "",
          TotalTenure: value?.TotalTenure || "",
          BalanceTenure: value?.BalanceTenure || "",
          LoanStatus: value?.LoanStatus || "",
          LoanObligated: value?.LoanObligated || "",
          ObligationConsidered: value?.ObligationConsidered || "",
        })),
      },
      coApplicantTwo: {
        coApplicantCibilReportPdf: allData[0]?.coApplicantTwoPdf || "",
        coApplicantName: coApplicantTwo?.fullName || "",
        coApplicantCibilScore: coApplicantTwo?.coApplicantCibilScore || "",
        totalAccount: coApplicantTwo?.coApplicantTotalAccount || "",
        zeroBalanceAccount: coApplicantTwo?.coApplicantZeroBalanceAccount || "",
        overdueAccount: coApplicantTwo?.coApplicantOverdueAccount || "",
        appFinancialOverview: {
          HighCreditAndSanctionAmount:
            coApplicantTwo?.coApplicantHighCreditSanctionAmount || "",
          TotalCurrentOutstanding:
            coApplicantTwo?.coApplicantcurrentOutstanding || "",
          TotalOverdueAmount:
            coApplicantTwo?.coApplicantTotalOverDueAmount || "",
          TotalNumberOfEnquiry:
            coApplicantTwo?.coApplicantNumberOfEnquiry || "",
        },
        coApplicantCibilDetail: (
          coApplicantTwo?.coApplicantCibilDetail || []
        ).map((value) => ({
          loanType: value?.loanType || "",
          loanAmount: value?.loanAmount || "",
          outstandingAmount: value?.outstandingAmount || "",
          overDue: value?.overDue || "",
          emi: value?.emi || "",
          cibilScore: value?.cibilScore || "",
          ownership: value?.ownership || "",
          SanctionedAmount: value?.SanctionedAmount || "",
          CurrentBalance: value?.CurrentBalance || "",
          RateOfInterest: value?.RateOfInterest || "",
          TotalTenure: value?.TotalTenure || "",
          BalanceTenure: value?.BalanceTenure || "",
          LoanStatus: value?.LoanStatus || "",
          LoanObligated: value?.LoanObligated || "",
          ObligationConsidered: value?.ObligationConsidered || "",
        })),
      },
      guarantorData: {
        guarantorCibilReportPdf: allData[0]?.guarantorPdf || "",
        guarantorName: guarantorData?.fullName || "",
        guarantorCibilScore: data?.guarantorCibilScore || "",
      },
    };

    return success(res, "Customer cibil details", { data: responseData });
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

const customerbankDetail = async (req, res) => {
  try {
    const { customerId } = req.query;
    const data = await creditPdModel.findOne({ customerId });
    const gtrPdcData = await gtrPdcModel.findOne({ customerId });
    const appPdcData = await appPdcModel.findOne({ customerId });
    const responseData = {
      bankApplicantDetails: {
        applicantPdcDocument: appPdcData?.applicantPdcDocument || "",
        nameOfBankApplicant: appPdcData?.customerName || "",
        acHolderName: appPdcData?.acHolderName || "",
        bankBranch: appPdcData?.branchName || "",
        accountNumber: appPdcData?.accountNumber || "",
        accountType: appPdcData?.accountType || "",
        ifscCode: appPdcData?.ifscCode || "",
        bankName: appPdcData?.bankName || "",
      },
      guarantorRepaymentDetails: {
        guarantorPdcDocument: gtrPdcData?.guarantorPdcDocument || "",
        nameOfBankApplicant: gtrPdcData?.acHolderName || "",
        acHolderName: gtrPdcData?.acHolderName || "",
        bankBranch: gtrPdcData?.branchName || "",
        accountNumber: gtrPdcData?.accountNumber || "",
        accountType: gtrPdcData?.accountType || "",
        ifscCode: gtrPdcData?.ifscCode || "",
        bankName: gtrPdcData?.bankName || "",
      },
    };
    return success(res, "Customer bank details", {
      bankDetails: responseData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

const customercollateralDetail = async (req, res) => {
  try {
    const { customerId } = req.query;

    const customerData  = await customerModel.findById({ _id: new ObjectId(customerId) });
    if (!customerData) {
      return badRequest(res, "Customer not found" );
    }

    const branchData = await newBranchModel.findOne({ _id: customerData.branch });
    const approverData = await approverFormModel.findOne({
      customerId: new ObjectId(customerId),
    });

    const findEmi = await final.findOne({
      customerId,
    });

    // Extract the EMI amount (convert to a number if it's a string)
    const EMI = findEmi?.emiAmount ? parseFloat(findEmi.emiAmount) : 0;
    // console.log("EMI", EMI);
    const LoanAmount = findEmi?.finalLoanAmount
      ? parseFloat(findEmi.finalLoanAmount)
      : 0;
    // console.log("LoanAmount", LoanAmount);

    const responseData = {
      propertyHolderInformation: {
        nameOfDocumentHolder: approverData?.nameOfDocumentHolder || "",
        fatherName: approverData?.fatherName || "",
        relationWithApplicant: approverData?.relationWithApplicant || "",
      },
      PropertyLocationDetails: {
        houseNo: approverData?.houseNo || "",
        surveyNo: approverData?.surveyNo || "",
        patwariHalkaNo: approverData?.patwariHalkaNo || "",
        wardNo: approverData?.wardNo || "",
        villageName: approverData?.villageName || "",
        gramPanchayat: approverData?.gramPanchayat || "",
        tehsil: approverData?.tehsil || "",
        district: approverData?.district || "",
        state: approverData?.state || "",
        fullAddressOfProperty: approverData?.fullAddressOfProperty || "",
        pinCode: approverData?.pinCode || "",
      },
      propertyAddressAndLandmark: {
        propertyLandMark: approverData?.propertyLandmark || "",
        fullAddressOfProperty: approverData?.fullAddressOfProperty || "",
        latitude: approverData?.latitude || "",
        longitude: approverData?.longitude || "",
      },
      propertySpecifications: {
        typeOfProperty: approverData?.propertyType || "",
        totalLandAreaInSqFt: approverData?.totalLandArea || "",
        totalBuiltUpAreaInSqFt: approverData?.totalBuiltUpArea || "",
        typeOfConstruction: approverData?.constructionType || "",
        qualityOfConstruction: approverData?.constructionQuality || "",
        ageOfProperty: approverData?.propertyAge || "",
      },
      PropertyBoundaries: {
        eastBoundary: approverData?.eastBoundary || "",
        westBoundary: approverData?.westBoundary || "",
        northBoundary: approverData?.northBoundary || "",
        southBoundary: approverData?.southBoundary || "",
      },
      PropertyValuation: {
        landValue: approverData?.landValue || "",
        constructionValue: approverData?.constructionValue || "",
        fairMarketValueOfLand: approverData?.fairMarketValueOfLand || "",
        realizableValue: approverData?.realizableValue || "",
        Ltv:
          approverData?.fairMarketValueOfLand && LoanAmount
            ? `${(
                (LoanAmount / approverData.fairMarketValueOfLand) *
                100
              ).toFixed(2)}%`
            : "",
        // Ltv: approverData?.Ltv || "",
      },
      sellerBuyerInformation:{
        sellerName: approverData?.sellerName || "",
        sellerFatherName: approverData?.sellerFatherName || "",
        buyerName:  approverData?.buyerName || "",
        buyerFatherName: approverData?.buyerFatherName || "",
      },
      // propertyAddressAndLandmark:
      //   approverData?.propertyAddressAndLandmark || {},
      // propertySpecifications: approverData?.propertySpecifications || {},
      // propertyBoundaries: approverData?.propertyBoundaries || {},
      // propertyValuation: approverData?.propertyValuation || {},
      branchLocation: branchData?.location || {},
      branchName: branchData?.name || "",
    };

    // console.log("responseData", responseData);

    // Check if required fields are empty or null
    const isAnyFieldEmpty =
      !responseData.propertyHolderInformation.nameOfDocumentHolder ||
      !responseData.propertyHolderInformation.fatherName ||
      !responseData.propertyHolderInformation.relationWithApplicant ||
      !responseData.PropertyLocationDetails.houseNo ||
      // !responseData.PropertyLocationDetails.surveyNo ||
      !responseData.PropertyLocationDetails.patwariHalkaNo ||
      !responseData.PropertyLocationDetails.wardNo ||
      !responseData.PropertyLocationDetails.villageName ||
      !responseData.PropertyLocationDetails.gramPanchayat ||
      !responseData.PropertyLocationDetails.tehsil ||
      !responseData.PropertyLocationDetails.district ||
      !responseData.PropertyLocationDetails.state ||
      !responseData.PropertyLocationDetails.pinCode ||
      !responseData.PropertyBoundaries.eastBoundary ||
      !responseData.PropertyBoundaries.westBoundary ||
      !responseData.PropertyBoundaries.northBoundary ||
      !responseData.PropertyBoundaries.southBoundary ||
      // !responseData.propertySpecifications.totalBuiltUpAreaInSqFt ||
      !responseData.propertySpecifications.totalLandAreaInSqFt;

    const Allow_Permission = !isAnyFieldEmpty;

    const data = await internalLegalModel.findOneAndUpdate(
      { customerId: new ObjectId(customerId) },
      { $set: { Allow_Permission: Allow_Permission ? "true" : "false" } }
    );

    const updateInCollateral = await approverFormModel.findOneAndUpdate(
      {
        customerId: new ObjectId(customerId),
      },
      {
        $set: { Allow_Permission: Allow_Permission ? "true" : "false" },
      }
    );

    let newResponse = {
      ...responseData,
      Allow_Permission,
    };

    console.log(
      `Allow_Permission set to: ${Allow_Permission ? "true" : "false"}`
    );

    return success(res, "Customer collateral details", {
      bankDetails: newResponse,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

const customerloanAgreementDetail = async (req, res) => {
  try {
    const { customerId } = req.query;
    const gtrPdcData = await gtrPdcModel.findOne({ customerId });
    const appPdcData = await appPdcModel.findOne({ customerId });
    const propertyData = await propertyPaperKycModel.findOne({ customerId });

    const responseData = {
      bankGuarantorDetails: {
        guarantorPdcDocument: gtrPdcData?.guarantorPdcDocument || "",
        nameOfBankGuarantor: gtrPdcData?.gtrName || "",
        acHolderName: gtrPdcData?.acHolderName || "",
        bankBranch: gtrPdcData?.branchName || "",
        accountNumber: gtrPdcData?.accountNumber || "",
        accountType: gtrPdcData?.accountType || "",
        ifscCode: gtrPdcData?.ifscCode || "",
        chequeNoOfGuarantor: gtrPdcData?.totalChequeCount || "",
      },
      bankApplicantDetails: {
        applicantPdcDocument: appPdcData?.applicantPdcDocument || "",
        nameOfBankApplicant: appPdcData?.customerName || "",
        acHolderName: appPdcData?.acHolderName || "",
        bankBranch: appPdcData?.branchName || "",
        accountNumber: appPdcData?.accountNumber || "",
        accountType: appPdcData?.accountType || "",
        ifscCode: appPdcData?.ifscCode || "",
        chequeNoOfapplicant: appPdcData?.totalChequeCount || "",
      },
      boundariesOfProperty: {
        onorTowardsNorth: propertyData?.northBoundary || "",
        onorTowardsSouth: propertyData?.southBoundary || "",
        onorTowardsEast: propertyData?.eastBoundary || "",
        onorTowardswest: propertyData?.westBoundary || "",
      },
      loanAgreementDetails: {
        dateOfTheAgreement: appPdcData?.approvalDate || "",
        placeOfExecution: appPdcData?.placeOfExecution || "",
      },
    };
    return success(res, "Customer loan agreement details", {
      bankDetails: responseData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

const customercreditAndPdReportDetail = async (req, res) => {
  try {
    const { customerId } = req.query;
    const data = await applicantModel.findOne({ customerId });
    const coApplicantdata = await coApplicantModel.findOne({ customerId });
    const guarantorData = await guarantorModel.findOne({ customerId });
    const pdformdatasDetail = await creditPdModel.findOne({ customerId });
    const cibilData = await cibilModel
      .findOne({ customerId })
      .populate("customerId");
    const udyamdatasDetail = await udyamModel.findOne({ customerId });
    const gtrPdcData = await gtrPdcModel.findOne({ customerId });
    const appPdcData = await appPdcModel.findOne({ customerId });
    const camReportDetails = await camReportModel.findOne({ customerId });
    const electricityKycData = await electricityKycModel.findOne({
      customerId,
    });
    const udhyamKycData = await udhyamKycModel.findOne({ customerId });

    const pdIsActive = pdformdatasDetail?.status || "";
    //  console.log(pdIsActive,"pdIsActivepdIsActive<><>")

    const responseData = {
      message: pdformdatasDetail
        ? pdformdatasDetail.status === "approve"
          ? "PD approved"
          : "PD not approved"
        : "PD not found",
      applicantDetails:
        pdformdatasDetail?.status === "approve"
          ? {
              image: pdformdatasDetail?.applicantImage || "",
              caste: pdformdatasDetail?.applicant?.caste || "",
              occupation:
                camReportDetails?.applicationInformation?.occupation || "",
              landmark: pdformdatasDetail?.applicant?.houseLandMark || "",
              noOfyearsAtCurrentAddress:
                pdformdatasDetail?.applicant?.noOfyearsAtCurrentAddress || "",
              country: "India",
              alternateMobileNo:
                pdformdatasDetail?.applicant?.alternateMobileNo || "",
              email: data?.email || "",
              religion: data?.religion || "",
              nationality: pdformdatasDetail?.applicant?.nationality || "",
              category: pdformdatasDetail?.applicant?.category || "",
              noOfDependentWithCustomer:
                pdformdatasDetail?.applicant?.noOfDependentWithCustomer || "",
              education: data?.education || "",
            }
          : {},
      coApplicantDetails:
        pdformdatasDetail?.status === "approve"
          ? {
              image: pdformdatasDetail?.coApplicantImage || [],
              occupation:
                camReportDetails?.coApplicationInformation?.occupation || "",
              caste: pdformdatasDetail?.co_Applicant[0]?.caste || "",
              landmark: pdformdatasDetail?.co_Applicant[0]?.houseLandMark || "",
              noOfyearsAtCurrentAddress:
                pdformdatasDetail?.co_Applicant[0]?.noOfyearsAtCurrentAddress ||
                "",
              country: "India",
              alternateMobileNo:
                pdformdatasDetail?.co_Applicant[0]?.alternateMobileNo || "",
              email: coApplicantdata?.email || "",
              religion: coApplicantdata?.religion || "",
              nationality:
                pdformdatasDetail?.co_Applicant[0]?.nationality || "",
              category: pdformdatasDetail?.co_Applicant[0]?.category || "",
              noOfDependentWithCustomer: "",
              education: coApplicantdata?.education || "",
              relationWithApplicant:
                coApplicantdata?.relationWithApplicant || "",
            }
          : {},
      guarantorInformation:
        pdformdatasDetail?.status === "approve"
          ? {
              image: pdformdatasDetail?.guarantorImage || "",
              caste: pdformdatasDetail?.guarantor?.caste || "",
              occupation:
                camReportDetails?.guarantorInformation?.occupation || "",
              landmark: guarantorData?.permanentAddress?.houseLandMark || "",
              noOfyearsAtCurrentAddress:
                pdformdatasDetail?.guarantor?.noOfyearsAtCurrentAddress || "",
              alternateMobileNo:
                pdformdatasDetail?.guarantor?.alternateMobileNo || "",
              religion: guarantorData?.religion || "",
              nationality: pdformdatasDetail?.guarantor?.nationality || "",
              category: pdformdatasDetail?.guarantor?.category || "",
              noOfDependentWithCustomer: "",
              education: guarantorData?.education || "",
              relationWithApplicant: "",
            }
          : {},
      bankApplicantDetails:
        pdformdatasDetail?.status === "approve"
          ? {
              applicantPdcDocument: appPdcData?.applicantPdcDocument || "",
              nameOfBankApplicant: appPdcData?.customerName || "",
              acHolderName: appPdcData?.acHolderName || "",
              bankBranch: appPdcData?.branchName || "",
              accountNumber: appPdcData?.accountNumber || "",
              accountType: appPdcData?.accountType || "",
              ifscCode: appPdcData?.ifscCode || "",
              bankName: appPdcData?.bankName || "",
            }
          : {},
      cibilAnlysis:
        pdformdatasDetail?.status === "approve"
          ? {
              numberOfTotalLoans: cibilData?.TotalLoansNumbers || "",
              detailOfCurrentLoans: cibilData?.CurrentLoanDetail || "",
              rasonOdDpd: cibilData?.reasonOfDPD || "",
            }
          : {},
      samagraDetails:
        pdformdatasDetail?.status === "approve"
          ? {
              samgraFamilyIDNumber:
                pdformdatasDetail?.samagraDetail?.samagraFamilyIdNo || "",
              smagraIDHeadName:
                pdformdatasDetail?.samagraDetail?.samagraIdHeadName || "",
              SamagraIdPhoto: pdformdatasDetail?.SSSMPhoto || "",
              gasDairyPhoto: pdformdatasDetail?.gasDiaryPhoto || "",
              familyMember: pdformdatasDetail?.familyMember[0]?.name || "",
              dependentName:
                pdformdatasDetail?.familyMember[0]?.dependent || "",
              age: pdformdatasDetail?.familyMember[0]?.age || "",
              relation: pdformdatasDetail?.familyMember[0]?.relation || "",
            }
          : {},
      assetsDetail:
        pdformdatasDetail?.status === "approve"
          ? pdformdatasDetail?.assetDetails?.map((value) => ({
              name: value?.name || "",
              purchaseValue: value?.purchaseValue || "",
              marketValue: value?.marketValue || "",
            })) || [] // In case assetDetails is null or undefined, fallback to an empty array
          : [],
      ElectricityBill:
        pdformdatasDetail?.status === "approve"
          ? {
              electricityKycDocument:
                electricityKycData?.electricityKycDocument || "",
              selectElectricityBoard:
                electricityKycData?.electricityBoard || "",
              enterServiceNo: electricityKycData?.InterServiceNumber || "",
              billDetail: "",
              consumerAddress: electricityKycData?.addressOfConsumer || "",
              billAmount: electricityKycData?.billAmount || "",
              cashDueDate: electricityKycData?.cashDueDate || "",
              chequeDueDate: electricityKycData?.chequeDueDate || "",
              iVRSNumber: electricityKycData?.ivrsNo || "",
              consumerName: electricityKycData?.nameOfConsumer || "",
              serviceNo: electricityKycData?.serviceNo || "",
              consumerNo: electricityKycData?.consumerNo || "",
              relationWithApplicant:
                electricityKycData?.relationWithApplicant || "",
              clickMeterPhoto: electricityKycData?.meterPhoto || "",
              clickBillPhoto: electricityKycData?.electricityBillUpload || "",
            }
          : "",
      policeStation:
        pdformdatasDetail?.status === "approve"
          ? {
              policeStationName:
                pdformdatasDetail?.policeStation?.staionName || "",
              policeStationAddress:
                pdformdatasDetail?.policeStation?.stationAdress || "",
            }
          : "",
      businessDetail:
        pdformdatasDetail?.status === "approve"
          ? {
              udhyamKycDocument: udhyamKycData?.udhyamKycDocument || [],
              udhyamRegisteredNumber: udhyamKycData?.udhyamRegistrationNo || "",
              udhyamRegisteredDetail: "",
              nameOfEnterprise:
                udhyamKycData?.udyamDetails?.enterpriseName || "",
              typeOfEnterprise:
                udhyamKycData?.udyamDetails?.enterpriseType || "",
              organisationType:
                udhyamKycData?.udyamDetails?.organisationType || "",
              socialCategory: udhyamKycData?.udyamDetails?.socialCategory || "",
              dateOfIncorporation: udhyamKycData?.dateOfIncorporation || "",
              majorActivity: udhyamKycData?.udyamDetails?.majorActivity || "",
              dateOfCommencementOfProductionAndBusiness:
                udhyamKycData?.udyamDetails
                  ?.DateofCommencementofProductionBusiness || "",
              enterpriseType: udhyamKycData?.udyamDetails?.enterpriseType || [],
              officialAddresOfEntrprise: {
                FlatDoorBlockNo:
                  udhyamKycData?.udyamDetails?.officialAddressOfEnterprise
                    ?.FlatDoorBlockNo || "",
                VillageTown:
                  udhyamKycData?.udyamDetails?.officialAddressOfEnterprise
                    ?.VillageTown || "",
                RoadStreetLane:
                  udhyamKycData?.udyamDetails?.officialAddressOfEnterprise
                    ?.RoadStreetLane || "",
                state:
                  udhyamKycData?.udyamDetails?.officialAddressOfEnterprise
                    ?.state || "",
                mobile:
                  udhyamKycData?.udyamDetails?.officialAddressOfEnterprise
                    ?.mobile || "",
                nameofPremisesBuilding:
                  udhyamKycData?.udyamDetails?.officialAddressOfEnterprise
                    ?.nameofPremisesBuilding || "",
                block:
                  udhyamKycData?.udyamDetails?.officialAddressOfEnterprise
                    ?.block || "",
                city:
                  udhyamKycData?.udyamDetails?.officialAddressOfEnterprise
                    ?.city || "",
                district:
                  udhyamKycData?.udyamDetails?.officialAddressOfEnterprise
                    ?.district || "",
                pin:
                  udhyamKycData?.udyamDetails?.officialAddressOfEnterprise
                    ?.pin || "",
              },
              nationalIndustryClassificationCode: {
                activity:
                  udhyamKycData?.udyamDetails
                    ?.nationalIndustryClassificationCode?.activity || "",
                date:
                  udhyamKycData?.udyamDetails
                    ?.nationalIndustryClassificationCode?.date || "",
                nic2Digit:
                  udhyamKycData?.udyamDetails
                    ?.nationalIndustryClassificationCode?.nic2Digit || "",
                nic4Digit:
                  udhyamKycData?.udyamDetails
                    ?.nationalIndustryClassificationCode?.nic4Digit || "",
                nic5Digit:
                  udhyamKycData?.udyamDetails
                    ?.nationalIndustryClassificationCode?.nic5Digit || "",
                dicName:
                  udhyamKycData?.udyamDetails
                    ?.nationalIndustryClassificationCode?.dicName || "",
                msmeDFO:
                  udhyamKycData?.udyamDetails
                    ?.nationalIndustryClassificationCode?.msmeDFO || "",
                DateofUdyamRegistration:
                  udhyamKycData?.udyamDetails
                    ?.nationalIndustryClassificationCode
                    ?.DateofUdyamRegistration || "",
              },
              unitDetail: {
                unitName:
                  udhyamKycData?.udyamDetails?.unitsDetails?.unitName || "",
                flat: udhyamKycData?.udyamDetails?.unitsDetails?.flat || "",
                building:
                  udhyamKycData?.udyamDetails?.unitsDetails?.building || "",
                VillageTown:
                  udhyamKycData?.udyamDetails?.unitsDetails?.VillageTown || "",
                block: udhyamKycData?.udyamDetails?.unitsDetails?.block || "",
                road: udhyamKycData?.udyamDetails?.unitsDetails?.road || "",
                city: udhyamKycData?.udyamDetails?.unitsDetails?.city || "",
                pin: udhyamKycData?.udyamDetails?.unitsDetails?.pin || "",
                state: udhyamKycData?.udyamDetails?.unitsDetails?.state || "",
                district:
                  udhyamKycData?.udyamDetails?.unitsDetails?.district || "",
              },
            }
          : {},
      totalIncomeDetail:
        pdformdatasDetail?.status === "approve"
          ? {
              totalYearlyIncome:
                pdformdatasDetail?.totalIncomeDetails?.totalYearlyIncome || "",
              totalMonthlyIncome:
                pdformdatasDetail?.totalIncomeDetails?.totalMonthlyIncome || "",
              totalExpensesYearly:
                pdformdatasDetail?.totalIncomeDetails?.totalExpensesYearly ||
                "",
              totalExpensesMonthly:
                pdformdatasDetail?.totalIncomeDetails?.totalExpensesMonthly ||
                "",
            }
          : {},
      propertyCollateralsDetails:
        pdformdatasDetail?.status === "approve"
          ? {
              documentHolderName:
                pdformdatasDetail?.property?.collateralsDetails
                  ?.typeOfProperty || "",
              relationWithApplicant:
                pdformdatasDetail?.property?.relationWithApplicant || "",
              fatherName: pdformdatasDetail?.property?.fatherName || "",
              villageName: pdformdatasDetail?.property?.villageName || "",
              gramPanchayat: pdformdatasDetail?.property?.gramPanchayat || "",
              patwariHalkaNo: pdformdatasDetail?.property?.patwariHalkaNo || "",
              state: pdformdatasDetail?.property?.state || "",
              district: pdformdatasDetail?.property?.district || "",
              tehsil: pdformdatasDetail?.property?.tehsil || "",
              houseNo: pdformdatasDetail?.property?.houseNo || "",
              wardNo: pdformdatasDetail?.property?.wardNo || "",
              surveyNo: pdformdatasDetail?.property?.surveyNo || "",
            }
          : {},
      houseBoundaries:
        pdformdatasDetail?.status === "approve"
          ? {
              east:
                pdformdatasDetail?.property?.collateralsDetails
                  ?.boundariesEast || "",
              west:
                pdformdatasDetail?.property?.collateralsDetails
                  ?.boundariesWest || "",
              north:
                pdformdatasDetail?.property?.collateralsDetails
                  ?.boundariesNorth || "",
              south:
                pdformdatasDetail?.property?.collateralsDetails
                  ?.boundariesSouth || "",
              documentProvided:
                pdformdatasDetail?.property?.collateralsDetails
                  ?.documentsProvided || "",
              relationWithApplicant:
                pdformdatasDetail?.property?.relationWithApplicantouth || "",
              boundariesMatchingWithPatta:
                pdformdatasDetail?.property?.collateralsDetails
                  ?.boundariesMatching || "",
              propertyAddress:
                pdformdatasDetail?.property?.collateralsDetails
                  ?.propertyAddress || "",
              documentHolderName:
                pdformdatasDetail?.property?.collateralsDetails
                  ?.nameOfTheDocumentHolder || "",
              propertyLatitude:
                pdformdatasDetail?.property?.latitudeOfTheProrty || "",
              propertyLongitude:
                pdformdatasDetail?.property?.longitudeOfTheProrty || "",
              doorsWindowsAvailability:
                pdformdatasDetail?.property?.doorsAndWindowsAreAvailable || "",
              kitchenLatAndBathAvailability:
                pdformdatasDetail?.property?.kitchenAndLatBathAvailable || "",
              assetSeenAtResidence:
                pdformdatasDetail?.property?.assetSeenAtResidence || "",
              landmark:
                pdformdatasDetail?.property?.collateralsDetails?.landmark || "",
              locationAndZone:
                pdformdatasDetail?.property?.collateralsDetails?.locationZone ||
                "",
            }
          : {},
      accommodationDetails:
        pdformdatasDetail?.status === "approve"
          ? {
              groundFloor:
                pdformdatasDetail?.property?.accommodationDetails
                  ?.groundFloor || "",
              firstFloor:
                pdformdatasDetail?.property?.accommodationDetails?.firstFloor ||
                "",
              actualUsageProperty:
                pdformdatasDetail?.property?.accommodationDetails
                  ?.actualUsageOfProperty || "",
              structureType:
                pdformdatasDetail?.property?.accommodationDetails
                  ?.typeOfStructure || "",
              plotLocation:
                pdformdatasDetail?.property?.accommodationDetails
                  ?.locationOfPlot || "",
              builtUpArea:
                pdformdatasDetail?.property?.accommodationDetails
                  ?.builtUpAreaSft || "",
              occupancy:
                pdformdatasDetail?.property?.accommodationDetails?.occupancy ||
                "",
              electricityGasConnection:
                pdformdatasDetail?.property?.accommodationDetails
                  ?.electricityAndGasConnection || "",
              surroundingAreaDevelopment: "",
              totalBuiltUpArea:
                pdformdatasDetail?.property?.TotalBuilUpArea || "",
              qualityOfConstruction:
                pdformdatasDetail?.property?.qualityOfConstruction || "",
              propertyAge: pdformdatasDetail?.property?.ageOfProperty || "",
              propertyMaintenance:
                pdformdatasDetail?.property?.MaintenanceOfTheProperty || "",
              projectedLifeYear:
                pdformdatasDetail?.property?.ProjectedLifeYear || "",
              constructionType:
                pdformdatasDetail?.property?.typeOfContruction || "",
              landRatePerSQFT:
                pdformdatasDetail?.property?.landRatePerSQFT || "",
              totalConsAreaSQFT:
                pdformdatasDetail?.property?.totalConstruction || "",
              uploadImage: {
                selfieWithCostumer:
                  pdformdatasDetail?.property?.selfiWithCustomer || "",
                photoWithLatlong:
                  pdformdatasDetail?.property?.photoWithLatLong || "",
                frontPhoto: pdformdatasDetail?.property?.front || "",
                leftSide: pdformdatasDetail?.property?.leftSide || "",
                rightSide: pdformdatasDetail?.property?.rightSide || "",
                approachRoad: pdformdatasDetail?.property?.approachRoad || "",
                mainRoad: pdformdatasDetail?.property?.mainRoad || "",
                inferiorRoad: pdformdatasDetail?.property?.interiorRoad || "",
                addImage: "",
              },
            }
          : "",
      LoanDetail:
        pdformdatasDetail?.status === "approve"
          ? {
              customerDemandLoanAmount:
                pdformdatasDetail?.approveLoanDetails
                  ?.demandLoanAmountByCustomer || "",
              approvedAmount:
                pdformdatasDetail?.approveLoanDetails?.approvedAmount || "",
              roi: pdformdatasDetail?.approveLoanDetails?.ROI || "",
              tenure: pdformdatasDetail?.approveLoanDetails?.Tenure || "",
              emi: pdformdatasDetail?.approveLoanDetails?.EMI || "",
              finalDecision:
                pdformdatasDetail?.approveLoanDetails?.finalDecision || "",
              endUseOfLoan:
                pdformdatasDetail?.approveLoanDetails?.endUseOfLoan || "",
            }
          : {},
      referenceDetail:
        pdformdatasDetail?.status === "approve"
          ? pdformdatasDetail?.referenceDetails || []
          : [],
      remarkAndPendency:
        pdformdatasDetail?.status === "approve"
          ? {
              remarksAnyCondition: pdformdatasDetail?.remarkByPd || "",
            }
          : "",
      pdfLink:
        pdformdatasDetail?.status === "approve"
          ? pdformdatasDetail?.pdfLink || ""
          : "",
    };

    return success(res, "Customer credit and pd details", {
      bankDetails: responseData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

const customerdueDiligenceReportDetail = async (req, res) => {
  try {
    const { customerId } = req.query;
    const data = await applicantModel.findOne({ customerId });
    const coApplicantdata = await coApplicantModel.findOne({ customerId });
    const guarantorData = await guarantorModel.findOne({ customerId });
    const pdformdatasDetail = await creditPdModel.findOne({ customerId });
    const technicalData = await technicalApproveFormModel.findOne({
      customerId,
    });
    const legalReportDetails = await legalReportModel.findOne({ customerId });
    const externalVendorFormData = await externalVendorFormModel.findOne({
      customerId,
    });
    // console.log(externalVendorFormData,"externalVendorFormDataexternalVendorFormData")
    const rcuVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "rcu"
    );
    const legalVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "legal"
    );
    const technicalVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "technical"
    );
    const rmVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "rm"
    );
    let legalIsApproved = legalReportDetails?.status === "approve";
    const technicalIsApproved = technicalData?.status === "approve";

    // console.log(rcuVendor,"rcuVendor",legalVendor,"legalVendor",technicalVendor,"technicalVendor",rmVendor,"rmVendor")

    // console.log(externalVendorFormData,"technicalData")
    const responseData = {
      allPdf: {
        rcuPdf:
          rcuVendor?.statusByVendor === "approve"
            ? rcuVendor?.assignDocuments
            : [],
        legalPdf:
          legalVendor?.statusByVendor === "approve"
            ? legalVendor?.assignDocuments
            : [],
        technicalPdf:
          technicalVendor?.statusByVendor === "approve"
            ? technicalVendor?.assignDocuments
            : [],
        rmPdf:
          rmVendor?.statusByVendor === "approve"
            ? rmVendor?.assignDocuments
            : [],
        pdPdf:
          pdformdatasDetail?.status === "approve"
            ? pdformdatasDetail?.pdfLink
            : "",
      },
      rcuReport: {
        // message: rcuVendor
        //   ? rcuVendor.statusByVendor === "approve"
        //     ? "RCU approved"
        //     : "RCU not approved"
        //   : "RCU not approved",
        reportRecievedDate: rcuVendor?.assignDate || "",
        reportStatus: rcuVendor?.statusByVendor || "",
      },
      technicalReport: {
        // message: technicalVendor
        //   ? technicalVendor.statusByVendor === "approve"
        //     ? "technical approved"
        //     : "technical not approved"
        //   : "technical not approved",
        receivedDate: technicalData?.receivedDate || "",
        status: technicalData?.status || "",
        assignDate: technicalVendor?.assignDate || "",
        reportStatus: technicalVendor?.statusByVendor || "",
        nameOfDocumentHolder: technicalIsApproved
          ? technicalData.propertyHolderInformation?.documentHolderName
          : "" || "",
        fatherName: technicalIsApproved
          ? technicalData.propertyHolderInformation?.fatherName
          : "" || "",
        relationWithApplicant: technicalIsApproved
          ? technicalData.propertyHolderInformation?.relationWithApplicant
          : "" || "",
        houseNo: technicalIsApproved
          ? technicalData.propertyLocationDetails?.houseNumber
          : "" || "",
        surveyNo: technicalIsApproved
          ? technicalData.propertyLocationDetails?.surveyNumber
          : "" || "",
        patwariHalkaNo: technicalIsApproved
          ? technicalData.propertyLocationDetails?.patwariHalkaNumber
          : "" || "",
        wardNo: technicalIsApproved
          ? technicalData.propertyLocationDetails?.wardNumber
          : "" || "",
        villageName: technicalIsApproved
          ? technicalData.propertyLocationDetails?.villageName
          : "" || "",
        gramPanchayat: technicalIsApproved
          ? technicalData.propertyLocationDetails?.gramPanchayat
          : "" || "",
        tehsil: technicalIsApproved
          ? technicalData.propertyLocationDetails?.tehsil
          : "" || "",
        district: technicalIsApproved
          ? technicalData.propertyLocationDetails?.district
          : "" || "",
        state: technicalIsApproved
          ? technicalData.propertyLocationDetails?.state
          : "" || "",
        propertyLandmark: technicalIsApproved
          ? technicalData.propertyAddressAndLandmark?.propertyLandmark
          : "" || "",
        fullAddressOfProperty: technicalIsApproved
          ? technicalData.propertyAddressAndLandmark?.fullAddressOfProperty
          : "" || "",
        typeOfProperty: technicalIsApproved
          ? technicalData.propertySpecifications?.propertyType
          : "" || "",
        totalLandArea: technicalIsApproved
          ? technicalData.propertySpecifications?.totalLandArea
          : "" || "",
        totalBuiltUpArea: technicalIsApproved
          ? technicalData.propertySpecifications?.totalBuiltUpArea
          : "" || "",
        typeOfConstruction: technicalIsApproved
          ? technicalData.propertySpecifications?.constructionType
          : "" || "",
        qualityOfConstruction: technicalIsApproved
          ? technicalData.propertySpecifications?.constructionQuality
          : "" || "",
        ageOfProperty: technicalIsApproved
          ? technicalData.propertySpecifications?.propertyAge
          : "" || "",
        eastBoundary: technicalIsApproved
          ? technicalData.propertyBoundaries?.eastBoundary
          : "" || "",
        westBoundary: technicalIsApproved
          ? technicalData.propertyBoundaries?.westBoundary
          : "" || "",
        northBoundary: technicalIsApproved
          ? technicalData.propertyBoundaries?.northBoundary
          : "" || "",
        southBoundary: technicalIsApproved
          ? technicalData.propertyBoundaries?.southBoundary
          : "" || "",
        developmentPercentage: technicalIsApproved
          ? technicalData.propertySpecifications?.devlopmentPercentage
          : "" || "",
        areaOfProperty: technicalIsApproved
          ? technicalData.propertySpecifications?.totalLandArea
          : "" || "",
        landValue: technicalIsApproved
          ? technicalData.propertyValuation?.landValue
          : "" || "",
        constructionValue: technicalIsApproved
          ? technicalData.propertyValuation?.constructionValue
          : "" || "",
        fairMarketValueOfLand: technicalIsApproved
          ? technicalData.propertyValuation?.fairMarketValueOfLand
          : "" || "",
        realizableValue: technicalIsApproved
          ? technicalData.propertyValuation?.realizableValue
          : "" || "",
        latitude: technicalIsApproved
          ? technicalData.propertyAddressAndLandmark?.latitudeOfTheProperty
          : "" || "",
        longitude: technicalIsApproved
          ? technicalData.propertyAddressAndLandmark?.longitudeOfTheProperty
          : "" || "",
        valuationDoneBy: technicalIsApproved
          ? technicalData.propertyValuation?.valuationDoneBy
          : "" || "",
      },
      legalReport: {
        // message: legalVendor
        //   ? technicalVendor.statusByVendor === "approve"
        //     ? "legal approved"
        //     : "legal not approved"
        //   : "legal not approved",
        receivedDate: legalReportDetails?.receivedDate || "",
        status: legalReportDetails?.status || "",
        assignDate: legalVendor?.assignDate || "",
        reportStatus: legalVendor?.statusByVendor || "",
        documentType: legalIsApproved
          ? legalReportDetails.documentType || ""
          : "",
        nameOfApplicant: legalIsApproved
          ? legalReportDetails.nameOfApplicant || ""
          : "",
        nameOfCoApplicant: legalIsApproved
          ? legalReportDetails.nameOfCoApplicant || ""
          : "",
        nameOfDocumentHolder: legalIsApproved
          ? legalReportDetails.nameOfDocumentHolder || ""
          : "",
        relationWithApplicant: legalIsApproved
          ? legalReportDetails.relationWithApplicant || ""
          : "",
        fullAddressOfTheProperty: legalIsApproved
          ? legalReportDetails.propertyInformation?.fullAddressOfTheProperty ||
            ""
          : "",
        descriptionOfListOfDocuments: legalIsApproved
          ? legalReportDetails.propertyInformation
              ?.descriptionOfListOfDocuments || ""
          : "",
        documentDetails: legalIsApproved
          ? legalReportDetails.documentDetails || {}
          : {
              document1: legalReportDetails?.documentDetails?.document1 || "",
              document2: legalReportDetails?.documentDetails?.document2 || "",
              document3: legalReportDetails?.documentDetails?.document3 || "",
              document4: legalReportDetails?.documentDetails?.document4 || "",
              document5: legalReportDetails?.documentDetails?.document5 || "",
              document6: legalReportDetails?.documentDetails?.document6 || "",
              document7: legalReportDetails?.documentDetails?.document7 || "",
            },
        statusOfReport: legalIsApproved
          ? legalReportDetails.reportStatus || ""
          : "",
      },
      taggingReport: {
        applicantName: "",
        fatherName: "",
        contactNumber: "",
        addressOfApplicant: "",
        date: "",
        place: "",
        tagNo: "",
        animalNo: "",
        breedNo: "",
        genderNo: "",
        colourNo: "",
        ageNo: "",
        milkInLiterPerDay: "",
      },
    };
    return success(res, "Customer due&diligance details", {
      bankDetails: responseData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

const partnerNameDetails = async (req, res) => {
  try {
    const partnerData = await lenderModel.find({})
    .populate("branchId", "name") // Only select name and location fields
    .populate("productId", "productName")
    .populate("employeeId", "employeName") // Only select name and price fields
    .populate({
      path: "venders",
      populate: [
        {
          path: "branch",
          model: "newbranch",
          select: "name",
        },
        {
          path: "vender",
          model: "vendor",
          select: "fullName",
        },
      ],
    })
    .populate({
      path: "sopDetails",
      populate: [
        {
          path: "name",
          model: "employee",
          select: "employeName",
        }
      ],
    })
    .populate({
      path: "policy",
      populate: [
        {
          path: "productId",
          model: "product",
          select: "productName",
        }
      ],
    })
    // .select("fullName partnerUniqueId");
    // let responseData = {
    //   name1: "Ratnaafin Capital Pvt Ltd",
    //   name2: "Grow Money Capital Pvt Ltd",
    //   name3: "Namdev Finvest Pvt Ltd",
    //   name4: "Fin Coopers Capital Pvt Ltd",
    // };
    return success(res, "partner details", {
      data: partnerData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

const branchPendencyDetails = async (req, res) => {
  try {
    const { customerId } = req.query;
    const data = await applicantModel.findOne({ customerId });
    const electricityData = await electricityKycModel.findOne({ customerId });
    const samagraIdData = await samagraIdModel.findOne({ customerId });
    const udhyamKycdata = await udhyamKycModel.findOne({ customerId });
    const bankStatementData = await bankStatementModel.findOne({ customerId });
    const salaryAndOtherIncomeData = await salaryAndOtherIncomeModel.findOne({
      customerId,
    });
    const milkIncomeData = await milkIncomeModel.findOne({ customerId });
    const otherBuisnessData = await otherBuisnessModel.findOne({ customerId });
    const propertyPaperKycData = await propertyPaperKycModel.findOne({
      customerId,
    });
    const appPdcData = await appPdcModel.findOne({ customerId });
    const gtrPdcData = await gtrPdcModel.findOne({ customerId });
    const nachRegistrationKyData = await nachRegistrationKyModel.findOne({
      customerId,
    });
    const physicalFileCourierData = await physicalFileCourierModel.findOne({
      customerId,
    });
    const rmPaymentUpdateData = await rmPaymentUpdateModel.findOne({
      customerId,
    });
    const agricultureData = await agricultureModel.findOne({ customerId });
    const esignPhotoData = await esignPhotoModel.findOne({ customerId });
    const electricityKycData = await electricityKycModel.findOne({
      customerId,
    });
    const pdformdatasDetail = await creditPdModel.findOne({ customerId });

    const yearlyIncome =
      pdformdatasDetail?.incomeSource?.[0]?.agricultureBusiness
        ?.agriIncomeYearly || "";
    const MonthlyIncome = salaryAndOtherIncomeData?.monthlyIncomeEarned || "";

    let responseData = {
      allPdf: {
        electricityBill:
          electricityKycData?.status === "approve"
            ? electricityKycData?.electricityKycDocument
            : [],
        samagraId:
          samagraIdData?.status === "approve"
            ? samagraIdData?.samagraIdDocument
            : [],
        udhyamCertificate:
          udhyamKycdata?.status === "approve"
            ? udhyamKycdata?.udhyamKycDocument
            : [],
        agricultureIncome:
          agricultureData?.status === "approve"
            ? agricultureData?.agricultureDocument
            : [],
        milkIncome:
          milkIncomeData?.status === "approve"
            ? milkIncomeData?.milkDocument
            : [],
        salaryAndOtherIncome:
          salaryAndOtherIncomeData?.status === "approve"
            ? salaryAndOtherIncomeData?.otherIncomeDocument
            : [],
        otherBusinessIncome:
          otherBuisnessData?.status === "approve"
            ? otherBuisnessData?.otherBusinessDocument
            : [],
        // bankStatement:
        //   bankStatementData?.status === "approve"
        //     ? bankStatementData?.bankStatementDocument
        //     : [],
        bankStatement: dataExists(
          bankStatementData?.status === "approve" 
            ? [
                ...(Array.isArray(bankStatementData?.bankStatementDocument) 
                  ? bankStatementData?.bankStatementDocument 
                  : bankStatementData?.bankStatementDocument 
                    ? [bankStatementData?.bankStatementDocument] 
                    : []
                ),
                ...(bankStatementData?.Account_Aggregator_Link 
                  ? [bankStatementData?.Account_Aggregator_Link] 
                  : []
                )
              ]
            : []
        ),
        propertyPaper:
          propertyPaperKycData?.status === "approve"
            ? propertyPaperKycData?.propertyPapersKycDocument
            : [],
        rmPayment:
          rmPaymentUpdateData?.status === "approve"
            ? rmPaymentUpdateData?.rmPaymentDocument
            : [],
        appPdc:
          appPdcData?.status === "approve"
            ? appPdcData?.applicantPdcDocument
            : [],
        gtrPdc:
          gtrPdcData?.status === "approve"
            ? gtrPdcData?.guarantorPdcDocument
            : [],
        nachRegistration:
          nachRegistrationKyData?.status === "approve"
            ? nachRegistrationKyData?.nachRegistrationKycDocument
            : [],
        esignPhoto:
          esignPhotoData?.status === "approve"
            ? esignPhotoData?.esignPhotoDocument
            : [],
        physicalFileCourirer:
          physicalFileCourierData?.status === "approve"
            ? physicalFileCourierData?.physicalFileCourierDocument
            : [],
      },
      ElectricityBill: {
        UploadImageElectricityBillMultiple:
          electricityKycData?.electricityKycDocument || [], // electricityKycDocument
        IVRSNumber: electricityKycData?.ivrsNo || "",
        ConsumerName: electricityKycData?.consumerName || "",
        BillDate: electricityKycData?.billDate || "",
      },
      SamagraID: {
        samagraIdDocument: samagraIdData?.samagraIdDocument || [],
        familyMemberData: samagraIdData?.samagraData || [],
      },
      UdhyamCertificate: {
        udhyamKycDocument: udhyamKycdata?.udhyamKycDocument || [],
        UdhyamRegisteredAndReferenceNumber:
          udhyamKycdata?.udhyamRegistrationNo || "",
        DateOfUdhyamaRegistation: udhyamKycdata?.dateOfUdhyamRegistration || "",
        NameOfUnit: udhyamKycdata?.nameOfUnit || "",
        TypeOfEnterprises: udhyamKycdata?.typeOfEnterprises || "",
        TypeOfOrganisaiton: udhyamKycdata?.typeOfOrganisation || "",
        OwnerName: udhyamKycdata?.ownerName || "",
        DateOfIncorporation: udhyamKycdata?.dateOfIncorporation || "",
        AddressOfEnterprises: udhyamKycdata?.addressOfEnterprises || "",
      },
      BankStatement: {
        bankStatementDocument: bankStatementData?.bankStatementDocument || [],
        bankName: bankStatementData?.bankName || "",
        AccountHolderName: bankStatementData?.acHolderName || "",
        AccountNumber: bankStatementData?.accountNumber || "",
        IFSCCode: bankStatementData?.ifscCode || "",
        BranchName: bankStatementData?.branchName || "",
        AccountType: bankStatementData?.accountType || "",
        statementFromDate: bankStatementData?.statementFromDate || "",
        statementToDate: bankStatementData?.statementToDate || "",
        Account_Aggregator_Link: bankStatementData?.Account_Aggregator_Link || "",
      },
      agriculture: {
        // agricultureDocument: agricultureData?.agricultureDocument || [],
        // LD: agricultureData?.LD || "",
        // incomeType: agricultureData?.incomeType || "",
        // agriDetails: agricultureData?.agriDetails || "",
        yearlyIncome:
          pdformdatasDetail?.incomeSource[0]?.agricultureBusiness
            ?.agriIncomeYearly || "",
        availableLand: agricultureData?.availableLandInAcre || "",
        // agriLandAddressAsPerPavati:
        //   agricultureData?.agriLandAddressAsPerPavati || "",
        agriLandSurveyNo: agricultureData?.agriLandSurveyNo || "",
        LandOwnerName: agricultureData?.LandOwnerName || "",
        // relationWithApplicant: agricultureData?.relationWithApplicant || "",
        cropCultivated: agricultureData?.cropCultivated || "",
        // yearOfExprience: "",
        // yearlyIncome: "",
        monthlyIncome: yearlyIncome ? yearlyIncome / 12 : 0,
        monthlyExpence: agricultureData?.monthlyExpence || "",
        TotalNoOfAGRILand:
          pdformdatasDetail?.incomeSource[0]?.agricultureBusiness
            ?.agriLandInBigha || "",
        NoOfAgricultureOwner: agricultureData?.NoOfAgricultureOwner || "",
        agriDoingFromNoOfYears:
          pdformdatasDetail?.incomeSource[0]?.agricultureBusiness
            ?.agriDoingFromNoOfYears || "",
      },
      MilkBusiness: {
        milkDocument: milkIncomeData?.milkDocument || [],
        yearOfExperience: milkIncomeData?.noOfYears || "",
        TotalCattle: milkIncomeData?.NoOfCattles || "",
        MilkGivingCattle: milkIncomeData?.NoOfMilkGivingCattles || "",
        AverageDailyMilkQuantitIinLitters:
          milkIncomeData?.averageDailyMilkQuantity || "",
        DairyName: milkIncomeData?.NameOfDairy || "",
        DairyAddress: milkIncomeData?.adressOfDairy || "",
        DairyOwnerContact:
          milkIncomeData?.contactDetailsOfDairyOwnerIfAvailable || "",
        YearProvdingToDairy: milkIncomeData?.noOfYears || "",
        Expenses: milkIncomeData?.expensesOfMilkBuisness || "",
        MonthlyIncome: milkIncomeData?.monthlyIncomeMilkBuisness || "",
        annualIncome: milkIncomeData?.yearlyIncomeMilkBuisness || "",
        monthlyExpence: milkIncomeData?.expensesAtMilkBuisness || "",
        milkProvidingToAboveDairy:
          milkIncomeData?.milkProvidingToAboveDairy || "",
      },
      SalaryIncome: {
        // otherIncomeDocument:
        //   salaryAndOtherIncomeData?.otherIncomeDocument || [],
        // LD: salaryAndOtherIncomeData?.LD || "",
        // incomeType3: salaryAndOtherIncomeData?.incomeType3 || "",
        // salaryOtherIncomeSource:
        //   salaryAndOtherIncomeData?.salaryOtherIncomeSource || "",
        // companyName: salaryAndOtherIncomeData?.companyName || "",
        // adressOfSalaryProvider:
        //   salaryAndOtherIncomeData?.adressOfSalaryProvider || "",
        // mobNoOfSalaryProvider:
        //   salaryAndOtherIncomeData?.mobNoOfSalaryProvider || "",
        doingFromNoYears: salaryAndOtherIncomeData?.doingFromNoYears || "",
        monthlyIncomeEarned:
          salaryAndOtherIncomeData?.monthlyIncomeEarned || "",
        monthlyExpences: salaryAndOtherIncomeData?.monthlyExpences || "",
        yearlyIncome: MonthlyIncome ? MonthlyIncome * 12 : 0 || "",
      },
      OthersBusinessIncome: {
        // otherBusinessDocument: otherBuisnessData?.otherBusinessDocument || [],
        YearOfExperience: otherBuisnessData?.doingFromNoOfYears || "",
        NatureOfBusiness: otherBuisnessData?.natureOfBuisness || "",
        // NameOfBusines: otherBuisnessData?.nameOfBuisness || "",
        MonthlyIncome: otherBuisnessData?.monthlyIncomeEarned || "",
        Monthlyexpences: otherBuisnessData?.monthlyexpences || "",
        AnnualIncome:
          pdformdatasDetail?.incomeSource[0]?.other?.yearlyIncome || "",
      },
      PropertyPaperKYCForm: {
        propertyPapersKycDocument:
          propertyPaperKycData?.propertyPapersKycDocument || [],
        LD: propertyPaperKycData?.LD || "",
        cutomerName: data?.fullName || "",
        propertyOwnerName: propertyPaperKycData?.propertyOwnerName || "",
        relationWithCustomer: propertyPaperKycData?.relationWithCustomer || "",
        houseNo: propertyPaperKycData?.houseNo || "",
        surveyNo: propertyPaperKycData?.surveyNo || "",
        patwaryHalkaNo: propertyPaperKycData?.patwariHalkaNo || "",
        wardNo: propertyPaperKycData?.wardNo || "",
        villageName: propertyPaperKycData?.villageName || "",
        gramPanchayatName: propertyPaperKycData?.grampanchayatName || "",
        tehsilName: propertyPaperKycData?.tehsilName || "",
        ditrictName: propertyPaperKycData?.districtName || "",
        pincode: propertyPaperKycData?.pincode || "",
        stateName: propertyPaperKycData?.stateName || "",
        eastBoundary: propertyPaperKycData?.eastBoundary || "",
        westBoundry: propertyPaperKycData?.westBoundary || "",
        northBoundry: propertyPaperKycData?.northBoundary || "",
        southBoundry: propertyPaperKycData?.southBoundary || "",
        plotLength: propertyPaperKycData?.plotLength || "",
        plotBirth: propertyPaperKycData?.plotBridth || "",
        totalPlotArea: propertyPaperKycData?.totalPlotArea || "",
        totalAreaOfConsutruction:
          propertyPaperKycData?.totalAreaOfConstruction || "",
        typeOfConsutruction: propertyPaperKycData?.typeOfConstruction || "",
        ageOfProperty: propertyPaperKycData?.ageOfProperty || "",
        pattaNo: propertyPaperKycData?.pattaNo || "",
        pattaDate: propertyPaperKycData?.pattaDate || "",
        buildingPermissionNo: propertyPaperKycData?.buildingPermissionNo || "",
        buildingPermissionDate:
          propertyPaperKycData?.buildingPermissionDate || "",
        mutationCertificateNo:
          propertyPaperKycData?.mutationCertificateNo || "",
        mutationCertificateDate:
          propertyPaperKycData?.mutationCertificateDate || "",
        ownerCertificateNo: propertyPaperKycData?.ownerCertificateNo || "",
        ownerCertificateDate: propertyPaperKycData?.ownerCertificateDate || "",
        TaxRecieptNo: propertyPaperKycData?.taxReceiptNo || "",
        TaxRecieptDate: propertyPaperKycData?.taxReceiptDate || "",
        nocCertificateNo: propertyPaperKycData?.nocCertificateNo || "",
        nocCertificateDate: propertyPaperKycData?.nocCertificateDate || "",
        coOwnershipDeedNo: propertyPaperKycData?.coOwnershipDeedNo || "",
        coOwnershipDeedDate: propertyPaperKycData?.coOwnershipDeedDate || "",
      },
      ApplicantPDC: {
        applicantPdcDocument: appPdcData?.applicantPdcDocument || [],
        LD: appPdcData?.LD || "",
        CutomerName: data?.fullName || "",
        BankName: appPdcData?.bankName || "",
        AccountHolderName: appPdcData?.acHolderName || "",
        AccountNumber: appPdcData?.accountNumber || "",
        IFSCCode: appPdcData?.ifscCode || "",
        BranchName: appPdcData?.branchName || "",
        AccountType: appPdcData?.accountType || "",
        ChequeNumber: appPdcData?.totalChequeCount || "",
        AddChequeNumberIFNeed: "",
      },
      GuarantorPDC: {
        guarantorPdcDocument: gtrPdcData?.guarantorPdcDocument || [],
        Name: gtrPdcData?.gtrName || "",
        BankName: gtrPdcData?.gtrName || "",
        AccountHolderName: gtrPdcData?.acHolderName || "",
        AccountNumber: gtrPdcData?.accountNumber || "",
        IFSCCode: gtrPdcData?.ifscCode || "",
        BranchName: gtrPdcData?.branchName || "",
        AccountType: gtrPdcData?.accountType || "",
        ChequeNumber: gtrPdcData?.totalChequeCount || "",
        AddChequeNumber: "",
      },
      NachRagistration: {
        nachRegistrationKycDocument:
          nachRegistrationKyData?.nachRegistrationKycDocument || [],
        NachRagistrationNo:
          nachRegistrationKyData?.nachRegistrationNoUMRN || "",
        NachDoneDate: nachRegistrationKyData?.nachDoneDate || "",
      },
      PhysicalFileCourier: {
        physicalFileCourierDocument:
          physicalFileCourierData?.physicalFileCourierDocument || [],
        BranchName: physicalFileCourierData?.branchName || "",
        CourierBy: physicalFileCourierData?.courierBy || "",
        CourierTo: physicalFileCourierData?.courierTo || "",
        PODNo: physicalFileCourierData?.podNo || "",
        CourierDate: physicalFileCourierData?.courierDate || "",
      },
      RMPayment: {
        rmPaymentDocument: rmPaymentUpdateData?.rmPaymentDocument || [],
        LD: rmPaymentUpdateData?.LD || "",
        CutomerName: data?.fullName || "",
        ContactNo: rmPaymentUpdateData?.contactNo || "",
        BranchName: rmPaymentUpdateData?.branchName || "",
        AmountDeposited: rmPaymentUpdateData?.amountDeposited || "",
        UTRAndReferenceNo: rmPaymentUpdateData?.utrReferenceNo || "",
        DateOfDeposition: rmPaymentUpdateData?.dateOfDeposition || "",
        DepositedBy: rmPaymentUpdateData?.depositedBy || "",
      },
      esignPhoto: {
        esignPhoto: esignPhotoData?.esignPhotoDocument || [], //design
      },
    };
    return success(res, "branch Pendency details", {
      data: responseData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

const sanctionDetails = async (req, res) => {
  try {
    const { customerId } = req.query;
    const data = await applicantModel.findOne({ customerId });
    const tvrData = await tvrModel.findOne({ customerId });
    const pdformdatasDetail = await creditPdModel.findOne({ customerId });
    const customerData = await customerModel.findOne({ _id: customerId });
    const finalSanctionData = await finalSanctionModel.findOne({ customerId });
    let responseData = {
      tvrForm: {
        applicantInformation: {
          applicantName: tvrData?.applicantInformation?.customerName || "",
          applicationNumber: tvrData?.applicantInformation?.fileNumber || "",
          dateOfVerification:
            tvrData?.applicantInformation?.dateOfVerification || "",
          timeOfCall: tvrData?.applicantInformation?.timeOfCall || "",
        },
        contactVerification: {
          primaryContactNumberOfApplicant:
            tvrData?.contactVerification?.primaryContactNumberOfApplicant || "",
          alternativeContactNumber:
            tvrData?.contactVerification?.alternativeContactNumber || "",
        },
        personalAndFamilyInformation: {
          applicantDateOfBirth:
            tvrData?.personalAndFamilyInformation?.applicantDateOfBirth || "",
          numberOfDependentsInHousehold:
            tvrData?.personalAndFamilyInformation
              ?.numberOfDependentsInHousehold || "",
          relationshipStatus:
            tvrData?.personalAndFamilyInformation?.relationshipStatus || "",
          areThereAnyOtherFamilyMembersInvolvedInPayingTheEMI:
            tvrData?.personalAndFamilyInformation
              ?.areThereAnyOtherFamilyMembersInvolvedInPayingTheEMI || "",
          ifYesprovideNamesAndRelationship: tvrData?.familyDetails || {},
        },
        employmentAndIncomeDetails: {
          agriLand: tvrData?.employmentAndIncomeDetails?.agriLand || "",
          numberOfCattles:
            tvrData?.employmentAndIncomeDetails?.numberOfCattles || "",
          dairyNameWhereMilkSupplied:
            tvrData?.employmentAndIncomeDetails?.dairyNameWhereMilkSupplied ||
            "",
          phoneNumberOfDairyOwner:
            tvrData?.employmentAndIncomeDetails?.phoneNoOfDairyOwner || "",
          monthlyIncome:
            tvrData?.employmentAndIncomeDetails?.monthlyIncome || "",
          additionalSourcesOfIncome:
            tvrData?.employmentAndIncomeDetails?.additionalSourcesOfIncome ||
            [],
          totalMonthlyIncome:
            tvrData?.employmentAndIncomeDetails?.totalMonthlyIncome || "",
        },
        loanDetails: {
          loanAmountRequested: tvrData?.loanDetails?.loanAmountRequested || "",
          purposeOfLoan: tvrData?.loanDetails?.purposeOfLoan || "",
          tenureRequestedInMonths:
            tvrData?.loanDetails?.tenureRequestedInMonths || "",
          confortableEmiAmountForCustomer:
            tvrData?.loanDetails?.CustomerComfortableEmiAmount || "",
          justificationOnNeedForFundsWithBifurcation:
            tvrData?.loanDetails?.justificationOnNeedForFundsWithBifurcation ||
            "",
        },
        financialSatisfactionDetails: {
          kyaAapLoanAmountSeSantustHai:
            tvrData?.financialSatisfactionDetails?.satisfiedWithLoanAmount ||
            "",
          KyaAapROISeSantustHai:
            tvrData?.financialSatisfactionDetails?.satisfiedWithRoi || "",
          KyaAapTenureSeSantustHai:
            tvrData?.financialSatisfactionDetails?.satisfiedWithTenure || "",
          KyaAapMonthlyEMISeSantustHai:
            tvrData?.financialSatisfactionDetails
              ?.CustomerComfortableEmiAmount || "",
          fasalkharabHogiTabkaiseEMIBharenge:
            tvrData?.financialSatisfactionDetails
              ?.fasalkharabHogiTabkaiseEMIBharenge || "",
          pachTarikhKiEMIDateHaiAapkoChaarTareekSeBalanceMaintainKarnaPdegaKrPaenge:
            tvrData?.financialSatisfactionDetails
              ?.panchTarikhKiEMIDateHaiAapkoChaarTareekSeBalanceMaintainKarnaPdegaKrPaenge ||
            "",
          coOwnershipAlterKarniHogiKarwaPaenge:
            tvrData?.financialSatisfactionDetails
              ?.coOwnershipAlterKarniHogiKarwaPaenge || "",
          branchJakarLDSignKarniHogiKrPaenge:
            tvrData?.financialSatisfactionDetails
              ?.branchJakarLDSignKarniHogiKrPaenge || "",
          aapkoRMPaymentJamaKarnaPadegakrPaenge:
            tvrData?.financialSatisfactionDetails
              ?.aapkoRMPaymentJamaKarnaPadegakrPaenge || "",
        },
        propertyOwnershipDetails: {
          propertyAddress:
            tvrData?.propertyOwnershipDetails?.propertyAddress || "",
          typeOfProperty:
            tvrData?.propertyOwnershipDetails?.typeOfProperty || "",
          estimatedMarketValueOfProperty:
            tvrData?.propertyOwnershipDetails?.estimatedMarketValueOfProperty ||
            "",
          isThePropertyOwnedSolelyByTheApplicant:
            tvrData?.propertyOwnershipDetails
              ?.isThePropertyOwnedSolelyByTheApplicant || "",
          coOwnerDetails:
            tvrData?.propertyOwnershipDetails?.ifNoNameOfCoOwner || "",
        },
        verificationOfDetails: {
          confirmTheApplicantFullName:
            tvrData?.verificationOfDetails?.confirmTheApplicantFullName || "",
          confirmIncomeDetails:
            tvrData?.verificationOfDetails?.confirmIncomeDetails || "",
          confirmPropertyOwnership:
            tvrData?.verificationOfDetails?.confirmPropertyOwnership || "",
          confirmLoanAmountAndPurpose:
            tvrData?.verificationOfDetails?.confirmLoanAmountAndPurpose || "",
        },
        additionalVerificationQuestions: {
          areYouAwareOfTheEMIObligationsForTheLoan:
            tvrData?.additionalVerificationQuestions
              ?.areYouAwareOfTheEMIObligationsForTheLoan || "",
          doYouHaveAnyAdditionalLoansOrDebtsAtPresent:
            tvrData?.additionalVerificationQuestions
              ?.doYouHaveAnyAdditionalLoansOrDebtsAtPresent || "",
          ifYesPleaseSpecifyTypeAndAmount:
            tvrData?.additionalVerificationQuestions
              ?.ifYesPleaseSpecifyTypeAndAmount || "",
          isYourMonthlyIncomeSufficientToCoverTheEMIs:
            tvrData?.additionalVerificationQuestions
              ?.isYourMonthlyIncomeSufficientToCoverTheEMIs || "",
          haveYouFacedAnyFinancialDifficultiesInThePastTwelveMonths:
            tvrData?.additionalVerificationQuestions
              ?.haveYouFacedAnyFinancialDifficultiesInThePastTwelveMonths || "",
          ifYesPleaseDescribe:
            tvrData?.additionalVerificationQuestions?.ifYesPleaseDescribe || "",
        },
        communicationAndFeedbackFromApplicant: {
          howDidYouFindOutAboutOurServices:
            tvrData?.communicationAndFeedbackFromApplicant
              ?.howDidYouFindOutAboutOurServices || "",
          whatMotivatedYouToApplyForOurLoan:
            tvrData?.communicationAndFeedbackFromApplicant
              ?.whatMotivatedYouToApplyForOurLoan || "",
          areYouSatisfiedWithTheLoanTermsSDiscussedDuringTheApplicationProcess:
            tvrData?.communicationAndFeedbackFromApplicant
              ?.areYouSatisfiedWithTheLoanTermsSDiscussedDuringTheApplicationProcess ||
            "",
          ifNoPleaseExplainYourConcernsOrIssues:
            tvrData?.communicationAndFeedbackFromApplicant
              ?.ifNoPleaseExplainYourConcernsOrIssues || "",
        },
        remarksFromCreditManager: {
          additionalObservations:
            tvrData?.remarksFromCreditManager?.additionalObservations || "",
          recommendationsBasedOnVerification:
            tvrData?.remarksFromCreditManager
              ?.recommendationsBasedOnVerification || "",
        },
        verificationStatus: {
          verificationCompletedByNameOfCreditManager:
            tvrData?.verificationStatus
              ?.verificationCompletedByNameOfCreditManager || "",
          overallVerificationStatus:
            tvrData?.verificationStatus?.overallVerificationStatus || "",
          ifRejectedReasonForRejection:
            tvrData?.verificationStatus?.ifRejectedReasonForRejection || "",
        },
      },
      finalSanctionDetails: {
        applicantAndCaseInformation: {
          partnerName:
            finalSanctionData?.applicantAndCaseInformation?.partnerName || "",
          branchName:
            finalSanctionData?.applicantAndCaseInformation?.branchName || "",
          caseType:
            finalSanctionData?.applicantAndCaseInformation?.caseType || "",
          applicantName:
            finalSanctionData?.applicantAndCaseInformation?.applicantName || "",
          fatherName:
            finalSanctionData?.applicantAndCaseInformation?.fatherName || "",
          contactNumber:
            finalSanctionData?.applicantAndCaseInformation?.contactNumber || "",
        },
        landmarkoanDetails: {
          loanAmount: finalSanctionData?.loanDetails?.loanAmount || "",
          loanAmountInWords:
            finalSanctionData?.loanDetails?.loanAmountInWords || "",
          principleAmount:
            finalSanctionData?.loanDetails?.principleAmount || "",
          interestAmount: finalSanctionData?.loanDetails?.interestAmount || "",
          totalAmount: finalSanctionData?.loanDetails?.totalAmount || "",
          roi: finalSanctionData?.loanDetails?.roi || "",
          tenure: finalSanctionData?.loanDetails?.tenure || "",
        },
        emiDetails: {
          emiAmount: finalSanctionData?.emiDetails?.emiAmount || "",
          emiCycleDate: finalSanctionData?.emiDetails?.emiCycleDate || "",
        },
      },
    };

    return success(res, "sanction details", {
      data: responseData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

// const disbursementDetails = async (req, res) => {
//   try {
//     const { customerId } = req.query;
//     const data = await disbursementModel.findOne({ customerId });
//     const responseData = {
//       preDisbursementForm: {
//         applicantName: data?.preDisbursementForm?.applicantName || "",
//         dateOfSanction: data?.preDisbursementForm?.dateOfSanction || "",
//         sanctionLetterNumber:
//           data?.preDisbursementForm?.sanctionLetterNumber || "",
//         dateOfTheAgreement: data?.preDisbursementForm?.dateOfTheAgreement || "",
//         placeOfExecution: data?.preDisbursementForm?.placeOfExecution || "",
//       },
//       kfsDetails: {
//         processingFees: data?.kfsDetails?.processingFees || "",
//         documentsCharges: data?.kfsDetails?.documentsCharges || "",
//         insuranceCharges: data?.kfsDetails?.insuranceCharges || "",
//         cersaiCharges: data?.kfsDetails?.cersaiCharges || "",
//         preEmiinterest: data?.kfsDetails?.preEmiInterest || "",
//         benchmarkinterestRate: data?.kfsDetails?.benchmarkinterestRate || "",
//         spreadInterestRate: data?.kfsDetails?.SpreadInterestRate || "",
//         annualPercentageRateAprPercentage:
//           data?.kfsDetails?.annualPercentageRateAprPercentage || "",
//         epi: data?.kfsDetails?.epi || "",
//         noOfEpi: data?.kfsDetails?.noOfEpi || "",
//       },
//       postDisbursementDetails: {
//         applicantName: data?.postDisbursementDetails?.applicantName || "",
//         fatherName: data?.postDisbursementDetails?.fatherName || "",
//         loanNumber: data?.postDisbursementDetails?.loanNumber || "",
//         actualPreEmi: data?.postDisbursementDetails?.actualPreEmi || "",
//         dateOfDisbursement:
//           data?.postDisbursementDetails?.dateOfDisbursement || "",
//         dateOfFirstEmi: data?.postDisbursementDetails?.dateOfFirstEmi || "",
//         utrNumberOne: data?.postDisbursementDetails?.utrNumberOne || "",
//         utrNumberTwo: data?.postDisbursementDetails?.utrNumberTwo || "",
//         disbursementDoneBy:
//           data?.postDisbursementDetails?.disbursementDoneBy || "",
//       },
//     };
//     return success(res, "loan type details", {
//       data: responseData,
//     });
//   } catch (error) {
//     console.log(error);
//     return unknownError(res, error);
//   }
// };

const disbursementDetails = async (req, res) => {
  try {
    const { customerId } = req.query;

    // Validate customerId
    if (!customerId) {
      return notFound(res, "Customer ID is required");
    }

    // Fetch data with specific projection to avoid path collision
    const data = await disbursementModel.findOne({ customerId: customerId });
    const internalLegalDetails = await internalLegalModel.findOne({
      customerId,
    });

    if (!data) {
      return notFound(res, "Disbursement form not found");
    }

    // Return successful response
    success(res, "Get Detail", {data:data, internalLegalDetails});
  } catch (error) {
    console.error("Error fetching disbursement details:", error);
    unknownError(res, error);
  }
};

const inventoryManagement = async (req, res) => {
  try {
    const { customerId } = req.query;
    // jinamEntryModel,fileEnventoryModel
    const jinamEntryData = await jinamEntryModel.findOne({ customerId });
    const fileEnventoryData = await fileEnventoryModel.findOne({ customerId });
    const appData = await applicantModel.findOne({ customerId });
    const customerData = await customerModel.findOne({ _id: customerId });
    const pdformdatasDetail = await creditPdModel.findOne({ customerId });
    const appPdcData = await appPdcModel.findOne({ customerId });
    const gtrPdcData = await gtrPdcModel.findOne({ customerId });

    const responseData = {
      jinamEntryDetails: {
        customerName: jinamEntryData?.customerName || "",
        partnerName: jinamEntryData?.partnerName || "",
        branchName: jinamEntryData?.branchName || "",
        applicantJainamProfileNo:
          jinamEntryData?.applicantJainamProfileNo || "",
        coApplicantName: jinamEntryData?.coApplicantName || "",
        coApplicantJainamProfileNo:
          jinamEntryData?.coApplicantJainamProfileNo || "",
        coApplicantTwoName: jinamEntryData?.coApplicantTwoName || "",
        coApplicantTwoJainamProfileNo:
          jinamEntryData?.coApplicantTwoJainamProfileNo || "",
        guarantorName: jinamEntryData?.guarantorName || "",
        guarantorJainamProfileNo:
          jinamEntryData?.guarantorJainamProfileNo || "",
        jainamLoanNumber: jinamEntryData?.jainamLoanNumber || "",
        caseDisbursedInjainam: jinamEntryData?.caseDisbursedInjainam || "",
      },
      fileInventoryDetails: {
        customerName: fileEnventoryData?.customerName || "",
        fatherName: fileEnventoryData?.fatherName || "",
        loanNumber: fileEnventoryData?.loanNumber || "",
        sanction: fileEnventoryData?.sanction || "",
        disbursement: fileEnventoryData?.disbursement || "",
        fileNo: fileEnventoryData?.fileNo || "",
      },
      applicantChequeInventoryDetails: {
        applicantPdcDocument: appPdcData?.applicantPdcDocument || "",
        customerName: customerData?.executiveName || "",
        bankName: appPdcData?.bankName || "",
        acHolderName: appPdcData?.acHolderName || "",
        acNumber: appPdcData?.accountNumber || "",
        ifscCode: appPdcData?.ifscCode || "",
        branchName: appPdcData?.branchName || "",
        acType: appPdcData?.accountType || "",
        totalChequeCount: appPdcData?.totalChequeCount || "",
        chequeNo1: appPdcData?.chequeNo1 || "",
        chequeNo2: appPdcData?.chequeNo2 || "",
        chequeNo3: appPdcData?.chequeNo3 || "",
        chequeNo4: appPdcData?.chequeNo4 || "",
        chequeNo5: appPdcData?.chequeNo5 || "",
        chequeNo6: appPdcData?.chequeNo6 || "",
        chequeNo7: appPdcData?.chequeNo7 || "",
        chequeNo8: appPdcData?.chequeNo8 || "",
        chequeNo9: appPdcData?.chequeNo9 || "",
        chequeNo10: appPdcData?.chequeNo10 || "",
      },
      guarantorChequeInventoryDetail: {
        guarantorPdcDocument: gtrPdcData?.guarantorPdcDocument || [],
        guarantorName: gtrPdcData?.gtrName || "",
        bankName: gtrPdcData?.bankName || "",
        acHolderName: gtrPdcData?.acHolderName || "",
        acNumber: gtrPdcData?.accountNumber || "",
        ifscCode: gtrPdcData?.ifscCode || "",
        branchName: gtrPdcData?.branchName || "",
        acType: gtrPdcData?.accountType || "",
        totalChequeCount: gtrPdcData?.totalChequeCount || "",
        chequeNo1: gtrPdcData?.chequeNo1 || "",
        chequeNo2: gtrPdcData?.chequeNo2 || "",
        chequeNo3: gtrPdcData?.chequeNo3 || "",
        chequeNo4: gtrPdcData?.chequeNo4 || "",
        chequeNo5: gtrPdcData?.chequeNo5 || "",
        chequeNo6: gtrPdcData?.chequeNo6 || "",
        chequeNo7: gtrPdcData?.chequeNo7 || "",
        chequeNo8: gtrPdcData?.chequeNo8 || "",
        chequeNo9: gtrPdcData?.chequeNo9 || "",
        chequeNo10: gtrPdcData?.chequeNo10 || "",
      },
    };
    return success(res, "inventory management details", {
      data: responseData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

const addCibilDetails = async (req, res) => {
  try {
    const {
      customerId,
      applicantCibilDetail,
      applicantTotalObligation,
      applicantTotalObligationMonthly,
    } = req.body; // Destructure 'data' array from req.body

    if (
      !Array.isArray(applicantCibilDetail) ||
      applicantCibilDetail.length === 0
    ) {
      return badRequest(res, "No applicantCibilDetail provided");
    }
    let data;
    for (const record of applicantCibilDetail) {
      const {
        Institution,
        loanType,
        loanAmount,
        outstandingAmount,
        RateOfInterest,
        ownership,
        emiMonthly,
        emiAnnual,
        TotalTenure,
        BalanceTenure,
        LoanStatus,
        LoanObligated,
        ObligationConsidered,

        overDue,
        cibilScore,
        SanctionedAmount,
        CurrentBalance,
      } = record;

      const customerDetails = await cibilModel.findOne({ customerId });
      if (!customerDetails) {
        return badRequest(res, `customerId ${customerId} does not exist`);
      }

      data = await cibilModel.findOneAndUpdate(
        { customerId },
        {
          $push: {
            applicantCibilDetail: {
              Institution,
              loanType,
              loanAmount,
              outstandingAmount,
              RateOfInterest,
              ownership,
              emiMonthly,
              emiAnnual,
              TotalTenure,
              BalanceTenure,
              LoanStatus,
              LoanObligated,
              ObligationConsidered,
            },
          },
          $set: {
            applicantTotalObligation,
            applicantTotalObligationMonthly,
          },
        },
        { new: true }
      );
    }

    return success(res, "CibilDetails added successfully", { data });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

// updateCibilDetails
const updateCibilDetails = async (req, res) => {
  try {
    const { customerId, applicantCibilDetail, applicantTotalObligation,applicantTotalObligationMonthly } =
      req.body; // Destructure 'data' array from req.body

    if (
      !Array.isArray(applicantCibilDetail) ||
      applicantCibilDetail.length === 0
    ) {
      return badRequest(res, "No applicantCibilDetail provided");
    }
    let data;
    for (const record of applicantCibilDetail) {
      const {
        Institution,
        loanType,
        loanAmount,
        outstandingAmount,
        RateOfInterest,
        ownership,
        emiMonthly,
        emiAnnual,
        TotalTenure,
        BalanceTenure,
        LoanStatus,
        LoanObligated,
        ObligationConsidered,

        overDue,
        cibilScore,
        SanctionedAmount,
        CurrentBalance,
      } = record;

      const customerDetails = await cibilModel.findOne({ customerId });
      if (!customerDetails) {
        return badRequest(res, `customerId ${customerId} does not exist`);
      }

      data = await cibilModel.findOneAndUpdate(
        { customerId },
        {
          $set: {
            applicantTotalObligation,
            applicantCibilDetail,
            applicantTotalObligationMonthly
          },
        },
        { new: true }
      );
    }
    if (data?.applicantCibilDetail?.length > 0) {
      // updateFields.finalSanctionDetailsFormStart = true;
      // updateFields.finalSanctionDetailsFormComplete = true;
      const update = await processModel.findOneAndUpdate(
        { customerId },
        { $set: { cibilDetailFormStart: true, cibilDetailFormComplete: true } },
        { new: true }
      );
      console.log(update, "update");
    }

    return success(res, "CibilDetails added successfully", { data });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

// addCoAppCibilDetails

const addCoAppCibilDetails = async (req, res) => {
  try {
    const {
      customerId,
      coAppOneloanDetail,
      coAppTwoloanDetail,
      guarantorCibilDetail,
    } = req.body;

    if (!coAppOneloanDetail && !coAppTwoloanDetail && !guarantorCibilDetail) {
      return badRequest(res, "No loan details provided");
    }

    const customerDetails = await cibilModel.findOne({ customerId });
    if (!customerDetails) {
      return badRequest(res, `customerId ${customerId} does not exist`);
    }

    if (coAppOneloanDetail) {
      for (const record of coAppOneloanDetail) {
        const {
          loanType,
          loanAmount,
          outstandingAmount,
          overDue,
          emi,
          cibilScore,
          ownership,
          SanctionedAmount,
          CurrentBalance,
          RateOfInterest,
          TotalTenure,
          BalanceTenure,
          LoanStatus,
          LoanObligated,
          ObligationConsidered,
        } = record;

        await cibilModel.findOneAndUpdate(
          { customerId },
          {
            $push: {
              "coApplicantData.0.coApplicantCibilDetail": {
                loanType,
                loanAmount,
                outstandingAmount,
                overDue,
                emi,
                cibilScore,
                ownership,
                SanctionedAmount,
                CurrentBalance,
                RateOfInterest,
                TotalTenure,
                BalanceTenure,
                LoanStatus,
                LoanObligated,
                ObligationConsidered,
              },
            },
          },
          { new: true }
        );
      }
    }

    if (coAppTwoloanDetail) {
      for (const record of coAppTwoloanDetail) {
        const {
          loanType,
          loanAmount,
          outstandingAmount,
          overDue,
          emi,
          cibilScore,
          ownership,
          SanctionedAmount,
          CurrentBalance,
          RateOfInterest,
          TotalTenure,
          BalanceTenure,
          LoanStatus,
          LoanObligated,
          ObligationConsidered,
        } = record;

        await cibilModel.findOneAndUpdate(
          { customerId },
          {
            $push: {
              "coApplicantData.1.coApplicantCibilDetail": {
                loanType,
                loanAmount,
                outstandingAmount,
                overDue,
                emi,
                cibilScore,
                ownership,
                SanctionedAmount,
                CurrentBalance,
                RateOfInterest,
                TotalTenure,
                BalanceTenure,
                LoanStatus,
                LoanObligated,
                ObligationConsidered,
              },
            },
          },
          { new: true }
        );
      }
    }

    if (guarantorCibilDetail) {
      for (const record of guarantorCibilDetail) {
        const {
          loanType,
          loanAmount,
          outstandingAmount,
          overDue,
          emi,
          cibilScore,
          ownership,
          SanctionedAmount,
          CurrentBalance,
          RateOfInterest,
          TotalTenure,
          BalanceTenure,
          LoanStatus,
          LoanObligated,
          ObligationConsidered,
        } = record;

        await cibilModel.findOneAndUpdate(
          { customerId },
          {
            $push: {
              guarantorCibilDetail: {
                loanType,
                loanAmount,
                outstandingAmount,
                overDue,
                emi,
                cibilScore,
                ownership,
                SanctionedAmount,
                CurrentBalance,
                RateOfInterest,
                TotalTenure,
                BalanceTenure,
                LoanStatus,
                LoanObligated,
                ObligationConsidered,
              },
            },
          },
          { new: true }
        );
      }
    }

    return success(res, "CIBIL Details added successfully");
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

const processPdfAndUpload = async (customerId, logo, uploadUrl) => {
  const sectionData = await sectionLatter(customerId, logo);
  // console.log(sectionData,"sectionData in contorller log")
  const applicantData = await applicantLatter(customerId, logo);
  const rcplLoanAgreementData = await rcplLoanAgreement(customerId);

  // console.log(sectionData,"sectionData")

  const sectionObj = {
    fileName: sectionData,
    // file: doc.toString('base64')
  };
  const sectionEsign = await initESign(sectionObj);

  const applicantObj = {
    fileName: sectionData,
    // file: doc.toString('base64')
  };
  const applicantEsign = await initESign(applicantObj);

  const rcplLoanAgreementObj = {
    fileName: sectionData,
    // file: doc.toString('base64')
  };
  const rcplLoanAgreementEsign = await initESign(rcplLoanAgreementObj);

  const processFile = async (filePath) => {
    let resolvedPath = path
      .resolve(__dirname, `../../../..${filePath}`)
      .replace(/\\/g, "/");
    const formData = new FormData();
    formData.append("image", fs.createReadStream(resolvedPath));
    const response = await axios.post(uploadUrl, formData, {
      headers: { ...formData.getHeaders() },
    });
    return response.data?.items;
  };

  const uploadedSectionUrl = await processFile(sectionData);
  const uploadedApplicantUrl = await processFile(applicantData);
  const uploadedAgreementUrl = await processFile(rcplLoanAgreementData);

  if (!uploadedSectionUrl || !uploadedApplicantUrl || !uploadedAgreementUrl) {
    throw new Error("One or more uploaded file URLs are undefined.");
  }

  // fs.unlinkSync(path.resolve(__dirname, `../../../..${sectionData}`));
  // fs.unlinkSync(path.resolve(__dirname, `../../../..${applicantData}`));

  return { uploadedSectionUrl, uploadedApplicantUrl, uploadedAgreementUrl };
};

// ratna fin send to partner
const sendToPartner = async (req, res) => {
  try {
    const { partnerId, customerId } = req.body;
    const partnerModel = await lendersModel.findOne({ _id: partnerId });

    const partnerConfigs = {
      "FIN COOPERS CAPITAL PVT LTD": FinpdfLogo,
      "RATNAAFIN CAPITAL PVT LTD": RatnapdfLogo,
    };

    const partnerLogo = partnerConfigs[partnerModel.partnerName];
    if (!partnerLogo) throw new Error("Unsupported partner.");

    const uploadUrl = "https://stageapi.fincooper.in/v1/formData/ImageUpload";
    const { uploadedSectionUrl, uploadedApplicantUrl, uploadedAgreementUrl } =
      await processPdfAndUpload(customerId, partnerLogo, uploadUrl);

    const BASEURL = process.env.BASE_URL;
    const attachments = [
      {
        path: `${BASEURL}${uploadedSectionUrl.image}`,
        filename: uploadedSectionUrl.image.split("/").pop(),
        contentType: "application/pdf",
      },
      {
        path: `${BASEURL}${uploadedApplicantUrl.image}`,
        filename: uploadedApplicantUrl.image.split("/").pop(),
        contentType: "application/pdf",
      },
      {
        path: `${BASEURL}${uploadedAgreementUrl.image}`,
        filename: uploadedAgreementUrl.image.split("/").pop(),
        contentType: "application/pdf",
      },
    ];

    // console.log("Attachments:", attachments);

    const emailContent = `
      <div style="font-family: Arial, sans-serif; line-height: 1.6;">
        <p>Dear Sir,</p>
        <p>Caption case Report is for final approval.</p>
        <p>Need your immediate action in this case.</p>
        <p>Regards,</p>
        <p>Team FinCoopers</p>
        <div>All PDFs are attached in this email.</div>
      </div>
    `;

    await sendEmail(
      [partnerModel.email],
      ["raikwar@yopmail.com"],
      `Final approval email for review`,
      emailContent,
      attachments
    );

    return success(res, "Email sent successfully with uploaded files.");
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

// grow money send to partner
const growMonetProcessPdfAndUpload = async (customerId, logo, uploadUrl) => {
  const pgDeedData = await generatePgDeedSangitaPdf(customerId, logo);
  // console.log(pgDeedData,"pgDeedData in contorller log")
  const sanctionData = await generateSanctionLetterPdf(customerId, logo);
  const rcplLoanAgreementData = await rcplLoanAgreement(customerId);

  // console.log(sectionData,"sectionData")

  const pgDeedObj = {
    fileName: pgDeedData,
    // file: doc.toString('base64')
  };
  // const sectionEsign = await initESign(pgDeedObj)

  const applicantObj = {
    fileName: sanctionData,
    // file: doc.toString('base64')
  };
  //  const applicantEsign = await initESign(applicantObj)

  const rcplLoanAgreementObj = {
    fileName: rcplLoanAgreementData,
    // file: doc.toString('base64')
  };
  //  const growMoneyAgreementEsign = await initESign(rcplLoanAgreementObj)

  const processFile = async (filePath) => {
    let resolvedPath = path
      .resolve(__dirname, `../../../..${filePath}`)
      .replace(/\\/g, "/");
    const formData = new FormData();
    formData.append("image", fs.createReadStream(resolvedPath));
    const response = await axios.post(uploadUrl, formData, {
      headers: { ...formData.getHeaders() },
    });
    return response.data?.items;
  };

  const uploadedPgDeedUrl = await processFile(pgDeedData);
  const uploadedSanctionUrl = await processFile(sanctionData);
  const uploadedAgreementUrl = await processFile(rcplLoanAgreementData);

  if (!uploadedPgDeedUrl || !uploadedAgreementUrl || !uploadedSanctionUrl) {
    throw new Error("One or more uploaded file URLs are undefined.");
  }

  // fs.unlinkSync(path.resolve(__dirname, `../../../..${sectionData}`));
  // fs.unlinkSync(path.resolve(__dirname, `../../../..${applicantData}`));

  return { uploadedPgDeedUrl, uploadedAgreementUrl, uploadedSanctionUrl };
};

const growMonetSendToPartner = async (req, res) => {
  try {
    const { partnerId, customerId } = req.body;
    // console.log(partnerId, customerId, "partnerId, customerId")
    const partnerModel = await lendersModel.findOne({ _id: partnerId });

    const partnerConfigs = {
      "FIN COOPERS CAPITAL PVT LTD": FinpdfLogo,
    };

    const partnerLogo = partnerConfigs[partnerModel.partnerName];
    // console.log("partnerLogo",partnerLogo);
    if (!partnerLogo) throw new Error("Unsupported partner.");

    const uploadUrl = "https://stageapi.fincooper.in/v1/formData/ImageUpload";
    const { uploadedPgDeedUrl, uploadedAgreementUrl, uploadedSanctionUrl } =
      await growMonetProcessPdfAndUpload(customerId, partnerLogo, uploadUrl);

    const BASEURL = process.env.BASE_URL;
    const attachments = [
      {
        path: `${BASEURL}${uploadedPgDeedUrl.image}`,
        filename: uploadedPgDeedUrl.image.split("/").pop(),
        contentType: "application/pdf",
      },
      {
        path: `${BASEURL}${uploadedSanctionUrl.image}`,
        filename: uploadedSanctionUrl.image.split("/").pop(),
        contentType: "application/pdf",
      },
      {
        path: `${BASEURL}${uploadedAgreementUrl.image}`,
        filename: uploadedAgreementUrl.image.split("/").pop(),
        contentType: "application/pdf",
      },
    ];

    // console.log("Attachments:", attachments);

    const emailContent = `
      <div style="font-family: Arial, sans-serif; line-height: 1.6;">
        <p>Dear Sir,</p>
        <p>Caption case Report is for final approval.</p>
        <p>Need your immediate action in this case.</p>
        <p>Regards,</p>
        <p>Team FinCoopers</p>
        <div>All PDFs are attached in this email.</div>
      </div>
    `;

    await sendEmail(
      [partnerModel.email],
      ["raikwar@yopmail.com"],
      `Final approval email for review`,
      emailContent,
      attachments
    );

    return success(res, "Email sent successfully with uploaded files.");
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

const excelSheetData = async (req, res) => {
  try {
    const { customerId } = req.query;
    // const customerId = '6697ba1fdea34ac072366fee';
    // console.log("tokenId", tokenId);

    // Find employee by token ID
    const customerData = await customerModel.findById({ _id: customerId });
    if (!customerData) {
      return notFound(res, "customer not found", []);
    }

    const customerFinId = customerData?.customerFinId;
    // console.log("employeUniqueId", customerFinId);
    // Check if employeUniqueId is empty
    // if (!customerFinId) {
    //   return notFound(res, "customerFinId not found", []);
    // }

    const spreadsheetId = "1K9EnCErm-NfZCg7--TJtkfOqzPyGc-c5eLrWELS3kMA"; //process.env.VISIT_GOOGLE_SHEET_KEY;
    const sheetName = "Sheet1"; //process.env.EMIOVERALL_SHEET;
    const auth = new google.auth.GoogleAuth({
      credentials,
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    });
    const authClient = await auth.getClient();
    const sheets = google.sheets({ version: "v4", auth: authClient });

    const response = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range: sheetName,
    });

    const rows = response.data.values;
    // console.log(rows,"rows<><><><><><>")

    // Get headers and data rows
    const [headers, ...dataRows] = rows;

    // Find the row matching the customerFinId
    const matchingRow = dataRows.find(
      (row) => row[headers.indexOf("customerFinId")] === customerFinId
    );

    // if (!matchingRow) {
    //   return notFound(
    //     res,
    //     "No matching data(customerFinId) found in the sheet",
    //     []
    //   );
    // }
    // const responseData = {
    //   // 1st api
    //   customerLoanType: {
    //     LoanAmountRequested:
    //     matchingRow ?  matchingRow[headers.indexOf("LoanAmountRequested")] : "NA",
    //     LoanTenureRequested:
    //     matchingRow ? matchingRow[headers.indexOf("LoanTenureRequested")] : "NA",
    //     LoanPurpose: matchingRow ? matchingRow[headers.indexOf("LoanPurpose")] : "NA",
    //     LoanType: matchingRow ? matchingRow[headers.indexOf("LoanType")] : "NA",
    //     roi: matchingRow ? matchingRow[headers.indexOf("Roi")] : "NA",
    //     emi: matchingRow ? matchingRow[headers.indexOf("Emi")] : "NA",
    //   },}

    const responseData = {
      // 1st api
      customerLoanType: {
        LoanAmountRequested: matchingRow
          ? matchingRow[headers.indexOf("LoanAmountRequested")]
          : "",
        LoanTenureRequested: matchingRow
          ? matchingRow[headers.indexOf("LoanTenureRequested")]
          : "",
        LoanPurpose: matchingRow
          ? matchingRow[headers.indexOf("LoanPurpose")]
          : "",
        LoanType: matchingRow ? matchingRow[headers.indexOf("LoanType")] : "",
        roi: matchingRow ? matchingRow[headers.indexOf("Roi")] : "",
        emi: matchingRow ? matchingRow[headers.indexOf("Emi")] : "",
      },
      _id: customerId, // Include customer _id
      employeId: "",
      productId: "",
      customerFinId: matchingRow ? customerFinId : "",
      mobileNo: matchingRow ? matchingRow[headers.indexOf("MobileNo")] : "",
      loanAmount: matchingRow
        ? matchingRow[headers.indexOf("LoanAmountRequested")]
        : "",
      roi: matchingRow ? matchingRow[headers.indexOf("Roi")] : "",
      tenure: matchingRow
        ? matchingRow[headers.indexOf("LoanTenureRequested")]
        : "",
      emi: matchingRow ? matchingRow[headers.indexOf("Emi")] : "",
      executiveName: matchingRow
        ? matchingRow[headers.indexOf("ExecutiveName")]
        : "",
      createdAt: "",
      updatedAt: "",
      productData: {
        productName: matchingRow
          ? matchingRow[headers.indexOf("ProductName")]
          : "",
      },
      applicantDetail: {
        fullName: matchingRow ? matchingRow[headers.indexOf("FullName")] : "",
        applicantPhoto: matchingRow
          ? matchingRow[headers.indexOf("ApplicantPhoto")]
          : "",
      },
      cibildetailDetail: {
        applicantCibilScore: matchingRow
          ? matchingRow[headers.indexOf("ApplicantCibilScore")]
          : "",
      },
      tvrDetails: {
        income: matchingRow ? matchingRow[headers.indexOf("Income")] : "",
        propertyValue: matchingRow
          ? matchingRow[headers.indexOf("PropertyValue")]
          : "",
        foir: matchingRow ? matchingRow[headers.indexOf("Foir")] : "",
        ltv: matchingRow ? matchingRow[headers.indexOf("ltv")] : "",
      },
      ApplicantDetails: {
        ApplicantType: matchingRow
          ? matchingRow[headers.indexOf("ApplicantType")]
          : "",
        bussinessType: matchingRow
          ? matchingRow[headers.indexOf("BussinessType")]
          : "",
        fullName: matchingRow ? matchingRow[headers.indexOf("FullName")] : "",
        fatherName: matchingRow
          ? matchingRow[headers.indexOf("FatherName")]
          : "",
        motherName: matchingRow
          ? matchingRow[headers.indexOf("MotherName")]
          : "",
        spouseName: matchingRow
          ? matchingRow[headers.indexOf("SpouseName")]
          : "",
        dob: matchingRow ? matchingRow[headers.indexOf("Dob")] : "",
        age: matchingRow ? matchingRow[headers.indexOf("Age")] : "",
        gender: matchingRow ? matchingRow[headers.indexOf("Gender")] : "",
        maritalStatus: matchingRow
          ? matchingRow[headers.indexOf("MaritalStatus")]
          : "",
        educationalDetails: matchingRow
          ? matchingRow[headers.indexOf("EducationalDetails")]
          : "",
        religion: matchingRow ? matchingRow[headers.indexOf("Religion")] : "",
        nationality: matchingRow
          ? matchingRow[headers.indexOf("Nationality")]
          : "",
        category: matchingRow ? matchingRow[headers.indexOf("Category")] : "",
        caste: matchingRow ? matchingRow[headers.indexOf("Caste")] : "",
        noOfDependentWithCustomer: matchingRow
          ? matchingRow[headers.indexOf("noOfDependentWithCustomer")]
          : "",
      },
      kycDetailsOf: {
        panNo: matchingRow ? matchingRow[headers.indexOf("PanNo")] : "",
        aadharNo: matchingRow ? matchingRow[headers.indexOf("AadharNo")] : "",
        voterIdNo: matchingRow ? matchingRow[headers.indexOf("VoterIdNo")] : "",
        udyamRegistrationNo: matchingRow
          ? matchingRow[headers.indexOf("UdyamRegistrationNo")]
          : "",
      },
      contactInformation: {
        mobileNo: matchingRow ? matchingRow[headers.indexOf("MobileNo")] : "",
        mobileNoTwo: matchingRow
          ? matchingRow[headers.indexOf("MobileNoTwo")]
          : "",
        email: matchingRow ? matchingRow[headers.indexOf("Email")] : "",
      },
      persnalDetails: {
        religion: matchingRow ? matchingRow[headers.indexOf("Religion")] : "",
        nationality: matchingRow
          ? matchingRow[headers.indexOf("Nationality")]
          : "",
        category: matchingRow ? matchingRow[headers.indexOf("Category")] : "",
      },
      permanentInformation: {
        fullAddress: matchingRow
          ? matchingRow[headers.indexOf("PermanentFullAddress")]
          : "",
        presentAddress: matchingRow
          ? matchingRow[headers.indexOf("PermanentPresentAddress")]
          : "",
        landmark: matchingRow
          ? matchingRow[headers.indexOf("PermanentLandmark")]
          : "",
        city: matchingRow ? matchingRow[headers.indexOf("PermanentCity")] : "",
        state: matchingRow
          ? matchingRow[headers.indexOf("PermanentState")]
          : "",
        district: matchingRow
          ? matchingRow[headers.indexOf("PermanentDistrict")]
          : "",
        pinCode: matchingRow
          ? matchingRow[headers.indexOf("PermanentPinCode")]
          : "",
        noOfyearsAtCurrentAddress: matchingRow
          ? matchingRow[headers.indexOf("PermanentNoOfyearsAtCurrentAddress")]
          : "",
        country: "India",
      },
      presentInformation: {
        addressAsPerAdhar: matchingRow
          ? matchingRow[headers.indexOf("PresentAddressAsPerAdhar")]
          : "",
        landmark: matchingRow
          ? matchingRow[headers.indexOf("PresentLandmark")]
          : "",
        city: matchingRow ? matchingRow[headers.indexOf("PresentCity")] : "",
        state: matchingRow ? matchingRow[headers.indexOf("PresentState")] : "",
        district: matchingRow
          ? matchingRow[headers.indexOf("PresentDistrict")]
          : "",
        pinCode: matchingRow
          ? matchingRow[headers.indexOf("PresentPincode")]
          : "",
        noOfyearsAtCurrentAddress: matchingRow
          ? matchingRow[headers.indexOf("PresentNoOfyearsAtCurrentAddress")]
          : "",
        country: matchingRow
          ? matchingRow[headers.indexOf("PresentCountry")]
          : "India",
        residenceType: matchingRow
          ? matchingRow[headers.indexOf("PresentResidenceType")]
          : "",
      },
      educationAndOccupation: {
        education: matchingRow ? matchingRow[headers.indexOf("education")] : "",
        occupation: matchingRow
          ? matchingRow[headers.indexOf("occupation")]
          : "",
        monthlyIncome: matchingRow
          ? matchingRow[headers.indexOf("monthlyIncome")]
          : "",
        otherMonthlyIncome: matchingRow
          ? matchingRow[headers.indexOf("otherMonthlyIncome")]
          : "",
        sourceOfOtherIncome: matchingRow
          ? matchingRow[headers.indexOf("sourceOfOtherIncome")]
          : "",
        annualIncome: matchingRow
          ? matchingRow[headers.indexOf("annualIncome")]
          : "",
        totalHouseHoldExpenses: matchingRow
          ? matchingRow[headers.indexOf("totalHouseHoldExpenses")]
          : "",
      },
      // co-applicant
      coApplicantDetails: [
        {
          ApplicantType: matchingRow
            ? matchingRow[headers.indexOf("coApplicantTypeOne")]
            : "",
          bussinessType: matchingRow
            ? matchingRow[headers.indexOf("coApplicantBussinessTypeOne")]
            : "",
          fullName: matchingRow
            ? matchingRow[headers.indexOf("coApplicantFullNameOne")]
            : "",
          fatherName: matchingRow
            ? matchingRow[headers.indexOf("coApplicantFatherNameOne")]
            : "",
          motherName: matchingRow
            ? matchingRow[headers.indexOf("coApplicantMotherNameOne")]
            : "",
          dob: matchingRow
            ? matchingRow[headers.indexOf("coApplicantDobOne")]
            : "",
          age: matchingRow
            ? matchingRow[headers.indexOf("coApplicantAgeOne")]
            : "",
          gender: matchingRow
            ? matchingRow[headers.indexOf("coApplicantGenderOne")]
            : "",
          maritalStatus: matchingRow
            ? matchingRow[headers.indexOf("coApplicantMaritalStatusOne")]
            : "",
          educationDetails: matchingRow
            ? matchingRow[headers.indexOf("coApplicantEducationDetailsOne")]
            : "",
          relationWithApplicant: matchingRow
            ? matchingRow[
                headers.indexOf("coApplicantRelationWithApplicantOne")
              ]
            : "",
          religion: matchingRow
            ? matchingRow[headers.indexOf("coApplicantReligionOne")]
            : "",
          nationality: matchingRow
            ? matchingRow[headers.indexOf("coApplicantNationalityOne")]
            : "",
          category: matchingRow
            ? matchingRow[headers.indexOf("coApplicantCategoryOne")]
            : "",
          caste: matchingRow
            ? matchingRow[headers.indexOf("coApplicantCasteOne")]
            : "",

          contactInformation: {
            mobileNo: matchingRow
              ? matchingRow[headers.indexOf("coApplicantMobileNoOne")]
              : "",
            mobileNoTwo: matchingRow
              ? matchingRow[headers.indexOf("coApplicantMobileNoTwoOne")]
              : "",
            email: matchingRow
              ? matchingRow[headers.indexOf("coApplicantEmailOne")]
              : "",
          },

          kycDetails: {
            udyamRegistrationNo: matchingRow
              ? matchingRow[
                  headers.indexOf("coApplicantUdyamRegistrationNoOne")
                ]
              : "",
            docType: matchingRow
              ? matchingRow[headers.indexOf("coApplicantDocTypeOne")]
              : "",
            aadharNo: matchingRow
              ? matchingRow[headers.indexOf("coApplicantAadharNoOne")]
              : "",
            docNo: matchingRow
              ? matchingRow[headers.indexOf("coApplicantDocNoOne")]
              : "",
          },

          permanentAddressInformation: {
            addressAsPerAdhar: matchingRow
              ? matchingRow[headers.indexOf("coApplicantAddressAsPerAdharOne")]
              : "",
            landmark: matchingRow
              ? matchingRow[headers.indexOf("coApplicantLandmarkOne")]
              : "",
            nameOfCity: matchingRow
              ? matchingRow[headers.indexOf("coApplicantNameOfCityOne")]
              : "",
            city: matchingRow
              ? matchingRow[headers.indexOf("coApplicantCityOne")]
              : "",
            state: matchingRow
              ? matchingRow[headers.indexOf("coApplicantStateOne")]
              : "",
            districtName: matchingRow
              ? matchingRow[headers.indexOf("coApplicantDistrictNameOne")]
              : "",
            pinCode: matchingRow
              ? matchingRow[headers.indexOf("coApplicantPinCodeOne")]
              : "",
            noOfyearsAtCurrentAddress: matchingRow
              ? matchingRow[
                  headers.indexOf("coApplicantNoOfyearsAtCurrentAddressOne")
                ]
              : "",
            country: "India",
            residenceType: matchingRow
              ? matchingRow[headers.indexOf("coApplicantResidenceTypeOne")]
              : "",
          },

          presentAddressInformation: {
            presentAddress: matchingRow
              ? matchingRow[headers.indexOf("coApplicantPresentAddressOne")]
              : "",
            fullAddress: matchingRow
              ? matchingRow[headers.indexOf("coApplicantFullAddressOne")]
              : "",
            landmark: matchingRow
              ? matchingRow[headers.indexOf("coApplicantLandmarkOne")]
              : "",
            nameOfCity: matchingRow
              ? matchingRow[headers.indexOf("coApplicantNameOfCityOne")]
              : "",
            addressLine1: matchingRow
              ? matchingRow[headers.indexOf("coApplicantaddressLine1One")]
              : "",
            addressLine2: matchingRow
              ? matchingRow[headers.indexOf("coApplicantaddressLine2One")]
              : "",
            city: matchingRow
              ? matchingRow[headers.indexOf("coApplicantCityOne")]
              : "",
            state: matchingRow
              ? matchingRow[headers.indexOf("coApplicantStateOne")]
              : "",
            districtName: matchingRow
              ? matchingRow[headers.indexOf("coApplicantDistrictNameOne")]
              : "",
            pinCode: matchingRow
              ? matchingRow[headers.indexOf("coApplicantPinCodeOne")]
              : "",
            noOfyearsAtCurrentAddress: matchingRow
              ? matchingRow[
                  headers.indexOf("coApplicantNoOfyearsAtCurrentAddressOne")
                ]
              : "",
            country: "India",
          },

          employeDetails: {
            education: matchingRow
              ? matchingRow[headers.indexOf("coApplicantEducationOne")]
              : "",
            occupation: matchingRow
              ? matchingRow[headers.indexOf("coApplicantOccupationOne")]
              : "",
            monthlyIncome: matchingRow
              ? matchingRow[headers.indexOf("coApplicantMonthlyIncomeOne")]
              : "",
            otherMonthlyIncome: matchingRow
              ? matchingRow[headers.indexOf("coApplicantOtherMonthlyIncomeOne")]
              : "",
            sourceOfOtherIncome: matchingRow
              ? matchingRow[
                  headers.indexOf("coApplicantSourceOfOtherIncomeOne")
                ]
              : "",
            annualIncome: matchingRow
              ? matchingRow[headers.indexOf("coApplicantAnnualIncomeOne")]
              : "",
            totalHouseHoldExpenses: matchingRow
              ? matchingRow[
                  headers.indexOf("coApplicantTotalHouseHoldExpensesOne")
                ]
              : "",
          },
        },
        {
          ApplicantType: matchingRow
            ? matchingRow[headers.indexOf("coApplicantTypeTwo")]
            : "",
          bussinessType: matchingRow
            ? matchingRow[headers.indexOf("coApplicantBussinessTypeTwo")]
            : "",
          fullName: matchingRow
            ? matchingRow[headers.indexOf("coApplicantFullNameTwo")]
            : "",
          fatherName: matchingRow
            ? matchingRow[headers.indexOf("coApplicantFatherNameTwo")]
            : "",
          motherName: matchingRow
            ? matchingRow[headers.indexOf("coApplicantMotherNameTwo")]
            : "",
          dob: matchingRow
            ? matchingRow[headers.indexOf("coApplicantDobTwo")]
            : "",
          age: matchingRow
            ? matchingRow[headers.indexOf("coApplicantAgeTwo")]
            : "",
          gender: matchingRow
            ? matchingRow[headers.indexOf("coApplicantGenderTwo")]
            : "",
          maritalStatus: matchingRow
            ? matchingRow[headers.indexOf("coApplicantMaritalStatusTwo")]
            : "",
          educationDetails: matchingRow
            ? matchingRow[headers.indexOf("coApplicantEducationDetailsTwo")]
            : "",
          relationWithApplicant: matchingRow
            ? matchingRow[
                headers.indexOf("coApplicantRelationWithApplicantTwo")
              ]
            : "",
          religion: matchingRow
            ? matchingRow[headers.indexOf("coApplicantReligionTwo")]
            : "",
          nationality: matchingRow
            ? matchingRow[headers.indexOf("coApplicantNationalityTwo")]
            : "",
          category: matchingRow
            ? matchingRow[headers.indexOf("coApplicantCategoryTwo")]
            : "",
          caste: matchingRow
            ? matchingRow[headers.indexOf("coApplicantCasteTwo")]
            : "",

          contactInformation: {
            mobileNo: matchingRow
              ? matchingRow[headers.indexOf("coApplicantMobileNoTwo")]
              : "",
            mobileNoTwo: matchingRow
              ? matchingRow[headers.indexOf("coApplicantMobileNoTwoTwo")]
              : "",
            email: matchingRow
              ? matchingRow[headers.indexOf("coApplicantEmailTwo")]
              : "",
          },

          kycDetails: {
            udyamRegistrationNo: matchingRow
              ? matchingRow[
                  headers.indexOf("coApplicantUdyamRegistrationNoTwo")
                ]
              : "",
            docType: matchingRow
              ? matchingRow[headers.indexOf("coApplicantDocTypeTwo")]
              : "",
            aadharNo: matchingRow
              ? matchingRow[headers.indexOf("coApplicantAadharNoTwo")]
              : "",
            docNo: matchingRow
              ? matchingRow[headers.indexOf("coApplicantDocNoTwo")]
              : "",
          },

          permanentAddressInformation: {
            addressAsPerAdhar: matchingRow
              ? matchingRow[headers.indexOf("coApplicantAddressAsPerAdharTwo")]
              : "",
            landmark: matchingRow
              ? matchingRow[headers.indexOf("coApplicantLandmarkTwo")]
              : "",
            nameOfCity: matchingRow
              ? matchingRow[headers.indexOf("coApplicantNameOfCityTwo")]
              : "",
            city: matchingRow
              ? matchingRow[headers.indexOf("coApplicantCityTwo")]
              : "",
            state: matchingRow
              ? matchingRow[headers.indexOf("coApplicantStateTwo")]
              : "",
            districtName: matchingRow
              ? matchingRow[headers.indexOf("coApplicantDistrictNameTwo")]
              : "",
            pinCode: matchingRow
              ? matchingRow[headers.indexOf("coApplicantPinCodeTwo")]
              : "",
            noOfyearsAtCurrentAddress: matchingRow
              ? matchingRow[
                  headers.indexOf("coApplicantNoOfyearsAtCurrentAddressTwo")
                ]
              : "",
            country: "India",
            residenceType: matchingRow
              ? matchingRow[headers.indexOf("coApplicantResidenceTypeTwo")]
              : "",
          },

          presentAddressInformation: {
            presentAddress: matchingRow
              ? matchingRow[headers.indexOf("coApplicantPresentAddressTwo")]
              : "",
            fullAddress: matchingRow
              ? matchingRow[headers.indexOf("coApplicantFullAddressTwo")]
              : "",
            landmark: matchingRow
              ? matchingRow[headers.indexOf("coApplicantLandmarkTwo")]
              : "",
            nameOfCity: matchingRow
              ? matchingRow[headers.indexOf("coApplicantNameOfCityTwo")]
              : "",
            addressLine1: matchingRow
              ? matchingRow[headers.indexOf("coApplicantaddressLine1Two")]
              : "",
            addressLine2: matchingRow
              ? matchingRow[headers.indexOf("coApplicantaddressLine2Two")]
              : "",
            city: matchingRow
              ? matchingRow[headers.indexOf("coApplicantCityTwo")]
              : "",
            state: matchingRow
              ? matchingRow[headers.indexOf("coApplicantStateTwo")]
              : "",
            districtName: matchingRow
              ? matchingRow[headers.indexOf("coApplicantDistrictNameTwo")]
              : "",
            pinCode: matchingRow
              ? matchingRow[headers.indexOf("coApplicantPinCodeTwo")]
              : "",
            noOfyearsAtCurrentAddress: matchingRow
              ? matchingRow[
                  headers.indexOf("coApplicantNoOfyearsAtCurrentAddressTwo")
                ]
              : "",
            country: "India",
          },

          employeDetails: {
            education: matchingRow
              ? matchingRow[headers.indexOf("coApplicantEducationTwo")]
              : "",
            occupation: matchingRow
              ? matchingRow[headers.indexOf("coApplicantOccupationTwo")]
              : "",
            monthlyIncome: matchingRow
              ? matchingRow[headers.indexOf("coApplicantMonthlyIncomeTwo")]
              : "",
            otherMonthlyIncome: matchingRow
              ? matchingRow[headers.indexOf("coApplicantOtherMonthlyIncomeTwo")]
              : "",
            sourceOfOtherIncome: matchingRow
              ? matchingRow[
                  headers.indexOf("coApplicantSourceOfOtherIncomeTwo")
                ]
              : "",
            annualIncome: matchingRow
              ? matchingRow[headers.indexOf("coApplicantAnnualIncomeTwo")]
              : "",
            totalHouseHoldExpenses: matchingRow
              ? matchingRow[
                  headers.indexOf("coApplicantTotalHouseHoldExpensesTwo")
                ]
              : "",
          },
        },
      ],

      //     // api 4
      guarantorInformation: {
        name: matchingRow ? matchingRow[headers.indexOf("guarantorName")] : "",
        fatherName: matchingRow
          ? matchingRow[headers.indexOf("guarantorFatherName")]
          : "",
        motherName: matchingRow
          ? matchingRow[headers.indexOf("guarantorMotherName")]
          : "",
        relationWithApplicant: matchingRow
          ? matchingRow[headers.indexOf("guarantorRelationWithApplicant")]
          : "",
        GuarantorType: matchingRow
          ? matchingRow[headers.indexOf("guarantorGuarantorType")]
          : "",
        businessType: matchingRow
          ? matchingRow[headers.indexOf("guarantorBusinessType")]
          : "",
        dob: matchingRow ? matchingRow[headers.indexOf("guarantorDob")] : "",
        age: matchingRow ? matchingRow[headers.indexOf("guarantorAge")] : "",
        gender: matchingRow
          ? matchingRow[headers.indexOf("guarantorGender")]
          : "",
        marritalStatus: matchingRow
          ? matchingRow[headers.indexOf("guarantorMarritalStatus")]
          : "",
        educationalDetails: matchingRow
          ? matchingRow[headers.indexOf("guarantorEducationalDetails")]
          : "",
        religion: matchingRow
          ? matchingRow[headers.indexOf("guarantorReligion")]
          : "",
        nationality: matchingRow
          ? matchingRow[headers.indexOf("guarantorNationality")]
          : "",
        category: matchingRow
          ? matchingRow[headers.indexOf("guarantorCategory")]
          : "",
        caste: matchingRow
          ? matchingRow[headers.indexOf("guarantorCaste")]
          : "",
      },
      kycDetails: {
        panNumber: matchingRow
          ? matchingRow[headers.indexOf("guarantorPanNumber")]
          : "",
        adharNumber: matchingRow
          ? matchingRow[headers.indexOf("guarantorAdharNumber")]
          : "",
        docType: matchingRow
          ? matchingRow[headers.indexOf("guarantorDocType")]
          : "", //base on the type
        docNo: matchingRow
          ? matchingRow[headers.indexOf("guarantorDocNo")]
          : "",
      },
      contactInformation: {
        mobileNo: matchingRow
          ? matchingRow[headers.indexOf("guarantorMobileNo")]
          : "",
        MobileNoTwo: matchingRow
          ? matchingRow[headers.indexOf("guarantorMobileNoTwo")]
          : "",
        email: matchingRow
          ? matchingRow[headers.indexOf("guarantorEmail")]
          : "",
      },
      permanentAddressInformation: {
        addressAsPerAdhar: matchingRow
          ? matchingRow[headers.indexOf("guarantorAddressAsPerAdhar")]
          : "",
        presentAddress: matchingRow
          ? matchingRow[headers.indexOf("guarantorPresentAddress")]
          : "",
        landmark: matchingRow
          ? matchingRow[headers.indexOf("guarantorLandmark")]
          : "",
        city: matchingRow ? matchingRow[headers.indexOf("guarantorCity")] : "",
        state: matchingRow
          ? matchingRow[headers.indexOf("guarantorState")]
          : "",
        district: matchingRow
          ? matchingRow[headers.indexOf("guarantorDistrict")]
          : "",
        pinCode: matchingRow
          ? matchingRow[headers.indexOf("guarantorPinCode")]
          : "",
        noOfyearsAtCurrentAddress: matchingRow
          ? matchingRow[headers.indexOf("guarantorNoOfyearsAtCurrentAddress")]
          : "",
        country: "India",
      },
      presentAddressInformation: {
        fullAddress: matchingRow
          ? matchingRow[headers.indexOf("guarantorPresentAddressFullAddress")]
          : "",
        presentAddressAsPerAdhar: matchingRow
          ? matchingRow[headers.indexOf("guarantorPresentAddressAsPerAdhar")]
          : "",
        landmark: matchingRow
          ? matchingRow[headers.indexOf("guarantorPresentAddressLandmark")]
          : "",
        city: matchingRow
          ? matchingRow[headers.indexOf("guarantorPresentAddressCity")]
          : "",
        state: matchingRow
          ? matchingRow[headers.indexOf("guarantorPresentAddressState")]
          : "",
        district: matchingRow
          ? matchingRow[headers.indexOf("guarantorPresentAddressDistrict")]
          : "",
        pinCode: matchingRow
          ? matchingRow[headers.indexOf("guarantorPresentAddressPinCode")]
          : "",
        noOfyearsAtCurrentAddress: matchingRow
          ? matchingRow[
              headers.indexOf(
                "guarantorPresentAddressNoOfyearsAtCurrentAddress"
              )
            ]
          : "",
        country: "India",
        residenceType: matchingRow
          ? matchingRow[headers.indexOf("guarantorPresentAddressResidenceType")]
          : "",
      },
      persnalDetails: {
        education: matchingRow
          ? matchingRow[headers.indexOf("guarantorEducation")]
          : "",
        occupation: matchingRow
          ? matchingRow[headers.indexOf("guarantorOccupation")]
          : "",
        monthlyIncome: matchingRow
          ? matchingRow[headers.indexOf("guarantorMonthlyIncome")]
          : "",
        otherMonthlyIncome: matchingRow
          ? matchingRow[headers.indexOf("guarantorOtherMonthlyIncome")]
          : "",
        sourceOfOtherIncome: matchingRow
          ? matchingRow[headers.indexOf("guarantorSourceOfOtherIncome")]
          : "",
        annualIncome: matchingRow
          ? matchingRow[headers.indexOf("guarantorAnnualIncome")]
          : "",
        totalHouseHoldExpenses: matchingRow
          ? matchingRow[headers.indexOf("guarantorTotalHouseHoldExpenses")]
          : "",
      },
      // api 5
      referenceDetails: [
        {
          name: matchingRow
            ? matchingRow[headers.indexOf("referenceNameOne")]
            : "",
          address: matchingRow
            ? matchingRow[headers.indexOf("referenceAddressOne")]
            : " ",
          relation: matchingRow
            ? matchingRow[headers.indexOf("referenceRelationOne")]
            : " ",
          mobileNumber: matchingRow
            ? matchingRow[headers.indexOf("referenceMobileNumberOne")]
            : " ",
        },
        {
          name: matchingRow
            ? matchingRow[headers.indexOf("referenceNameTwo")]
            : " ",
          address: matchingRow
            ? matchingRow[headers.indexOf("referenceAddressTwo")]
            : " ",
          relation: matchingRow
            ? matchingRow[headers.indexOf("referenceRelationTwo")]
            : " ",
          mobileNumber: matchingRow
            ? matchingRow[headers.indexOf("referenceMobileNumberTwo")]
            : " ",
        },
      ],
      //     // api 6
      //     // cibilDetails:{
      applicantData: {
        applicantCibilReportPdf: matchingRow
          ? matchingRow[headers.indexOf("applicantCibilReportPdf")]
          : "",
        customerName: matchingRow
          ? matchingRow[headers.indexOf("applicantCustomerName")]
          : "",
        applicantCibilScore: matchingRow
          ? matchingRow[headers.indexOf("applicantCibilScore")]
          : "",
        totalAccounts: matchingRow
          ? matchingRow[headers.indexOf("applicantTotalAccounts")]
          : "",
        overdueAccount: matchingRow
          ? matchingRow[headers.indexOf("applicantOverdueAccount")]
          : "",
        zeroBalanceAccount: matchingRow
          ? matchingRow[headers.indexOf("applicantZeroBalanceAccount")]
          : "",
        totalNumberOfEnquiry: matchingRow
          ? matchingRow[headers.indexOf("applicantTotalNumberOfEnquiry")]
          : "",
        appFinancialOverview: {
          HighCreditAndSanctionAmount: matchingRow
            ? matchingRow[
                headers.indexOf("applicantHighCreditAndSanctionAmount")
              ]
            : "",
          TotalCurrentOutstanding: matchingRow
            ? matchingRow[headers.indexOf("applicantTotalCurrentOutstanding")]
            : "",
          TotalOverdueAmount: matchingRow
            ? matchingRow[headers.indexOf("applicantTotalOverdueAmount")]
            : "",
          TotalNumberOfEnquiry: matchingRow
            ? matchingRow[headers.indexOf("applicantTotalNumberOfEnquiry")]
            : "",
        },
        applicantCibilDetail: [
          {
            loanType: matchingRow
              ? matchingRow[headers.indexOf("applicantLoanTypeOne")]
              : "",
            loanAmount: matchingRow
              ? matchingRow[headers.indexOf("applicantLoanAmountOne")]
              : "",
            outstandingAmount: matchingRow
              ? matchingRow[headers.indexOf("applicantOutstandingAmountOne")]
              : "",
            overDue: matchingRow
              ? matchingRow[headers.indexOf("applicantOverDueOne")]
              : "",
            emi: matchingRow
              ? matchingRow[headers.indexOf("applicantEmiOne")]
              : "",
            cibilScore: matchingRow
              ? matchingRow[headers.indexOf("applicantCibilScoreOne")]
              : "",
            ownership: matchingRow
              ? matchingRow[headers.indexOf("applicantOwnershipOne")]
              : "",
            SanctionedAmount: matchingRow
              ? matchingRow[headers.indexOf("applicantSanctionedAmountOne")]
              : "",
            CurrentBalance: matchingRow
              ? matchingRow[headers.indexOf("applicantCurrentBalanceOne")]
              : "",
            RateOfInterest: matchingRow
              ? matchingRow[headers.indexOf("applicantRateOfInterestOne")]
              : "",
            TotalTenure: matchingRow
              ? matchingRow[headers.indexOf("applicantTotalTenureOne")]
              : "",
            BalanceTenure: matchingRow
              ? matchingRow[headers.indexOf("applicantBalanceTenureOne")]
              : "",
            LoanStatus: matchingRow
              ? matchingRow[headers.indexOf("applicantLoanStatusOne")]
              : "",
            LoanObligated: matchingRow
              ? matchingRow[headers.indexOf("applicantLoanObligatedOne")]
              : "",
            ObligationConsidered: matchingRow
              ? matchingRow[headers.indexOf("applicantObligationConsideredOne")]
              : "",
          },
          {
            loanType: matchingRow
              ? matchingRow[headers.indexOf("applicantLoanTypeTwo")]
              : "",
            loanAmount: matchingRow
              ? matchingRow[headers.indexOf("applicantLoanAmountTwo")]
              : "",
            outstandingAmount: matchingRow
              ? matchingRow[headers.indexOf("applicantOutstandingAmountTwo")]
              : "",
            overDue: matchingRow
              ? matchingRow[headers.indexOf("applicantOverDueTwo")]
              : "",
            emi: matchingRow
              ? matchingRow[headers.indexOf("applicantEmiTwo")]
              : "",
            cibilScore: matchingRow
              ? matchingRow[headers.indexOf("applicantCibilScoreTwo")]
              : "",
            ownership: matchingRow
              ? matchingRow[headers.indexOf("applicantOwnershipTwo")]
              : "",
            SanctiTwodAmount: matchingRow
              ? matchingRow[headers.indexOf("applicantSanctionedAmountTwo")]
              : "",
            CurrentBalance: matchingRow
              ? matchingRow[headers.indexOf("applicantCurrentBalanceTwo")]
              : "",
            RateOfInterest: matchingRow
              ? matchingRow[headers.indexOf("applicantRateOfInterestTwo")]
              : "",
            TotalTenure: matchingRow
              ? matchingRow[headers.indexOf("applicantTotalTenureTwo")]
              : "",
            BalanceTenure: matchingRow
              ? matchingRow[headers.indexOf("applicantBalanceTenureTwo")]
              : "",
            LoanStatus: matchingRow
              ? matchingRow[headers.indexOf("applicantLoanStatusTwo")]
              : "",
            LoanObligated: matchingRow
              ? matchingRow[headers.indexOf("applicantLoanObligatedTwo")]
              : "",
            ObligationConsidered: matchingRow
              ? matchingRow[headers.indexOf("applicantObligationConsideredTwo")]
              : "",
          },
        ],
      },
      coAppData: {
        coApplicantCibilReportPdf: matchingRow
          ? matchingRow[headers.indexOf("coApplicantCibilReportPdf")]
          : [],
        coApplicantName: matchingRow
          ? matchingRow[headers.indexOf("coApplicantCibilReportPdf")]
          : [],
        coApplicantCibilScore: matchingRow
          ? matchingRow[headers.indexOf("coApplicantCibilReportPdf")]
          : "",
        totalAccount: matchingRow
          ? matchingRow[headers.indexOf("coApplicantCibilReportPdf")]
          : "",
        zeroBalanceAccount: matchingRow
          ? matchingRow[headers.indexOf("coApplicantCibilReportPdf")]
          : "",
        overdueAccount: matchingRow
          ? matchingRow[headers.indexOf("coApplicantCibilReportPdf")]
          : "",
        appFinancialOverview: {
          HighCreditAndSanctionAmount: matchingRow
            ? matchingRow[headers.indexOf("coApplicantCibilReportPdf")]
            : "",
          TotalCurrentOutstanding: matchingRow
            ? matchingRow[headers.indexOf("coApplicantCibilReportPdf")]
            : "",
          TotalOverdueAmount: matchingRow
            ? matchingRow[headers.indexOf("coApplicantCibilReportPdf")]
            : "",
        },
        coApplicantCibilDetail: [
          {
            loanType: matchingRow
              ? matchingRow[headers.indexOf("coApplicantLoanTypeOne")]
              : "",
            loanAmount: matchingRow
              ? matchingRow[headers.indexOf("coApplicantLoanAmountOne")]
              : "",
            outstandingAmount: matchingRow
              ? matchingRow[headers.indexOf("coApplicantOutstandingAmountOne")]
              : "",
            overDue: matchingRow
              ? matchingRow[headers.indexOf("coApplicantOverDueOne")]
              : "",
            emi: matchingRow
              ? matchingRow[headers.indexOf("coApplicantEmiOne")]
              : "",
            cibilScore: matchingRow
              ? matchingRow[headers.indexOf("coApplicantCibilScoreOne")]
              : "",
            ownership: matchingRow
              ? matchingRow[headers.indexOf("coApplicantOwnershipOne")]
              : "",
            SanctionedAmount: matchingRow
              ? matchingRow[headers.indexOf("coApplicantSanctionedAmountOne")]
              : "",
            CurrentBalance: matchingRow
              ? matchingRow[headers.indexOf("coApplicantCurrentBalanceOne")]
              : "",
            RateOfInterest: matchingRow
              ? matchingRow[headers.indexOf("coApplicantRateOfInterestOne")]
              : "",
            TotalTenure: matchingRow
              ? matchingRow[headers.indexOf("coApplicantTotalTenureOne")]
              : "",
            BalanceTenure: matchingRow
              ? matchingRow[headers.indexOf("coApplicantBalanceTenureOne")]
              : "",
            LoanStatus: matchingRow
              ? matchingRow[headers.indexOf("coApplicantLoanStatusOne")]
              : "",
            LoanObligated: matchingRow
              ? matchingRow[headers.indexOf("coApplicantLoanObligatedOne")]
              : "",
            ObligationConsidered: matchingRow
              ? matchingRow[
                  headers.indexOf("coApplicantObligationConsideredOne")
                ]
              : "",
          },
          {
            loanType: matchingRow
              ? matchingRow[headers.indexOf("coApplicantLoanTypeTwo")]
              : "",
            loanAmount: matchingRow
              ? matchingRow[headers.indexOf("coApplicantLoanAmountTwo")]
              : "",
            outstandingAmount: matchingRow
              ? matchingRow[headers.indexOf("coApplicantOutstandingAmountTwo")]
              : "",
            overDue: matchingRow
              ? matchingRow[headers.indexOf("coApplicantOverDueTwo")]
              : "",
            emi: matchingRow
              ? matchingRow[headers.indexOf("coApplicantEmiTwo")]
              : "",
            cibilScore: matchingRow
              ? matchingRow[headers.indexOf("coApplicantCibilScoreTwo")]
              : "",
            ownership: matchingRow
              ? matchingRow[headers.indexOf("coApplicantOwnershipTwo")]
              : "",
            SanctiTwodAmount: matchingRow
              ? matchingRow[headers.indexOf("coApplicantSanctionedAmountTwo")]
              : "",
            CurrentBalance: matchingRow
              ? matchingRow[headers.indexOf("coApplicantCurrentBalanceTwo")]
              : "",
            RateOfInterest: matchingRow
              ? matchingRow[headers.indexOf("coApplicantRateOfInterestTwo")]
              : "",
            TotalTenure: matchingRow
              ? matchingRow[headers.indexOf("coApplicantTotalTenureTwo")]
              : "",
            BalanceTenure: matchingRow
              ? matchingRow[headers.indexOf("coApplicantBalanceTenureTwo")]
              : "",
            LoanStatus: matchingRow
              ? matchingRow[headers.indexOf("coApplicantLoanStatusTwo")]
              : "",
            LoanObligated: matchingRow
              ? matchingRow[headers.indexOf("coApplicantLoanObligatedTwo")]
              : "",
            ObligationConsidered: matchingRow
              ? matchingRow[
                  headers.indexOf("coApplicantObligationConsideredTwo")
                ]
              : "",
          },
        ],
        guarantorData: {
          guarantorCibilReportPdf: matchingRow
            ? matchingRow[headers.indexOf("guarantorLoanTypeTwo")]
            : "",
          guarantorName: matchingRow
            ? matchingRow[headers.indexOf("guarantorLoanTypeTwo")]
            : [],
          guarantorCibilScore: matchingRow
            ? matchingRow[headers.indexOf("guarantorLoanTypeTwo")]
            : [],
        },
      },
      //     // api 7
      bankDetail: {
        bankApplicantDetails: {
          applicantPdcDocument: matchingRow
            ? matchingRow[headers.indexOf("applicantPdcDocument")]
            : "",
          nameOfBankApplicant: matchingRow
            ? matchingRow[headers.indexOf("nameOfBankApplicant")]
            : "",
          acHolderName: matchingRow
            ? matchingRow[headers.indexOf("acHolderName")]
            : "",
          bankBranch: matchingRow
            ? matchingRow[headers.indexOf("bankBranch")]
            : "",
          accountNumber: matchingRow
            ? matchingRow[headers.indexOf("accountNumber")]
            : "",
          accountType: matchingRow
            ? matchingRow[headers.indexOf("accountType")]
            : "",
          ifscCode: matchingRow ? matchingRow[headers.indexOf("ifscCode")] : "",
          bankName: matchingRow ? matchingRow[headers.indexOf("bankName")] : "",
        },
        guarantorRepaymentDetails: {
          guarantorPdcDocument: matchingRow
            ? matchingRow[headers.indexOf("guarantorPdcDocument")]
            : "",
          nameOfBankApplicant: matchingRow
            ? matchingRow[headers.indexOf("guarantorNameOfBankApplicant")]
            : "",
          acHolderName: matchingRow
            ? matchingRow[headers.indexOf("guarantorAcHolderName")]
            : "",
          bankBranch: matchingRow
            ? matchingRow[headers.indexOf("guarantorBankBranch")]
            : "",
          accountNumber: matchingRow
            ? matchingRow[headers.indexOf("guarantorAccountNumber")]
            : "",
          accountType: matchingRow
            ? matchingRow[headers.indexOf("guarantorAccountType")]
            : "",
          ifscCode: matchingRow
            ? matchingRow[headers.indexOf("guarantorIfscCode")]
            : "",
          bankName: matchingRow
            ? matchingRow[headers.indexOf("guarantorBankName")]
            : "",
        },
      },
      //     // api customercollateralDetail
      bankDetails: {
        propertyHolderInformation: {
          nameOfDocumentHolder: matchingRow
            ? matchingRow[headers.indexOf("nameOfDocumentHolder")]
            : "",
          fatherName: matchingRow
            ? matchingRow[headers.indexOf("fatherName")]
            : "",
          relationWithApplicant: matchingRow
            ? matchingRow[headers.indexOf("relationWithApplicant")]
            : "",
        },
        PropertyLocationDetails: {
          houseNo: matchingRow ? matchingRow[headers.indexOf("houseNo")] : "",
          surveyNo: matchingRow ? matchingRow[headers.indexOf("surveyNo")] : "",
          patwariHalkaNo: matchingRow
            ? matchingRow[headers.indexOf("patwariHalkaNo")]
            : "",
          wardNo: matchingRow ? matchingRow[headers.indexOf("wardNo")] : "",
          villageName: matchingRow
            ? matchingRow[headers.indexOf("villageName")]
            : "",
          gramPanchayat: matchingRow
            ? matchingRow[headers.indexOf("gramPanchayat")]
            : "",
          tehsil: matchingRow
            ? matchingRow[headers.indexOf("PropertyTehsil")]
            : "",
          district: matchingRow
            ? matchingRow[headers.indexOf("PropertyDistrict")]
            : "",
          state: matchingRow
            ? matchingRow[headers.indexOf("PropertyState")]
            : "",
        },
        propertyAddressAndLandmark: {
          propertyLandMark: matchingRow
            ? matchingRow[headers.indexOf("propertyLandMark")]
            : "",
          fullAddressOfProperty: matchingRow
            ? matchingRow[headers.indexOf("fullAddressOfProperty")]
            : "",
          latitude: matchingRow ? matchingRow[headers.indexOf("latitude")] : "",
          longitude: matchingRow
            ? matchingRow[headers.indexOf("longitude")]
            : "",
        },
        propertySpecifications: {
          typeOfProperty: matchingRow
            ? matchingRow[headers.indexOf("typeOfProperty")]
            : "",
          totalLandAreaInSqFt: matchingRow
            ? matchingRow[headers.indexOf("totalLandAreaInSqFt")]
            : "",
          totalBuiltUpAreaInSqFt: matchingRow
            ? matchingRow[headers.indexOf("totalBuiltUpAreaInSqFt")]
            : "",
          typeOfConstruction: matchingRow
            ? matchingRow[headers.indexOf("typeOfConstruction")]
            : "",
          qualityOfConstruction: matchingRow
            ? matchingRow[headers.indexOf("qualityOfConstruction")]
            : "",
          ageOfProperty: matchingRow
            ? matchingRow[headers.indexOf("ageOfProperty")]
            : "",
        },
        PropertyBoundaries: {
          eastBoundary: matchingRow
            ? matchingRow[headers.indexOf("eastBoundary")]
            : "",
          westBoundary: matchingRow
            ? matchingRow[headers.indexOf("westBoundary")]
            : "",
          northBoundary: matchingRow
            ? matchingRow[headers.indexOf("northBoundary")]
            : "",
          southBoundary: matchingRow
            ? matchingRow[headers.indexOf("southBoundary")]
            : "",
        },
        PropertyValuation: {
          landValue: matchingRow
            ? matchingRow[headers.indexOf("landValue")]
            : "",
          constructionValue: matchingRow
            ? matchingRow[headers.indexOf("constructionValue")]
            : "",
          fairMarketValueOfLand: matchingRow
            ? matchingRow[headers.indexOf("fairMarketValueOfLand")]
            : "",
          realizableValue: matchingRow
            ? matchingRow[headers.indexOf("realizableValue")]
            : "",
        },
      },
      //     // api 9
      // loanAgreement:{
      bankGuarantorDetails: {
        guarantorPdcDocument: matchingRow
          ? matchingRow[headers.indexOf("guarantorPdcDocument")]
          : "",
        nameOfBankGuarantor: matchingRow
          ? matchingRow[headers.indexOf("guarantorNameOfBankApplicant")]
          : "",
        acHolderName: matchingRow
          ? matchingRow[headers.indexOf("guarantorAcHolderName")]
          : "",
        bankBranch: matchingRow
          ? matchingRow[headers.indexOf("guarantorBankBranch")]
          : "",
        accountNumber: matchingRow
          ? matchingRow[headers.indexOf("guarantorAccountNumber")]
          : "",
        accountType: matchingRow
          ? matchingRow[headers.indexOf("guarantorAccountType")]
          : "",
        ifscCode: matchingRow
          ? matchingRow[headers.indexOf("guarantorIfscCode")]
          : "",
        bankName: matchingRow
          ? matchingRow[headers.indexOf("guarantorBankName")]
          : "",
        chequeNoOfGuarantor: matchingRow
          ? matchingRow[headers.indexOf("chequeNoOfGuarantor")]
          : "",
      },
      bankApplicantDetails: {
        applicantPdcDocument: matchingRow
          ? matchingRow[headers.indexOf("applicantPdcDocument")]
          : "",
        nameOfBankApplicant: matchingRow
          ? matchingRow[headers.indexOf("nameOfBankApplicant")]
          : "",
        acHolderName: matchingRow
          ? matchingRow[headers.indexOf("acHolderName")]
          : "",
        bankBranch: matchingRow
          ? matchingRow[headers.indexOf("bankBranch")]
          : "",
        accountNumber: matchingRow
          ? matchingRow[headers.indexOf("accountNumber")]
          : "",
        accountType: matchingRow
          ? matchingRow[headers.indexOf("accountType")]
          : "",
        ifscCode: matchingRow ? matchingRow[headers.indexOf("ifscCode")] : "",
        bankName: matchingRow ? matchingRow[headers.indexOf("bankName")] : "",
        chequeNoOfapplicant: matchingRow
          ? matchingRow[headers.indexOf("chequeNoOfapplicant")]
          : "",
      },
      boundariesOfProperty: {
        onorTowardsNorth: matchingRow
          ? matchingRow[headers.indexOf("northBoundary")]
          : "",
        onorTowardsSouth: matchingRow
          ? matchingRow[headers.indexOf("southBoundary")]
          : "",
        onorTowardsEast: matchingRow
          ? matchingRow[headers.indexOf("eastBoundary")]
          : "",
        onorTowardswest: matchingRow
          ? matchingRow[headers.indexOf("westBoundary")]
          : "",
      },
      loanAgreementDetails: {
        dateOfTheAgreement: matchingRow
          ? matchingRow[headers.indexOf("loanAgreementDateOfTheAgreement")]
          : "",
        placeOfExecution: matchingRow
          ? matchingRow[headers.indexOf("loanAgreementPlaceOfExecution")]
          : "",
      },
      //     // }
      //    // pdDetails
      LoanDetail: {
        customerDemandLoanAmount: matchingRow
          ? matchingRow[headers.indexOf("customerDemandLoanAmount")]
          : "",
        approvedAmount: matchingRow
          ? matchingRow[headers.indexOf("approvedAmount")]
          : "",
        roi: matchingRow ? matchingRow[headers.indexOf("Roi")] : "",
        tenure: matchingRow ? matchingRow[headers.indexOf("tenure")] : "",
        emi: matchingRow ? matchingRow[headers.indexOf("Emi")] : "",
        finalDecision: matchingRow
          ? matchingRow[headers.indexOf("finalDecision")]
          : "",
        endUseOfLoan: matchingRow
          ? matchingRow[headers.indexOf("endUseOfLoan")]
          : "",
      },
      pdfLink: matchingRow ? matchingRow[headers.indexOf("pdfLink")] : "",
      accommodationDetails: {
        groundFloor: matchingRow
          ? matchingRow[headers.indexOf("groundFloor")]
          : "",
        firstFloor: matchingRow
          ? matchingRow[headers.indexOf("firstFloor")]
          : "",
        actualUsageProperty: matchingRow
          ? matchingRow[headers.indexOf("actualUsageProperty")]
          : "",
        structureType: matchingRow
          ? matchingRow[headers.indexOf("structureType")]
          : "",
        plotLocation: matchingRow
          ? matchingRow[headers.indexOf("plotLocation")]
          : "",
        builtUpArea: matchingRow
          ? matchingRow[headers.indexOf("builtUpArea")]
          : "",
        occupancy: matchingRow ? matchingRow[headers.indexOf("occupancy")] : "",
        electricityGasConnection: matchingRow
          ? matchingRow[headers.indexOf("electricityGasConnection")]
          : "",
        surroundingAreaDevelopment: matchingRow
          ? matchingRow[headers.indexOf("surroundingAreaDevelopment")]
          : "",
        totalBuiltUpArea: matchingRow
          ? matchingRow[headers.indexOf("totalBuiltUpArea")]
          : "",
        qualityOfConstruction: matchingRow
          ? matchingRow[headers.indexOf("qualityOfConstruction")]
          : "",
        propertyAge: matchingRow
          ? matchingRow[headers.indexOf("propertyAge")]
          : "",
        propertyMaintenance: matchingRow
          ? matchingRow[headers.indexOf("propertyMaintenance")]
          : "",
        projectedLifeYear: matchingRow
          ? matchingRow[headers.indexOf("projectedLifeYear")]
          : "",
        constructionType: matchingRow
          ? matchingRow[headers.indexOf("constructionType")]
          : "",
        landRatePerSQFT: matchingRow
          ? matchingRow[headers.indexOf("landRatePerSQFT")]
          : "",
        totalConsAreaSQFT: matchingRow
          ? matchingRow[headers.indexOf("totalConsAreaSQFT")]
          : "",
        uploadImage: {
          selfieWithCostumer: matchingRow
            ? matchingRow[headers.indexOf("selfieWithCostumer")]
            : "",
          photoWithLatlong: matchingRow
            ? matchingRow[headers.indexOf("photoWithLatlong")]
            : "",
          frontPhoto: matchingRow
            ? matchingRow[headers.indexOf("frontPhoto")]
            : "",
          leftSide: matchingRow ? matchingRow[headers.indexOf("leftSide")] : "",
          rightSide: matchingRow
            ? matchingRow[headers.indexOf("rightSide")]
            : "",
          approachRoad: matchingRow
            ? matchingRow[headers.indexOf("approachRoad")]
            : "",
          mainRoad: matchingRow ? matchingRow[headers.indexOf("mainRoad")] : "",
          inferiorRoad: matchingRow
            ? matchingRow[headers.indexOf("inferiorRoad")]
            : "",
          addImage: matchingRow ? matchingRow[headers.indexOf("addImage")] : "",
        },
      },
      //due diligence
      allPdf: {
        rcuPdf: matchingRow ? matchingRow[headers.indexOf("rcuPdf")] : [],
        legalPdf: matchingRow ? matchingRow[headers.indexOf("legalPdf")] : [],
        technicalPdf: matchingRow
          ? matchingRow[headers.indexOf("technicalPdf")]
          : [],
        rmPdf: matchingRow ? matchingRow[headers.indexOf("rmPdf")] : [],
        pdPdf: matchingRow ? matchingRow[headers.indexOf("pdPdf")] : "",
      },
      rcuReport: {
        reportRecievedDate: matchingRow
          ? matchingRow[headers.indexOf("rcuReportRecievedDate")]
          : "",
        reportStatus: matchingRow
          ? matchingRow[headers.indexOf("rcuReportStatus")]
          : "",
      },
      technicalReport: {
        statusOfReport: matchingRow
          ? matchingRow[headers.indexOf("technicalStatusOfReport")]
          : "",
        reciveDate: matchingRow
          ? matchingRow[headers.indexOf("technicalReciveDate")]
          : "",
      },
      legalReport: {
        statusOfReport: matchingRow
          ? matchingRow[headers.indexOf("legalStatusOfReport")]
          : "",
        reciveDate: matchingRow
          ? matchingRow[headers.indexOf("legalReciveDate")]
          : "",
        documentDetails: matchingRow
          ? matchingRow[headers.indexOf("legaldocumentDetails")]
          : {},
      },
      // // branch pendecy
      agriculture: {
        agricultureDocument: matchingRow
          ? matchingRow[headers.indexOf("agricultureDocument")]
          : [],
        LD: matchingRow ? matchingRow[headers.indexOf("agricultureLD")] : "",
        incomeType: matchingRow
          ? matchingRow[headers.indexOf("agricultureincomeType")]
          : "",
        agriDetails: matchingRow
          ? matchingRow[headers.indexOf("agricultureagriDetails")]
          : "",
        agriIncome: matchingRow
          ? matchingRow[headers.indexOf("agriIncome")]
          : "",
        availableLand: matchingRow
          ? matchingRow[headers.indexOf("agricultureavailableLand")]
          : "",
        agriLandAddressAsPerPavati: matchingRow
          ? matchingRow[headers.indexOf("agriLandAddressAsPerPavati")]
          : "",
        agriLandSurveyNo: matchingRow
          ? matchingRow[headers.indexOf("agriLandSurveyNo")]
          : "",
        LandOwnerName: matchingRow
          ? matchingRow[headers.indexOf("agricultureLandOwnerName")]
          : "",
        relationWithApplicant: matchingRow
          ? matchingRow[headers.indexOf("agriculturRrelationWithApplicant")]
          : "",
        cropCultivated: matchingRow
          ? matchingRow[headers.indexOf("agricultureCropCultivated")]
          : "",
        yearOfExprience: matchingRow
          ? matchingRow[headers.indexOf("agricultureyearOfExprience")]
          : "",
        yearlyIncome: matchingRow
          ? matchingRow[headers.indexOf("agricultureyearlyIncome")]
          : "",
        monthlyIncome: matchingRow
          ? matchingRow[headers.indexOf("agriculturemonthlyIncome")]
          : "",
        monthlyExpence: matchingRow
          ? matchingRow[headers.indexOf("agriculturemonthlyExpence")]
          : "",
        TotalNoOfAGRILand: matchingRow
          ? matchingRow[headers.indexOf("TotalNoOfAGRILand")]
          : "",
        NoOfAgricultureOwner: matchingRow
          ? matchingRow[headers.indexOf("NoOfAgricultureOwner")]
          : "",
      },
      MilkBusiness: {
        milkDocument: matchingRow
          ? matchingRow[headers.indexOf("milkDocument")]
          : [],
        yearOfExperience: matchingRow
          ? matchingRow[headers.indexOf("milkYearOfExperience")]
          : "",
        TotalCattle: matchingRow
          ? matchingRow[headers.indexOf("milkTotalCattle")]
          : "",
        MilkGivingCattle: matchingRow
          ? matchingRow[headers.indexOf("MilkGivingCattle")]
          : "",
        AverageDailyMilkQuantitIinLitters: matchingRow
          ? matchingRow[headers.indexOf("AverageDailyMilkQuantitIinLitters")]
          : "",
        DairyName: matchingRow ? matchingRow[headers.indexOf("DairyName")] : "",
        DairyAddress: matchingRow
          ? matchingRow[headers.indexOf("DairyAddress")]
          : "",
        DairyOwnerContact: matchingRow
          ? matchingRow[headers.indexOf("DairyOwnerContact")]
          : "",
        YearProvdingToDairy: matchingRow
          ? matchingRow[headers.indexOf("YearProvdingToDairy")]
          : "",
        Expenses: matchingRow
          ? matchingRow[headers.indexOf("milkExpenses")]
          : "",
        MonthlyIncome: matchingRow
          ? matchingRow[headers.indexOf("MonthlyIncome")]
          : "",
        annualIncome: matchingRow
          ? matchingRow[headers.indexOf("annualIncome")]
          : "",
        monthlyExpence: matchingRow
          ? matchingRow[headers.indexOf("milkMonthlyExpence")]
          : "",
      },
      SalaryIncome: {
        otherIncomeDocument: matchingRow
          ? matchingRow[headers.indexOf("otherIncomeDocument")]
          : [],
        LD: matchingRow ? matchingRow[headers.indexOf("otherIncomeLD")] : "",
        incomeType3: matchingRow
          ? matchingRow[headers.indexOf("otherIncomeIncomeType3")]
          : "",
        salaryOtherIncomeSource: matchingRow
          ? matchingRow[headers.indexOf("salaryOtherIncomeSource")]
          : "",
        companyName: matchingRow
          ? matchingRow[headers.indexOf("otherIncomecompanyName")]
          : "",
        adressOfSalaryProvider: matchingRow
          ? matchingRow[headers.indexOf("adressOfSalaryProvider")]
          : "",
        mobNoOfSalaryProvider: matchingRow
          ? matchingRow[headers.indexOf("mobNoOfSalaryProvider")]
          : "",
        doingFromNoYears: matchingRow
          ? matchingRow[headers.indexOf("doingFromNoYears")]
          : "",
        monthlyIncomeEarned: matchingRow
          ? matchingRow[headers.indexOf("monthlyIncomeEarned")]
          : "",
      },
      OthersBusinessIncome: {
        otherBusinessDocument: matchingRow
          ? matchingRow[headers.indexOf("otherBusinessDocument")]
          : [],
        YearOfExperience: matchingRow
          ? matchingRow[headers.indexOf("otherIncomeYearOfExperience")]
          : "",
        NatureOfBusiness: matchingRow
          ? matchingRow[headers.indexOf("otherIncomeNatureOfBusiness")]
          : "",
        NameOfBusines: matchingRow
          ? matchingRow[headers.indexOf("NameOfBusines")]
          : "",
        MonthlyIncome: matchingRow
          ? matchingRow[headers.indexOf("otherIncomeMonthlyIncome")]
          : "",
      },
      RMPayment: {
        rmPaymentDocument: matchingRow
          ? matchingRow[headers.indexOf("rmPaymentDocument")]
          : [],
        LD: matchingRow ? matchingRow[headers.indexOf("rmPaymentLD")] : "",
        CutomerName: matchingRow
          ? matchingRow[headers.indexOf("rmPaymentCutomerName")]
          : "",
        ContactNo: matchingRow
          ? matchingRow[headers.indexOf("rmPaymentContactNo")]
          : "",
        BranchName: matchingRow
          ? matchingRow[headers.indexOf("rmPaymentBranchName")]
          : "",
        AmountDeposited: matchingRow
          ? matchingRow[headers.indexOf("rmPaymentAmountDeposited")]
          : "",
        UTRAndReferenceNo: matchingRow
          ? matchingRow[headers.indexOf("rmPaymentUTRAndReferenceNo")]
          : "",
        DateOfDeposition: matchingRow
          ? matchingRow[headers.indexOf("rmPaymentDateOfDeposition")]
          : "",
        DepositedBy: matchingRow
          ? matchingRow[headers.indexOf("rmPaymentDepositedBy")]
          : "",
        agricultureIncome: matchingRow
          ? matchingRow[headers.indexOf("agriIncome")]
          : "",
        IncomeFromMilk: matchingRow
          ? matchingRow[headers.indexOf("annualIncome")]
          : "",
        incomeFromOtherSourceSalary: matchingRow
          ? matchingRow[headers.indexOf("salaryOtherIncomeSource")]
          : "",
        totalIncome: matchingRow
          ? matchingRow[headers.indexOf("rmTotalIncome")]
          : "",
        totalExpence: matchingRow
          ? matchingRow[headers.indexOf("rmTotalExpence")]
          : "",
      },
      // // tvr details
      applicantInformation: {
        applicationNumber: matchingRow
          ? matchingRow[headers.indexOf("applicationNumber")]
          : "",
        dateOfVerification: matchingRow
          ? matchingRow[headers.indexOf("dateOfVerification")]
          : "",
        timeOfCall: matchingRow
          ? matchingRow[headers.indexOf("timeOfCall")]
          : "",
        applicantName: matchingRow
          ? matchingRow[headers.indexOf("applicantName")]
          : "",
      },

      finalSanctionDetails: {
        applicantAndCaseInformation: {
          partnerName: matchingRow
            ? matchingRow[headers.indexOf("partnerName")]
            : "",
          branchName: matchingRow
            ? matchingRow[headers.indexOf("branchName")]
            : "",
          caseType: matchingRow ? matchingRow[headers.indexOf("caseType")] : "",
          applicantName: matchingRow
            ? matchingRow[headers.indexOf("Name")]
            : "",
          fatherName: matchingRow
            ? matchingRow[headers.indexOf("FatherName")]
            : "",
          contactNumber: matchingRow
            ? matchingRow[headers.indexOf("MobileNo")]
            : "",
        },
        landmarkoanDetails: {
          loanAmount: matchingRow
            ? matchingRow[headers.indexOf("LoanAmountRequested")]
            : "",
          loanAmountInWords: matchingRow
            ? matchingRow[headers.indexOf("loanAmountInWords")]
            : "",
          principleAmount: matchingRow
            ? matchingRow[headers.indexOf("principleAmount")]
            : "",
          interestAmount: matchingRow
            ? matchingRow[headers.indexOf("interestAmount")]
            : "",
          totalAmount: matchingRow
            ? matchingRow[headers.indexOf("totalAmount")]
            : "",
          roi: matchingRow ? matchingRow[headers.indexOf("Roi")] : "",
          tenure: matchingRow
            ? matchingRow[headers.indexOf("LoanTenureRequested")]
            : "",
        },
        emiDetails: {
          emiAmount: matchingRow
            ? matchingRow[headers.indexOf("confortableEmiAmountForCustomer")]
            : "",
          emiCycleDate: matchingRow
            ? matchingRow[headers.indexOf("emiCycleDate")]
            : "",
        },
      },
      contactVerification: {
        primaryContactNumberOfApplicant: matchingRow
          ? matchingRow[headers.indexOf("primaryContactNumberOfApplicant")]
          : "",
        alternativeContactNumber: matchingRow
          ? matchingRow[headers.indexOf("alternativeContactNumber")]
          : "",
      },
      personalAndFamilyInformation: {
        familyDetails: {
          name: matchingRow ? matchingRow[headers.indexOf("familyName")] : "",
          relation: matchingRow
            ? matchingRow[headers.indexOf("familyRelation")]
            : "",
        },
        applicantDateOfBirth: matchingRow
          ? matchingRow[headers.indexOf("Dob")]
          : "",
        numberOfDependentsInHousehold: matchingRow
          ? matchingRow[headers.indexOf("noOfDependentWithCustomer")]
          : "",
        relationshipStatus: matchingRow
          ? matchingRow[headers.indexOf("MaritalStatus")]
          : "",
        areThereAnyOtherFamilyMembersInvolvedInPayingTheEMI: matchingRow
          ? matchingRow[
              headers.indexOf(
                "areThereAnyOtherFamilyMembersInvolvedInPayingTheEMI"
              )
            ]
          : "",
      },
      employmentAndIncomeDetails: {
        agriLand: matchingRow
          ? matchingRow[headers.indexOf("agricultureavailableLand")]
          : "",
        numberOfCattles: matchingRow
          ? matchingRow[headers.indexOf("MilkGivingCattle")]
          : "",
        dairyNameWhereMilkSupplied: matchingRow
          ? matchingRow[headers.indexOf("DairyName")]
          : "",
        phoneNumberOfDairyOwner: matchingRow
          ? matchingRow[headers.indexOf("DairyOwnerContact")]
          : "",
        monthlyIncome: matchingRow
          ? matchingRow[headers.indexOf("MonthlyIncome")]
          : "",
        additionalSourcesOfIncome: [
          {
            source: matchingRow
              ? matchingRow[headers.indexOf("additionalSource")]
              : "",
            amount: matchingRow
              ? matchingRow[headers.indexOf("additionalSourceAmount")]
              : "",
            _id: "",
          },
        ],
        totalMonthlyIncome: matchingRow
          ? matchingRow[headers.indexOf("totalMonthlyIncome")]
          : "",
      },
      loanDetails: {
        loanAmountRequested: matchingRow
          ? matchingRow[headers.indexOf("loanAmountRequested")]
          : 0,
        purposeOfLoan: matchingRow
          ? matchingRow[headers.indexOf("purposeOfLoan")]
          : "",
        tenureRequestedInMonths: matchingRow
          ? matchingRow[headers.indexOf("tenureRequestedInMonths")]
          : 0,
        confortableEmiAmountForCustomer: matchingRow
          ? matchingRow[headers.indexOf("confortableEmiAmountForCustomer")]
          : 20000,
        justificationOnNeedForFundsWithBifurcation: matchingRow
          ? matchingRow[
              headers.indexOf("justificationOnNeedForFundsWithBifurcation")
            ]
          : "",
      },
      financialSatisfactionDetails: {
        kyaAapLoanAmountSeSantustHai: matchingRow
          ? matchingRow[headers.indexOf("kyaAapLoanAmountSeSantustHai")]
          : "",
        KyaAapROISeSantustHai: matchingRow
          ? matchingRow[headers.indexOf("KyaAapROISeSantustHai")]
          : "",
        KyaAapTenureSeSantustHai: matchingRow
          ? matchingRow[headers.indexOf("KyaAapTenureSeSantustHai")]
          : "",
        KyaAapMonthlyEMISeSantustHai: matchingRow
          ? matchingRow[headers.indexOf("KyaAapMonthlyEMISeSantustHai")]
          : "",
        fasalkharabHogiTabkaiseEMIBharenge: matchingRow
          ? matchingRow[headers.indexOf("fasalkharabHogiTabkaiseEMIBharenge")]
          : "",
        panchTarikhKiEMIDateHaiAapkoChaarTareekSeBalanceMaintainKarnaPdegaKrPaenge:
          matchingRow
            ? matchingRow[
                headers.indexOf(
                  "panchTarikhKiEMIDateHaiAapkoChaarTareekSeBalanceMaintainKarnaPdegaKrPaenge"
                )
              ]
            : "",
        coOwnershipAlterKarniHogiKarwaPaenge: matchingRow
          ? matchingRow[headers.indexOf("coOwnershipAlterKarniHogiKarwaPaenge")]
          : "",
        branchJakarLDSignKarniHogiKrPaenge: matchingRow
          ? matchingRow[headers.indexOf("branchJakarLDSignKarniHogiKrPaenge")]
          : "",
        aapkoRMPaymentJamaKarnaPadegakrPaenge: matchingRow
          ? matchingRow[
              headers.indexOf("aapkoRMPaymentJamaKarnaPadegakrPaenge")
            ]
          : "",
      },
      propertyOwnershipDetails: {
        coOwnerDetails: {
          name: matchingRow ? matchingRow[headers.indexOf("coOwnerName")] : "",
          relationship: matchingRow
            ? matchingRow[headers.indexOf("coOwnerRelationship")]
            : "",
        },
        propertyAddress: matchingRow
          ? matchingRow[headers.indexOf("propertyAddress")]
          : "",
        typeOfProperty: matchingRow
          ? matchingRow[headers.indexOf("typeOfProperty")]
          : "",
        estimatedMarketValueOfProperty: matchingRow
          ? matchingRow[headers.indexOf("estimatedMarketValueOfProperty")]
          : 0,
        isThePropertyOwnedSolelyByTheApplicant: matchingRow
          ? matchingRow[headers.indexOf("coOwnerRelationship")]
          : "",
      },
      verificationOfDetails: {
        confirmTheApplicantFullName: matchingRow
          ? matchingRow[headers.indexOf("confirmTheApplicantFullName")]
          : "",
        confirmIncomeDetails: matchingRow
          ? matchingRow[headers.indexOf("confirmIncomeDetails")]
          : "",
        confirmPropertyOwnership: matchingRow
          ? matchingRow[headers.indexOf("confirmPropertyOwnership")]
          : "",
        confirmLoanAmountAndPurpose: matchingRow
          ? matchingRow[headers.indexOf("confirmLoanAmountAndPurpose")]
          : "",
      },
      additionalVerificationQuestions: {
        areYouAwareOfTheEMIObligationsForTheLoan: matchingRow
          ? matchingRow[
              headers.indexOf("areYouAwareOfTheEMIObligationsForTheLoan")
            ]
          : "",
        doYouHaveAnyAdditionalLoansOrDebtsAtPresent: matchingRow
          ? matchingRow[
              headers.indexOf("doYouHaveAnyAdditionalLoansOrDebtsAtPresent")
            ]
          : "",
        ifYesPleaseSpecifyTypeAndAmount: matchingRow
          ? matchingRow[headers.indexOf("ifYesPleaseSpecifyTypeAndAmount")]
          : "",
        isYourMonthlyIncomeSufficientToCoverTheEMIs: matchingRow
          ? matchingRow[
              headers.indexOf("isYourMonthlyIncomeSufficientToCoverTheEMIs")
            ]
          : "",
        haveYouFacedAnyFinancialDifficultiesInThePastTwelveMonths: matchingRow
          ? matchingRow[
              headers.indexOf(
                "haveYouFacedAnyFinancialDifficultiesInThePastTwelveMonths"
              )
            ]
          : "",
        ifYesPleaseDescribe: matchingRow
          ? matchingRow[headers.indexOf("ifYesPleaseDescribe")]
          : "",
      },
      communicationAndFeedbackFromApplicant: {
        howDidYouFindOutAboutOurServices: matchingRow
          ? matchingRow[headers.indexOf("howDidYouFindOutAboutOurServices")]
          : "",
        whatMotivatedYouToApplyForOurLoan: matchingRow
          ? matchingRow[headers.indexOf("whatMotivatedYouToApplyForOurLoan")]
          : "",
        areYouSatisfiedWithTheLoanTermsSDiscussedDuringTheApplicationProcess:
          matchingRow
            ? matchingRow[
                headers.indexOf(
                  "areYouSatisfiedWithTheLoanTermsSDiscussedDuringTheApplicationProcess"
                )
              ]
            : "",
        ifNoPleaseExplainYourConcernsOrIssues: matchingRow
          ? matchingRow[
              headers.indexOf("ifNoPleaseExplainYourConcernsOrIssues")
            ]
          : "",
      },
      remarksFromCreditManager: {
        additionalObservations: matchingRow
          ? matchingRow[headers.indexOf("additionalObservations")]
          : "",
        recommendationsBasedOnVerification: matchingRow
          ? matchingRow[headers.indexOf("recommendationsBasedOnVerification")]
          : "",
        creditManagerName: matchingRow
          ? matchingRow[headers.indexOf("creditManagerName")]
          : "",
        dateOfRemark: matchingRow
          ? matchingRow[headers.indexOf("dateOfRemark")]
          : "",
      },
      verificationStatus: {
        verificationCompletedByNameOfCreditManager: matchingRow
          ? matchingRow[
              headers.indexOf("verificationCompletedByNameOfCreditManager")
            ]
          : "",
        overallVerificationStatus: matchingRow
          ? matchingRow[headers.indexOf("overallVerificationStatus")]
          : "",
        ifRejectedReasonForRejection: matchingRow
          ? matchingRow[headers.indexOf("ifRejectedReasonForRejection")]
          : "",
      },
      // disbursementDetails
      preDisbursementForm: {
        applicantName: matchingRow
          ? matchingRow[headers.indexOf("applicantName")]
          : "",
        dateOfSanction: matchingRow
          ? matchingRow[headers.indexOf("dateOfSanction")]
          : "",
        sanctionLetterNumber: matchingRow
          ? matchingRow[headers.indexOf("sanctionLetterNumber")]
          : "",
        dateOfTheAgreement: matchingRow
          ? matchingRow[headers.indexOf("dateOfTheAgreement")]
          : "",
        placeOfExecution: matchingRow
          ? matchingRow[headers.indexOf("placeOfExecution")]
          : "",
      },
      kfsDetails: {
        processingFees: matchingRow
          ? matchingRow[headers.indexOf("processingFees")]
          : "",
        documentsCharges: matchingRow
          ? matchingRow[headers.indexOf("documentsCharges")]
          : "",
        insuranceCharges: matchingRow
          ? matchingRow[headers.indexOf("insuranceCharges")]
          : "",
        cersaiCharges: matchingRow
          ? matchingRow[headers.indexOf("cersaiCharges")]
          : "",
        preEmiinterest: matchingRow
          ? matchingRow[headers.indexOf("preEmiinterest")]
          : "",
        benchmarkinterestRate: matchingRow
          ? matchingRow[headers.indexOf("benchmarkinterestRate")]
          : "",
        spreadInterestRate: matchingRow
          ? matchingRow[headers.indexOf("spreadInterestRate")]
          : "",
        annualPercentageRateAprPercentage: matchingRow
          ? matchingRow[headers.indexOf("annualPercentageRateAprPercentage")]
          : "",
        epi: matchingRow ? matchingRow[headers.indexOf("epi")] : "",
        noOfEpi: matchingRow ? matchingRow[headers.indexOf("noOfEpi")] : "",
      },
      postDisbursementDetails: {
        applicantName: matchingRow
          ? matchingRow[headers.indexOf("applicantName")]
          : "",
        fatherName: matchingRow
          ? matchingRow[headers.indexOf("FatherName")]
          : "",
        loanNumber: matchingRow
          ? matchingRow[headers.indexOf("loanNumber")]
          : "",
        actualPreEmi: matchingRow
          ? matchingRow[headers.indexOf("actualPreEmi")]
          : "",
        dateOfDisbursement: matchingRow
          ? matchingRow[headers.indexOf("dateOfDisbursement")]
          : "",
        dateOfFirstEmi: matchingRow
          ? matchingRow[headers.indexOf("dateOfFirstEmi")]
          : "",
        utrNumberOne: matchingRow
          ? matchingRow[headers.indexOf("utrNumberOne")]
          : "",
        utrNumberTwo: matchingRow
          ? matchingRow[headers.indexOf("utrNumberTwo")]
          : "",
        disbursementDoneBy: matchingRow
          ? matchingRow[headers.indexOf("disbursementDoneBy")]
          : "",
      },
    };
    return success(res, "sheet Data", {
      data: responseData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

// ratna fin send email

// ratna fin send to partner
const ratnaFinSendToPartner = async (req, res) => {
  try {
    let { customerId, selections } = req.query;
    if (!selections || typeof selections !== "string") {
      selections = "ac";
    }
    const sectionData = await sectionLatter(customerId);
    const applicantData = await applicantLatter(customerId, selections);
    const LdAndPdDeedData = await LdAndPdDeed(customerId, selections);

    const uploadUrl = "https://stageapi.fincooper.in/v1/formData/ImageUpload";

    const processFile = async (filePath) => {
      let resolvedPath = path
        .resolve(__dirname, `../../../..${filePath}`)
        .replace(/\\/g, "/");
      const formData = new FormData();
      formData.append("image", fs.createReadStream(resolvedPath));
      const response = await axios.post(uploadUrl, formData, {
        headers: { ...formData.getHeaders() },
      });
      return response.data?.items;
    };

    const uploadedSectionUrl = await processFile(sectionData);
    const uploadedApplicantUrl = await processFile(applicantData);
    const uploadedLdAndPdDeedUrl = await processFile(LdAndPdDeedData);

    return success(res, "Email sent successfully with uploaded files.", {
      sectionLatter: `https://stageapi.fincooper.in/${uploadedSectionUrl.image}`,
      LdAndPdDeed: `https://stageapi.fincooper.in/${uploadedLdAndPdDeedUrl.image}`,
      applicantionLatter: `https://stageapi.fincooper.in/${uploadedApplicantUrl.image}`,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

// ratna fin send email
const ratnaFinSendEmail = async (req, res) => {
  try {
    let { customerId, selections } = req.query;
    if (!selections || typeof selections !== "string") {
      selections = "ac";
    }
    console.log(req.query, "<><><><><><><><>");
    const partnerModel = await lendersModel.findOne({ userName: "RATNAAFIN" });
    const sectionData = await sectionLatter(customerId);
    const applicantData = await applicantLatter(customerId, selections);
    const LdAndPdDeedData = await LdAndPdDeed(customerId, selections);

    const uploadUrl = "https://stageapi.fincooper.in/v1/formData/ImageUpload";

    const processFile = async (filePath) => {
      let resolvedPath = path
        .resolve(__dirname, `../../../..${filePath}`)
        .replace(/\\/g, "/");
      const formData = new FormData();
      formData.append("image", fs.createReadStream(resolvedPath));
      const response = await axios.post(uploadUrl, formData, {
        headers: { ...formData.getHeaders() },
      });
      return response.data?.items;
    };

    const uploadedSectionUrl = await processFile(sectionData);
    const uploadedApplicantUrl = await processFile(applicantData);
    const uploadedLdAndPdDeedUrl = await processFile(LdAndPdDeedData);

    const BASEURL = process.env.BASE_URL;

    // Attachments for the email
    const attachments = [
      {
        path: uploadedSectionUrl,
        contentType: "application/pdf",
      },
      {
        path: uploadedApplicantUrl,
        contentType: "application/pdf",
      },
      {
        path: uploadedLdAndPdDeedUrl,
        contentType: "application/pdf",
      },
    ];
    console.log(attachments, "attachmentsattachmentsattachments");
    // Generate eSign link for each document
    const documents = [
      { fileName: LdAndPdDeedData, key: "LdAndPdData" },
      { fileName: applicantData, key: "applicantDataa" },
      { fileName: sectionData, key: "section" },
    ];

    const emailContent = `
      <div style="font-family: Arial, sans-serif; line-height: 1.6;">
        <p>Dear Sir,</p>
        <p>Caption case Report is for final approval.</p>
        <p>Need your immediate action in this case.</p>
        <p>Regards,</p>
        <p>Team FinCoopers</p>
      </div>
    `;

    // Sending email with eSign links in the email body
    await sendEmail(
      [partnerModel.email],
      ["raikwar@yopmail.com"],
      `Final approval email for review`,
      emailContent,
      attachments
    );

    // Responding with eSign links and success message
    return success(
      res,
      "Esign link generated and email sent successfully"
      //   {
      //   ...esignLinks,
      // }
    );
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

//ratna fin genrerate esign link
const ratnaFinGenerateEsign = async (req, res) => {
  try {
    let { customerId, SectionUrl, LdAndPdDeedUrl, ApplicantUrl, selections } =
      req.query;
    // console.log(req.query, "<><><><><><><><>");
    if (!selections || typeof selections !== "string") {
      selections = "ac";
    }
    const partnerModel = await lendersModel.findOne({ userName: "RATNAAFIN" });
    const sectionData = await sectionLatter(customerId);
    const applicantData = await applicantLatter(customerId, selections);
    const LdAndPdDeedData = await LdAndPdDeed(customerId, selections);
    const BASEURL = process.env.BASE_URL;
    // console.log(sectionData,"sectionData",applicantData,"applicantDataapplicantData",LdAndPdDeedData,"LdAndPdDeedData")
    // Attachments for the email
    const attachments = [
      {
        path: SectionUrl,
        contentType: "application/pdf",
      },
      {
        path: ApplicantUrl,
        contentType: "application/pdf",
      },
      {
        path: LdAndPdDeedUrl,
        contentType: "application/pdf",
      },
    ];

    // Generate eSign link for each document
    const documents = [
      { fileName: LdAndPdDeedData, key: "LdAndPdData" },
      { fileName: applicantData, key: "applicantData" },
      { fileName: sectionData, key: "sectionData" },
    ];

    const esignLinks = {};
    let esignLinkHtml = ""; // String to store the eSign links as HTML

    for (const doc of documents) {
      console.log(doc, "docdoc");
      const esignResult = await initESign({ fileName: doc.fileName });
      const signUrl = esignResult.data.invitees[0]?.signUrl; // Only take the first invitee's sign URL

      if (signUrl) {
        esignLinks[doc.key] = signUrl;

        // Building the HTML content for the email body with eSign link
        esignLinkHtml += `
          <p><strong>${doc.key}</strong> eSign link:</p>
          <p><a href="${signUrl}" target="_blank">Click to Sign</a></p>
          <hr />
        `;
      }
    }
    console.log(esignLinks, "esignLinksesignLinks<><><><>");
    //   const externalVendorFormData = await externalVendorFormModel.findOneAndUpdate({
    //     customerId,
    //   },
    // {
    //   $set:{
    //     branchRequiredDocument.appEsignLink: esignLinks
    //   }
    // }
    // );
    // // Email content with eSign links

    const emailContent = `
      <div style="font-family: Arial, sans-serif; line-height: 1.6;">
        <p>Dear Sir,</p>
        <p>Caption case Report is for final approval.</p>
        <p>Need your immediate action in this case.</p>
        <p>Regards,</p>
        <p>Team FinCoopers</p>
        <div>All PDFs are attached in this email.</div>
        <div>
          <p><strong>eSign Links for each document:</strong></p>
          ${esignLinkHtml}
        </div>
      </div>
    `;

    // Sending email with eSign links in the email body
    await sendEmail(
      [partnerModel.email],
      ["raikwar@yopmail.com"],
      `Final approval email for review`,
      emailContent,
      attachments
    );

    // Responding with eSign links and success message
    return success(res, "Esign link generated and email sent successfully", {
      ...esignLinks,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

//grow money and fcpl send to partner api
const growMoneySendToPartner = async (req, res) => {
  try {
    const { customerId, partnerId } = req.query;

    // Fetch partner information
    const partnerModel = await lendersModel.findOne({ _id: partnerId });
    if (!partnerModel) throw new Error("Partner not found.");

    const partnerConfigs = {
      "FIN COOPERS CAPITAL PVT LTD": FinpdfLogo,
      "GROW MONEY CAPITAL PVT LTD": growPdfLogo,
    };

    // Normalize partner name for matching
    const normalizedPartnerName = (partnerModel.partnerName || "")
      .trim()
      .toUpperCase();
    const partnerLogo = partnerConfigs[normalizedPartnerName];

    if (!partnerLogo)
      throw new Error(`Unsupported partner: ${partnerModel.partnerName}`);

    // Map function names to the correct functions
    const pdfFunctions = {
      growSanctionLetterPdf,
      growApplicantPdf,
      growPgDeedPdf,
      rcplLoanAgreement,
    };

    // Call each function dynamically with the partner's logo
    const pdfData = {};

    for (const [key, func] of Object.entries(pdfFunctions)) {
      const pdfResult = await func(
        customerId,
        partnerLogo,
        partnerModel.partnerName
      );
      pdfData[key] = pdfResult;
    }

    // Log the results to ensure data is returned
    console.log(pdfData);

    // Now you can process and send the response with the uploaded files
    const uploadUrl = "https://stageapi.fincooper.in/v1/formData/ImageUpload";

    // Function to process file uploads
    const processFile = async (filePath) => {
      const resolvedPath = path
        .resolve(__dirname, `../../../..${filePath}`)
        .replace(/\\/g, "/");
      const formData = new FormData();
      formData.append("image", fs.createReadStream(resolvedPath));
      const response = await axios.post(uploadUrl, formData, {
        headers: { ...formData.getHeaders() },
      });
      return response.data?.items;
    };

    // Upload each PDF and get the URLs
    const uploadedUrls = {};
    for (const [key, data] of Object.entries(pdfData)) {
      const uploadedUrl = await processFile(data);
      uploadedUrls[key] = `https://stageapi.fincooper.in/${uploadedUrl.image}`;
    }

    // Return success response with uploaded URLs
    return success(
      res,
      "Email sent successfully with uploaded files.",
      uploadedUrls
    );
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

//grow money and fcpl genrerate esign link

const growMoneyGenerateEsign = async (req, res) => {
  try {
    const {
      customerId,
      partnerId,
      SectionUrl,
      LdAndPdDeedUrl,
      ApplicantUrl,
      loanAgreementUrl,
    } = req.query;

    const partnerModel = await lendersModel.findOne({ _id: partnerId });
    if (!partnerModel) throw new Error("Partner not found.");

    const partnerConfigs = {
      "FIN COOPERS CAPITAL PVT LTD": FinpdfLogo,
      "GROW MONEY CAPITAL PVT LTD": growPdfLogo,
    };

    // Normalize partner name for matching
    const normalizedPartnerName = (partnerModel.partnerName || "")
      .trim()
      .toUpperCase();
    const partnerLogo = partnerConfigs[normalizedPartnerName];

    // if (!partnerLogo) throw new Error(`Unsupported partner: ${partnerModel.partnerName}`);

    // // Map function names to the correct functions
    const pdfFunctions = {
      growSanctionLetterPdf,
      growApplicantPdf,
      growPgDeedPdf,
      rcplLoanAgreement,
    };

    // Call each function dynamically with the partner's logo
    const pdfData = {};
    const esignData = {};

    for (const [key, func] of Object.entries(pdfFunctions)) {
      // Generate the PDF
      const pdfResult = await func(
        customerId,
        partnerLogo,
        partnerModel.partnerName
      );
      pdfData[key] = pdfResult;

      // Generate the eSign link for the generated PDF
      const esignResult = await initESign({ fileName: pdfResult });
      const signUrl = esignResult.data.invitees[0]?.signUrl; // Fetch the first invitee's sign URL

      if (signUrl) {
        esignData[key + "EsignLink"] = signUrl;
      }
    }

    // Combine PDF and eSign link data for response
    const combinedData = Object.entries(pdfData).map(([key, pdfPath]) => {
      const esignLink = esignData[key + "EsignLink"];
      return {
        pdf: pdfPath,
        esignLink: esignLink, // Only sending one link per document
      };
    });

    // Log the combined data for debugging
    // console.log("Combined Response Data:", combinedData);

    // Generate the email content
    const emailLinks = combinedData
      .map(({ pdf, esignLink }) => {
        return `<div>
        <h4>eSign Details for </h4>
        <p><strong>eSign Link:</strong> <a href="${esignLink}" target="_blank">Click to Sign</a></p>
      </div>`;
      })
      .join("");

    // // Email body content

    const emailContent = `
      <div style="font-family: Arial, sans-serif; line-height: 1.6;">
        <p>Dear Sir,</p>
        <p>Caption case Report is for final approval.</p>
        <p>Need your immediate action in this case.</p>
        <p>Regards,</p>
        <p>Team FinCoopers</p>
        <div>All PDFs are attached in this email.</div>
         <div>
          <p><strong>eSign Links for each document:</strong></p>
          ${emailLinks}
        </div>
      </div>
    `;

    // Attachments for the email
    const attachments = [
      { path: SectionUrl, contentType: "application/pdf" },
      { path: ApplicantUrl, contentType: "application/pdf" },
      { path: LdAndPdDeedUrl, contentType: "application/pdf" },
      { path: loanAgreementUrl, contentType: "application/pdf" },
    ];

    // Send email with eSign links and attachments
    await sendEmail(
      [partnerModel.email],
      ["raikwar@yopmail.com"],
      `Final approval email for review`,
      emailContent,
      attachments
    );

    // Respond with PDF and eSign data
    //combinedData
    return success(
      res,
      "Esign link generated and email sent successfully",
      combinedData
    );
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

const allDocuments = async (req, res) => {
  try {
    const { customerId } = req.query;
    // console.log(customerId, "customerIdcustomerId");
    const externalVendorFormData = await externalVendorFormModel.findOne({
      customerId,
    });
    const creditPdData = await creditPdModel.findOne({ customerId });
    const gtrPdcData = await gtrPdcModel.findOne({ customerId });
    const appPdcData = await appPdcModel.findOne({ customerId });
    const disbursementData = await disbursementModel.findOne({ customerId });
    const coApplicantData = await coApplicantModel.find({ customerId });
    const applicantData = await applicantModel.findOne({ customerId });
    const guarantorData = await guarantorModel.findOne({ customerId });
    const allData = await cibilModel.aggregate([
      {
        $match: { customerId: new ObjectId(customerId) }, // Ensure matching format if customerId is an ObjectId
      },
      {
        $project: {
          applicantPdf: { $ifNull: ["$applicantCibilReport", ""] },
          guarantorPdf: { $ifNull: ["$guarantorCibilReport", ""] },

          // Conditional handling for coApplicantPdf
          coApplicantPdf: {
            $cond: {
              if: { $isArray: "$coApplicantData" }, // Check if coApplicantData is an array
              then: {
                $filter: {
                  input: {
                    $concatArrays: [
                      {
                        $map: {
                          input: "$coApplicantData", // Array of coApplicants
                          as: "coApplicant",
                          in: {
                            $ifNull: [
                              "$$coApplicant.coApplicantCibilReport",
                              "",
                            ],
                          }, // Extract coApplicantCibilReport or return empty string
                        },
                      },
                      [
                        { $ifNull: ["$coApplicantCibilReport", ""] }, // Add direct coApplicantCibilReport if present
                      ],
                    ],
                  },
                  as: "report",
                  cond: { $ne: ["$$report", ""] }, // Filter out empty strings
                },
              },
              else: [
                { $ifNull: ["$coApplicantCibilReport", ""] }, // Direct field if no array
              ],
            },
          },
        },
      },
    ]);
    const cibilData = await cibilModel.findOne({ customerId });
    const loanDocumentData = await loanDocumentModel.findOne({ customerId });
    const SignKycDetails = await SignKycModel.findOne({ customerId });
    const finalData = await finalModel.findOne({ customerId })

    const customerObjectId = mongoose.Types.ObjectId.isValid(customerId)
      ? new ObjectId(customerId)
      : customerId;

    // console.log(finalData, "finalDatafinalDatafinalData")
    const customerDocumentDetails = await customerDocumentModel.findOne({ customerId: customerObjectId });
    const loanDocument = await loanDocumentModel.findOne({ customerId });
    const bankStatementData = await bankStatementModel.findOne({ customerId })
    const propertyPaperData = await internalLegalModel.findOne({ customerId });
    
    const btDetailsExist = await btDetailsModel.findOne({customerId})

    let matchingBankDetail;
    if (bankStatementData) {
      matchingBankDetail = bankStatementData.bankDetails.find(detail => {
        if (detail.E_Nach_Remarks === "true") {
          // Clean the arrays by removing empty strings
          if (Array.isArray(detail.bankDetailsPdc)) {
            detail.bankDetailsPdc = detail.bankDetailsPdc.filter(item => item !== "");
          }
          if (Array.isArray(detail.bankDetailsBsv)) {
            detail.bankDetailsBsv = detail.bankDetailsBsv.filter(item => item !== "");
          }
          if (Array.isArray(detail.bankStatementPdf)) {
            detail.bankStatementPdf = detail.bankStatementPdf.filter(item => item !== "");
          }
    
          // Now check the cleaned arrays
          return (
            (detail.bankDetailsPdc && detail.bankDetailsPdc.length > 0) ||
            (detail.bankDetailsBsv && detail.bankDetailsBsv.length > 0) ||
            (detail.bankStatementPdf && detail.bankStatementPdf.length > 0)
          );
        }
      });
    }

    let matchingBankStatements = [];
    if (bankStatementData) {
      matchingBankStatements = bankStatementData.bankDetails.filter(detail => {
        console.log(detail,"detail")
        // Clean the arrays by removing empty strings
        if (Array.isArray(detail.bankStatementPdf)) {
          detail.bankStatementPdf = detail.bankStatementPdf.filter(item => item !== "");
        }
        // Return only those with non-empty bankStatementPdf
        return detail.bankStatementPdf && detail.bankStatementPdf.length > 0;
      });
    }
    
    // E_Nach_Remarks
    console.log(matchingBankStatements, "matchingBankStatements");
    
    //udhyamKycModel
    const udhyamKycData = await udhyamKycModel.findOne({ customerId })
    let links = (finalData?.signEsignLink && Object.keys(finalData.signEsignLink).length > 0)
      ? finalData.signEsignLink
      : finalData?.esignLinks;

    const gtrrBankDetails = await guarantorStatementDetails.findOne({customerId})  
   
    let newGuarantorPDC = [];
    let newGuarantorBSV = [];
    
    if (gtrrBankDetails && gtrrBankDetails.bankDetails) {
        const gtrBankDetail = gtrrBankDetails.bankDetails.filter(detail => detail.Type === "guarantor");
    
        const guarantorPDC = gtrBankDetail.flatMap(detail => detail.bankDetailsPdc || []);
        const guarantorBSV = gtrBankDetail.flatMap(detail => detail.bankDetailsBSV || []);
    
        // Assign values inside the if block
        newGuarantorPDC = guarantorPDC.length > 0 ? guarantorPDC : [];
        newGuarantorBSV = guarantorBSV.length > 0 ? guarantorBSV : [];
    }
  
      const existingData = await internalLegalModel.findOne({ customerId });
    
      let allFiles = [];

      // List of fields that contain `file` arrays
      const fileFields = [
          "SealandSignedBy",
          "pramanPatra",
          "taxReceipt",
          "co_ownership_deed",
          "EM_DEED",
          "RM_DEED",
          "gramPanchayat",
          "Noc_certificate",
          "Buliding_Permission_Certificate",
          "Mutation_Certificate",
          "Owner_Certificate",
          "Property_Tax_Reciept"
      ];

// Extract all `file` arrays into `allFiles`
      if (existingData) {
          fileFields.forEach(field => {
              if (existingData[field]?.file) {
                  allFiles = allFiles.concat(existingData[field].file);
              }
          });
      }
    // console.log(customerDocumentDetails, "customerDocumentDetails")
    const rcuVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "rcu"
    );
    const legalVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "legal"
    );
    const technicalVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "technical"
    );
    const rmVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "rm"
    );
    const taggingVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "tagging"
    );

    // Function to extract all income source photos
    const extractIncomeSourcePhotos = (creditPdData) => {
      const allPhotos = [];
      
      if (creditPdData?.incomeSource && Array.isArray(creditPdData.incomeSource)) {
        creditPdData.incomeSource.forEach(source => {
          // Extract agriculture photos
          if (source.agricultureBusiness?.agriculturePhotos && Array.isArray(source.agricultureBusiness.agriculturePhotos)) {
            allPhotos.push(...source.agricultureBusiness.agriculturePhotos);
          }
          
          // Extract milk business photos (milk photos and animal photos)
          if (source.milkBusiness) {
            if (source.milkBusiness.milkPhotos && Array.isArray(source.milkBusiness.milkPhotos)) {
              allPhotos.push(...source.milkBusiness.milkPhotos);
            }
            if (source.milkBusiness.animalPhotos && Array.isArray(source.milkBusiness.animalPhotos)) {
              allPhotos.push(...source.milkBusiness.animalPhotos);
            }
          }
          
          // Extract salary income photos
          if (source.salaryIncome) {
            if (source.salaryIncome.last3MonthSalarySlipPhotos && Array.isArray(source.salaryIncome.last3MonthSalarySlipPhotos)) {
              allPhotos.push(...source.salaryIncome.last3MonthSalarySlipPhotos);
            }
            if (source.salaryIncome.salaryPhotos && Array.isArray(source.salaryIncome.salaryPhotos)) {
              allPhotos.push(...source.salaryIncome.salaryPhotos);
            }
            if (source.salaryIncome.bankStatementPhoto) {
              allPhotos.push(source.salaryIncome.bankStatementPhoto);
            }
            if (source.salaryIncome.salaryCredited6Month) {
              allPhotos.push(source.salaryIncome.salaryCredited6Month);
            }
          }
          
          // Extract other business photos
          if (source.other?.incomeOtherImages && Array.isArray(source.other.incomeOtherImages)) {
            allPhotos.push(...source.other.incomeOtherImages);
          }
        });
      }
      
      // Remove duplicates and filter out empty values
      return [...new Set(allPhotos)].filter(photo => photo);
    };

    // Extract income source photos
    const incomeSourcePhotos = extractIncomeSourcePhotos(creditPdData);

    // let legalIsApproved = legalReportDetails?.status === 'approve'
    // const technicalIsApproved = technicalData?.status === 'approve';//coApplicantData
    const responseData = {
      SanctionCheckList: {
        // login check list
         utilityBillDocument:
          customerDocumentDetails?.incomeDocument?.utilityBillDocument || [],
         utilityBillDocumentDetails: "Recive from sales form",

        newUtilityBillDocument:
        creditPdData?.electricityBillPhoto || "",
        utilityBillDocumentDetails: "Recive from residance form",

        familyCardDocument:
          customerDocumentDetails?.incomeDocument?.familyCardDocument || [],
        familyCardDocumentDetails: "Recive from sales form",
        NewfamilyCardDocument:
        creditPdData?.samagraIdDetail?.samagraIdDoc || "",
        NewfamilyCardDocumentDetails: "Recive from family card form",
        udyamCertificate:
          customerDocumentDetails?.incomeDocument?.udyamCertificateDocument ||
          [],
        udyamCertificateDetails: "Recive from sales form",
        newUdyamCertificate:
        udhyamKycData?.udhyamKycDocument ||
        [],
        newUdyamCertificateDetails: "Recive from udhyam form",
        bankStatement:
          customerDocumentDetails?.incomeDocument?.bankStatementDocument || [],
        bankStatementDetails: "Recive from sales form",//matchingBankDetail
        newBankStatement: matchingBankStatements.flatMap(item =>
          (item.bankStatementPdf || []).filter(pdf => pdf !== "")
        ),        
        newBankStatementDetails: "Recive from bank form",
        incomeDocument:
          customerDocumentDetails?.incomeDocument?.incomeStatemenDocument || [],
        incomeDocumentDetails: "Recive from sales form",

        newIncomeDocument:
        [
          ...(finalData?.agricultureIncomeNew?.agriDocument || []),
          ...(finalData?.milkIncomeCalculationNew?.milkDocument || []),
          ...(finalData?.otherIncomeNew?.uploadOtherIncomeDocument || [])
        ],
        newIncomeDocumentDetails: "Recive from income form",

        propertyDocument:
          customerDocumentDetails?.propertyDocuments?.propertyDocument || [],
        propertyDocumentDetails: "Recive from sales form",

        newPropertyDocument: [
          ...(propertyPaperData?.customDocument || []),
          ...(propertyPaperData?.otherDocuments || []),
          ...(propertyPaperData?.SealandSignedBy?.file || []),
          ...(propertyPaperData?.pramanPatra?.file || []),
          ...(propertyPaperData?.taxReceipt?.file || []),
          ...(propertyPaperData?.co_ownership_deed?.file || []),
          ...(propertyPaperData?.EM_DEED?.file || []),
          ...(propertyPaperData?.RM_DEED?.file || []),
          ...(propertyPaperData?.gramPanchayat?.file || []),
          ...(propertyPaperData?.Noc_certificate?.file || []),
          ...(propertyPaperData?.Buliding_Permission_Certificate?.file || []),
          ...(propertyPaperData?.Mutation_Certificate?.file || []),
          ...(propertyPaperData?.Owner_Certificate?.file || []),
          ...(propertyPaperData?.Property_Tax_Reciept?.file || []),
          ...(propertyPaperData?.draftingDocument?.file || []),
          ...(propertyPaperData?.thirteenYearChainDocument?.file || []),
          ...(propertyPaperData?.registry?.file || []),

        ],
        newPropertyDocumentDetails: "Recive from property form",


        signApplicantKyc: customerDocumentDetails?.signApplicantKyc || [],
        propertyDocumentDetails: "Recive from sales form",
        signCoApplicantKyc: customerDocumentDetails?.signCoApplicantKyc || [],
        signCoApplicantKycDetails: "Recive from sales form",
        signCoTwoApplicantKyc:
          customerDocumentDetails?.signCoTwoApplicantKyc || [],
        signCoTwoApplicantKycDetails: "Recive from sales form",
        signGurantorKyc: customerDocumentDetails?.signGurantorKyc || [],
        signGurantorKycDetails: "Recive from sales form",
        //
        electricityBill: creditPdData?.utilityBillDocument || [],
        electricityBillDetails: "Recive from electricity form",
        SamagraId: creditPdData?.SSSMPhoto || [],
        SamagraIdDetails: "Recive from SamagraId form",
        // gasDiaryDocument:,
        // gasDiaryDocumentDetails:"",
        applicantPhoto: applicantData?.applicantPhoto || "",
        applicantPhotoDetails: "Recive from login form",
        coApplicantPhoto: coApplicantData[0]?.coApplicantPhoto || "",
        coApplicantPhotoDetails: "Recive from login form",
        coApplicantPhotoTwo: coApplicantData[1]?.coApplicantPhoto || "",
        coApplicantPhotoTwoDetails: "Recive from login form",
        guarantorPhoto: guarantorData?.guarantorPhoto || "",
        guarantorPhotoDetails: "Recive from login form",
        applicantKycOsv: SignKycDetails?.ApplicantSignDocument || "",
        applicantKycOsvDetails: "Recive from branch",
        coApplicantKycOsv: SignKycDetails?.coApplicantSignDocument || "",
        coApplicantKycOsvDetails: "Recive from branch",
        gurantorKycOsv: SignKycDetails?.guarantorSignDocument || "",
        gurantorKycOsv: "Recive from branch",
        applicantKyc: {
          applicantAadharFrontImage:
            applicantData?.kycUpload?.aadharFrontImage || "",
          applicantAadharBackImage:
            applicantData?.kycUpload?.aadharBackImage || "",
          applicantPanFrontImage: applicantData?.kycUpload?.panFrontImage || "",
          applicantDrivingLicenceImage:
            applicantData?.kycUpload?.drivingLicenceImage || "",
          applicantVoterIdImage: applicantData?.kycUpload?.voterIdImage || "",
        },
        applicantKycDetails: "Recive from login form",
        coApplicantKyc: {
          coApplicantKycAadharFrontImage:
            coApplicantData[0]?.kycUpload?.aadharFrontImage || "",
          coApplicantKycAadharBackImage:
            coApplicantData[0]?.kycUpload?.aadharBackImage || "",
          // coApplicantKycDocType:coApplicantData[0]?.kycUpload?.docImage || "",
          coApplicantKycDocImage: coApplicantData[0]?.kycUpload?.docImage || "",
        },
        coApplicantKycDetails: "Recive from login form",
        coApplicantKycTwo: {
          coApplicantKycTwoAadharFrontImage:
            coApplicantData[1]?.kycUpload?.aadharFrontImage || "",
          coApplicantKycTwoAadharBackImage:
            coApplicantData[1]?.kycUpload?.aadharBackImage || "",
          coApplicantKycTwoDocImage:
            coApplicantData[1]?.kycUpload?.docImage || "",
        },
        coApplicantKycTwoDetails: "Recive from login form",
        gurantorKyc: {
          gurantorAadharFrontImage:
            guarantorData?.kycUpload?.aadharFrontImage || "",
          gurantorAadharBackImage:
            guarantorData?.kycUpload?.aadharBackImage || "",
          gurantorDocImage: guarantorData?.kycUpload?.docImage || "",
        },
        gurantorKycDetails: "Recive from login form",
        applicantCibilReport: cibilData?.applicantFetchHistory?.slice(-1)[0]?.cibilReport || "",
        applicantCibilReportDetails: "Recive from cibil form",
        coApplicantCibilReport:
          Array.isArray(cibilData?.coApplicantData[0]?.coApplicantFetchHistory)
            ? cibilData?.coApplicantData[0]?.coApplicantFetchHistory.slice(-1)[0]?.cibilReport
            : "",
        coApplicantCibilReportDetails: "Recive from cibil form",
        coApplicantTwoCibilReport:
          Array.isArray(cibilData?.coApplicantData[1]?.coApplicantFetchHistory)
            ? cibilData?.coApplicantData[0]?.coApplicantFetchHistory.slice(-1)[0]?.cibilReport
            : "",
        coApplicantTwoCibilReportDetails: "Recive from cibil form",
        guarantorCibilReport: cibilData?.guarantorFetchHistory?.slice(-1)[0]?.cibilReport || "",
        guarantorCibilReportDetails: "Recive from cibil form",
        pdReport: creditPdData?.pdfLink || "",
        pdReportDetails: "Recive from creditPd form",
        rcuReport: rcuVendor?.uploadProperty || [],
        rcuReportDetails: "Recive from externalVendor form",
        legalReport: legalVendor?.uploadProperty || [],
        legalReportDetails: "Recive from externalVendor form",
        technicalReport: technicalVendor?.uploadProperty || [],
        technicalReportDetails: "Recive from externalVendor form",
        technicalEstimateDocument: technicalVendor?.estimateDocument || [],
        estimateDocumentDetails: "Recive from externalVendor form",
        taggingReport: taggingVendor?.uploadProperty || [],
        taggingReportDetails: "Recive from externalVendor form",
        housePhotos: [
          ...(Array.isArray(creditPdData?.fourBoundaryPhotos)
            ? creditPdData?.fourBoundaryPhotos
            : [creditPdData?.fourBoundaryPhotos]),
          ...(Array.isArray(creditPdData?.houseInsidePhoto)
            ? creditPdData?.houseInsidePhoto
            : [creditPdData?.houseInsidePhoto]),
          ...(Array.isArray(creditPdData?.propertyOtherPhotos)
            ? creditPdData?.propertyOtherPhotos
            : [creditPdData?.propertyOtherPhotos]),
          creditPdData?.selfiWithCustomer || "",
          creditPdData?.photoWithLatLong || "",
          creditPdData?.front || "",
          creditPdData?.leftSide || "",
          creditPdData?.rightSide || "",
          creditPdData?.approachRoad || "",
          creditPdData?.mainRoad || "",
          creditPdData?.interiorRoad || "",
          creditPdData?.selfieWithProperty || "",
          creditPdData?.landmarkPhoto || "",
          creditPdData?.latLongPhoto || "",
        ].filter(Boolean),
        housePhotosDetails: "Recive from creditPd form",
        // workPhotos: creditPdData?.workPhotos || [],
        // workPhotosDetails: "Recive from creditPd form",
        workPhotos: creditPdData?.workPhotos || [],
        workPhotosDetails: "Recive from creditPd incomeSource data",
        camReport: loanDocument?.camReport || "",
        camReportDetails: "Recive from cam form",
      },
      disbursmentCheckList: {
        dualNameDeclaration: loanDocumentData?.dualNameDeclaration || "",
        dualNameDeclarationDetails: "Recive at the time of final approval",
        dualSignDeclaration: loanDocumentData?.dualSignDeclaration || "",
        dualSignDeclarationDetails: "Recive at the time of final approval",
        dualDoBDeclaration: loanDocumentData?.dualDoBDeclaration || "",
        dualDoBDeclarationDetails: "Recive at the time of final approval",
        applicantPDC: appPdcData?.applicantPdcDocument || [],
        applicantPDCDetails: "Recive from appPdc form",
        newApplicantPDC: matchingBankDetail?.bankDetailsPdc || [],
        newApplicantPDCDetails: "Recive from app bank form",
        applicantBSV: loanDocumentData?.applicantBSV || "",
        applicantBSVDetails: "Recive at the time of final approval",
        newApplicantBSV: matchingBankDetail?.bankDetailsBsv || [],
        newApplicantBSVDetails: "Recive from app bank form",
        guarantorPDC: gtrPdcData?.guarantorPdcDocument || [],
        guarantorPDCDetails: "Recive from gtrPdc form",
        newGuarantorPDC: newGuarantorPDC || [],
        newGuarantorPDCDetails: "Recive from gtr bank details form",
        guarantorBSV: loanDocumentData?.guarantorBSV || [],
        guarantorBSVDetails: "Recive at the time of final approval",
        newGuarantorBSV: newGuarantorBSV || [],
        newGuarantorBSVDetails: "Recive from gtr bank details form",
        coOwnershipDeed: loanDocumentData?.coOwnershipDeed || "",
        eStampUpload:
          disbursementData?.estampRequirement?.flatMap(
            (stamp) => stamp.eStampUpload || []
          ) || [],

        estampRequirementDetail: "Recive at the time of final approval",
        // ratnaPdfUrls: finalSanctionData?.ratnaPdfUrls || {},
        // fcplPdfUrls: finalSanctionData?.fcplPdfUrls || {},
        // growMoneyPdfUrls: finalSanctionData?.growMoneyPdfUrls || {},

        insuranceForm: loanDocumentData?.insuranceForm || "",
        insuranceFormDetails: "Recive at the time of final approval",
        emOrRmDeed: loanDocumentData?.emOrRmDeed || "",
        emOrRmDeedDetails: "Recive at the time of final approval",
        finalLegal: legalVendor?.finalLegalUpload || [],
        finalLegalDetails: "Recive at the time of final approval",

        vettingReport: loanDocument?.vettingReport || [],
        vettingReportDetails: "Recive at the time of final approval",

        newVettingReport: legalVendor?.vettingLegalUpload || [],
        newVettingReportDetails: "Recive at the time of final approval",

        nachLink: bankStatementData?.Nachlink?.trim() ? bankStatementData.Nachlink : disbursementData?.eNachLinkSentToBranch || "",
        nachLinkDetails: "Recive from nach form",
        eNachLinkSignUpload: disbursementData?.eNachLinkSignUpload || "",
        nachLinkSignDetails: "Recive from nach  signsture Complete",
        eSignatureDocuments: disbursementData?.eSignatureDocuments || "",
        eSignatureDocumentsDetails: "Recive from nach  signsture Complete",
        appKycDocument: loanDocument?.appKycDocument || [],
        appKycDocumentDetails: "Recive at the time of final approval",
        coAppKycDocument: loanDocument?.coAppKycDocument || [],
        form60: loanDocument?.form60 || [],
        coApplicantPhotoDetails: "Recive at the time of final approval",
        stampPdf: loanDocumentData?.stampPdf || [],
        sanctionZipUrl: finalData?.sanctionZipUrl || [],
        disbursementZipUrl: finalData?.disbursementZipUrl || [],
        incomeSectionLatterUrl: finalData?.incomesectionLatterUrl || "",
        esignLinks: links || {}
      },
      btDocument:{
        Foreclosure_Letter: btDetailsExist?.Foreclosure_Letter || [],
        SOA: btDetailsExist?.SOA || [],
        LOD: btDetailsExist?.LOD || [],
        BT_Bank_Sanction_Letter: btDetailsExist?.BT_Bank_Sanction_Letter || [],
      }
    };
    return success(res, "All documents link", responseData);
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

async function getAllDocumentDashboard(req, res) {
  try {
    const { 
      regionalBranch,
      branch,
      product,
      selfAssignEmployee,
      startDateFilter,
      endDateFilter,
      finalApproverStatus,
      fileProcessStatus,
      searchQuery,
      sanctionStage
    } = req.query;
    
    // Handle pagination
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;
    
    // Date filtering logic
    const today = new Date();
    const defaultStartDate = new Date(today.setHours(0, 0, 0, 0));
    const defaultEndDate = new Date(today.setHours(23, 59, 59, 999));
    
    function formatDateToISO(date) {
      return new Date(date).toISOString();
    }
    
    let formattedStart = startDateFilter && startDateFilter !== "all"
      ? new Date(new Date(startDateFilter).setHours(0, 0, 0, 0))
      : defaultStartDate;
    
    let formattedEnd = endDateFilter && endDateFilter !== "all"
      ? new Date(new Date(endDateFilter).setHours(23, 59, 59, 999))
      : defaultEndDate;
    
    if (startDateFilter && endDateFilter && startDateFilter === endDateFilter) {
      formattedStart = new Date(new Date(startDateFilter).setHours(0, 0, 0, 0));
      formattedEnd = new Date(new Date(startDateFilter).setHours(23, 59, 59, 999));
    }
    
    formattedStart = formatDateToISO(formattedStart);
    formattedEnd = formatDateToISO(formattedEnd);
    
    // Prepare filter conditions for MongoDB query
    const filterConditions = {};
    
    // Add Status filter - this is the base filter for all queries
    filterConditions.statusByCreditPd = { $in: ["complete", "approve"] };
    
    // Date range filter
    if (startDateFilter && endDateFilter && startDateFilter !== "all" && endDateFilter !== "all") {
      filterConditions.creditPdCompleteDate = {
        $gte: formattedStart,
        $lte: formattedEnd
      };
    }
    
    // Get all externalVendorForm data with applied filters
    const externalVendorFormData = await externalVendorFormModel.find(filterConditions).lean();
    
    // Extract customerIds from the externalVendorFormData
    let customerIds = externalVendorFormData.map(vendor => vendor.customerId);
    
    // Apply post-fetch filters
    // We'll collect all the necessary data first, then filter it
    const customerDetailsMap = new Map();
    
    // Fetch all customer details in bulk for efficiency
    for (const customerId of customerIds) {
      try {
        const customerObjectId = mongoose.Types.ObjectId.isValid(customerId)
          ? new ObjectId(customerId)
          : customerId;
        
        // Fetch customer details
        const customerDetailData = await customerModel.findOne({ _id: customerObjectId }).lean();
        if (!customerDetailData) continue;
        
        // Fetch employee (sales person) data
        const salesPerson = await employeModel.findOne({ _id: customerDetailData.employeId }).lean();
        
        // Fetch branch data
        let branchDetails = null;
        let regionalBranchDetails = null;
        
        if (salesPerson?.branchId) {
          branchDetails = await newBranchModel.findOne({ _id: salesPerson.branchId }).lean();
          
          if (branchDetails?.regionalBranchId) {
            regionalBranchDetails = await newBranchModel.findOne({ _id: branchDetails.regionalBranchId }).lean();
          }
        }
        
        // Fetch applicant details
        const applicantDetails = await applicantModel.findOne({ customerId: customerObjectId }).lean();
        
        // Fetch final sanction details
        const finalsanctionData = await newfinalSanctionModel.findOne({ customerId: customerObjectId }).lean();
        
        // Find vendor form data for this customer
        const vendorFormData = externalVendorFormData.find(vendor => 
          vendor.customerId && vendor.customerId.toString() === customerId.toString()
        );
        
        // Store all the details together
        customerDetailsMap.set(customerId.toString(), {
          customerId,
          customerDetailData,
          salesPerson,
          branchDetails,
          regionalBranchDetails,
          applicantDetails,
          finalsanctionData,
          vendorFormData
        });
      } catch (error) {
        console.error(`Error fetching details for customer ${customerId}:`, error);
      }
    }
    
    // Now apply the post-fetch filters
    let filteredCustomerIds = Array.from(customerDetailsMap.keys());
    
    // Apply search filter
    if (searchQuery) {
      filteredCustomerIds = filteredCustomerIds.filter(customerId => {
        const details = customerDetailsMap.get(customerId);
        if (!details) return false;
        
        const { applicantDetails, customerDetailData } = details;
        
        // Check if any of the search fields match
        return (
          (applicantDetails?.mobileNo && String(applicantDetails.mobileNo).includes(searchQuery)) ||
          (applicantDetails?.fullName && String(applicantDetails.fullName).toLowerCase().includes(searchQuery.toLowerCase())) ||
          (applicantDetails?.fatherName && String(applicantDetails.fatherName).toLowerCase().includes(searchQuery.toLowerCase())) ||
          (customerDetailData?.customerFinId && String(customerDetailData.customerFinId).includes(searchQuery))
        );
      });
    }
    
    // Apply branch filter
    if (branch && branch !== "all") {
      const branchIds = Array.isArray(branch) ? branch : branch.split(",");
      
      filteredCustomerIds = filteredCustomerIds.filter(customerId => {
        const details = customerDetailsMap.get(customerId);
        if (!details || !details.branchDetails) return false;
        
        return branchIds.includes(details.branchDetails._id.toString());
      });
    }
    
    // Apply regional branch filter
    if (regionalBranch && regionalBranch !== "all") {
      const regionalBranchIds = Array.isArray(regionalBranch) ? regionalBranch : regionalBranch.split(",");
      
      filteredCustomerIds = filteredCustomerIds.filter(customerId => {
        const details = customerDetailsMap.get(customerId);
        if (!details || !details.regionalBranchDetails) return false;
        
        return regionalBranchIds.includes(details.regionalBranchDetails._id.toString());
      });
    }
    
    // Apply product filter
    if (product && product !== "all") {
      const productIds = Array.isArray(product) ? product : product.split(",");
      
      filteredCustomerIds = filteredCustomerIds.filter(customerId => {
        const details = customerDetailsMap.get(customerId);
        if (!details || !details.customerDetailData || !details.customerDetailData.productId) return false;
        
        return productIds.includes(details.customerDetailData.productId.toString());
      });
    }
    
    // Apply sanctionStage filter
    if (sanctionStage) {
      filteredCustomerIds = filteredCustomerIds.filter(customerId => {
        const details = customerDetailsMap.get(customerId);
        if (!details) return false;
        
        if (sanctionStage === "partnerNotSelect") {
          return !details.finalsanctionData || !details.finalsanctionData.partnerId;
        } 
        else if (sanctionStage === "sanctionDetailNotComplete") {
          const vendors = details.vendorFormData?.vendors || [];
          
          const legalVendor = vendors.find(v => v.vendorType === "legal");
          const technicalVendor = vendors.find(v => v.vendorType === "technical");
          const rcuVendor = vendors.find(v => v.vendorType === "rcu");
          
          return (
            (legalVendor && legalVendor.statusByVendor !== "approve") ||
            (technicalVendor && technicalVendor.statusByVendor !== "complete") ||
            (rcuVendor && rcuVendor.statusByVendor !== "notRequired")
          );
        } 
        else if (sanctionStage === "sanctionDetailComplete") {
          const vendors = details.vendorFormData?.vendors || [];
          
          const legalVendor = vendors.find(v => v.vendorType === "legal");
          const technicalVendor = vendors.find(v => v.vendorType === "technical");
          const rcuVendor = vendors.find(v => v.vendorType === "rcu");
          
          const legalComplete = !legalVendor || legalVendor.statusByVendor === "approve";
          const technicalComplete = !technicalVendor || technicalVendor.statusByVendor === "complete";
          const rcuComplete = !rcuVendor || rcuVendor.statusByVendor === "notRequired";
          
          const sanctionNotSent = !details.finalsanctionData || 
                                 details.finalsanctionData.sendToPartnerSanctionStatus !== "complete";
          
          return legalComplete && technicalComplete && rcuComplete && sanctionNotSent;
        }
        
        return true; // If not a recognized sanctionStage, include it
      });
    }
    
    // Apply finalApproverStatus filter
    if (finalApproverStatus) {
      if (finalApproverStatus === "partnerNotSelect") {
        filteredCustomerIds = filteredCustomerIds.filter(customerId => {
          const details = customerDetailsMap.get(customerId);
          return !details.finalsanctionData || !details.finalsanctionData.partnerId;
        });
      } else {
        const statusKeys = finalApproverStatus.split(",");
        
        filteredCustomerIds = filteredCustomerIds.filter(customerId => {
          const details = customerDetailsMap.get(customerId);
          if (!details || !details.finalsanctionData) return false;
          
          // All specified status keys must be "complete"
          return statusKeys.every(key => 
            details.finalsanctionData[key] === "complete"
          );
        });
      }
    }
    
    // Apply fileProcessStatus filter
    if (fileProcessStatus) {
      const statusKeys = fileProcessStatus.split(",");
      
      filteredCustomerIds = filteredCustomerIds.filter(customerId => {
        const details = customerDetailsMap.get(customerId);
        if (!details || !details.finalsanctionData) return false;
        
        // All specified status keys must be "complete"
        return statusKeys.every(key => 
          details.finalsanctionData[key] === "complete"
        );
      });
    }
    
    // Apply selfAssignEmployee filter
    if (selfAssignEmployee && selfAssignEmployee !== "all") {
      const employeeIds = Array.isArray(selfAssignEmployee) ? selfAssignEmployee : selfAssignEmployee.split(",");
      
      filteredCustomerIds = filteredCustomerIds.filter(customerId => {
        const details = customerDetailsMap.get(customerId);
        if (!details || !details.finalsanctionData || !details.finalsanctionData.employeeId) return false;
        
        return employeeIds.includes(details.finalsanctionData.employeeId.toString());
      });
    }
    
    // Apply exclusion for specific products when no product filter
    if (!product || product === "all") {
      // This assumes you have a list of product IDs to exclude - the original code had an empty array
      const excludedProductIds = [];
      
      if (excludedProductIds.length > 0) {
        filteredCustomerIds = filteredCustomerIds.filter(customerId => {
          const details = customerDetailsMap.get(customerId);
          if (!details || !details.customerDetailData || !details.customerDetailData.productId) return true;
          
          return !excludedProductIds.includes(details.customerDetailData.productId.toString());
        });
      }
    }
    
    // Get total count for pagination
    const totalCustomers = filteredCustomerIds.length;
    
    // Apply pagination to the filtered customer IDs
    const paginatedCustomerIds = filteredCustomerIds.slice(skip, skip + limit);
    
    // Fetch additional customer information for each customer
    const additionalCustomerInfo = await Promise.all(
      paginatedCustomerIds.map(async (customerId) => {
        try {
          const details = customerDetailsMap.get(customerId);
          if (!details) return { customerId, additionalInfo: null };
          
          const {
            customerDetailData,
            salesPerson,
            branchDetails,
            regionalBranchDetails,
            applicantDetails,
            finalsanctionData,
            vendorFormData
          } = details;
          
          // Fetch PD employee details
          const pdEmployeeDetail = vendorFormData?.creditPdId 
            ? await employeModel.findOne({ _id: vendorFormData.creditPdId }).lean()
            : null;
          
          // Fetch product details
          const productDetailData = customerDetailData?.productId
            ? await productModel.findOne({ _id: customerDetailData.productId }).lean()
            : null;
          
          // Fetch partner (lender) details
          const partnerDetails = finalsanctionData?.partnerId
            ? await lenderModel.findOne({ _id: finalsanctionData.partnerId }).lean()
            : null;
          
          // Fetch reporting manager (sales person manager)
          const reportingManager = salesPerson?.reportingManagerId 
            ? await employeModel.findOne({ _id: salesPerson.reportingManagerId }).lean()
            : null;
          
          return {
            customerId,
            additionalInfo: {
              customerFinId: customerDetailData.customerFinId || "",
              loginDate: customerDetailData.createdAt || "",
              branchName: branchDetails?.name || "",
              productName: productDetailData?.productName || "",
              partnerName: partnerDetails?.fullName || "",
              regionalBranchName: regionalBranchDetails?.name || "",
              salesPersonName: salesPerson?.employeName || "",
              customerFullName: applicantDetails?.fullName || "",
              customerFatherName: applicantDetails?.fatherName || "",
              mobileNo: applicantDetails?.mobileNo || "",
              salesPersonManagerName: reportingManager?.employeName || "",
              pdPersonName: pdEmployeeDetail?.employeName || "",
              creditPdCompleteDate: vendorFormData?.creditPdCompleteDate || "",
              statusByCreditPd: vendorFormData?.statusByCreditPd || "",
              roi: finalsanctionData?.roi || "",
              tenureInMonth: finalsanctionData?.tenureInMonth || "",
              finalLoanAmount: finalsanctionData?.finalLoanAmount || ""
            }
          };
        } catch (error) {
          console.error(`Error fetching additional info for customer ${customerId}:`, error);
          return { customerId, additionalInfo: null };
        }
      })
    );
    
    // Helper function to check if data exists and return "Yes" or "No"
    const dataExists = (data) => {
      if (Array.isArray(data)) {
        return data.length > 0 ? "Yes" : "No";
      } else if (typeof data === 'object' && data !== null) {
        return Object.keys(data).length > 0 && Object.values(data).some(val => val) ? "Yes" : "No";
      } else {
        return data ? "Yes" : "No";
      }
    };

    // Prepare the response array
    const allCustomersData = [];
    
    // Process each customer
    for (const customerId of paginatedCustomerIds) {
      try {
        // Get the customer details we already fetched
        const details = customerDetailsMap.get(customerId);
        if (!details) continue;
        
        const vendorFormData = details.vendorFormData;
        
        // Get additional info for this customer
        const customerAdditionalInfo = additionalCustomerInfo.find(
          info => info.customerId.toString() === customerId.toString()
        )?.additionalInfo || {};
        
        const rcuVendor = vendorFormData?.vendors?.find(
          (vendor) => vendor.vendorType === "rcu"
        );
        const legalVendor = vendorFormData?.vendors?.find(
          (vendor) => vendor.vendorType === "legal"
        );
        const technicalVendor = vendorFormData?.vendors?.find(
          (vendor) => vendor.vendorType === "technical"
        );
        const taggingVendor = vendorFormData?.vendors?.find(
          (vendor) => vendor.vendorType === "tagging"
        );
        
        // Continue fetching other data for this customer
        const applicantData   = await applicantModel.findOne({ customerId });
        const coApplicantData = await coApplicantModel.find({ customerId });
        const guarantorData   = await guarantorModel.findOne({ customerId });
        const cibilData       = await cibilModel.findOne({ customerId });
        const creditPdData    = await creditPdModel.findOne({ customerId });
        const gtrPdcData      = await gtrPdcModel.findOne({ customerId });
        const appPdcData      = await appPdcModel.findOne({ customerId });
        const disbursementData = await disbursementModel.findOne({ customerId });
        const loanDocumentData = await loanDocumentModel.findOne({ customerId });
        const SignKycDetails   = await SignKycModel.findOne({ customerId });
        const finalData        = await finalModel.findOne({ customerId });
        
        // Make sure customerId is properly formatted for querying
        const customerObjectId = mongoose.Types.ObjectId.isValid(customerId)
          ? new mongoose.Types.ObjectId(customerId)
          : customerId;
        
        const customerDocumentDetails = await customerDocumentModel.findOne({ 
          customerId: customerObjectId 
        });
        const loanDocument = await loanDocumentModel.findOne({ customerId });
        const bankStatementData = await bankStatementModel.findOne({ customerId });

        let links = (finalData?.signEsignLink && Object.keys(finalData.signEsignLink).length > 0)
          ? finalData.signEsignLink
          : finalData?.esignLinks;

        // Function to extract all income source photos
        const extractIncomeSourcePhotos = (creditPdData) => {
          const allPhotos = [];
          
          if (creditPdData?.incomeSource && Array.isArray(creditPdData.incomeSource)) {
            creditPdData.incomeSource.forEach(source => {
              // Extract agriculture photos
              if (source.agricultureBusiness?.agriculturePhotos && Array.isArray(source.agricultureBusiness.agriculturePhotos)) {
                allPhotos.push(...source.agricultureBusiness.agriculturePhotos);
              }
              
              // Extract milk business photos
              if (source.milkBusiness) {
                if (source.milkBusiness.milkPhotos && Array.isArray(source.milkBusiness.milkPhotos)) {
                  allPhotos.push(...source.milkBusiness.milkPhotos);
                }
                if (source.milkBusiness.animalPhotos && Array.isArray(source.milkBusiness.animalPhotos)) {
                  allPhotos.push(...source.milkBusiness.animalPhotos);
                }
              }
              
              // Extract salary income photos
              if (source.salaryIncome) {
                if (source.salaryIncome.last3MonthSalarySlipPhotos && Array.isArray(source.salaryIncome.last3MonthSalarySlipPhotos)) {
                  allPhotos.push(...source.salaryIncome.last3MonthSalarySlipPhotos);
                }
                if (source.salaryIncome.salaryPhotos && Array.isArray(source.salaryIncome.salaryPhotos)) {
                  allPhotos.push(...source.salaryIncome.salaryPhotos);
                }
                if (source.salaryIncome.bankStatementPhoto) {
                  allPhotos.push(source.salaryIncome.bankStatementPhoto);
                }
                if (source.salaryIncome.salaryCredited6Month) {
                  allPhotos.push(source.salaryIncome.salaryCredited6Month);
                }
              }
              
              // Extract other business photos
              if (source.other?.incomeOtherImages && Array.isArray(source.other.incomeOtherImages)) {
                allPhotos.push(...source.other.incomeOtherImages);
              }
            });
          }
          
          // Remove duplicates and filter out empty values
          return [...new Set(allPhotos)].filter(photo => photo);
        };

        // Extract income source photos
        const incomeSourcePhotos = extractIncomeSourcePhotos(creditPdData);
        
        // Construct customer data object with Yes/No indicators
        const customerData = {
          customerId: customerId.toString(),
          customerFinId: customerAdditionalInfo.customerFinId || "",
          customerName: applicantData?.fullName || "",
          mobileNo: customerAdditionalInfo.mobileNo || applicantData?.mobileNo || "",
          customerFatherName: customerAdditionalInfo.customerFatherName || applicantData?.fatherName || "",
          loginDate: customerAdditionalInfo.loginDate || "",
          branchName: customerAdditionalInfo.branchName || "",
          productName: customerAdditionalInfo.productName || "",
          partnerName: customerAdditionalInfo.partnerName || "",
          regionalBranchName: customerAdditionalInfo.regionalBranchName || "",
          salesPersonName: customerAdditionalInfo.salesPersonName || "",
          salesPersonManagerName: customerAdditionalInfo.salesPersonManagerName || "",
          pdPersonName: customerAdditionalInfo.pdPersonName || "",
          creditPdCompleteDate: customerAdditionalInfo.creditPdCompleteDate || vendorFormData?.creditPdCompleteDate || "",
          statusByCreditPd: customerAdditionalInfo.statusByCreditPd || vendorFormData?.statusByCreditPd || "",
          roi: customerAdditionalInfo.roi || "",
          tenureInMonth: customerAdditionalInfo.tenureInMonth || "",
          finalLoanAmount: customerAdditionalInfo.finalLoanAmount || "",
          SanctionCheckList: {
            // Login check list
            utilityBillDocument: dataExists(customerDocumentDetails?.incomeDocument?.utilityBillDocument),
            familyCardDocument: dataExists(customerDocumentDetails?.incomeDocument?.familyCardDocument),
            udyamCertificate: dataExists(customerDocumentDetails?.incomeDocument?.udyamCertificateDocument),
            bankStatement: dataExists(customerDocumentDetails?.incomeDocument?.bankStatementDocument),
            incomeDocument: dataExists(customerDocumentDetails?.incomeDocument?.incomeStatemenDocument),
            propertyDocument: dataExists(customerDocumentDetails?.propertyDocuments?.propertyDocument),
            signApplicantKyc: dataExists(customerDocumentDetails?.signApplicantKyc),
            signCoApplicantKyc: dataExists(customerDocumentDetails?.signCoApplicantKyc),
            signCoTwoApplicantKyc: dataExists(customerDocumentDetails?.signCoTwoApplicantKyc),
            signGurantorKyc: dataExists(customerDocumentDetails?.signGurantorKyc),
            
            electricityBill: dataExists(creditPdData?.utilityBillDocument),
            SamagraId: dataExists(creditPdData?.SSSMPhoto),

            applicantPhoto: dataExists(applicantData?.applicantPhoto),
            coApplicantPhoto: dataExists(coApplicantData[0]?.coApplicantPhoto),
            coApplicantPhotoTwo: dataExists(coApplicantData[1]?.coApplicantPhoto),
            guarantorPhoto: dataExists(guarantorData?.guarantorPhoto),
            applicantKycOsv: dataExists(SignKycDetails?.ApplicantSignDocument),
            coApplicantKycOsv: dataExists(SignKycDetails?.coApplicantSignDocument),
            gurantorKycOsv: dataExists(SignKycDetails?.guarantorSignDocument),
            
            applicantKyc: dataExists({
              applicantAadharFrontImage: applicantData?.kycUpload?.aadharFrontImage || "",
              applicantAadharBackImage: applicantData?.kycUpload?.aadharBackImage || "",
              applicantPanFrontImage: applicantData?.kycUpload?.panFrontImage || "",
              applicantDrivingLicenceImage: applicantData?.kycUpload?.drivingLicenceImage || "",
              applicantVoterIdImage: applicantData?.kycUpload?.voterIdImage || ""
            }),
            
            coApplicantKyc: dataExists({
              coApplicantKycAadharFrontImage: coApplicantData[0]?.kycUpload?.aadharFrontImage || "",
              coApplicantKycAadharBackImage: coApplicantData[0]?.kycUpload?.aadharBackImage || "",
              coApplicantKycDocImage: coApplicantData[0]?.kycUpload?.docImage || ""
            }),
            
            coApplicantKycTwo: dataExists({
              coApplicantKycTwoAadharFrontImage: coApplicantData[1]?.kycUpload?.aadharFrontImage || "",
              coApplicantKycTwoAadharBackImage: coApplicantData[1]?.kycUpload?.aadharBackImage || "",
              coApplicantKycTwoDocImage: coApplicantData[1]?.kycUpload?.docImage || ""
            }),
            
            gurantorKyc: dataExists({
              gurantorAadharFrontImage: guarantorData?.kycUpload?.aadharFrontImage || "",
              gurantorAadharBackImage: guarantorData?.kycUpload?.aadharBackImage || "",
              gurantorDocImage: guarantorData?.kycUpload?.docImage || ""
            }),
            
            applicantCibilReport: dataExists(cibilData?.applicantFetchHistory?.slice(-1)[0]?.cibilReport),
            
            coApplicantCibilReport: dataExists(
              Array.isArray(cibilData?.coApplicantData?.[0]?.coApplicantFetchHistory)
                ? cibilData.coApplicantData[0].coApplicantFetchHistory.slice(-1)[0]?.cibilReport
                : ""
            ),
            
            coApplicantTwoCibilReport: dataExists(
              Array.isArray(cibilData?.coApplicantData?.[1]?.coApplicantFetchHistory)
                ? cibilData.coApplicantData[1].coApplicantFetchHistory.slice(-1)[0]?.cibilReport
                : ""
            ),
            
            guarantorCibilReport: dataExists(cibilData?.guarantorFetchHistory?.slice(-1)[0]?.cibilReport),
            
            pdReport: dataExists(creditPdData?.pdfLink),
            
            rcuReport: dataExists(rcuVendor?.uploadProperty),
            
            legalReport: dataExists(legalVendor?.uploadProperty),
            
            technicalReport: dataExists(technicalVendor?.uploadProperty),
            
            technicalEstimateDocument: dataExists(technicalVendor?.estimateDocument),
            
            taggingReport: dataExists(taggingVendor?.uploadProperty),
            
            housePhotos: dataExists([
              ...(Array.isArray(creditPdData?.fourBoundaryPhotos) ? creditPdData?.fourBoundaryPhotos : [creditPdData?.fourBoundaryPhotos]),
              ...(Array.isArray(creditPdData?.houseInsidePhoto) ? creditPdData?.houseInsidePhoto : [creditPdData?.houseInsidePhoto]),
              ...(Array.isArray(creditPdData?.propertyOtherPhotos) ? creditPdData?.propertyOtherPhotos : [creditPdData?.propertyOtherPhotos]),
              creditPdData?.selfiWithCustomer || "",
              creditPdData?.photoWithLatLong || "",
              creditPdData?.front || "",
              creditPdData?.leftSide || "",
              creditPdData?.rightSide || "",
              creditPdData?.approachRoad || "",
              creditPdData?.mainRoad || "",
              creditPdData?.interiorRoad || "",
              creditPdData?.selfieWithProperty || "",
              creditPdData?.landmarkPhoto || "",
              creditPdData?.latLongPhoto || ""
            ].filter(Boolean)),
            
            workPhotos: dataExists(incomeSourcePhotos),
            
            camReport: dataExists(loanDocument?.camReport),
          },
          disbursmentCheckList: {
            dualNameDeclaration: dataExists(loanDocumentData?.dualNameDeclaration),
            
            dualSignDeclaration: dataExists(loanDocumentData?.dualSignDeclaration),
            
            dualDoBDeclaration: dataExists(loanDocumentData?.dualDoBDeclaration),
            
            applicantPDC: dataExists(appPdcData?.applicantPdcDocument),
            
            guarantorPDC: dataExists(gtrPdcData?.guarantorPdcDocument),
            
            applicantBSV: dataExists(loanDocumentData?.applicantBSV),
            
            guarantorBSV: dataExists(loanDocumentData?.guarantorBSV),
            
            coOwnershipDeed: dataExists(loanDocumentData?.coOwnershipDeed),
            
            eStampUpload: dataExists(
              disbursementData?.estampRequirement?.flatMap(
                (stamp) => stamp.eStampUpload || []
              ) || []
            ),
            
            insuranceForm: dataExists(loanDocumentData?.insuranceForm),
            
            emOrRmDeed: dataExists(loanDocumentData?.emOrRmDeed),
            
            finalLegal: dataExists(legalVendor?.finalLegalUpload),
            
            vettingReport: dataExists(loanDocument?.vettingReport),
            
            nachLink: dataExists(bankStatementData?.Nachlink?.trim() ? bankStatementData.Nachlink : disbursementData?.eNachLinkSentToBranch),
            
            eNachLinkSignUpload: dataExists(disbursementData?.eNachLinkSignUpload),
            
            eSignatureDocuments: dataExists(disbursementData?.eSignatureDocuments),
            
            appKycDocument: dataExists(loanDocument?.appKycDocument),
            
            coAppKycDocument: dataExists(loanDocument?.coAppKycDocument),
            
            stampPdf: dataExists(loanDocumentData?.stampPdf),
            sanctionZipUrl: dataExists(finalData?.sanctionZipUrl),
            disbursementZipUrl: dataExists(finalData?.disbursementZipUrl),
            incomeSectionLatterUrl: dataExists(finalData?.incomesectionLatterUrl),
            esignLinks: dataExists(links)
          }
        };
        
        // Add to the array of all customers data
        allCustomersData.push(customerData);
      } catch (error) {
        console.error(`Error processing customer ${customerId}:`, error);
        // Continue with next customer instead of failing the entire request
        continue;
      }
    }
    
    return success(res, "All Document For Dashboard Successfully", {
      data: allCustomersData,
      pagination: {
        currentPage: page,
        totalPages: Math.ceil(totalCustomers / limit),
        totalCustomers: totalCustomers,
        limit: limit
      }
    });
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
}

const uploadDocuments = async (req, res) => {
  try {
    const { customerId, nachLink } = req.body;
    const fileData = req.files;

    if (!customerId || !fileData) {
      return badRequest(res, "Customer ID and files are required.");
    }

    // Prepare document fields with file paths
    const documentFields = {};
    Object.keys(fileData).forEach((key) => {
      if (fileData[key] && fileData[key][0]) {
        documentFields[key] = fileData[key].map(
          (file) => `uploads/${file.filename}`
        ); // Add 'uploads/' prefix
      }
    });
    // console.log(documentFields,"documentFields")
    // Update or create loanDocumentModel
    try {
      const existingDocument = await loanDocumentModel.findOne({ customerId });
      if (existingDocument) {
        await loanDocumentModel.updateOne(
          { customerId },
          { $set: documentFields }
        );
      } else {
        await loanDocumentModel.create({ customerId, ...documentFields });
      }
    } catch (error) {
      console.error("Error updating loanDocumentModel:", error);
    }

    // Bulk updates for different models
    const modelUpdates = [
      {
        model: disbursementModel,
        field: "eNachLinkSignUpload",
        key: "eNachLinkSignUpload",
      },
      { model: applicantModel, field: "applicantPhoto", key: "applicantPhoto" },
      {
        model: coApplicantModel,
        field: "coApplicantPhoto",
        key: "coApplicantPhoto",
      },
      { model: guarantorModel, field: "guarantorPhoto", key: "guarantorPhoto" },
      {
        model: cibilModel,
        field: "applicantCibilReport",
        key: "applicantCibilReport",
      },
      {
        model: cibilModel,
        field: "guarantorCibilScore",
        key: "guarantorCibilReport",
      },
      {
        //1
        model: customerDocumentModel,
        field: "incomeDocument.utilityBillDocument",
        key: "utilityBillDocument",
      },
      {
        model: customerDocumentModel,
        field: "incomeDocument.familyCardDocument",
        key: "familyCardDocument",
      },
      {
        model: customerDocumentModel,
        field: "incomeDocument.udyamCertificateDocument",
        key: "udyamCertificate",
      },
      {
        model: customerDocumentModel,
        field: "incomeDocument.bankStatementDocument",
        key: "bankStatement",
      },
      {
        model: customerDocumentModel,
        field: "incomeDocument.incomeDocument",
        key: "incomeDocument",
      },
      {
        model: customerDocumentModel,
        field: "incomeDocument.electricityBillPhoto",
        key: "electricityBill",
      },
      {
        model: customerDocumentModel,
        field: "signApplicantKyc",
        key: "signApplicantKyc",
      },
      {
        model: customerDocumentModel,
        field: "signCoApplicantKyc",
        key: "signCoApplicantKyc",
      },
      {
        model: customerDocumentModel,
        field: "signCoTwoApplicantKyc",
        key: "signCoTwoApplicantKyc",
      },
      {
        model: customerDocumentModel,
        field: "signGurantorKyc",
        key: "signGurantorKyc",
      },
      {
        //1
        model: customerDocumentModel,
        field: "propertyDocument.document",
        key: "propertyDocument",
      },
      { model: creditPdModel, field: "samagraIdDocument", key: "SamagraId" },
      { model: creditPdModel, field: "pdfLink", key: "pdReport" },
      { model: creditPdModel, field: "fourBoundaryPhotos", key: "housePhotos" },
      { model: creditPdModel, field: "workPhotos", key: "workPhotos" },
      {
        model: appPdcModel,
        field: "applicantPdcDocument",
        key: "applicantPDC",
      },
      {
        model: gtrPdcModel,
        field: "guarantorPdcDocument",
        key: "guarantorPDC",
      },
    ];

    await Promise.allSettled(
      modelUpdates.map(async ({ model, field, key }) => {
        if (documentFields[key]) {
          try {
            return await model.findOneAndUpdate(
              { customerId },
              { $set: { [field]: documentFields[key] } },
              { upsert: true }
            );
          } catch (error) {
            console.error(
              `Error updating ${field} in ${model.modelName}:`,
              error
            );
          }
        }
      })
    );
    await disbursementModel.findOneAndUpdate(
      { customerId },
      { $set: { eNachLinkSentToBranch: nachLink } },
      { upsert: true, new: true }
    );
    await disbursementModel.findOneAndUpdate(
      { customerId },
      {
        $set: {
          eNachLinkSignUpload: documentFields["eNachLinkSignUpload"]?.[0],
        },
      },
      { upsert: true, new: true }
    );

    await creditPdModel.findOneAndUpdate(
      { customerId },
      { $set: { pdfLink: documentFields["pdReport"]?.[0] } },
      { upsert: true, new: true }
    );
    await applicantModel.findOneAndUpdate(
      { customerId },
      { $set: { applicantPhoto: documentFields["applicantPhoto"]?.[0] } },
      { upsert: true, new: true }
    );

    await guarantorModel.findOneAndUpdate(
      { customerId },
      { $set: { guarantorPhoto: documentFields["guarantorPhoto"]?.[0] } },
      { upsert: true, new: true }
    );
    const bankUpdate = await bankStatementModel.findOneAndUpdate(
      { customerId },
      { $set: { bankStatementDocument: documentFields["bankDetails"] } },
      { upsert: true, new: true }
    );
    // console.log("Bank Statement Update Result:", bankUpdate);
    await cibilModel.findOneAndUpdate(
      { customerId },
      {
        $set: {
          applicantCibilReport: documentFields["applicantCibilReport"],
          "coApplicantData.0.coApplicantCibilReport":
            documentFields["coApplicantCibilReport"],
          "coApplicantData.1.coApplicantCibilReport":
            documentFields["coApplicantTwoCibilReport"],
          // coApplicantCibilReport: documentFields["coApplicantCibilReport"]?.[0],
          guarantorCibilReport: documentFields["guarantorCibilReport"],
        },
      },
      { upsert: true, new: true }
    );

    // Update kycUpload fields for applicants and guarantors
    const applicantUpdate = applicantModel.findOneAndUpdate(
      { customerId },
      {
        $set: {
          "kycUpload.aadharFrontImage":
            documentFields["applicantAadharFrontImage"]?.[0],
          "kycUpload.aadharBackImage":
            documentFields["applicantAadharBackImage"]?.[0],
          "kycUpload.panFrontImage":
            documentFields["applicantPanFrontImage"]?.[0],
          "kycUpload.drivingLicenceImage":
            documentFields["applicantDrivingLicenceImage"]?.[0],
          "kycUpload.voterIdImage":
            documentFields["applicantVoterIdImage"]?.[0],
        },
      },
      { new: true }
    );

    if (documentFields.nachDocument && documentFields.nachDocument.length > 0) {
      const bankDetails = await bankStatementModel.findOne({ customerId });

      if (!bankDetails) {
        throw new Error("Bank details not found.");
      }

      // Find the specific bank detail to update
      const bankDetailToUpdate = bankDetails.bankDetails.find(
        (detail) => detail.E_Nach_Remarks === "true"
      );

      if (!bankDetailToUpdate) {
        return badRequest(
          res,
          "No bank detail found with E_Nach_Remarks = true."
        );
      }

      // Update the `uploadpdf` field for the matched bank detail
      bankDetailToUpdate.uploadpdf = Array.isArray(documentFields.nachDocument)
        ? documentFields.nachDocument.flat()
        : [documentFields.nachDocument]; // Ensure it's a flat array

      await bankDetails.save();
      console.log("NACH document updated successfully.");
    } else {
      console.log("No valid NACH document provided for update.");
    }

    const guarantorUpdate = guarantorModel.findOneAndUpdate(
      { customerId },
      {
        $set: {
          "kycUpload.aadharFrontImage":
            documentFields["gurantorAadharFrontImage"]?.[0],
          "kycUpload.aadharBackImage":
            documentFields["gurantorAadharBackImage"]?.[0],
          "kycUpload.docImage": documentFields["gurantorDocImage"]?.[0],
        },
      },
      { new: true }
    );

    await Promise.allSettled([applicantUpdate, guarantorUpdate]);

    // Update co-applicants
    const existingCoApplicants = await coApplicantModel.find({ customerId });

    const coApplicantUpdate = existingCoApplicants.map((coApplicant, index) => {
      const photoField =
        index === 0
          ? documentFields["coApplicantPhoto"]?.[0]
          : documentFields["coApplicantPhotoTwo"]?.[0];

      return coApplicantModel.findOneAndUpdate(
        { _id: coApplicant._id },
        {
          $set: {
            coApplicantPhoto: photoField,
          },
        },
        { new: true }
      );
    });

    await Promise.allSettled(coApplicantUpdate);

    const coApplicantUpdates = existingCoApplicants.map(
      (coApplicant, index) => {
        const prefix = index === 0 ? "coApplicantKyc" : "coApplicantKycTwo";
        return coApplicantModel.findOneAndUpdate(
          { _id: coApplicant._id },
          {
            $set: {
              "kycUpload.aadharFrontImage":
                documentFields[`${prefix}AadharFrontImage`]?.[0],
              "kycUpload.aadharBackImage":
                documentFields[`${prefix}AadharBackImage`]?.[0],
              "kycUpload.docImage": documentFields[`${prefix}DocImage`]?.[0],
            },
          },
          { new: true }
        );
      }
    );

    await Promise.allSettled(coApplicantUpdates);

    // Vendor reports update
    const vendorReports = [
      { type: "rcu", documents: documentFields["rcuReport"] },
      { type: "legal", documents: documentFields["legalReport"] },
      { type: "technical", documents: documentFields["technicalReport"] },
      { type: "tagging", documents: documentFields["taggingReport"] },
    ];

    const vendorUpdateResults = await Promise.allSettled(
      vendorReports.map(async ({ type, documents }) => {
        if (documents) {
          try {
            // Check if the vendor exists
            const vendor = await externalVendorFormModel.findOne({
              customerId,
              "vendors.vendorType": type,
            });
            if (!vendor) {
              success(res, `Vendor with type ${type} not found`);
              // throw new Error(`Vendor with type ${type} not found`);
            }

            // If vendor exists, proceed with update
            return await externalVendorFormModel.findOneAndUpdate(
              { customerId, "vendors.vendorType": type },
              { $set: { "vendors.$.assignDocuments": documents } },
              { new: true, upsert: true }
            );
          } catch (error) {
            console.error(
              `Error updating vendor ${type} documents:`,
              error.message
            );
            return { error: error.message }; // Return error message in case of failure
          }
        }
      })
    );

    // const vendorUpdateResults = await Promise.allSettled(
    //   vendorReports.map(async ({ type, documents }) => {
    //     if (documents) {
    //       try {
    //         return await externalVendorFormModel.findOneAndUpdate(
    //           { customerId, "vendors.vendorType": type },
    //           {
    //             $set: { "vendors.$.assignDocuments": documents },
    //             $setOnInsert: { customerId, "vendors": [{ vendorType: type, assignDocuments: documents }] }
    //           },
    //           { new: true, upsert: true }
    //         );
    //       } catch (error) {
    //         console.error(`Error updating vendor ${type} documents:`, error);
    //       }
    //     }
    //   })
    // );

    // console.log("Vendor update results:", vendorUpdateResults);

    success(res, "Documents updated successfully.");
    // await finalApprovalSheet(customerId);
  } catch (error) {
    console.error("Unhandled error in uploadDocuments:", error);
    return unknownError(res, error);
  }
};

const newUploadDocuments = async (req,res) => {
  try{
   const { 
    customerId,
    utilityBillDocument,
    familyCardDocument,
    udyamCertificate,
    bankStatement,
    incomeDocument,
    propertyDocument,
    signApplicantKyc,
    signCoApplicantKyc,
    signCoTwoApplicantKyc,
    signGurantorKyc,
    SamagraId,
    applicantPhoto,
    coApplicantPhoto,
    coApplicantPhotoTwo,
    guarantorPhoto,
    applicantKycOsv,
    coApplicantKycOsv,
    gurantorKycOsv,
    applicantAadharFrontImage,
    applicantAadharBackImage,
    applicantPanFrontImage,
    applicantDrivingLicenceImage,
    applicantVoterIdImage,
    coApplicantKycAadharFrontImage,
    coApplicantKycAadharBackImage,
    coApplicantKycDocImage,
    coApplicantKycTwoAadharFrontImage,
    coApplicantKycTwoAadharBackImage,
    coApplicantKycTwoDocImage,
    gurantorAadharFrontImage,
    gurantorAadharBackImage,
    gurantorDocImage,
    applicantCibilReport,
    coApplicantCibilReport,
    coApplicantTwoCibilReport,
    guarantorCibilReport,
    pdReport,
    rcuReport,
    legalReport,
    technicalReport,
    taggingReport,
    housePhotos,
    workPhotos,
    camReport,
    dualNameDeclaration,
    dualSignDeclaration,
    dualDoBDeclaration,
    applicantPDC,
    guarantorPDC,
    applicantBSV,
    guarantorBSV,
    coOwnershipDeed,
    eStampUpload,
    insuranceForm,
    emOrRmDeed,
    vettingReport,
    nachLink,
    eNachLinkSignUpload,
    appKycDocument,
    coAppKycDocument,
    stampPdf,
    sanctionZipUrl,
    disbursementZipUrl,
    eSignatureDocuments,
    form60,
    NewfamilyCardDocument,
    newUdyamCertificate
   } = req.body
   const todayDate = moment().tz("Asia/Kolkata").format("YYYY-MM-DDThh:mm:ss A");
   const customerDetails = await customerModel.findById(customerId)
   if(!customerDetails){
    return notFound(res , "customer not found")
   }
  //  console.log( req.body,"req.body<><><><><>");
   const loanData = await loanDocumentModel.findOne({ customerId })
   const loanDocumentData = await loanDocumentModel.findOneAndUpdate(
    { customerId },
    {
      $set:{
        dualNameDeclaration : dualNameDeclaration ? dualNameDeclaration : loanData?.dualNameDeclaration,
        dualSignDeclaration : dualSignDeclaration ? dualSignDeclaration : loanData?.dualSignDeclaration,
        dualDoBDeclaration : dualDoBDeclaration ? dualDoBDeclaration : loanData?.dualDoBDeclaration,
        applicantBSV : applicantBSV ? applicantBSV : loanData?.applicantBSV,
        guarantorBSV : guarantorBSV ? guarantorBSV : loanData?.guarantorBSV,
        insuranceForm : insuranceForm ? insuranceForm : loanData?.insuranceForm,
        emOrRmDeed : emOrRmDeed ? emOrRmDeed : loanData?.emOrRmDeed,
        vettingReport : vettingReport ? vettingReport : loanData?.vettingReport,
        // camReport,
        coOwnershipDeed : coOwnershipDeed ? coOwnershipDeed : loanData?.coOwnershipDeed,
        appKycDocument : appKycDocument? appKycDocument: loanData?.appKycDocument,
        coAppKycDocument : coAppKycDocument? coAppKycDocument: loanData?.coAppKycDocument,
        form60 : form60? form60: loanData?.form60,
        insuranceForm : insuranceForm? insuranceForm: loanData?.insuranceForm,
        emOrRmDeed : emOrRmDeed? emOrRmDeed: loanData?.emOrRmDeed,
        vettingReport : vettingReport ? vettingReport : loanData?.vettingReport,
        camReport: camReport? camReport : loanData?.camReport
      }
    },
    {
      new:true,upsert:true
    }
  );
  // console.log(loanDocumentData,"<><>" )
  const customerData = await customerDocumentModel.findOne({ customerId})
  const customerDocumentDetails = await customerDocumentModel.findOneAndUpdate(
    {customerId},
  {
    $set:{
      "incomeDocument.utilityBillDocument": utilityBillDocument ? utilityBillDocument : customerData?.utilityBillDocument,
      "incomeDocument.familyCardDocument":familyCardDocument ? familyCardDocument : customerData?.familyCardDocument,
      "incomeDocument.udyamCertificateDocument":udyamCertificate ? udyamCertificate : customerData?.udyamCertificate,
      "incomeDocument.bankStatementDocument":bankStatement ? bankStatement : customerData?.bankStatement,
      "incomeDocument.incomeStatemenDocument": incomeDocument ?? customerData?.incomeDocument?.incomeStatemenDocument,
      "propertyDocuments.propertyDocument": propertyDocument ? propertyDocument: customerData?.propertyDocument,
      signApplicantKyc:signApplicantKyc ? signApplicantKyc : customerData?.signApplicantKyc,
      signCoApplicantKyc:signCoApplicantKyc ? signCoApplicantKyc : customerData?.signCoApplicantKyc,
      signCoTwoApplicantKyc:signCoTwoApplicantKyc ? signCoTwoApplicantKyc : customerData?.signCoTwoApplicantKyc,
      signGurantorKyc:signGurantorKyc ? signGurantorKyc : customerData?.signGurantorKyc,
    }
  },
  {
    new:true,upsert:true
  }
  );
//  console.log(customerDocumentDetails,"customerDocumentDetails")
  const cibilAllData = await cibilModel.findOne({ customerId })
  const cibilData = await cibilModel.findOneAndUpdate(
    { customerId },
    {
      $set:{
        applicantCibilReport: applicantCibilReport ? applicantCibilReport : cibilAllData?.applicantCibilReport,
        guarantorCibilReport: guarantorCibilReport ? guarantorCibilReport : cibilAllData?.guarantorCibilReport,
        "coApplicantData.0.coApplicantCibilReport": coApplicantCibilReport ? coApplicantCibilReport: cibilAllData?.coApplicantData[0]?.coApplicantCibilReport,
        "coApplicantData.1.coApplicantCibilReport": coApplicantTwoCibilReport ? coApplicantTwoCibilReport: cibilAllData?.coApplicantData[1]?.coApplicantTwoCibilReport,
      }
    },
    {
      new:true,upsert:true
    }
  );

  // console.log(cibilData,"cibilData")
  const applicantData = await applicantModel.findOne({ customerId });
   await applicantModel.findOneAndUpdate(
    { customerId },
    { $set: {
      kycUpload: {
        aadharFrontImage:applicantAadharFrontImage ? applicantAadharFrontImage : applicantData?.kycUpload?.aadharFrontImage ,
        aadharBackImage:applicantAadharBackImage ? applicantAadharBackImage : applicantData?.kycUpload?.aadharBackImage,
        panFrontImage: applicantPanFrontImage ? applicantPanFrontImage : applicantData?.kycUpload?.panFrontImage,
        drivingLicenceImage: applicantDrivingLicenceImage ? applicantDrivingLicenceImage : applicantData?.kycUpload?.drivingLicenceImage,
        voterIdImage: applicantVoterIdImage ? applicantVoterIdImage : applicantData?.kycUpload?.voterIdImage
      }
    }},
    {
      new:true,
      upsert:true
    }
  );

  const guarantorData = await guarantorModel.findOne({ customerId });
   await guarantorModel.findOneAndUpdate(
    { customerId },
    { $set: {
      kycUpload: {
        aadharFrontImage:gurantorAadharFrontImage ? gurantorAadharFrontImage : guarantorData?.kycUpload?.aadharFrontImage ,
        aadharBackImage:gurantorAadharBackImage ? gurantorAadharBackImage : guarantorData?.kycUpload?.aadharBackImage,
        docImage: gurantorDocImage ? gurantorDocImage : guarantorData?.kycUpload?.docImage
      }
    }},
    {
      new:true,
      upsert:true
    }
  );

  const coApplicants = await coApplicantModel.find({ customerId });

  if (coApplicants.length > 0) {
    // Update the first co-applicant
    if (coApplicants[0]) {
      await coApplicantModel.updateOne(
        { _id: coApplicants[0]._id },
        {
          $set: {
            "kycUpload.aadharFrontImage": coApplicantKycAadharFrontImage || coApplicants[0]?.kycUpload?.aadharFrontImage,
            "kycUpload.aadharBackImage": coApplicantKycAadharBackImage || coApplicants[0]?.kycUpload?.aadharBackImage,
            "kycUpload.docImage": coApplicantKycDocImage || coApplicants[0]?.kycUpload?.docImage,
          }
        },
        
      );
    }
  
    // Update the second co-applicant
    if (coApplicants[1]) {
      await coApplicantModel.updateOne(
        { _id: coApplicants[1]._id },
        {
          $set: {
            "kycUpload.aadharFrontImage": coApplicantKycTwoAadharFrontImage || coApplicants[1]?.kycUpload?.aadharFrontImage,
            "kycUpload.aadharBackImage": coApplicantKycTwoAadharBackImage || coApplicants[1]?.kycUpload?.aadharBackImage,
            "kycUpload.docImage": coApplicantKycTwoDocImage || coApplicants[1]?.kycUpload?.docImage,
          }
        }
      );
    }
  }
  

 const appPdcData = await appPdcModel.findOne({ customerId });
 await appPdcModel.findOneAndUpdate(
  { customerId },
  {
    $set:{
      applicantPdcDocument:applicantPDC ? applicantPDC : appPdcData?.applicantPdcDocument
    }
  },
  {
    new:true,
    upsert:true
  }
);

const gtrPdcData = await gtrPdcModel.findOne({ customerId });
 const dd = await gtrPdcModel.findOneAndUpdate(
  { customerId },
  {
    $set:{
      guarantorPdcDocument : guarantorPDC ? guarantorPDC : gtrPdcData?.guarantorPdcDocument
    }
  },
  {
    new:true,
    upsert:true
  }
);


const creditPdData = await creditPdModel.findOne({ customerId });
console.log(pdReport,"pdReportpdReport")
 const ss = await creditPdModel.findOneAndUpdate(
  { customerId },
  {
    $set:{
      pdfLink : pdReport ? pdReport :creditPdData?.pdReport,
      workPhotos : workPhotos ? workPhotos : creditPdData?.workPhotos,
      fourBoundaryPhotos: housePhotos ? housePhotos : creditPdData?.housePhotos,
      "samagraIdDetail.samagraIdDoc": NewfamilyCardDocument 
    }
  },
  {
    new:true,
    upsert:true
  }
);

const udhyamKycData = await udhyamKycModel.findOne({ customerId })
await udhyamKycModel.findOneAndUpdate(
  { customerId },
  {
    $set:{
      udhyamKycDocument : newUdyamCertificate ? newUdyamCertificate :udhyamKycData?.udhyamKycDocument
    }
  },
  {
    new:true,
    upsert:true
  }
);

if(Array.isArray(housePhotos) && housePhotos.length === 0){
  console.log("in if block")
   await creditPdModel.findOneAndUpdate(
    { customerId },
    {
      $set:{
        houseInsidePhoto : [],
        propertyOtherPhotos : [],
        selfiWithCustomer: "",
        photoWithLatLong: "",
        leftSide: "" ,
        front: "",
        rightSide: "",
        approachRoad: "", 
        mainRoad: "",
        interiorRoad: "",
        selfieWithProperty: "",
        landmarkPhoto: "",
        latLongPhoto: ""
      }
    },
    {
      new:true,
      upsert:true
    }
  );
}

const vendorReports = [
  { type: "rcu", documents: rcuReport },
  { type: "legal", documents: legalReport },
  { type: "technical", documents: technicalReport },
  { type: "tagging", documents: taggingReport },
];

const vendorUpdateResults = await Promise.allSettled(
  vendorReports.map(async ({ type, documents }) => {
    if (documents) {
      try {
        // Check if the vendor exists
        const vendor = await externalVendorFormModel.findOne({
          customerId,
          "vendors.vendorType": type,
        });

        if (!vendor) {
          return { error: `Vendor with type ${type} not found` };
        }

        // If vendor exists, update assignDocuments field
        return await externalVendorFormModel.findOneAndUpdate(
          { customerId, "vendors.vendorType": type },
          { $set: { "vendors.$.uploadProperty": documents } },
          { new: true }
        );
      } catch (error) {
        console.error(`Error updating vendor ${type} documents:`, error.message);
        return { error: error.message };
      }
    }
  })
);

const disbursementData = await disbursementModel.findOne({ customerId });
await disbursementModel.findOneAndUpdate(
  { customerId },
  {
    $set:{
      eNachLinkSignUpload : eNachLinkSignUpload ,
      eSignatureDocuments: eSignatureDocuments 
    }
  },
  {
    new:true,
    upsert:true
  }
);


const getPartner = await finalModel.findOne(
  { customerId },
).select('partnerId');


const lender = await lenderModel.findOne({
  _id: getPartner?.partnerId,
  "venders.branch": new ObjectId(customerDetails?.branch),
  "venders.reportType": "technical",
});


return success(res, "document updated Successfully");

  }
  catch (error) {
    console.error("Unhandled error in uploadDocuments:", error);
    return unknownError(res, error);
  }
}

// add loan aditional document
const addLoanDocuments = async (req, res) => {
  const { fileName, customerId, file } = req.body;

  if (!customerId) {
    return badRequest(res, "Customer ID and file data are required.");
  }
  try {
    // Prepare the object to push with 'uploads/' prefix
    const docObjtEntry = {
      name: fileName || "",
      file: file, 
    };

    // Update the document, pushing the new object into the docObjt array,
    // or create a new document if customerId doesn't exist
    const data = await loanDocumentModel.updateOne(
      { customerId },
      { $push: { docObjt: docObjtEntry } },
      { upsert: true } // Create a new document if no match is found
    );

    // Check if a new document was created or an existing document was updated
    const message =
      data.upsertedCount > 0
        ? "New document created successfully."
        : "Document updated successfully.";

     success(res, message);
      await fileProcessSheet(customerId)
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

// update aditional document
const updateDocument = async (req, res) => {
  const { documentId, fileId, fileName } = req.body;
  const fileData = req.file;

  if (!documentId || !fileId || !fileData) {
    return badRequest(res, "Document ID, file ID, and file data are required.");
  }

  try {
    const document = await loanDocumentModel.findOne(
      { _id: documentId, "docObjt._id": fileId },
      { "docObjt.$": 1 }
    );

    if (!document) {
      return notFound(res, "Document or nested file not found.");
    }

    const existingFileName = document.docObjt[0]?.name;

    const data = await loanDocumentModel.updateOne(
      {
        _id: documentId,
        "docObjt._id": fileId,
      },
      {
        $set: {
          "docObjt.$.name": fileName || existingFileName,
          "docObjt.$.file": fileData.filename,
        },
      }
    );

    return success(res, "Document updated successfully.");
  } catch (error) {
    console.error("Error during update:", error);
    return unknownError(res, error);
  }
};

const partnerDocumentRequest = async (req, res) => {
  try {
    const tokenId = new ObjectId(req.Id);
    const { documentName, customerId } = req.body;

    const data = await loanDocumentModel.updateOne(
      { customerId },
      {
        $push: {
          requestedDoc: {
            requestedBy: tokenId,
            name: documentName,
          },
        },
      },
      { new: true }
    );

    return success(res, "Document request sent successfully.");
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

const uploadRequestDocument = async (req, res) => {
  try {
    const { customerId, documentId } = req.body;
    const fileData = req.file;

    const data = await loanDocumentModel.updateOne(
      {
        customerId,
        "requestedDoc._id": documentId, // Find the document by its `_id` within `requestedDoc` array
      },
      {
        $set: {
          "requestedDoc.$.file": fileData.filename, // Update the specific `file` field in the array
        },
      }
    );

    return success(res, "Document updated successfully.");
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

const requestDocumentList = async (req, res) => {
  try {
    const { customerId } = req.query;

    const data = await loanDocumentModel.findOne({ customerId });

    return success(res, "Document updated successfully.", {
      data: data?.requestedDoc,
    });
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

// const addDocumetsList = async (req, res) => {
//   try {
//     const { customerId } = req.query;
//     const queryDocList = await queryFormModel.find({ customerId })
//     console.log(queryDocList,"queryDocListqueryDocListqueryDocList")
//     const data = await loanDocumentModel.findOne({ customerId });
//     return success(res, "Document updated successfully.", {
//       _id: data?._id,
//       data: data?.docObjt,
//     });
//   } catch (error) {
//     console.error(error);
//     return unknownError(res, error);
//   }
// };

const addDocumetsList = async (req, res) => {
  try {
    const { customerId } = req.query;

    // Fetch and filter data based on `type: "Document"`
    const queryDocList = await queryFormModel.find(
      { customerId, type: "Document" }, // Filter by customerId and type
      { queryDetail: 1, docUpload: 1, _id: 0 } // Project only required fields
    );

    console.log(queryDocList, "Filtered queryDocList");

    const data = await loanDocumentModel.findOne({ customerId });

    // Merge `data` and `queryDocList` into a single array
    const mergedData = [
      ...(data?.docObjt || []).map((item) => ({
        name: item.name,
        file: item.file,
      })),
      ...queryDocList.map((item) => ({
        name: item.queryDetail, // Using `queryDetail` as `name`
        file: item.docUpload,
      })),
    ];

    return success(res, "Document updated successfully.", {
      _id: data?._id,
      items: mergedData, // Combined array in `items`
    });
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

const uploadkycDocument = async (req, res) => {
  try {
    const { customerId } = req.body;
    const fileData = req.files;

    if (!customerId || !fileData) {
      return badRequest(res, "Customer ID and files are required.");
    }

    const documentFields = {};
    ["appKycDocument", "coAppKycDocument"].forEach((key) => {
      if (fileData[key] && fileData[key][0]) {
        // Add the 'uploads/' prefix to the filename
        documentFields[key] = `uploads/${fileData[key][0].filename}`;
      }
    });

    if (Object.keys(documentFields).length === 0) {
      return badRequest(
        res,
        "Please provide at least one document: 'appKycDocument' or 'coAppKycDocument'."
      );
    }

    const existingDocument = await loanDocumentModel.findOne({ customerId });

    if (!existingDocument) {
      return badRequest(res, "Customer does not exist.");
    }

    await loanDocumentModel.updateOne({ customerId }, { $set: documentFields });

    return success(res, "Documents updated successfully.");
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

const sanctionPendency = async (req, res) => {
  try {
    const {
      customerId,
      queryDetails,
      sanctionDate,
      partnerLoanNo,
      loanAgreementDate,
      partnerCustomerId,
    } = req.body;

    const updateFields = {};
    if (sanctionDate) updateFields.sanctionDate = sanctionDate;
    if (partnerLoanNo) updateFields.partnerLoanNo = partnerLoanNo;
    if (loanAgreementDate) updateFields.loanAgreementDate = loanAgreementDate;
    if (partnerCustomerId) updateFields.partnerCustomerId = partnerCustomerId;

    const sanctionData = await sanctionPendencyModel.findOneAndUpdate(
      { customerId }, // Filter
      {
        $push: { queryDetails: { $each: queryDetails || [] } },
        $set: updateFields,
      },
      { upsert: true, new: true }
    );

    console.log("Sanction pendency details updated:", partnerLoanNo);
    console.log("Sanction pendency details updated:", sanctionDate);
    console.log("Sanction pendency details updated:", loanAgreementDate);
    console.log("Sanction pendency details updated:", partnerCustomerId);

    if (
      partnerLoanNo ||
      sanctionDate ||
      loanAgreementDate ||
      partnerCustomerId
    ) {
      await DissionBox({
        customerId,
        employeeId: req.Id,
        finalSanction: "completed",
      });
    } else {
      await DissionBox({
        customerId,
        employeeId: req.Id, // Replace with dynamic employeeId if required
        finalSanction: "pending",
      });
    }
    const todayDate = moment().tz("Asia/Kolkata").format("YYYY-MM-DDThh:mm:ss A");

    await finalModel.findOneAndUpdate(
      { customerId },
      { $set: { finalSanctionStatus : "complete",
        finalSanctionStatusDate:todayDate
       } }
    );

    return success(
      res,
      "Sanction pendency details updated successfully",
      sanctionData
    );
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

const sanctionPendencyDetails = async (req, res) => {
  try {
    const { customerId } = req.query;
    const sanctionData = await sanctionPendencyModel.findOne({ customerId });
    const loanDocumentData = await loanDocumentModel.findOne({ customerId });

    const data = await disbursementModel.findOne({ customerId });

    const responseData = {
      sanctionPendency: {
        queryDetails: sanctionData?.queryDetails || [],
        sanctionDate: sanctionData?.sanctionDate || "",
        partnerLoanNo: sanctionData?.partnerLoanNo || "",
        loanAgreementDate: sanctionData?.loanAgreementDate || "",
        partnerCustomerId: sanctionData?.partnerCustomerId || "",
      },
      chargesDetails: {
        processingFees: data?.kfsDetails?.processingFees || "",
        documentsCharges: data?.kfsDetails?.documentsCharges || "",
        cersaiCharges: data?.kfsDetails?.cersaiCharges || "",
        insuranceCharges: data?.kfsDetails?.insuranceCharges || "",
        preEmiInterest: data?.kfsDetails?.preEmiInterest || "",
      },
      kfsDetails: {
        benchmarkinterestRate: data?.kfsDetails?.benchmarkinterestRate || "",
        SpreadInterestRate: data?.kfsDetails?.SpreadInterestRate || "",
        annualPercentageRateAprPercentage:
          data?.kfsDetails?.annualPercentageRateAprPercentage || "",
        epi: data?.kfsDetails?.epi || "",
        noOfEpi: data?.kfsDetails?.noOfEpi || "",
      },
      postDisbursementDetails: {
        loanNumber: data?.postDisbursementDetails?.loanNumber || "",
        actualPreEmi: data?.postDisbursementDetails?.actualPreEmi || "",
        dateOfDisbursement:
          data?.postDisbursementDetails?.dateOfDisbursement || "",
        dateOfFirstEmi: data?.postDisbursementDetails?.dateOfFirstEmi || "",
        utrNumberOne: data?.postDisbursementDetails?.utrNumberOne || "",
        utrNumberTwo: data?.postDisbursementDetails?.utrNumberTwo || "",
        disbursementDoneBy:
          data?.postDisbursementDetails?.disbursementDoneBy || "",
        // applicantName: { type: String, default: "" },
        // fatherName: { type: String, default: "" },
      },
      applicantForm: {
        bankName: data?.applicantForm?.bankName || "",
        AccountHolderName: data?.applicantForm?.AccountHolderName || "",
        AccountNumber: data?.applicantForm?.AccountNumber || "",
        IFSCCode: data?.applicantForm?.IFSCCode || "",
        accountType: data?.applicantForm?.accountType || "",
        branchName: data?.applicantForm?.branchName || "",
        remark: data?.applicantForm?.remark || "",
        totalChequeCount: data?.applicantForm?.totalChequeCount || "",
        chequeOne: data?.applicantForm?.chequeOne || "",
        chequeTwo: data?.applicantForm?.chequeTwo || "",
        chequeThree: data?.applicantForm?.chequeThree || "",
        chequeFour: data?.applicantForm?.chequeFour || "",
        chequeFive: data?.applicantForm?.chequeFive || "",
        chequeSix: data?.applicantForm?.chequeSix || "",
        chequeSeven: data?.applicantForm?.chequeSeven || "",
        chequeEight: data?.applicantForm?.chequeEight || "",
        chequeNine: data?.applicantForm?.chequeNine || "",
        chequeTen: data?.applicantForm?.chequeTen || "",
      },
      guarantorForm: {
        guarantorName: data?.guarantorForm?.guarantorName || "",
        bankName: data?.guarantorForm?.bankName || "",
        AccountHolderName: data?.guarantorForm?.AccountHolderName || "",
        AccountNumber: data?.guarantorForm?.AccountNumber || "",
        IFSCCode: data?.guarantorForm?.IFSCCode || "",
        accountType: data?.guarantorForm?.accountType || "",
        branchName: data?.guarantorForm?.branchName || "",
        remark: data?.guarantorForm?.remark || "",
        totalChequeCount: data?.guarantorForm?.totalChequeCount || "",
        chequeOne: data?.guarantorForm?.chequeOne || "",
        chequeTwo: data?.guarantorForm?.chequeTwo || "",
        chequeThree: data?.guarantorForm?.chequeThree || "",
        chequeFour: data?.guarantorForm?.chequeFour || "",
        chequeFive: data?.guarantorForm?.chequeFive || "",
        chequeSix: data?.guarantorForm?.chequeSix || "",
        chequeSeven: data?.guarantorForm?.chequeSeven || "",
        chequeEight: data?.guarantorForm?.chequeEight || "",
        chequeNine: data?.guarantorForm?.chequeNine || "",
        chequeTen: data?.guarantorForm?.chequeTen || "",
      },
      stampPdf: loanDocumentData?.stampPdf || [],
    };

    success(res, "sanction pendency details", responseData);
    await processModel.findOneAndUpdate(
      { customerId },
      { $set: {
        sanctionDetailFromPartner:true
      } },
      { new: true }
  );
  await finalApprovalSheet(customerId)
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

const downloadSanctionDocument = async (req, res) => {
  try {
    return success(res, "sanction pendency details", responseData);
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

// const sendToPartnernew = async (req, res) => {
//   try {
//     const { customerId } = req.query;

//     const partnerData = await finalModel.findOne({ customerId });

//     if (!partnerData) {
//       return badRequest(res, "partner's is required.");
//     }
//     const partnerModel = await lendersModel.findOne({
//       _id: partnerData.partnerId,
//     });
//     if (!partnerModel) {
//       return badRequest(res, "Partner not found.");
//     }

//     const normalizedPartnerName = (partnerModel.fullName || "")
//       .trim()
//       .toLowerCase();

//     if (normalizedPartnerName === "ratnaafin capital pvt ltd") {
//       // Ratna logic
//       let selectionData = partnerData?.pdfSelection || "acg";
//       console.log(selectionData, "selectionDataselectionData");
//       if (!selectionData || typeof selectionData !== "string") {
//         selectionData;
//       }

//       const sectionData = await sectionLatter(customerId);
//       if (!sectionData) {
//         return badRequest(res, "sectionData not found.");
//       }
//       const applicantData = await applicantLatter(customerId, selectionData);
//       if (!applicantData) {
//         return badRequest(res, "applicantData not found.");
//       }
//       const LdAndPdDeedData = await LdAndPdDeed(customerId, selectionData);
//       if (!LdAndPdDeedData) {
//         return badRequest(res, "LdAndPdDeedData not found.");
//       }

//       const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;
//       console.log(uploadUrl, "uploadUrl");
//       // console.log(uploadUrl,"uploadUrluploadUrl")

//       const processFile = async (filePath) => {
//         const resolvedPath = path
//           .resolve(__dirname, `../../../..${filePath}`)
//           .replace(/\\/g, "/");
//         // console.log("Resolved File Path: ", resolvedPath);
//         const formData = new FormData();
//         formData.append("image", fs.createReadStream(resolvedPath));
//         // console.log("File Stream: ", fs.existsSync(resolvedPath));
//         const response = await axios.post(uploadUrl, formData, {
//           headers: { ...formData.getHeaders() },
//         });
//         // console.log("Upload Response: ", response.data);

//         return response.data?.items;
//       };

//       // console.log("Section Data Path: ", sectionData);
//       const uploadedSectionUrl = await processFile(sectionData);
//       // console.log("Applicant Data Path: ", applicantData);
//       const uploadedApplicantUrl = await processFile(applicantData);
//       // console.log("LdAndPdDeed Data Path: ", LdAndPdDeedData);
//       const uploadedLdAndPdDeedUrl = await processFile(LdAndPdDeedData);

//       return success(res, "pdf urls are", {
//         sectionLatter: `${process.env.BASE_URL}${uploadedSectionUrl.image}`,
//         LdAndPdDeed: `${process.env.BASE_URL}${uploadedLdAndPdDeedUrl.image}`,
//         applicantionLatter: `${process.env.BASE_URL}${uploadedApplicantUrl.image}`,

//         //new upload
//         // sectionLatter: `${uploadedSectionUrl.image}`,
//         // LdAndPdDeed: `${uploadedLdAndPdDeedUrl.image}`,
//         // applicantionLatter: `${uploadedApplicantUrl.image}`,
//       });
//     } else if (normalizedPartnerName === "fin coopers capital pvt ltd") {
//       // Fin Cooper logic with selection handling
//       let selectionData = partnerData?.pdfSelection || "acg";
//       console.log(selectionData, "selectionDataselectionData");
//       if (!selectionData || typeof selectionData !== "string") {
//         selectionData;
//       }

//       const logo = FinpdfLogo;

//       const pdfFunctions = {
//         growSanctionLetterPdf,
//         growApplicantPdf,
//         growPgDeedPdf,
//         rcplLoanAgreement,
//       };

//       const pdfData = {};
//       for (const [key, func] of Object.entries(pdfFunctions)) {
//         const pdfResult = await func(
//           customerId,
//           logo,
//           partnerModel.fullName,
//           selectionData // Pass selection to all functions
//         );
//         pdfData[key] = pdfResult;
//       }

//       const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//       const processFile = async (filePath) => {
//         const resolvedPath = path
//           .resolve(__dirname, `../../../..${filePath}`)
//           .replace(/\\/g, "/");
//         const formData = new FormData();
//         formData.append("image", fs.createReadStream(resolvedPath));
//         const response = await axios.post(uploadUrl, formData, {
//           headers: { ...formData.getHeaders() },
//         });
//         return response.data?.items;
//       };

//       const uploadedUrls = {};
//       for (const [key, data] of Object.entries(pdfData)) {
//         const uploadedUrl = await processFile(data);
//         // Replace "grow" or "rcpl" with "fincooper" in the URL
//         let processedUrl = `${process.env.BASE_URL}${uploadedUrl.image}`;
//         // processedUrl = processedUrl.replace(/grow|rcpl/gi, "fincooper");
//         const newKey = key.replace(/grow|rcpl/gi, "fincooper");

//         uploadedUrls[newKey] = processedUrl;
//       }

//       return success(res, "pdf urls are", uploadedUrls);
//     } else if (normalizedPartnerName === "grow money capital pvt ltd") {
//       // Grow Money logic with selection handling
//       let selectionData = partnerData?.pdfSelection || "acg";
//       console.log(selectionData, "selectionDataselectionData");
//       if (!selectionData || typeof selectionData !== "string") {
//         selectionData;
//       }

//       const partnerLogo = growPdfLogo;

//       const pdfFunctions = {
//         growSanctionLetterPdf,
//         growApplicantPdf,
//         growPgDeedPdf,
//         rcplLoanAgreement,
//       };

//       const pdfData = {};
//       for (const [key, func] of Object.entries(pdfFunctions)) {
//         const pdfResult = await func(
//           customerId,
//           partnerLogo,
//           partnerModel.fullName,
//           selectionData // Pass selection to all functions
//         );
//         pdfData[key] = pdfResult;
//       }

//       const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//       const processFile = async (filePath) => {
//         const resolvedPath = path
//           .resolve(__dirname, `../../../..${filePath}`)
//           .replace(/\\/g, "/");
//         const formData = new FormData();
//         formData.append("image", fs.createReadStream(resolvedPath));
//         const response = await axios.post(uploadUrl, formData, {
//           headers: { ...formData.getHeaders() },
//         });
//         return response.data?.items;
//       };

//       const uploadedUrls = {};
//       for (const [key, data] of Object.entries(pdfData)) {
//         const uploadedUrl = await processFile(data);
//         uploadedUrls[key] = `${process.env.BASE_URL}${uploadedUrl.image}`;
//       }

//       return success(res, "pdf urls are", uploadedUrls);
//     } else {
//       return badRequest(res, `Unsupported partner: ${partnerModel.fullName}`);
//     }
//   } catch (error) {
//     console.error(error);
//     return unknownError(res, error);
//   }
// };

const sendToPartnernew = async (req, res) => {
  try {
    // const { customerId } = req.query;
    const customerId = req.query.customerId?.trim();



    
    const partnerData = await finalModel.findOne({ customerId });
    //bankStatementModel

    const applicant = await applicantModel.findOne({ customerId });
    const coapplicant = await coApplicantModel.findOne({ customerId });
    const secondRecord = await coApplicantModel.findOne({ customerId }).sort({ createdAt: 1 }).skip(1);

    const cibilData = await cibilModel.findOne({ customerId });
    const customerDetails = await customerModel.findById({ _id: (customerId) });

    const technicalData = await technicalApproveFormModel.findOne({ customerId });

  const pdformdatasDetail = await creditPdModel.findOne({ customerId });
    
   console.log(secondRecord,"secondRecord")
    const gauranter = await guarantorModel.findOne({ customerId });

    const bankData = await bankStatementModel.findOne({ customerId });
    //disbursementModel
    const kfsData = await disbursementModel.findOne({ customerId });
//sanctionPendencyModel
const sanctionPendencyData = await sanctionPendencyModel.findOne({ customerId });

  const branchUdhyam = await   udyamModel.findOne({ customerId });


 
    if (!partnerData) {
      return badRequest(res, "partner's is required.");
    }

    const partnerModel = await lendersModel.findOne({
      _id: partnerData.partnerId,
    });
    if (!partnerModel) {
      return badRequest(res, "Partner not found.");
    }

    const normalizedPartnerName = (partnerModel.fullName || "")
      .trim()
      .toLowerCase();

    //       console.log("Customer ID:", customerId);
    // console.log("Partner Data:", partnerData);
    // console.log("Partner Model:", partnerModel);
    console.log("Normalized Partner Name:", normalizedPartnerName);

    if (normalizedPartnerName === "ratnaafin capital pvt ltd") {
      let selectionData = partnerData?.pdfSelection || "acg";
      if (!selectionData || typeof selectionData !== "string") {
        selectionData;
      }

      const sectionData = await sectionLatter(customerId);
      if (!sectionData) {
        return badRequest(res, "sectionData not found.");
      }
      const applicantData = await applicantLatter(customerId, selectionData);
      if (!applicantData) {
        return badRequest(res, "applicantData not found.");
      } 
      const LdAndPdDeedData = await LdAndPdDeed(customerId, selectionData);
      if (!LdAndPdDeedData) {
        return badRequest(res, "LdAndPdDeedData not found.");
      }

      // const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

      // const processFile = async (filePath) => {
      //   const resolvedPath = path
      //     .resolve(__dirname, `../../../..${filePath}`)
      //     .replace(/\\/g, "/");
      //   const formData = new FormData();
      //   formData.append("image", fs.createReadStream(resolvedPath));
      //   const response = await axios.post(uploadUrl, formData, {
      //     headers: { ...formData.getHeaders() },
      //   });
      //   return response.data?.items;
      // };

      // const uploadedSectionUrl = await processFile(sectionData);
      // const uploadedApplicantUrl = await processFile(applicantData);
      // const uploadedLdAndPdDeedUrl = await processFile(LdAndPdDeedData);

      // const ratnaPdfUrls = {
      //   sectionLatter: `${process.env.BASE_URL}${uploadedSectionUrl.image}`,
      //   LdAndPdDeed: `${process.env.BASE_URL}${uploadedLdAndPdDeedUrl.image}`,
      //   applicantionLatter: `${process.env.BASE_URL}${uploadedApplicantUrl.image}`,
      // };

      // // Save the URLs to the customer model
      // await newfinalSanctionModel.findOneAndUpdate(
      //   { customerId },
      //   { $set: { ratnaPdfUrls: ratnaPdfUrls } },
      //   { new: true, upsert: true }
      // );

      return success(res, "pdf urls are", {
        ...sectionData,
        ...LdAndPdDeedData,
        ...applicantData,
      });
    } else if (normalizedPartnerName === "fin coopers capital pvt ltd") {
      let selectionData = partnerData?.pdfSelection || "acg";
      if (!selectionData || typeof selectionData !== "string") {
        selectionData;
      }

      console.log(selectionData,"selectionDataselectionData")
      const partnerLogo = FinpdfLogo;
      partnerName=partnerModel.fullName
      console.log(partnerName,"partnerName")

      const sectionData = await FincooperSanctionLetterPdf(customerId,partnerLogo,partnerName);
      if (!sectionData) {
        return badRequest(res, "sectionData not found.");
      }
      const applicantData = await FincooperApplicantionPdf(customerId,partnerLogo,partnerName);
      if (!applicantData) {
        return badRequest(res, "applicantData not found.");
      }
      const LdAndPdDeedData = await FincooperLoanAgreement(customerId,partnerLogo,partnerName, selectionData,);
      if (!LdAndPdDeedData) {
        return badRequest(res, "LdAndPdDeedData not found.");
      }
      const PdDeedData = await FincooperPgDeedPdf(customerId,partnerLogo,partnerName);
      if (!PdDeedData) {
        return badRequest(res, "LdAndPdDeedData not found.");
      }

      // const pdfFunctions = {
      //   growSanctionLetterPdf,
      //   growApplicantPdf,
      //   growPgDeedPdf,
      //   rcplLoanAgreement,
      // };

      // const pdfData = {};
      // for (const [key, func] of Object.entries(pdfFunctions)) {
      //   const pdfResult = await func(
      //     customerId,
      //     partnerLogo,
      //     partnerModel.fullName,
      //     selectionData
      //   );
      //   pdfData[key] = pdfResult;
      // }

      // const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

      // const processFile = async (filePath) => {
      //   const resolvedPath = path
      //     .resolve(__dirname, `../../../..${filePath}`)
      //     .replace(/\\/g, "/");
      //   const formData = new FormData();
      //   formData.append("image", fs.createReadStream(resolvedPath));
      //   const response = await axios.post(uploadUrl, formData, {
      //     headers: { ...formData.getHeaders() },
      //   });
      //   return response.data?.items;
      // };

      // const uploadedUrls = {};
      // for (const [key, data] of Object.entries(pdfData)) {
      //   const uploadedUrl = await processFile(data);
      //   uploadedUrls[key] = `${process.env.BASE_URL}${uploadedUrl.image}`;
      // }

      // // Save the URLs to the customer model
      // await newfinalSanctionModel.findOneAndUpdate(
      //   { customerId },
      //   { $set: { growMoneyPdfUrls: uploadedUrls } },
      //   { new: true, upsert: true }
      // );

      return success(res, "pdf urls are", {
        ...applicantData,
        ...sectionData,
        ...LdAndPdDeedData,
        ...PdDeedData
      });
    } else if (normalizedPartnerName === "grow money capital pvt ltd") {
      let selectionData = partnerData?.pdfSelection || "acg";
      if (!selectionData || typeof selectionData !== "string") {
        selectionData;
      }

      console.log(selectionData,"selectionDataselectionData")

      const partnerLogo = growPdfLogo;
      partnerName=partnerModel.fullName
      console.log(partnerName,"partnerName")

      const sectionData = await growSanctionLetterPdf(customerId,partnerLogo,partnerName);
      if (!sectionData) {
        return badRequest(res, "sectionData not found.");
      }
      const applicantData = await growApplicantPdf(customerId,partnerLogo,partnerName);
      if (!applicantData) {
        return badRequest(res, "applicantData not found.");
      }
      const LdAndPdDeedData = await rcplLoanAgreement(customerId,partnerLogo,partnerName, selectionData,);
      if (!LdAndPdDeedData) {
        return badRequest(res, "LdAndPdDeedData not found.");
      }
      const PdDeedData = await growPgDeedPdf(customerId,partnerLogo,partnerName);
      if (!PdDeedData) {
        return badRequest(res, "LdAndPdDeedData not found.");
      }

      // const pdfFunctions = {
      //   growSanctionLetterPdf,
      //   growApplicantPdf,
      //   growPgDeedPdf,
      //   rcplLoanAgreement,
      // };

      // const pdfData = {};
      // for (const [key, func] of Object.entries(pdfFunctions)) {
      //   const pdfResult = await func(
      //     customerId,
      //     partnerLogo,
      //     partnerModel.fullName,
      //     selectionData
      //   );
      //   pdfData[key] = pdfResult;
      // }

      // const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

      // const processFile = async (filePath) => {
      //   const resolvedPath = path
      //     .resolve(__dirname, `../../../..${filePath}`)
      //     .replace(/\\/g, "/");
      //   const formData = new FormData();
      //   formData.append("image", fs.createReadStream(resolvedPath));
      //   const response = await axios.post(uploadUrl, formData, {
      //     headers: { ...formData.getHeaders() },
      //   });
      //   return response.data?.items;
      // };

      // const uploadedUrls = {};
      // for (const [key, data] of Object.entries(pdfData)) {
      //   const uploadedUrl = await processFile(data);
      //   uploadedUrls[key] = `${process.env.BASE_URL}${uploadedUrl.image}`;
      // }

      // // Save the URLs to the customer model
      // await newfinalSanctionModel.findOneAndUpdate(
      //   { customerId },
      //   { $set: { growMoneyPdfUrls: uploadedUrls } },
      //   { new: true, upsert: true }
      // );

      return success(res, "pdf urls are", {
        ...applicantData,
        ...sectionData,
        ...LdAndPdDeedData,
        ...PdDeedData
      });
    } else if (normalizedPartnerName === "namdev finvest pvt ltd") {
      let selectionData = partnerData?.pdfSelection || "acg";
      if (!selectionData || typeof selectionData !== "string") {
        selectionData;
      }


      // Fetch section letter, applicant letter, and LD/PD deed
      const sectionData = await namdevSectionLatter(customerId);
      if (!sectionData) {
        return badRequest(res, "Section Data not found.");
      }
      const applicantData = await namDevApplicantLatter(
        customerId,
        selectionData
      );
      if (!applicantData) {
        return badRequest(res, "Applicant Data not found.");
      }
      const loanData = await namdevLoanPdf(customerId);
      if (!sectionData) {
        return badRequest(res, "loan Data not found.");
      }

      // const namdevpdfUrls={
      //   sectionData,
      //   applicantData ,
      // }
      // console.log(namdevpdfUrls,"namdevpdfUrls")
      // const updatedDocument = await newfinalSanctionModel.findOneAndUpdate(
      //   { customerId },
      //   { $set: { "naamDevPdfUrls.sectionData": sectionData, "naamDevPdfUrls.applicantData": applicantData } },        { new: true, upsert: true }
      // );

      // if (!updatedDocument) {
      //   return badRequest(res, "Failed to update Namdev PDF URLs.");
      // }
      
      // console.log(updatedDocument, "Updated Document");

      
      return success(res, "PDF URLs are", {
        ...sectionData,
        // ...loanData,
        ...applicantData ,
      });
    } else {
      return badRequest(res, `Unsupported partner: ${partnerModel.fullName}`);
    }
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};


const PartnerValidation = async (req,res)=>{
  try {
    const { customerId } = req.query;


    
    const partnerData = await finalModel.findOne({ customerId });
    //bankStatementModel

    const applicant = await applicantModel.findOne({ customerId });
    const coapplicant = await coApplicantModel.findOne({ customerId });
    const secondRecord = await coApplicantModel.findOne({ customerId }).sort({ createdAt: 1 }).skip(1);

    const cibilData = await cibilModel.findOne({ customerId });
    const customerDetails = await customerModel.findById({ _id: (customerId) });

    const technicalData = await technicalApproveFormModel.findOne({ customerId });

  const pdformdatasDetail = await creditPdModel.findOne({ customerId });
    
   console.log(secondRecord,"secondRecord")
    const gauranter = await guarantorModel.findOne({ customerId });

    const bankData = await bankStatementModel.findOne({ customerId });
    //disbursementModel
    const kfsData = await disbursementModel.findOne({ customerId });
//sanctionPendencyModel
const sanctionPendencyData = await sanctionPendencyModel.findOne({ customerId });

  const branchUdhyam = await   udyamModel.findOne({ customerId });




    
    const bankStatementrequiredFields = [
      "bankName",
      "accountNumber",
      "acHolderName",
      "ifscCode",
      "branchName",
      "accountType",
    ];

    const chargesrequiredFields = [
      "processingFees",
      "documentsCharges",
      "insuranceCharges",
      "cersaiCharges",
      // "preEmiInterest",
      "benchmarkinterestRate",
      "SpreadInterestRate",
      "annualPercentageRateAprPercentage",
      "epi",
      "noOfEpi"
    ];
    
//----------------------------------------Applicant validation ----------------------------
    const applicantrequiredFields = [
      "applicantPhoto",
      "aadharNo",
      "panNo",
      "fullName",
      "fatherName",
      "motherName",
      "gender",
      "mobileNo",
      "maritalStatus",
      "email",
      "dob",
      "age",
      "religion",
      "education",
      "category",
      "voterIdNo",
      "applicantType",
      "businessType",
      "occupation",
      "alternateMobileNo",
      "noOfyearsAtCurrentAddress",
      "noOfDependentWithCustomer",
      "residenceType"

    ];

    const ApplicantAdressrequiredFields = [
      "addressLine1",
      "addressLine2",
      "city",
      "state",
      "district",
      "pinCode"
    ];


    const errors = []; 
  
   applicantrequiredFields.forEach((field) => {
      if (!applicant?.[field] || String(applicant[field]).trim() === "") {
        errors.push(`Applicant ${field} is required.`);
      }
    });

    ApplicantAdressrequiredFields.forEach((field) => {
      if (!applicant?.localAddress?.[field] || String(applicant?.localAddress[field]).trim() === "") {
        errors.push(`Applicant ${field} is required.`);
      }
    });

    //----------------------------Co Applicant Validation---------------------------------
    const coapplicantrequiredFields = [
      "coApplicantPhoto",
      "aadharNo",
      "docType",
      "docNo",
      "fullName",
      "fatherName",
      "motherName",
      "gender",
      "mobileNo",
      "maritalStatus",
      "email",
      "dob",
      "age",
      "religion",
      "education",
      "category",
      "coApplicantType",
      "businessType",
      "occupation",
      "alternateMobileNo",
      "noOfyearsAtCurrentAddress",      
      "residenceType"

    ];

    const coApplicantAdressrequiredFields = [
      "addressLine1",
      "addressLine2",
      "city",
      "state",
      "district",
      "pinCode"
    ];


    
   coapplicantrequiredFields.forEach((field) => {
      if (!coapplicant?.[field] || String(coapplicant[field]).trim() === "") {
        errors.push(`CoApplicant-1 ${field} is required.`);
      }
    });

    coApplicantAdressrequiredFields.forEach((field) => {
      if (!coapplicant?.localAddress?.[field] || String(coapplicant?.localAddress[field]).trim() === "") {
        errors.push(`CoApplicant-1 ${field} is required.`);
      }
    });

    //----------------------coaPPLIcant 2 ---------------------------

    if (partnerData?.pdfSelection === "accg" || partnerData?.pdfSelection === "acc") {
      coApplicantAdressrequiredFields.forEach((field) => {
        if (!secondRecord?.localAddress?.[field] || String(secondRecord?.localAddress[field]).trim() === "") {
          errors.push(`CoApplicant-2 ${field} is required.`);
        }
      });
      }

      if (partnerData?.pdfSelection === "accg" || partnerData?.pdfSelection === "acc") {
        coapplicantrequiredFields.forEach((field) => {
          if (!secondRecord?.[field] || String(secondRecord[field]).trim() === "") {
            errors.push(`CoApplicant-2 ${field} is required.`);
          }
        });
        }

        //----------------------------Gauranter Validation---------------------------------
    const GauranterRequiredFields = [
      "guarantorPhoto",
      "aadharNo",
      "docType",
      "docNo",
      "fullName",
      "fatherName",
      "motherName",
      "gender",
      "mobileNo",
      "maritalStatus",
      "email",
      "dob",
      "age",
      "religion",
      "education",
      "category",
      "guarantorType",
      "businessType",
      "occupation",
      "alternateMobileNo",
      "noOfyearsAtCurrentAddress",
      "residenceType"

    ];

    const gauranterrequiredFields = [
      "addressLine1",
      "addressLine2",
      "city",
      "state",
      "district",
      "pinCode"
    ];

    // GauranterRequiredFields.forEach((field) => {
    //   if (!gauranter?.[field] || String(gauranter[field]).trim() === "") {
    //     errors.push(`Gauranter ${field} is required.`);
    //   }
    // });

    // gauranterrequiredFields.forEach((field) => {
    //   if (!gauranter?.localAddress?.[field] || String(gauranter?.localAddress[field]).trim() === "") {
    //     errors.push(`Gauranter ${field} is required.`);
    //   }
    // });

    ///condi

    if (partnerData?.pdfSelection === "accg" || partnerData?.pdfSelection === "acg") {
      GauranterRequiredFields.forEach((field) => {
        if (!gauranter?.[field] || String(gauranter[field]).trim() === "") {
          errors.push(`Gauranter ${field} is required.`);
        }
      });
      }

      if (partnerData?.pdfSelection === "accg" || partnerData?.pdfSelection === "acg") {
        gauranterrequiredFields.forEach((field) => {
          if (!gauranter?.localAddress?.[field] || String(gauranter?.localAddress[field]).trim() === "") {
            errors.push(`Gauranter ${field} is required.`);
          }
        });
        }


    //--------------------udhyam details ------------------------


    const requiredFieldsMap = {
      branchUdhyam: [
        "udhyamRegistrationNo",
        "OrganisationName",
        "typeOfOrganisation",
        "natureOfBusiness",
        "MsmeClassification",
      ],
      "branchUdhyam.AddressOfFirm": [
        "fullAddress",
        "landmark",
        "city",
        "districtName",
        "state",
        "pinCode",
        "mobileNumber",
        "emailId",
      ],
    };
    
    Object.entries(requiredFieldsMap).forEach(([path, fields]) => {
      fields.forEach((field) => {
        const value = path.split('.').reduce((obj, key) => obj?.[key], { branchUdhyam });
        if (!value?.[field] || String(value[field]).trim() === "") {
          errors.push(`Udhyam ${field} is required.`);
        }
      });
    });

    //--------------------------final sanction details----------------------
    
    const finalSanctionrequiredFields ={
      partnerData:[
      "EndUseOfLoan",
      "finalLoanAmount",
      "loanAmountInWords",
      "tenureInMonth",
      "roi",
      "emiAmount",
      "emiCycle",
    
    ]
    
  };

    Object.entries(finalSanctionrequiredFields).forEach(([path, fields]) => {
      fields.forEach((field) => {
        const value = path.split('.').reduce((obj, key) => obj?.[key], { partnerData });
        if (!value?.[field] || String(value[field]).trim() === "") {
          errors.push(`Final Sanction ${field} field is required.`);
        }
      });
    });

     if (!partnerData?.netCalculationNew?.overAllTotalNetMonthlyIncome || partnerData?.netCalculationNew?.overAllTotalNetMonthlyIncome === "") {
      errors.push("Final Sanction totalNetMonthlyIncome is required.");
    }

    if (!partnerData?.netCalculationNew?.foir || partnerData?.netCalculationNew?.foir === "") {
      errors.push("Final Sanction foir is required.");
    }

    
    const propertyPaperrequiredFields ={
      technicalData:[
      // "nameOfDocumentHolder",
      // "fatherName",
      "relationWithApplicant",
      "fullAddressOfProperty",
      "propertyType",
      "totalLandArea",
      "fairMarketValueOfLand",
      "propertyAge"
    ]
  };


    Object.entries(propertyPaperrequiredFields).forEach(([path, fields]) => {
      fields.forEach((field) => {
        const value = path.split('.').reduce((obj, key) => obj?.[key], { technicalData });
        if (!value?.[field] || String(value[field]).trim() === "") {
          errors.push(`property Details ${field} field is required.`);
        }
      });
    });


    //-------------applicant bank details and cheque --------------------------
    const bankKycsDetails = await bankDeatilsKycs.findOne({ customerId });
    const bankDetail = bankKycsDetails?.bankDetails?.find(
      (detail) => detail.E_Nach_Remarks === "true"
    ) || {};
   
    const bankRequiredFields = ["bankName", "accNo","ifsc","branchName","accountType","cheque1","cheque2","cheque3","cheque4","cheque5"];

    const bankDetails = {
      bankName: bankDetail?.bankName ,
      accNo: bankDetail?.accountNumber,
      ifsc: bankDetail?.ifscCode,
      branchName: bankDetail?.branchName,
      accountType: bankDetail?.accountType,
      cheque1: bankDetail?.chequeDetail?.[0],
      cheque2: bankDetail?.chequeDetail?.[1],
      cheque3: bankDetail?.chequeDetail?.[2],
      cheque4: bankDetail?.chequeDetail?.[3],
      cheque5: bankDetail?.chequeDetail?.[4]
    };
    
    bankRequiredFields.forEach((field) => {
      if (!bankDetails[field] || String(bankDetails[field]).trim() === "") {
        errors.push(`Bank Applicant ${field} is required.`);
      }
    });


    //------------------------------sanction Pendency details --------------------

    const partnerModel = await lendersModel.findOne({
      _id: partnerData.partnerId,
    });
    if (!partnerModel) {
      // return badRequest(res, "Partner not found.");
      errors.push(`Partner data is required.`);
    }
    const sanctionPendencyrequiredFields = [
      "sanctionDate",
      "partnerLoanNo",
      "loanAgreementDate",
      "partnerCustomerId",
    ];


if (errors.length > 0) {
  return badRequestwitherror(res, `Failed to generate partner PDF`, errors,); 
}

    success(res, `Validation successful. No errors found.`);

    const normalizedPartnerName = (partnerModel.fullName || "")
      .trim()
      .toLowerCase();

    //       console.log("Customer ID:", customerId);
    // console.log("Partner Data:", partnerData);
    // console.log("Partner Model:", partnerModel);
    console.log("Normalized Partner Name:", normalizedPartnerName);

   
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
}

// const sendEmailToPartner = async (req, res) => {
//   try {
//     const { customerId, selections } = req.query;

//     const partnerData = await finalModel.findOne({ customerId });

//     if (!partnerData) {
//       return badRequest(res, "partner is required.");
//     }

//     const partnerModel = await lendersModel.findOne({
//       _id: partnerData.partnerId,
//     });
//     if (!partnerModel) {
//       return badRequest(res, "Partner not found.");
//     }

//     const normalizedPartnerName = (partnerModel.fullName || "")
//       .trim()
//       .toLowerCase();

//     if (normalizedPartnerName === "ratnaafin capital pvt ltd") {
//       // Ratna logic
//       let selectionData = partnerData?.pdfSelection || "acg";
//       // console.log(selectionData,"selectionDataselectionData")
//       if (!selectionData || typeof selectionData !== "string") {
//         selectionData;
//       }

//       const sectionData = await sectionLatter(customerId);

//       const applicantData = await applicantLatter(customerId, selectionData);

//       const LdAndPdDeedData = await LdAndPdDeed(customerId, selectionData);

//       const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//       const processFile = async (filePath) => {
//         const resolvedPath = path
//           .resolve(__dirname, `../../../..${filePath}`)
//           .replace(/\\/g, "/");
//         console.log("Resolved File Path: ", resolvedPath);
//         const formData = new FormData();
//         formData.append("image", fs.createReadStream(resolvedPath));

//         const response = await axios.post(uploadUrl, formData, {
//           headers: { ...formData.getHeaders() },
//         });
//         return response.data?.items;
//       };

//       const uploadedSectionUrl = await processFile(sectionData);
//       const uploadedApplicantUrl = await processFile(applicantData);
//       const uploadedLdAndPdDeedUrl = await processFile(LdAndPdDeedData);
//       const BASEURL = process.env.BASE_URL;
//       // Attachments for the email
//       const attachments = [
//         {
//           path: `${BASEURL}${uploadedSectionUrl.image}`,
//           contentType: "sanction/pdf",
//         },
//         {
//           path: `${BASEURL}${uploadedApplicantUrl.image}`,
//           contentType: "application/pdf",
//         },
//         {
//           path: `${BASEURL}${uploadedLdAndPdDeedUrl.image}`,
//           contentType: "ldAndPdDeed/pdf",
//         },
//       ];

//       const emailContent = `
//       <div style="font-family: Arial, sans-serif; line-height: 1.6;">
//         <p>Dear Sir,</p>
//         <p>Caption case Report is for final approval.</p>
//         <p>Need your immediate action in this case.</p>
//         <p>Regards,</p>
//         <p>Team FinCoopers</p>
//         <div>All PDFs are attached in this email.</div>
//       </div>
//     `;
//       // Sending email with eSign links in the email body
//       await sendEmail(
//         [partnerModel.sanctionEmailTo],
//         ["raikwar@yopmail.com"],
//         `Final approval email for review`,
//         emailContent,
//         attachments
//       );

//       return success(res, "Email sent successfully");
//     } else if (normalizedPartnerName === "grow money capital pvt ltd") {
//       // Grow Money logic
//       const partnerLogo = growPdfLogo;
//       let selectionData = partnerData?.pdfSelection || "acg";
//       console.log(selectionData, "selectionDataselectionData");
//       if (!selectionData || typeof selectionData !== "string") {
//         selectionData;
//       }

//       const pdfFunctions = {
//         growSanctionLetterPdf,
//         growApplicantPdf,
//         growPgDeedPdf,
//         rcplLoanAgreement,
//       };

//       const pdfData = {};
//       for (const [key, func] of Object.entries(pdfFunctions)) {
//         const pdfResult = await func(
//           customerId,
//           partnerLogo,
//           partnerModel.fullName,
//           selectionData
//         );
//         pdfData[key] = pdfResult;
//       }

//       const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//       const processFile = async (filePath) => {
//         const resolvedPath = path
//           .resolve(__dirname, `../../../..${filePath}`)
//           .replace(/\\/g, "/");
//         const formData = new FormData();
//         formData.append("image", fs.createReadStream(resolvedPath));
//         const response = await axios.post(uploadUrl, formData, {
//           headers: { ...formData.getHeaders() },
//         });
//         return response.data?.items;
//       };

//       const uploadedUrls = {};
//       for (const [key, data] of Object.entries(pdfData)) {
//         const uploadedUrl = await processFile(data);
//         uploadedUrls[key] = `${process.env.BASE_URL}${uploadedUrl.image}`;
//       }
//       // console.log(uploadedUrls, "uploadedUrlsuploadedUrls");
//       const attachments = [
//         {
//           path: uploadedUrls?.growSanctionLetterPdf,
//           contentType: "growSanctionLetterPdf/pdf",
//         },
//         {
//           path: uploadedUrls?.growApplicantPdf,
//           contentType: "growApplicantPdf/pdf",
//         },
//         { path: uploadedUrls?.growPgDeedPdf, contentType: "growPgDeedPdf/pdf" },
//         {
//           path: uploadedUrls?.rcplLoanAgreement,
//           contentType: "rcplLoanAgreement/pdf",
//         },
//       ];

//       const emailContent = `
//       <div style="font-family: Arial, sans-serif; line-height: 1.6;">
//         <p>Dear Sir,</p>
//         <p>Caption case Report is for final approval.</p>
//         <p>Need your immediate action in this case.</p>
//         <p>Regards,</p>
//         <p>Team FinCoopers</p>
//       </div>
//     `;

//       // Send email with eSign links and attachments
//       await sendEmail(
//         [partnerModel.sanctionEmailTo],
//         ["raikwar@yopmail.com"],
//         `Final approval email for review`,
//         emailContent,
//         attachments
//       );

//       return success(res, "Email sent successfully");
//     } else if (normalizedPartnerName === "fin coopers capital pvt ltd") {
//       // Fin Cooper logic, replicating Grow Money functionality
//       const partnerLogo = FinpdfLogo;
//       let selectionData = partnerData?.pdfSelection || "acg";
//       console.log(selectionData, "selectionDataselectionData");
//       if (!selectionData || typeof selectionData !== "string") {
//         selectionData;
//       }

//       const pdfFunctions = {
//         growSanctionLetterPdf,
//         growApplicantPdf,
//         growPgDeedPdf,
//         rcplLoanAgreement,
//       };

//       const pdfData = {};
//       for (const [key, func] of Object.entries(pdfFunctions)) {
//         const pdfResult = await func(
//           customerId,
//           partnerLogo,
//           partnerModel.fullName,
//           selectionData
//         );
//         pdfData[key] = pdfResult;
//       }

//       const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//       const processFile = async (filePath) => {
//         const resolvedPath = path
//           .resolve(__dirname, `../../../..${filePath}`)
//           .replace(/\\/g, "/");
//         const formData = new FormData();
//         formData.append("image", fs.createReadStream(resolvedPath));
//         const response = await axios.post(uploadUrl, formData, {
//           headers: { ...formData.getHeaders() },
//         });
//         return response.data?.items;
//       };

//       const uploadedUrls = {};
//       for (const [key, data] of Object.entries(pdfData)) {
//         const uploadedUrl = await processFile(data);
//         uploadedUrls[key] = `${process.env.BASE_URL}${uploadedUrl.image}`;
//       }
//       // console.log("uploadedUrls",uploadedUrls)
//       const attachments = [
//         {
//           path: uploadedUrls?.growSanctionLetterPdf,
//           contentType: "growSanctionLetterPdf/pdf",
//         },
//         {
//           path: uploadedUrls?.growApplicantPdf,
//           contentType: "growApplicantPdf/pdf",
//         },
//         { path: uploadedUrls?.growPgDeedPdf, contentType: "growPgDeedPdf/pdf" },
//         {
//           path: uploadedUrls?.rcplLoanAgreement,
//           contentType: "rcplLoanAgreement/pdf",
//         },
//       ];

//       const emailContent = `
//       <div style="font-family: Arial, sans-serif; line-height: 1.6;">
//         <p>Dear Sir,</p>
//         <p>Caption case Report is for final approval.</p>
//         <p>Need your immediate action in this case.</p>
//         <p>Regards,</p>
//         <p>Team FinCoopers</p>
//       </div>
//     `;

//       // Send email with eSign links and attachments
//       await sendEmail(
//         [partnerModel.sanctionEmailTo],
//         ["raikwar@yopmail.com"],
//         `Final approval email for review`,
//         emailContent,
//         attachments
//       );

//       return success(res, "Email sent successfully.");
//     } else if (normalizedPartnerName === "namdev finvest pvt ltd") {
//       // Ratna logic
//       let selectionData = partnerData?.pdfSelection || "acg";
//       // console.log(selectionData,"selectionDataselectionData")
//       if (!selectionData || typeof selectionData !== "string") {
//         selectionData;
//       }

//       const sectionData = await namdevSectionLatter(customerId);

//       const applicantData = await namDevApplicantLatter(
//         customerId,
//         selectionData
//       );

//       const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//       const processFile = async (filePath) => {
//         const resolvedPath = path
//           .resolve(__dirname, `../../../..${filePath}`)
//           .replace(/\\/g, "/");
//         console.log("Resolved File Path: ", resolvedPath);
//         const formData = new FormData();
//         formData.append("image", fs.createReadStream(resolvedPath));

//         const response = await axios.post(uploadUrl, formData, {
//           headers: { ...formData.getHeaders() },
//         });
//         return response.data?.items;
//       };

//       const uploadedSectionUrl = await processFile(sectionData);
//       const uploadedApplicantUrl = await processFile(applicantData);
//       const BASEURL = process.env.BASE_URL;
//       // Attachments for the email
//       const attachments = [
//         {
//           path: `${BASEURL}${uploadedSectionUrl.image}`,
//           contentType: "sanction/pdf",
//         },
//         {
//           path: `${BASEURL}${uploadedApplicantUrl.image}`,
//           contentType: "application/pdf",
//         },
//       ];

//       const emailContent = `
//       <div style="font-family: Arial, sans-serif; line-height: 1.6;">
//         <p>Dear Sir,</p>
//         <p>Caption case Report is for final approval.</p>
//         <p>Need your immediate action in this case.</p>
//         <p>Regards,</p>
//         <p>Team FinCoopers</p>
//         <div>All PDFs are attached in this email.</div>
//       </div>
//     `;
//       // Sending email with eSign links in the email body
//       await sendEmail(
//         [partnerModel.sanctionEmailTo],
//         ["akashsharma199425@gmail.com"],
//         `Final approval email for review`,
//         emailContent,
//         attachments
//       );

//       return success(res, "Email sent successfully");
//     } else {
//       return badRequest(res, `Unsupported partner: ${partnerModel.fullName}`);
//     }
//   } catch (error) {
//     console.error(error);
//     return unknownError(res, error);
//   }
// };



// const sendEmailToPartner = async (req, res) => {
//   try {
//     const { customerId } = req.query;

//     // Step 1: Fetch partner and customer data
//     const partnerData = await finalModel.findOne({ customerId });
//     if (!partnerData) {
//       return badRequest(res, "Partner data is required.");
//     }

//     const partnerModel = await lendersModel.findOne({ _id: partnerData.partnerId });
//     if (!partnerModel) {
//       return badRequest(res, "Partner not found.");
//     }

//     const normalizedPartnerName = (partnerModel.fullName || "").trim().toLowerCase();
//     const generatedPdfPaths = [];

//     // Step 2: Generate PDFs based on partner name
//     if (normalizedPartnerName === "ratnaafin capital pvt ltd") {
//       const sectionData = await sectionLatter(customerId);
//       const applicantData = await applicantLatter(customerId, partnerData?.pdfSelection || "acg");
//       const deedData = await LdAndPdDeed(customerId, partnerData?.pdfSelection || "acg");

//      const uploadedFileUrls= generatedPdfPaths.push(sectionData, applicantData, deedData);
//     } else if (normalizedPartnerName === "grow money capital pvt ltd") {
//       const partnerLogo = growPdfLogo;
//       const pdfFunctions = {
//         growSanctionLetterPdf,
//         growApplicantPdf,
//         growPgDeedPdf,
//         rcplLoanAgreement,
//       };

//       for (const func of Object.values(pdfFunctions)) {
//         const pdfPath = await func(customerId, partnerLogo, partnerModel.fullName, partnerData?.pdfSelection || "acg");
//        const uploadedFileUrls = generatedPdfPaths.push(pdfPath);
//       }
//     }
    
//     // Step 4: Send Email with attachments
//     const BASEURL = process.env.BASE_URL;
//     const attachmentUrls = uploadedFileUrls.map((url) => `${url}`);

//     const emailContent = `
//       <div style="font-family: Arial, sans-serif; line-height: 1.6;">
//         <p>Dear Sir/Madam,</p>
//         <p>Please find the attached documents for your review and approval.</p>
//         <p>Regards,</p>
//         <p>Team FinCoopers</p>
//       </div>
//     `;

//     const emailAttachments = attachmentUrls.map((url) => ({
//       path: url,
//       contentType: "application/pdf",
//     }));

//     await sendEmail(
//       [partnerModel.sanctionEmailTo],
//       ["akashsharma199425@gmail.com"], // Add CC recipients if needed
//       "Partner Document Submission",
//       emailContent,
//       emailAttachments
//     );

//     return success(res, "PDFs generated and email sent successfully.");
//   } catch (error) {
//     console.error(error);
//     return unknownError(res, error);
//   }
// };

const sendEmailToPartner = async (req, res) => {
  try {
    const { customerId } = req.query;

    // Step 1: Fetch partner and customer data
    const partnerData = await finalModel.findOne({ customerId });
    if (!partnerData) {
      return badRequest(res, "Partner data is required.");
    }

    const partnerModel = await lendersModel.findOne({ _id: partnerData.partnerId });
    if (!partnerModel) {
      return badRequest(res, "Partner not found.");
    }

    const normalizedPartnerName = (partnerModel.fullName || "").trim().toLowerCase();
    const generatedPdfPaths = [];

    // Step 2: Generate PDFs based on partner name
    if (normalizedPartnerName === "ratnaafin capital pvt ltd") {
      const sectionData = await sectionLatter(customerId);
      const applicantData = await applicantLatter(customerId, partnerData?.pdfSelection || "acg");
      const deedData = await LdAndPdDeed(customerId, partnerData?.pdfSelection || "acg");

      // Push the URLs into the array
      if (sectionData?.sectionLatter) generatedPdfPaths.push(sectionData.sectionLatter);
      if (applicantData?.applicantionLatter) generatedPdfPaths.push(applicantData.applicantionLatter);
      if (deedData?.LdAndPdDeed) generatedPdfPaths.push(deedData.LdAndPdDeed);
    } else if (normalizedPartnerName === "grow money capital pvt ltd") {
      const partnerLogo = growPdfLogo;
      const pdfFunctions = {
        growSanctionLetterPdf,
        growApplicantPdf,
        growPgDeedPdf,
        rcplLoanAgreement,
      };

      for (const func of Object.values(pdfFunctions)) {
        const pdfPath = await func(customerId, partnerLogo, partnerModel.fullName, partnerData?.pdfSelection || "acg");
        if (pdfPath) generatedPdfPaths.push(pdfPath);
      }
    }

    // Validate generatedPdfPaths
    if (!generatedPdfPaths.length) {
      return badRequest(res, "No PDFs were generated.");
    }

    console.log("Generated PDF Paths: ", generatedPdfPaths);

    // Step 3: Prepare email content and attachments
    const emailContent = `
      <div style="font-family: Arial, sans-serif; line-height: 1.6;">
        <p>Dear Sir/Madam,</p>
        <p>Please find the attached documents for your review and approval.</p>
        <p>Regards,</p>
        <p>Team FinCoopers</p>
      </div>
    `;

    const emailAttachments = generatedPdfPaths.map((url) => {
      if (!url || typeof url !== "string") {
        console.error("Invalid URL detected in generatedPdfPaths: ", url);
        throw new Error(`Invalid URL: ${url}`);
      }
      return {
        path: url, // Direct URL or file path
        contentType: "application/pdf",
      };
    });

    // Step 4: Send the email
    await sendEmail(
      [partnerModel.sanctionEmailTo],
      ["akashsharma199425@gmail.com"], // Add CC recipients if needed
      "Partner Document Submission",
      emailContent,
      emailAttachments
    );

    return success(res, "PDFs generated and email sent successfully.");
  } catch (error) {
    console.error("Error in sendEmailToPartner: ", error);
    return unknownError(res, error);
  }
};


// const sendEmailToPartnerForEsign = async (req, res) => {
//   try {
//     const { customerId, partnerId, selections } = req.query;
//     const partnerData = await finalModel.findOne({ customerId });
//     // console.log(partnerData,"partnerDatapartnerDatapartnerData")
//     if (!partnerData) {
//       return badRequest(res, "partner is required.");
//     }

//     const partnerModel = await lendersModel.findOne({
//       _id: partnerData.partnerId,
//     });
//     if (!partnerModel) {
//       return badRequest(res, "Partner not found.");
//     }

//     const normalizedPartnerName = (partnerModel.fullName || "")
//       .trim()
//       .toLowerCase();

//     if (normalizedPartnerName === "ratnaafin capital pvt ltd") {
//       if (
//         partnerData?.esignLink &&
//         Object.keys(partnerData.esignLink).length > 0
//       ) {
//         return success(
//           res,
//           "esignLinks and combinedData generated successfully",
//           {
//             combinedData: partnerData.esignLink,
//           }
//         );
//       } else {
//         let selectionData = partnerData?.pdfSelection || "acg";

//         if (!selectionData || typeof selectionData !== "string") {
//           selectionData;
//         }

//         const sectionData = await sectionLatter(customerId);
//         const applicantData = await applicantLatter(customerId, selectionData);
//         const LdAndPdDeedData = await LdAndPdDeed(customerId, selectionData);

//         const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//         const processFile = async (filePath) => {
//           try {
//             const resolvedPath = path
//               .resolve(__dirname, `../../../..${filePath}`)
//               .replace(/\\/g, "/");
//             const formData = new FormData();
//             formData.append("image", fs.createReadStream(resolvedPath));
//             const response = await axios.post(uploadUrl, formData, {
//               headers: { ...formData.getHeaders() },
//             });
//             return response.data?.items;
//           } catch (error) {
//             console.error("Error uploading file:", filePath, error);
//             throw new Error("File upload failed");
//           }
//         };

//         const uploadedSectionUrl = await processFile(sectionData);
//         const uploadedApplicantUrl = await processFile(applicantData);
//         const uploadedLdAndPdDeedUrl = await processFile(LdAndPdDeedData);

//         const documents = [
//           {
//             fileName: LdAndPdDeedData,
//             key: "LdAndPdData",
//             pdfName: "growPgDeedPdf",
//           },
//           {
//             fileName: applicantData,
//             key: "applicantData",
//             pdfName: "growApplicantPdf",
//           },
//           {
//             fileName: sectionData,
//             key: "sectionData",
//             pdfName: "growSanctionLetterPdf",
//           },
//         ];

//         const esignLinks = {};
//         const combinedData = []; // Final response structure

//         for (const doc of documents) {
//           try {
//             const esignResult = await initESign({ fileName: doc.fileName });
//             const signUrl = esignResult?.data?.invitees?.[0]?.signUrl;

//             if (signUrl) {
//               esignLinks[doc.key] = signUrl;

//               // Add data to combinedData array
//               combinedData.push({
//                 pdfName: doc.key,
//                 pdf: `/uploads/pdf/${path.basename(doc.fileName)}`,
//                 esignLink: signUrl,
//               });
//             }
//           } catch (error) {
//             console.error(
//               "Error generating eSign link for:",
//               doc.fileName,
//               error
//             );
//             continue;
//           }
//         }

//         // console.log(esignLinks, "esignLinks generated");
//         // console.log(combinedData, "combinedData generated");

//         const data = await finalModel.findOneAndUpdate(
//           { customerId },
//           {
//             $set: { esignLink: combinedData },
//           },
//           { new: true, upsert: true }
//         );
//         // console.log(data,"datadatadatadatadata")
//         return success(
//           res,
//           "esignLinks and combinedData generated successfully",
//           {
//             combinedData,
//           }
//         );
//       }
//     } else if (normalizedPartnerName === "grow money capital pvt ltd") {
//       try {
//         // Check for existing eSign links
//         if (
//           partnerData?.esignLink &&
//           Object.keys(partnerData.esignLink).length > 0
//         ) {
//           return success(
//             res,
//             "esignLinks and combinedData generated successfully",
//             {
//               combinedData: partnerData.esignLink,
//             }
//           );
//         }

//         const partnerLogo = growPdfLogo;
//         let selectionData = partnerData?.pdfSelection || "acg";
//         if (!selectionData || typeof selectionData !== "string") {
//           selectionData = "acg"; // Default value
//         }

//         const pdfFunctions = {
//           growSanctionLetterPdf,
//           growApplicantPdf,
//           growPgDeedPdf,
//           rcplLoanAgreement,
//         };

//         const pdfData = {};
//         const esignData = {};

//         // Generate PDFs and eSign links
//         for (const [key, func] of Object.entries(pdfFunctions)) {
//           try {
//             const pdfResult = await func(
//               customerId,
//               partnerLogo,
//               partnerModel.fullName,
//               selectionData
//             );
//             pdfData[key] = pdfResult;

//             // Generate eSign link
//             const esignResult = await initESign({ fileName: pdfResult });
//             const signUrl = esignResult?.data?.invitees?.[0]?.signUrl;
//             if (signUrl) {
//               esignData[key + "EsignLink"] = signUrl;
//             } else {
//               console.error(`No eSign URL generated for ${key}`);
//             }
//           } catch (error) {
//             console.error(`Error processing ${key}:`, error);
//           }
//         }

//         // Combine PDF and eSign link data for response
//         const combinedData = Object.entries(pdfData).map(([key, pdfPath]) => ({
//           pdfName: key,
//           pdf: pdfPath,
//           esignLink: esignData[key + "EsignLink"] || null,
//         }));

//         console.log("Combined Data:", combinedData);

//         const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//         // Upload PDFs and generate URLs
//         const uploadedUrls = {};
//         await Promise.all(
//           Object.entries(pdfData).map(async ([key, pdfPath]) => {
//             try {
//               const resolvedPath = path
//                 .resolve(__dirname, `../../../..${pdfPath}`)
//                 .replace(/\\/g, "/");
//               const formData = new FormData();
//               formData.append("image", fs.createReadStream(resolvedPath));
//               const response = await axios.post(uploadUrl, formData, {
//                 headers: { ...formData.getHeaders() },
//               });
//               uploadedUrls[
//                 key
//               ] = `${process.env.BASE_URL}${response.data?.items?.image}`;
//             } catch (error) {
//               console.error(`Error uploading ${key}:`, error);
//             }
//           })
//         );

//         console.log("Uploaded URLs:", uploadedUrls);

//         // Generate email content
//         const emailLinks = combinedData
//           .map(({ pdf, esignLink }) => {
//             if (!esignLink) {
//               console.error(`Missing eSign link for PDF: ${pdf}`);
//             }
//             return `
//                 <div>
//                   <h4>eSign Details for ${pdf}</h4>
//                   <p><strong>eSign Link:</strong> <a href="${esignLink}" target="_blank">Click to Sign</a></p>
//                 </div>`;
//           })
//           .join("");

//         const emailContent = `
//             <div style="font-family: Arial, sans-serif; line-height: 1.6;">
//               <p>Dear Sir,</p>
//               <p>Caption case Report is for final approval.</p>
//               <p>Need your immediate action in this case.</p>
//               <p>Regards,</p>
//               <p>Team FinCoopers</p>
//               <div>All PDFs are attached in this email.</div>
//               <div>
//                 <p><strong>eSign Links for each document:</strong></p>
//                 ${emailLinks}
//               </div>
//             </div>
//           `;

//         const attachments = Object.entries(uploadedUrls).map(([key, path]) => ({
//           path,
//           contentType: "application/pdf",
//         }));

//         // Send email
//         await sendEmail(
//           [partnerModel.sanctionEmailTo],
//           ["akashsharma199425@gmail.com"],
//           "Final approval email for review",
//           emailContent,
//           attachments
//         );

//         // Save eSign links to the database
//         const data = await finalModel.findOneAndUpdate(
//           { customerId },
//           { $set: { esignLink: combinedData } },
//           { new: true, upsert: true }
//         );

//         return success(
//           res,
//           "eSign links and combined data generated successfully",
//           {
//             combinedData,
//           }
//         );
//       } catch (error) {
//         console.error("Error in Grow Money Capital flow:", error);
//         return failure(res, "An error occurred while processing the request.");
//       }
//     } else if (normalizedPartnerName === "fin coopers capital pvt ltd") {
//       if (
//         partnerData?.esignLink &&
//         Object.keys(partnerData.esignLink).length > 0
//       ) {
//         return success(
//           res,
//           "esignLinks and combinedData generated successfully",
//           {
//             combinedData: partnerData.esignLink,
//           }
//         );
//       }
//       // Fin Cooper logic, replicating Grow Money functionality
//       const partnerLogo = FinpdfLogo;
//       let selectionData = partnerData?.pdfSelection || "acg";
//       console.log(selectionData, "selectionDataselectionData");
//       if (!selectionData || typeof selectionData !== "string") {
//         selectionData;
//       }

//       const pdfFunctions = {
//         growSanctionLetterPdf,
//         growApplicantPdf,
//         growPgDeedPdf,
//         rcplLoanAgreement,
//       };

//       const pdfData = {};
//       const esignData = {};

//       for (const [key, func] of Object.entries(pdfFunctions)) {
//         try {
//           const pdfResult = await func(
//             customerId,
//             partnerLogo,
//             partnerModel.fullName,
//             selectionData
//           );
//           pdfData[key] = pdfResult;

//           // Generate the eSign link for the generated PDF
//           const esignResult = await initESign({ fileName: pdfResult });
//           console.log(`eSign Result for ${key}:`, esignResult); // Debugging eSign result

//           const signUrl = esignResult?.data?.invitees[0]?.signUrl; // Fetch the first invitee's sign URL
//           if (signUrl) {
//             esignData[key + "EsignLink"] = signUrl;
//           } else {
//             console.error(`No sign URL found for ${key}`);
//           }
//         } catch (error) {
//           console.error(
//             `Error generating PDF or eSign link for ${key}:`,
//             error
//           );
//         }
//       }

//       // Combine PDF and eSign link data for response
//       const combinedData = Object.entries(pdfData).map(([key, pdfPath]) => {
//         const esignLink = esignData[key + "EsignLink"];
//         return {
//           pdfName: key,
//           pdf: pdfPath,
//           esignLink: esignLink, // Only sending one link per document
//         };
//       });

//       // Generate the email content
//       const emailLinks = combinedData
//         .map(({ pdf, esignLink }) => {
//           if (!esignLink) {
//             console.error(`Missing eSign link for PDF: ${pdf}`);
//           }
//           return `<div>
//               <h4>eSign Details for PDF</h4>
//               <p><strong>eSign Link:</strong> <a href="${esignLink}" target="_blank">Click to Sign</a></p>
//             </div>`;
//         })
//         .join("");

//       const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//       const processFile = async (filePath) => {
//         const resolvedPath = path
//           .resolve(__dirname, `../../../..${filePath}`)
//           .replace(/\\/g, "/");
//         const formData = new FormData();
//         formData.append("image", fs.createReadStream(resolvedPath));
//         const response = await axios.post(uploadUrl, formData, {
//           headers: { ...formData.getHeaders() },
//         });
//         return response.data?.items;
//       };

//       const uploadedUrls = {};
//       for (const [key, data] of Object.entries(pdfData)) {
//         const uploadedUrl = await processFile(data);
//         uploadedUrls[key] = `${process.env.BASE_URL}${uploadedUrl.image}`;
//       }
//       // console.log("uploadedUrls",uploadedUrls)
//       const attachments = [
//         {
//           path: uploadedUrls?.growSanctionLetterPdf,
//           contentType: "growSanctionLetterPdf/pdf",
//         },
//         {
//           path: uploadedUrls?.growApplicantPdf,
//           contentType: "growApplicantPdf/pdf",
//         },
//         { path: uploadedUrls?.growPgDeedPdf, contentType: "growPgDeedPdf/pdf" },
//         {
//           path: uploadedUrls?.rcplLoanAgreement,
//           contentType: "rcplLoanAgreement/pdf",
//         },
//       ];

//       const emailContent = `
//       <div style="font-family: Arial, sans-serif; line-height: 1.6;">
//         <p>Dear Sir,</p>
//         <p>Caption case Report is for final approval.</p>
//         <p>Need your immediate action in this case.</p>
//         <p>Regards,</p>
//         <p>Team FinCoopers</p>
//           <div>All PDFs are attached in this email.</div>
//           <div>
//             <p><strong>eSign Links for each document:</strong></p>
//             ${emailLinks}
//           </div>
//       </div>
//     `;

//       // Send email with eSign links and attachments
//       await sendEmail(
//         [partnerModel.sanctionEmailTo],
//         ["raikwar@yopmail.com"],
//         `Final approval email for review`,
//         emailContent,
//         attachments
//       );
//       const data = await finalModel.findOneAndUpdate(
//         { customerId },
//         {
//           $set: { esignLink: combinedData },
//         },
//         { new: true, upsert: true }
//       );

//       return success(res, "esignLinks generated successfully", {
//         combinedData,
//       });
//     } else if (normalizedPartnerName === "namdev finvest pvt ltd") {
//       if (
//         partnerData?.esignLink &&
//         Object.keys(partnerData.esignLink).length > 0
//       ) {
//         return success(
//           res,
//           "esignLinks and combinedData generated successfully",
//           {
//             combinedData: partnerData.esignLink,
//           }
//         );
//       } else {
//         let selectionData = partnerData?.pdfSelection || "acg";

//         if (!selectionData || typeof selectionData !== "string") {
//           selectionData;
//         }

//         const namdevsectionData = await namdevSectionLatter(customerId);
//         const namdevapplicantData = await namDevApplicantLatter(
//           customerId,
//           selectionData
//         );

//         const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//         const processFile = async (filePath) => {
//           try {
//             const resolvedPath = path
//               .resolve(__dirname, `../../../..${filePath}`)
//               .replace(/\\/g, "/");
//             const formData = new FormData();
//             formData.append("image", fs.createReadStream(resolvedPath));
//             const response = await axios.post(uploadUrl, formData, {
//               headers: { ...formData.getHeaders() },
//             });
//             return response.data?.items;
//           } catch (error) {
//             console.error("Error uploading file:", filePath, error);
//             throw new Error("File upload failed");
//           }
//         };

//         const uploadedSectionUrl = await processFile(namdevsectionData);
//         const uploadedApplicantUrl = await processFile(namdevapplicantData);

//         const documents = [
//           {
//             fileName: namdevapplicantData,
//             key: "namdevapplicantData",
//             pdfName: "namdevAplicantpdf",
//           },
//           {
//             fileName: namdevsectionData,
//             key: "namdevsectionData",
//             pdfName: "namdevSanctionLetterPdf",
//           },
//         ];

//         const esignLinks = {};
//         const combinedData = []; // Final response structure

//         for (const doc of documents) {
//           try {
//             const esignResult = await initESign({ fileName: doc.fileName });
//             const signUrl = esignResult?.data?.invitees?.[0]?.signUrl;

//             if (signUrl) {
//               esignLinks[doc.key] = signUrl;

//               // Add data to combinedData array
//               combinedData.push({
//                 pdfName: doc.key,
//                 pdf: `/uploads/pdf/${path.basename(doc.fileName)}`,
//                 esignLink: signUrl,
//               });
//             }
//           } catch (error) {
//             console.error(
//               "Error generating eSign link for:",
//               doc.fileName,
//               error
//             );
//             continue;
//           }
//         }

//         // console.log(esignLinks, "esignLinks generated");
//         // console.log(combinedData, "combinedData generated");

//         const data = await finalModel.findOneAndUpdate(
//           { customerId },
//           {
//             $set: { esignLink: combinedData },
//           },
//           { new: true, upsert: true }
//         );
//         // console.log(data,"datadatadatadatadata")
//         return success(
//           res,
//           "esignLinks and combinedData generated successfully",
//           {
//             combinedData,
//           }
//         );
//       }
//     } else {
//       return badRequest(res, `Unsupported partner: ${partnerModel.fullName}`);
//     }
//   } catch (error) {
//     console.error(error);
//     return unknownError(res, error);
//   }
// };



const sendEmailToPartnerForEsign = async (req, res) => {
  try {
    const { customerId } = req.query;

    // Step 1: Fetch Partner Data
    const partnerData = await finalModel.findOne({ customerId });
    if (!partnerData) return badRequest(res, "Partner data is required.");

    const partnerModel = await lendersModel.findOne({ _id: partnerData.partnerId });
    if (!partnerModel) return badRequest(res, "Partner not found.");

    const normalizedPartnerName = (partnerModel.fullName || "").trim().toLowerCase();

    if (partnerData?.esignLink && Object.keys(partnerData.esignLink).length > 0) {
      return success(res, "eSign links already exist.", { combinedData: partnerData.esignLink });
    }

    // Step 2: Generate PDFs and Logic for Partner
    let documents = [];
    if (normalizedPartnerName === "ratnaafin capital pvt ltd") {
      const sectionData = await sectionLatter(customerId);
      const applicantData = await applicantLatter(customerId, "acg");
      const LdAndPdDeedData = await LdAndPdDeed(customerId, "acg");

      documents = [
        { fileName: sectionData, key: "sectionData", pdfName: "growSanctionLetterPdf" },
        { fileName: applicantData, key: "applicantData", pdfName: "growApplicantPdf" },
        { fileName: LdAndPdDeedData, key: "LdAndPdData", pdfName: "growPgDeedPdf" },
      ];
    } else if (
      normalizedPartnerName === "grow money capital pvt ltd" ||
      normalizedPartnerName === "fin coopers capital pvt ltd"
    ) {
      const partnerLogo =
        normalizedPartnerName === "grow money capital pvt ltd" ? growPdfLogo : FinpdfLogo;
      const selectionData = partnerData?.pdfSelection || "acg";

      documents = [
        {
          fileName: await growSanctionLetterPdf(customerId, partnerLogo, partnerModel.fullName, selectionData),
          key: "sanctionLetter",
          pdfName: "growSanctionLetterPdf",
        },
        {
          fileName: await growApplicantPdf(customerId, partnerLogo, partnerModel.fullName, selectionData),
          key: "applicantData",
          pdfName: "growApplicantPdf",
        },
        {
          fileName: await growPgDeedPdf(customerId, partnerLogo, partnerModel.fullName, selectionData),
          key: "pgDeed",
          pdfName: "growPgDeedPdf",
        },
      ];
    } else {
      return badRequest(res, "Partner logic not implemented for this partner.");
    }

    // Step 3: Generate eSign Links
    const combinedData = [];
    for (const doc of documents) {
      try {
        const esignResult = await initESign({ fileName: doc.fileName });
        const signUrl = esignResult?.data?.invitees?.[0]?.signUrl;

        if (signUrl) {
          combinedData.push({
            pdfName: doc.key,
            pdf: `${(doc.fileName)}`,
            esignLink: signUrl,
          });
        }
      } catch (error) {
        console.error(`Error generating eSign link for ${doc.key}:`, error);
      }
    }

    // Step 4: Save Links to Database
    await finalModel.findOneAndUpdate(
      { customerId },
      { $set: { esignLink: combinedData } },
      { new: true, upsert: true }
    );

    // Step 5: Send Email to Partner
    const emailContent = `
      <p>Dear ${partnerModel.fullName},</p>
      <p>Please find below the eSign links for the required documents:</p>
      <ul>
        ${combinedData
          .map(
            (doc) =>
              `<li><strong>${doc.pdfName}:</strong> <a href="${doc.esignLink}" target="_blank">Click here to sign</a></li>`
          )
          .join("")}
      </ul>
      <p>Regards,<br/>Team</p>
    `;

    const attachments = combinedData.map((doc) => ({
      filename: path.basename(doc.pdf),
      path: doc.pdf,
    }));

    // const emailSent = await sendEmail(
    //   [partnerModel.sanctionEmailTo], // toEmails
    //   ["akashsharma19925.com"], // ccEmails
    //   "Final approval email for review", // subject
    //   emailContent, // html content
    //   attachments // attachments
    // );

    // if (!emailSent) {
    //   return badRequest(res, "Failed to send email to partner.");
    // }

    return success(res, "eSign links generated and email sent successfully.", { combinedData });
  } catch (error) {
    console.error("Error in sendEmailToPartnerForEsign:", error);
    return unknownError(res,error, "An error occurred while processing the request.");
  }
};





const sendEmailToCustomerForEsign = async (req, res) => {
  try {
    const { customerId, partnerId } = req.query;

    // Get all required data
    const customerDetail = await applicantModel.findOne({ customerId });
    const partnerData = await finalModel.findOne({
      customerId: new ObjectId(customerId),
    });
    const lenderDocumentData = await lenderDocumentModel.findOne({
      customerId: customerId,
      lenderId: partnerData?.partnerId,
    });
    lenderDocumentData.esignDocument.forEach((doc) => {
      console.log(`${doc.documentName}: ${doc.serialNo}`);
    });
    if (!partnerData) {
      return badRequest(res, "Partner is required.");
    }

    const partnerModel = await lendersModel.findOne({
      _id: partnerData.partnerId,
    });

    if (!partnerModel) {
      return badRequest(res, "Partner not found.");
    }

    // Helper function for sending emails
    const sendEmailWithDocuments = async (documents) => {
      try {
        // Create email links from documents
        const emailLinks = documents
          .map((doc) => {
            const esignLink = doc.url[1] || doc.esignLink;
            const docName = doc.documentName || doc.pdfName;

            return `
            <div>
              <h4>eSign Details for ${docName}</h4>
              <p><strong>eSign Link:</strong> <a href="${esignLink}" target="_blank">Click to Sign</a></p>
            </div>`;
          })
          .join("");

        const emailContent = `
          <div style="font-family: Arial, sans-serif; line-height: 1.6;">
            <p>Dear ${customerDetail.fullName},</p>
            <p>Caption case Report is for final approval.</p>
            <p>Need your immediate action in this case.</p>
            <p>Regards,</p>
            <p>Team FinCoopers</p>
            <div>All PDFs are attached in this email.</div>
            <div>
              <p><strong>eSign Links for each document:</strong></p>
              ${emailLinks}
            </div>
          </div>
        `;

        // Prepare attachments
        const attachments = documents.map((doc) => ({
          path: doc.url?.[0] || doc.pdf,
          contentType: "application/pdf",
          filename: `${doc.documentName || doc.pdfName}.pdf`,
        }));

        // Send email
        await sendEmail(
          [customerDetail.email],
          ["sagarsamediya17@gmail.com"],
          "Final approval email for review",
          emailContent,
          attachments
        );

        return true;
      } catch (error) {
        console.error("Email sending failed:", error);
        return false;
      }
    };

    const normalizedPartnerName = (partnerModel.fullName || "")
      .trim()
      .toLowerCase();

    // Handle partners
    if (normalizedPartnerName === "ratnaafin capital pvt ltd") {
      // Generate new documents
      const sectionData = await sectionLatter(customerId);
      const applicantData = await applicantLatter(customerId);
      const LdAndPdDeedData = await LdAndPdDeed(customerId);

      // Upload documents
      const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;
      const processFile = async (filePath) => {
        try {
          const resolvedPath = path
            .resolve(__dirname, `../../../..${filePath}`)
            .replace(/\\/g, "/");
          const formData = new FormData();
          formData.append("image", fs.createReadStream(resolvedPath));
          const response = await axios.post(uploadUrl, formData, {
            headers: { ...formData.getHeaders() },
          });
          return response.data?.items;
        } catch (error) {
          console.error("Error uploading file:", error);
          throw new Error("File upload failed");
        }
      };

      const documents = [
        {
          fileName: LdAndPdDeedData,
          documentName: "LdAndPdDeed",
          // serialNo: doc.serialNo
        },
        {
          fileName: applicantData,
          documentName: "applicantionLatter",
          // serialNo: doc.serialNo
        },
        {
          fileName: sectionData,
          documentName: "sectionLatter",
          // serialNo: doc.serialNo
        },
      ];

      const esignDocuments = [];

      // Process each document
      for (const doc of documents) {
        try {
          const uploadedFile = await processFile(doc.fileName);
          const esignResult = await initESign({ fileName: doc.fileName });
          const signUrl = esignResult?.data?.invitees?.[0]?.signUrl;

          if (uploadedFile && signUrl) {
            esignDocuments.push({
              serialNo: doc.serialNo,
              documentName: doc.documentName,
              url: [`${process.env.BASE_URL}${uploadedFile.image}`],
              esignLink: signUrl,
            });
          }
        } catch (error) {
          console.error("Error processing document:", error);
        }
      }

      // Save documents
      await lenderDocumentModel.findOneAndUpdate(
        {
          customerId,
          lenderId: partnerData.partnerId,
        },
        {
          $set: { esignDocument: esignDocuments },
        },
        { new: true, upsert: true }
      );

      // Send email
      const emailSent = await sendEmailWithDocuments(esignDocuments);
      if (!emailSent) {
        return failure(res, "Failed to send email with new documents");
      }

      return success(res, "Ratna Documents generated and sent successfully", {
        combinedData: esignDocuments,
      });
    }

    // Similar structure for other partners
    else if (normalizedPartnerName === "grow money capital pvt ltd") {
      // Check existing documents
      if (lenderDocumentData?.esignDocument?.length > 0) {
        const emailSent = await sendEmailWithDocuments(
          lenderDocumentData.esignDocument
        );
        if (!emailSent) {
          return failure(res, "Failed to send email with existing documents");
        }
        return success(res, "Grow Documents sent successfully", {
          combinedData: lenderDocumentData.esignDocument,
        });
      }

      const partnerLogo = growPdfLogo;
      const pdfFunctions = {
        growSanctionLetterPdf: { func: growSanctionLetterPdf, serialNo: 1 },
        growApplicantPdf: { func: growApplicantPdf, serialNo: 2 },
        growPgDeedPdf: { func: growPgDeedPdf, serialNo: 3 },
        rcplLoanAgreement: { func: rcplLoanAgreement, serialNo: 4 },
      };

      const esignDocuments = [];

      for (const [key, details] of Object.entries(pdfFunctions)) {
        try {
          const pdfResult = await details.func(
            customerId,
            partnerLogo,
            partnerModel.fullName
          );

          // Upload PDF
          const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;
          const resolvedPath = path
            .resolve(__dirname, `../../../..${pdfResult}`)
            .replace(/\\/g, "/");
          const formData = new FormData();
          formData.append("image", fs.createReadStream(resolvedPath));
          const uploadResponse = await axios.post(uploadUrl, formData, {
            headers: { ...formData.getHeaders() },
          });

          // Generate eSign
          const esignResult = await initESign({ fileName: pdfResult });
          const signUrl = esignResult?.data?.invitees?.[0]?.signUrl;

          if (uploadResponse.data?.items?.image && signUrl) {
            esignDocuments.push({
              serialNo: details.serialNo,
              documentName: key,
              url: [
                `${process.env.BASE_URL}${uploadResponse.data.items.image}`,
              ],
              esignLink: signUrl,
            });
          }
        } catch (error) {
          console.error(`Error processing ${key}:`, error);
        }
      }
      console.log("ds", esignDocuments);
      // Save and send
      await lenderDocumentModel.findOneAndUpdate(
        { customerId, lenderId: partnerData.partnerId },
        { $set: { esignDocument: esignDocuments } },
        { new: true, upsert: true }
      );

      const emailSent = await sendEmailWithDocuments(esignDocuments);
      if (!emailSent) {
        return failure(res, "Failed to send email with new documents");
      }

      return success(res, "Documents generated and sent successfully", {
        combinedData: esignDocuments,
      });
    } else if (normalizedPartnerName === "fin coopers capital pvt ltd") {
      // Similar to "grow money capital" with different logo
      if (lenderDocumentData?.esignDocument?.length > 0) {
        const emailSent = await sendEmailWithDocuments(
          lenderDocumentData.esignDocument
        );
        if (!emailSent) {
          return failure(res, "Failed to send email with existing documents");
        }
        return success(res, "Fin Documents sent successfully", {
          combinedData: lenderDocumentData.esignDocument,
        });
      }

      // Rest of the code similar to "grow money capital" but with FinpdfLogo
      // ... implementation similar to grow money capital ...
    } else {
      return badRequest(res, `Unsupported partner: ${partnerModel.fullName}`);
    }
  } catch (error) {
    console.error("Error in sendEmailToCustomerForEsign:", error);
    return unknownError(res, error);
  }
};

const eSignGenerate = async (req, res) => {
  try {
    const { customerId } = req.query;

    const customerDetail = await applicantModel.findOne({ customerId });
    const partnerData = await finalModel.findOne({
      customerId: new ObjectId(customerId),
    });
    const lenderDocumentData = await lenderDocumentModel.findOne({
      customerId: customerId,
      lenderId: partnerData?.partnerId,
    });
    const lender = await lendersModel.findById({
      _id: new ObjectId(lenderDocumentData.lenderId),
    });

    if (!lenderDocumentData || !lenderDocumentData.esignDocument?.length) {
      return badRequest(res, "No documents found for eSign");
    }

    // Create a new PDF document
    const mergedPdf = await PDFDocument.create();

    // Process each document
    for (const doc of lenderDocumentData.esignDocument) {
      try {
        const filePath = doc.url[0].replace(`${process.env.BASE_URL}`, "");
        const fullPath = path.resolve(__dirname, `../../../..${filePath}`);

        console.log("Processing file:", fullPath);

        if (fs.existsSync(fullPath)) {
          // Read the PDF file
          const existingPdfBytes = fs.readFileSync(fullPath);

          // Load the PDF document
          const pdfDoc = await PDFDocument.load(existingPdfBytes);

          // Copy all pages from the current document
          const copiedPages = await mergedPdf.copyPages(
            pdfDoc,
            pdfDoc.getPageIndices()
          );
          copiedPages.forEach((page) => mergedPdf.addPage(page));
        } else {
          console.log("File not found:", fullPath);
        }
      } catch (err) {
        console.error("Error processing file:", err);
        continue;
      }
    }

    // Create uploads directory if it doesn't exist
    const uploadsDir = path.resolve(__dirname, "../../../../uploads/");
    if (!fs.existsSync(uploadsDir)) {
      fs.mkdirSync(uploadsDir, { recursive: true });
    }

    // Save the merged PDF
    const outputFileName = `${customerDetail.fullName}_${Date.now()}.pdf`;
    const outputPath = path.join(uploadsDir, outputFileName);

    const mergedPdfBytes = await mergedPdf.save();
    fs.writeFileSync(outputPath, mergedPdfBytes);

    // Generate eSign link using existing initESign function
    const esignResponse = await initESign({
      fileName: `/uploads/${outputFileName}`,
    });

    if (!esignResponse?.data?.invitees?.[0]?.signUrl) {
      return failure(res, "Failed to generate eSign link");
    }

    // Create new esign document object
    const newEsignDoc = {
      partnerName: lender.fullName,
      pdf: `${process.env.BASE_URL}/uploads/${outputFileName}`,
      esignLinkUrl: esignResponse.data.invitees[0].signUrl,
      createdAt: moment().tz("Asia/Kolkata").format("YYYY-MM-DDThh:mm:ss A"),
    };

    // Update document record - push to esignLinks array
    const updatedDoc = await finalModel.findOneAndUpdate(
      { customerId },
      {
        $push: {
          esignLink: newEsignDoc, // Using $push to add to array
        },
      },
      { new: true }
    );

    if (!updatedDoc) {
      return failure(res, "Failed to update document record");
    }

    return success(res, "Combined eSign link generated successfully", {
      combinedEsign: newEsignDoc,
    });
  } catch (error) {
    console.error("Error in customerEsignDocument:", error);
    return unknownError(res, error.message);
  }
};

const addOrUpdateGoogleSheetData = async (req, res) => {
  try {
    const {
      loanAmount,
      tenure,
      emi,
      roi,
      customerFinId,
      ApplicantDetails,
      kycDetailsOf,
      contactInformation,
      permanentInformation,
      presentInformation,
      basicInformation,
      accountSummary,
      financialOverview,
      educationAndOccupation,
      referance,
      bankApplicantDetails,
      coApplicantDetails_1,
      coApplicantDetails_2,
      guarantorInformation,
      bankDetails,
      legalReport,
      technicalReport,
      LoanDetail,
      // propertyHolderInformation,
      // PropertyLocationDetails,
      // propertyAddressAndLandmark,
      // propertySpecifications,
      // PropertyBoundaries,
      // PropertyValuation
    } = req.body;
    console.log(
      guarantorInformation,
      "guarantorInformationguarantorInformation"
    );
    if (!customerFinId) {
      return res.status(400).json({ error: "customerFinId is required" });
    }

    const spreadsheetId = "1K9EnCErm-NfZCg7--TJtkfOqzPyGc-c5eLrWELS3kMA"; // Replace with your spreadsheet ID
    const sheetName = "Sheet1"; // Replace with your sheet name

    const auth = new google.auth.GoogleAuth({
      credentials, // Add your credentials here
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    });
    const authClient = await auth.getClient();
    const sheets = google.sheets({ version: "v4", auth: authClient });

    // Step 1: Fetch data from the sheet
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range: sheetName,
    });

    const rows = response.data.values;

    if (!rows || rows.length === 0) {
      return res.status(404).json({ error: "No data found in the sheet" });
    }

    // Step 2: Extract headers and data rows
    const [headers, ...dataRows] = rows;
    const customerFinIdIndex = headers.indexOf("customerFinId");

    if (customerFinIdIndex === -1) {
      return res.status(400).json({
        error: "Required header 'customerFinId' is missing",
      });
    }

    // Step 3: Create a mapping of request keys to Google Sheets headers
    const keyMapping = {
      loanAmount: "LoanAmountRequested",
      tenure: "LoanTenureRequested",
      emi: "Emi",
      roi: "Roi",
      customerFinId: "customerFinId",
      "ApplicantDetails.ApplicantType": "ApplicantType",
      "ApplicantDetails.bussinessType": "BussinessType",
      "ApplicantDetails.fullName": "FullName",
      "ApplicantDetails.fatherName": "FatherName",
      "ApplicantDetails.motherName": "MotherName",
      "ApplicantDetails.spouseName": "SpouseName",
      "ApplicantDetails.age": "Age",
      "ApplicantDetails.gender": "Gender",
      "ApplicantDetails.maritalStatus": "MaritalStatus",
      "ApplicantDetails.educationalDetails": "EducationalDetails",
      "ApplicantDetails.dob": "Dob",
      "ApplicantDetails.religion": "Religion",
      "ApplicantDetails.nationality": "Nationality",
      "ApplicantDetails.category": "Category",
      "ApplicantDetails.caste": "Caste",
      "ApplicantDetails.noOfDependentWithCustomer": "noOfDependentWithCustomer",
      "kycDetailsOf.panNo": "PanNo",
      "kycDetailsOf.aadharNo": "AadharNo",
      "kycDetailsOf.voterIdNo": "VoterIdNo",
      "kycDetailsOf.udyamRegistrationNo": "UdyamRegistrationNo",
      "contactInformation.mobileNo": "MobileNo",
      "contactInformation.mobileNoTwo": "MobileNoTwo",
      "contactInformation.email": "Email",
      "permanentInformation.fullAddress": "PermanentFullAddress",
      "permanentInformation.presentAddress": "PermanentPresentAddress",
      "permanentInformation.landmark": "PermanentLandmark",
      "permanentInformation.city": "PermanentCity",
      "permanentInformation.state": "PermanentState",
      "permanentInformation.district": "PermanentDistrict",
      "permanentInformation.pinCode": "PermanentPinCode",
      "permanentInformation.noOfyearsAtCurrentAddress":
        "PermanentNoOfyearsAtCurrentAddress",
      "permanentInformation.country": "PermanentPinCode",
      "presentInformation.fullAddress": "PresentAddressAsPerAdhar",
      "presentInformation.presentAddress": "PresentAddressAsPerAdhar",
      "presentInformation.landmark": "PresentLandmark",
      "presentInformation.city": "PresentCity",
      "presentInformation.state": "PresentState",
      "presentInformation.district": "PresentDistrict",
      "presentInformation.pinCode": "PresentPincode",
      "presentInformation.noOfyearsAtCurrentAddress":
        "PresentNoOfyearsAtCurrentAddress",
      "presentInformation.country": "PresentCountry",
      "presentInformation.residenceType": "PresentResidenceType",
      "basicInformation.applicantCibilScore": "ApplicantCibilScore",
      "accountSummary.totalAccounts": "applicantTotalAccounts",
      "accountSummary.overDueAccounts": "applicantOverdueAccount",
      "accountSummary.zeroBalanceAccount": "applicantZeroBalanceAccount",
      "financialOverview.HighCreditAndSanctionAmount":
        "applicantHighCreditAndSanctionAmount",
      "financialOverview.TotalCurrentOutstanding":
        "applicantTotalCurrentOutstanding",
      "financialOverview.TotalOverdueAmount": "applicantTotalOverdueAmount",
      "financialOverview.totalNoOfEnquiry": "noOfEpi",
      "educationAndOccupation.education": "EducationalDetails",
      "educationAndOccupation.occupation": "occupation",
      "educationAndOccupation.monthlyIncome": "monthlyIncome",
      "educationAndOccupation.otherMonthlyIncome": "otherMonthlyIncome",
      "educationAndOccupation.sourceOfOtherIncome": "sourceOfOtherIncome",
      "educationAndOccupation.annualIncome": "annualIncome",
      "educationAndOccupation.totalHouseHoldExpenses": "totalHouseHoldExpenses",
      "referance[0].name": "referenceNameOne",
      "referance[0].address": "referenceAddressOne",
      "referance[0].relation": "referenceRelationOne",
      "referance[0].mobileNumber": "referenceMobileNumberOne",
      "referance[1].name": "referenceNameTwo",
      "referance[1].address": "referenceAddressTwo",
      "referance[1].relation": "referenceRelationTwo",
      "referance[1].mobileNumber": "referenceMobileNumberTwo",
      "bankApplicantDetails.nameOfBankApplicant": "nameOfBankApplicant",
      "bankApplicantDetails.acHolderName": "acHolderName",
      "bankApplicantDetails.bankBranch": "bankBranch",
      "bankApplicantDetails.accountNumber": "accountNumber",
      "bankApplicantDetails.accountType": "accountType",
      "bankApplicantDetails.ifscCode": "ifscCode",
      "bankApplicantDetails.bankName": "nameOfBankApplicant",
      "coApplicantDetails_1.ApplicantType": "coApplicantTypeOne",
      "coApplicantDetails_1.bussinessType": "coApplicantBussinessTypeOne",
      "coApplicantDetails_1.fullName": "coApplicantFullNameOne",
      "coApplicantDetails_1.fatherName": "coApplicantFatherNameOne",
      "coApplicantDetails_1.motherName": "coApplicantMotherNameOne",
      "coApplicantDetails_1.dob": "coApplicantDobOne",
      "coApplicantDetails_1.age": "coApplicantAgeOne",
      "coApplicantDetails_1.gender": "coApplicantGenderOne",
      "coApplicantDetails_1.maritalStatus": "coApplicantMaritalStatusOne",
      "coApplicantDetails_1.educationDetails": "coApplicantEducationDetailsOne",
      "coApplicantDetails_1.relationWithApplicant":
        "coApplicantRelationWithApplicantOne",
      "coApplicantDetails_1.religion": "coApplicantReligionOne",
      "coApplicantDetails_1.nationality": "coApplicantNationalityOne",
      "coApplicantDetails_1.category": "coApplicantCategoryOne",
      "coApplicantDetails_1.caste": "coApplicantCasteOne",
      "coApplicantDetails_1.contactInformation.mobileNo":
        "coApplicantMobileNoOne",
      "coApplicantDetails_1.contactInformation.mobileNoTwo":
        "coApplicantMobileNoTwoOne",
      "coApplicantDetails_1.contactInformation.email": "coApplicantEmailOne",
      "coApplicantDetails_1.kycDetails.udyamRegistrationNo":
        "coApplicantUdyamRegistrationNoOne",
      "coApplicantDetails_1.kycDetails.docType": "coApplicantDocTypeOne",
      "coApplicantDetails_1.kycDetails.aadharNo": "coApplicantAadharNoOne",
      "coApplicantDetails_1.kycDetails.docNo": "coApplicantDocNoOne",
      "coApplicantDetails_1.permanentAddressInformation.presentAddress":
        "coApplicantAddressAsPerAdharOne",
      "coApplicantDetails_1.permanentAddressInformation.landmark":
        "coApplicantLandmarkOne",
      "coApplicantDetails_1.permanentAddressInformation.nameOfCity":
        "coApplicantNameOfCityOne",
      "coApplicantDetails_1.permanentAddressInformation.city":
        "coApplicantCityOne",
      "coApplicantDetails_1.permanentAddressInformation.state":
        "coApplicantStateOne",
      "coApplicantDetails_1.permanentAddressInformation.districtName":
        "coApplicantDistrictNameOne",
      "coApplicantDetails_1.permanentAddressInformation.pinCode":
        "coApplicantPinCodeOne",
      "coApplicantDetails_1.permanentAddressInformation.noOfyearsAtCurrentAddress":
        "coApplicantNoOfyearsAtCurrentAddressOne",
      "coApplicantDetails_1.permanentAddressInformation.country": "",
      "coApplicantDetails_1.presentAddressInformation.AddressAsPerAdhar":
        "coApplicantPresentAddressOne",
      "coApplicantDetails_1.presentAddressInformation.fullAddress":
        "coApplicantPresentAddressFullAddressOne",
      "coApplicantDetails_1.presentAddressInformation.landmark":
        "coApplicantPresentAddressLandmarkOne",
      "coApplicantDetails_1.presentAddressInformation.city":
        "coApplicantPresentAddressNameOfCityOne",
      "coApplicantDetails_1.presentAddressInformation.state":
        "coApplicantPresentAddressStateOne",
      "coApplicantDetails_1.presentAddressInformation.districtName":
        "coApplicantPresentAddressDistrictNameOne",
      "coApplicantDetails_1.presentAddressInformation.pinCode":
        "coApplicantPresentAddressPinCodeOne",
      "coApplicantDetails_1.presentAddressInformation.noOfyearsAtCurrentAddress":
        "coApplicantPresentAddressNoOfyearsAtCurrentAddressOne",
      "coApplicantDetails_1.presentAddressInformation.country": "",
      "coApplicantDetails_1.presentAddressInformation.residenceType":
        "coApplicantPresentAddressResidenceTypeOne",
      "coApplicantDetails_1.employeDetails.education":
        "coApplicantEducationDetailsOne",
      "coApplicantDetails_1.employeDetails.occupation":
        "coApplicantOccupationOne",
      "coApplicantDetails_1.employeDetails.udyamRegistrationNo":
        "coApplicantUdyamRegistrationNoOne",
      "coApplicantDetails_1.employeDetails.monthlyIncome":
        "coApplicantMonthlyIncomeOne",
      "coApplicantDetails_1.employeDetails.otherMonthlyIncome":
        "coApplicantOtherMonthlyIncomeOne",
      "coApplicantDetails_1.employeDetails.sourceOfOtherIncome":
        "coApplicantSourceOfOtherIncomeOne",
      "coApplicantDetails_2.ApplicantType": "coApplicantTypeTwo",
      "coApplicantDetails_2.bussinessType": "coApplicantBussinessTypeTwo",
      "coApplicantDetails_2.fullName": "coApplicantFullNameTwo",
      "coApplicantDetails_2.fatherName": "coApplicantFatherNameTwo",
      "coApplicantDetails_2.motherName": "coApplicantMotherNameTwo",
      "coApplicantDetails_2.dob": "coApplicantDobTwo",
      "coApplicantDetails_2.age": "coApplicantAgeTwo",
      "coApplicantDetails_2.gender": "coApplicantGenderTwo",
      "coApplicantDetails_2.maritalStatus": "coApplicantMaritalStatusTwo",
      "coApplicantDetails_2.educationDetails": "coApplicantEducationDetailsTwo",
      "coApplicantDetails_2.relationWithApplicant":
        "coApplicantRelationWithApplicantTwo",
      "coApplicantDetails_2.religion": "coApplicantReligionTwo",
      "coApplicantDetails_2.nationality": "coApplicantNationalityTwo",
      "coApplicantDetails_2.category": "coApplicantCategoryTwo",
      "coApplicantDetails_2.caste": "coApplicantCasteTwo",
      "coApplicantDetails_2.contactInformation.mobileNo":
        "coApplicantMobileNoTwo",
      "coApplicantDetails_2.contactInformation.mobileNoTwo":
        "coApplicantMobileNoTwoTwo",
      "coApplicantDetails_2.contactInformation.email": "coApplicantEmailTwo",
      "coApplicantDetails_2.kycDetails.udyamRegistrationNo":
        "coApplicantUdyamRegistrationNoTwo",
      "coApplicantDetails_2.kycDetails.docType": "coApplicantDocTypeTwo",
      "coApplicantDetails_2.kycDetails.aadharNo": "coApplicantAadharNoTwo",
      "coApplicantDetails_2.kycDetails.docNo": "coApplicantDocNoTwo",
      "coApplicantDetails_2.permanentAddressInformation.presentAddress":
        "coApplicantAddressAsPerAdharTwo",
      "coApplicantDetails_2.permanentAddressInformation.landmark":
        "coApplicantLandmarkTwo",
      "coApplicantDetails_2.permanentAddressInformation.nameOfCity":
        "coApplicantNameOfCityTwo",
      "coApplicantDetails_2.permanentAddressInformation.city":
        "coApplicantCityTwo",
      "coApplicantDetails_2.permanentAddressInformation.state":
        "coApplicantStateTwo",
      "coApplicantDetails_2.permanentAddressInformation.districtName":
        "coApplicantDistrictNameTwo",
      "coApplicantDetails_2.permanentAddressInformation.pinCode":
        "coApplicantPinCodeTwo",
      "coApplicantDetails_2.permanentAddressInformation.noOfyearsAtCurrentAddress":
        "coApplicantNoOfyearsAtCurrentAddressTwo",
      "coApplicantDetails_2.permanentAddressInformation.country": "",
      "coApplicantDetails_2.presentAddressInformation.AddressAsPerAdhar":
        "coApplicantPresentAddressTwo",
      "coApplicantDetails_2.presentAddressInformation.fullAddress":
        "coApplicantFullAddressTwo",
      "coApplicantDetails_2.presentAddressInformation.landmark":
        "coApplicantLandmarkTwo",
      "coApplicantDetails_2.presentAddressInformation.city":
        "coApplicantNameOfCityTwo",
      "coApplicantDetails_2.presentAddressInformation.state":
        "coApplicantStateTwo",
      "coApplicantDetails_2.presentAddressInformation.districtName":
        "coApplicantDistrictNameTwo",
      "coApplicantDetails_2.presentAddressInformation.pinCode":
        "coApplicantPinCodeTwo",
      "coApplicantDetails_2.presentAddressInformation.noOfyearsAtCurrentAddress":
        "coApplicantNoOfyearsAtCurrentAddressTwo",
      "coApplicantDetails_2.presentAddressInformation.country": "",
      "coApplicantDetails_2.presentAddressInformation.residenceType":
        "coApplicantPresentAddressResidenceTypeOne",
      "coApplicantDetails_2.employeDetails.education":
        "coApplicantEducationTwo",
      "coApplicantDetails_2.employeDetails.occupation":
        "coApplicantOccupationTwo",
      "coApplicantDetails_2.employeDetails.monthlyIncome":
        "coApplicantMonthlyIncomeTwo",
      "coApplicantDetails_2.employeDetails.otherMonthlyIncome":
        "coApplicantOtherMonthlyIncomeTwo",
      "coApplicantDetails_2.employeDetails.sourceOfOtherIncome":
        "coApplicantSourceOfOtherIncomeTwo",
      "coApplicantDetails_2.employeDetails.annualIncome":
        "coApplicantAnnualIncomeTwo",
      "coApplicantDetails_2.employeDetails.totalHouseHoldExpenses":
        "coApplicantTotalHouseHoldExpensesTwo",
      "guarantorInformation.GuarantorType": "guarantorGuarantorType", // guarantor
      "guarantorInformation.bussinessType": "guarantorBusinessType",
      "guarantorInformation.name": "guarantorName",
      "guarantorInformation.fatherName": "guarantorFatherName",
      "guarantorInformation.motherName": "guarantorMotherName",
      "guarantorInformation.spouseName": "guarantorSpouseName",
      "guarantorInformation.age": "guarantorAge",
      "guarantorInformation.gender": "guarantorGender",
      "guarantorInformation.maritalStatus": "guarantorMarritalStatus",
      "guarantorInformation.educationalDetails": "guarantorEducationalDetails",
      "guarantorInformation.dob": "guarantorDob",
      "guarantorInformation.religion": "guarantorReligion",
      "guarantorInformation.nationality": "guarantorNationality",
      "guarantorInformation.category": "guarantorCategory",
      "guarantorInformation.caste": "guarantorCaste",
      "guarantorInformation.contactInformation.mobileNo": "guarantorMobileNo",
      "guarantorInformation.contactInformation.mobileNoTwo":
        "guarantorMobileNoTwo",
      "guarantorInformation.contactInformation.email": "guarantorEmail",
      "guarantorInformation.permanentInformation.addressAsPerAdhar":
        "guarantorAddressAsPerAdhar",
      "guarantorInformation.permanentInformation.presentAddress":
        "guarantorPresentAddress",
      "guarantorInformation.permanentInformation.landmark": "guarantorLandmark",
      "guarantorInformation.permanentInformation.city": "guarantorCity",
      "guarantorInformation.permanentInformation.state": "guarantorState",
      "guarantorInformation.permanentInformation.district": "guarantorDistrict",
      "guarantorInformation.permanentInformation.pinCode": "guarantorPinCode",
      "guarantorInformation.permanentInformation.noOfyearsAtCurrentAddress":
        "guarantorNoOfyearsAtCurrentAddress",
      "guarantorInformation.permanentInformation.country": "guarantorCountry",
      "guarantorInformation.presentInformation.fullAddress":
        "guarantorPresentAddressFullAddress",
      "guarantorInformation.presentInformation.presentAddressAsPerAdhar":
        "guarantorPresentAddressAsPerAdhar",
      "guarantorInformation.presentInformation.landmark":
        "guarantorPresentAddressLandmark",
      "guarantorInformation.presentInformation.city":
        "guarantorPresentAddressCity",
      "guarantorInformation.presentInformation.state":
        "guarantorPresentAddressState",
      "guarantorInformation.presentInformation.district":
        "guarantorPresentAddressDistrict",
      "guarantorInformation.presentInformation.pinCode":
        "guarantorPresentAddressPinCode",
      "guarantorInformation.presentInformation.noOfyearsAtCurrentAddress":
        "guarantorPresentAddressNoOfyearsAtCurrentAddress",
      "guarantorInformation.presentInformation.country": "PresentCountry",
      "guarantorInformation.presentInformation.residenceType":
        "guarantorPresentAddressResidenceType",
      "propertyHolderInformation.nameOfDocumentHolder": "",
      "propertyHolderInformation.fatherName": "",
      "propertyHolderInformation.relationWithApplicant": "",
      "bankDetails.PropertyLocationDetails.houseNo": "houseNo",
      "bankDetails.PropertyLocationDetails.surveyNo": "surveyNo",
      "bankDetails.PropertyLocationDetails.patwariHalkaNo": "patwariHalkaNo",
      "bankDetails.PropertyLocationDetails.wardNo": "wardNo",
      "bankDetails.PropertyLocationDetails.villageName": "villageName",
      "bankDetails.PropertyLocationDetails.gramPanchayat": "gramPanchayat",
      "bankDetails.PropertyLocationDetails.tehsil": "PropertyTehsil",
      "bankDetails.PropertyLocationDetails.district": "PropertyDistrict",
      "bankDetails.PropertyLocationDetails.state": "PropertyState",
      "bankDetails.PropertyLocationDetails.fullAddressOfProperty":
        "fullAddressOfProperty",
      "bankDetails.propertyAddressAndLandmark.propertyLandMark":
        "propertyLandMark",
      "bankDetails.propertyAddressAndLandmark.fullAddressOfProperty":
        "fullAddressOfProperty",
      "bankDetails.propertyAddressAndLandmark.latitude": "latitude",
      "bankDetails.propertyAddressAndLandmark.longitude": "longitude",
      "bankDetails.propertySpecifications.typeOfProperty": "typeOfProperty",
      "bankDetails.propertySpecifications.totalLandAreaInSqFt":
        "totalLandAreaInSqFt",
      "bankDetails.propertySpecifications.totalBuiltUpAreaInSqFt":
        "totalBuiltUpAreaInSqFt",
      "bankDetails.propertySpecifications.typeOfConstruction":
        "typeOfConstruction",
      "bankDetails.propertySpecifications.qualityOfConstruction":
        "qualityOfConstruction",
      "bankDetails.propertySpecifications.ageOfProperty": "ageOfProperty",
      "bankDetails.PropertyBoundaries.eastBoundary": "eastBoundary",
      "bankDetails.PropertyBoundaries.westBoundary": "westBoundary",
      "bankDetails.PropertyBoundaries.northBoundary": "northBoundary",
      "bankDetails.PropertyBoundaries.southBoundary": "southBoundary",
      "bankDetails.PropertyValuation.landValue": "landValue",
      "bankDetails.PropertyValuation.constructionValue": "constructionValue",
      "bankDetails.PropertyValuation.fairMarketValueOfLand":
        "fairMarketValueOfLand",
      "bankDetails.PropertyValuation.realizableValue": "realizableValue",
      "technicalReport.receivedDate": "technicalReportReceivedDate",
      "technicalReport.status": "technicalReportStatus",
      "legalReport.receivedDate": "legalReportReceivedDate",
      "legalReport.status": "legalReportStatus",
      "legalReport.document1": "legalReportDocumentOne",
      "legalReport.document2": "legalReportDocumentTwo",
      "legalReport.document3": "legalReportDocumentThree",
      "legalReport.document4": "legalReportDocumentFour",
      "legalReport.document5": "legalReportDocumentFive",
      "legalReport.document6": "legalReportDocumentSix",
      "legalReport.document7": "legalReportDocumentSeven",
      "LoanDetail.customerDemandLoanAmount": "customerDemandLoanAmount",
      "LoanDetail.approvedAmount": "approvedAmount",
      "LoanDetail.finalDecision": "finalDecision",
      "LoanDetail.customerDemandLoanAmount": "",
      "LoanDetail.customerDemandLoanAmount": "",
      "LoanDetail.customerDemandLoanAmount": "",
      "LoanDetail.customerDemandLoanAmount": "",
    };

    // Step 4: Check if `customerFinId` exists
    const matchingRowIndex = dataRows.findIndex(
      (row) => row[customerFinIdIndex] === customerFinId
    );

    // Helper function to get column letters
    const getColumnLetter = (index) => {
      let letter = "";
      while (index >= 0) {
        letter = String.fromCharCode((index % 26) + 65) + letter;
        index = Math.floor(index / 26) - 1;
      }
      return letter;
    };

    if (matchingRowIndex !== -1) {
      // Step 5: Update the matching row in a batch
      const existingRow = dataRows[matchingRowIndex];
      const updatedRowIndex = matchingRowIndex + 2; // Adjust for header and zero-based index
      const batchUpdates = [];

      for (const [bodyKey, headerKey] of Object.entries(keyMapping)) {
        const columnIndex = headers.indexOf(headerKey);
        if (columnIndex !== -1) {
          const keys = bodyKey.split(".");
          let newValue = req.body;

          for (const key of keys) {
            if (newValue && newValue[key] !== undefined) {
              newValue = newValue[key];
            } else {
              newValue = existingRow[columnIndex] || "";
              break;
            }
          }

          batchUpdates.push({
            range: `${sheetName}!${getColumnLetter(
              columnIndex
            )}${updatedRowIndex}`,
            values: [[newValue]],
          });
        }
      }

      // Use batchUpdate to minimize API calls
      await sheets.spreadsheets.values.batchUpdate({
        spreadsheetId,
        requestBody: {
          data: batchUpdates.map((update) => ({
            range: update.range,
            values: update.values,
          })),
          valueInputOption: "RAW",
        },
      });

      return res
        .status(200)
        .json({ message: "Row updated successfully", updated: batchUpdates });
    } else {
      // Step 6: Add a new row in a batch
      const newRow = headers.map((header) => {
        const bodyKey = Object.keys(keyMapping).find(
          (key) => keyMapping[key] === header
        );

        if (bodyKey) {
          const keys = bodyKey.split(".");
          let value = req.body;

          for (const key of keys) {
            if (value && value[key] !== undefined) {
              value = value[key];
            } else {
              value = "";
              break;
            }
          }
          return value;
        }

        return "";
      });

      await sheets.spreadsheets.values.append({
        spreadsheetId,
        range: sheetName,
        valueInputOption: "RAW",
        requestBody: {
          values: [newRow],
        },
      });

      return res.status(201).json({ message: "New row added successfully" });
    }
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      error: "An unknown error occurred",
      details: error.message,
    });
  }
};

// const selectPartner = async (req, res) => {
//   try {
//     const { customerId, partnerId } = req.query;

//     const customerDetails = await customerModel.findById(customerId)
//     if(!customerDetails){
//       return notFound(res , "Customer Not Found ")
//     }
    
//     const pertnerDetails = await lendersModel.findById(partnerId)
//     if(!pertnerDetails){
//       return notFound(res , "Parnter Not Found ")
//     }


//     // Find the external vendor form data by customerId
   
//     const externalVendorFormData = await externalVendorFormModel.findOne({
//       customerId,
//     });

//     await finalModel.findOneAndUpdate(
//       { customerId }, // Filter criteria
//       { partnerId }, // Update document
//       {  new: true, upsert:true } 
//     );

// success(res , "Vendor status updated successfully", partnerId );

//       await processModel.findOneAndUpdate(
//         { customerId },
//         { $set: {
//           partnerSelection:true
//         } },
//         { new: true }
//     ); 

//       await fileProcessSheet(customerId)
//   } catch (error) {
//     console.error(error);
//     return res
//       .status(500)
//       .json({ error: "An unknown error occurred", details: error.message });
//   }
// };

const selectPartner = async (req, res) => {
  try {
    const { customerId, partnerId } = req.query;
    const todayDate = moment().tz("Asia/Kolkata").format("YYYY-MM-DDThh:mm:ss A");

    const customer = await customerModel.findById(customerId).lean();
    if (!customer) {
      return notFound(res, "Customer not found");
    }

    const partnerDetails = await lendersModel.findById(partnerId).select("fullName");
    if (!partnerDetails) {
      return notFound(res, "Partner Not Found");
    }

    await finalModel.findOneAndUpdate(
      { customerId },
      { partnerId },
      { new: true, upsert: true }
    );


    const lender = await lenderModel.findOne({
      _id: partnerId,
      "venders.branch": new ObjectId(customer.branch),
      "venders.reportType": "rcu",
    });

    let responseMessage = "Partner Selected Successfully"; // Default response
    let rcuAssigned = false;

    if (lender) {

      for (let vender of lender.venders) {
        if (
          String(vender.branch) === String(customer.branch) &&
          vender.reportType === "rcu"
        ) {
          const vendorDetail = await vendorModel.findById(vender.vender);
          if (!vendorDetail || vendorDetail.status !== "active") {
            continue;
          }


          const externalVendor = await externalVendorFormModel.findOne({
            customerId: customer._id,
            "vendors.vendorType": "rcu",
          });

          if (externalVendor) {
            let vendorIndex = externalVendor.vendors.findIndex(
              (v) => v.vendorType === "rcu"
            );

            if (vendorIndex !== -1) {
              let vendorStatus = externalVendor.vendors[vendorIndex].statusByVendor;

              if (vendorStatus === "WIP") {
                // And RCU Already Assigned
                responseMessage = "Partner Selected Successfully";
              } else if (vendorStatus === "approved") {
                // And RCU Already Approved
                responseMessage = "Partner Selected Successfully";
              } else if (vendorStatus === "rejected") {
                // And RCU Already Rejected
                responseMessage = "Partner Selected Successfully";
              } else {
                await externalVendorFormModel.updateOne(
                  { customerId: customer._id, "vendors.vendorType": "rcu" },
                  {
                    $set: {
                      [`vendors.${vendorIndex}.vendorId`]: vender.vender,
                      [`vendors.${vendorIndex}.assignDate`]: todayDate,
                      [`vendors.${vendorIndex}.statusByVendor`]: "WIP",
                    },
                  }
                );
                rcuAssigned = true;
                responseMessage = "Partner Selected Successfully And RCU File Assigned";
              }
            }
          } else {
            await externalVendorFormModel.updateOne(
              { customerId: customer._id },
              {
                $push: {
                  vendors: {
                    vendorType: "rcu",
                    vendorId: vender.vender,
                    assignDocuments: [],
                    pdfRemark: "",
                    statusByVendor: "WIP",
                    assignDate: todayDate,
                  },
                },
              },
              { upsert: true }
            );
            rcuAssigned = true;
            responseMessage = "Partner Selected Successfully And RCU File Assigned";
          }

        }
      }
    }


    await processModel.findOneAndUpdate(
      { customerId },
      { $set: { partnerSelection: true } },
      { new: true }
    );


    // Send the final response after all logic runs
    success(res, responseMessage, partnerDetails);
  } catch (error) {
    console.error("Error in selectPartner:", error);
    return unknownError(res, error);
  }
};





// const selectPartner = async (req, res) => {
//   try {
//     const { customerId, partnerId } = req.query;
//     const todayDate = moment().tz("Asia/Kolkata").format("YYYY-MM-DDThh:mm:ss A");

//     const customer = await customerModel.findById(customerId).lean();
//     if (!customer) {
//       return notFound(res, "Customer not found");
//     }

//     const partnerDetails = await lendersModel.findById(partnerId);

//     if (!partnerDetails) {
//       return notFound(res, "Partner Not Found");
//     }

//     console.log(' API TEST -----')

//     await finalModel.findOneAndUpdate(
//       { customerId },
//       { partnerId },
//       { new: true, upsert: true }
//     );


//     const lender = await lenderModel.findOne({
//       _id: partnerId,
//       "venders.branch": new ObjectId(customer.branch),
//       "venders.reportType": "rcu",
//     });

//     console.log('lender derail')

//     if (lender) {
//       let rcuAssigned = false;
//       for (let vender of lender.venders) {
//         if (String(vender.branch) === String(customer.branch) && vender.reportType === "rcu") {
//           const vendorDetail = await vendorModel.findById(vender.vender);
//           if (vendorDetail && vendorDetail.status === "active") {

//             const externalVendor = await externalVendorFormModel.findOne({
//               customerId: customer._id,
//               "vendors.vendorType": "rcu",
//             });

//             if (externalVendor) {
//               let vendorIndex = externalVendor.vendors.findIndex(v => v.vendorType === "rcu");

//               if (vendorIndex !== -1) {
//                 let vendorStatus = externalVendor.vendors[vendorIndex].statusByVendor;

//                 if (vendorStatus === "WIP") {
//                    success(res, "Partner Select And RCU Already Assigned",partnerDetails);
//                 } else if (vendorStatus === "approved") {
//                    success(res, "Partner Select And RCU Already Approve",partnerDetails);
//                 } else if (vendorStatus === "rejected") {
//                    success(res, "Partner Select And RCU Already Rejected",partnerDetails);
//                 } else {
//                   await externalVendorFormModel.updateOne(
//                     {
//                       customerId: customer._id,
//                       "vendors.vendorType": "rcu",
//                     },
//                     {
//                       $set: {
//                         [`vendors.${vendorIndex}.vendorId`]: vender.vender,
//                         [`vendors.${vendorIndex}.assignDate`]: todayDate,
//                         [`vendors.${vendorIndex}.statusByVendor`]: "WIP",
//                       },
//                     }
//                   );
//                   rcuAssigned = true;
//                   console.log('lender derail 2---')
//                   success(res, "Partner Select successfully And RCU File Assign",partnerDetails);
//                 }
//               }
//             } else {
//               await externalVendorFormModel.updateOne(
//                 { customerId: customer._id },
//                 {
//                   $push: {
//                     vendors: {
//                       vendorType: "rcu",
//                       vendorId: vender.vender,
//                       assignDocuments: [],
//                       pdfRemark: "",
//                       statusByVendor: "WIP",
//                       assignDate: todayDate,
//                     },
//                   },
//                 },
//                 { upsert: true }
//               );
//               rcuAssigned = true;
//             }
//             success(res, "Partner Select successfully And RCU File Assign",partnerDetails);
//           }else{
//             // And RCU Vendor Not Active
//             console.log('lender derail  3-----')
//             success(res, "Partner Select successfully",partnerDetails);
//           }
//         }
//       }

//       console.log('lender derail 1.5 -----')
//       if (rcuAssigned) {
//          success(res, "Partner Select successfully And RCU File Assign",partnerDetails);
//       }
//     } else {
//       // But No Matching Vendor Found
//       console.log('lender derail 4-----')
//        success(res, "Partner Selected Successfully", partnerDetails);
//     }

//     await processModel.findOneAndUpdate(
//       { customerId },
//       { $set: { partnerSelection: true } },
//       { new: true }
//     );

//     // await fileProcessSheet(customerId)

//   } catch (error) {
//     console.log(error);
//     return unknownError(res, error);
//   }
// };

const getPartnerDetails = async (req, res) => {
  try {
    const { customerId } = req.query;

    const customer = await customerModel.findById(customerId).select('_id fullName').lean();
    if (!customer) {
      return notFound(res, "Customer not found");
    }

    const partnerInfo = await finalModel.findOne({ customerId })
      .populate("partnerId", "_id fullName")
      .lean(); 

    if (!partnerInfo || !partnerInfo.partnerId) {
      return notFound(res, "Partner not found");
    }

    // Return the response with the necessary details
    const result = {
        customerFinId  :customer.customerFinId,
        partnerId : partnerInfo.partnerId._id,
        fullName: partnerInfo.partnerId.fullName
    };

    return success(res, "Partner Details Successfully", result);
  } catch (error) {
    console.error("Error in getPartnerDetails:", error);
    return unknownError(res, error);
  }
};




const addQuery = async (req, res) => {
  try {
    const { customerId, query, resolve, queryType, resolveType } = req.body;

    if (!customerId || !query) {
      return badRequest(res, "Customer ID, query, and query type are required");
    }

    const employee = await employeeModel.findOne({
      _id: req.Id,
      status: "active",
    });
    if (!employee) {
      return res.status(404).json({ error: "Employee not found or inactive" });
    }

    let result;

    if (resolve && resolveType) {
      console.log("Updating query with resolve details >>>>>>");

      result = await externalVendorFormModel.updateMany(
        { customerId },
        {
          $set: {
            "queryDetails.$[queryFilter].resolve": resolve,
            "queryDetails.$[queryFilter].resolveType": resolveType,
            "queryDetails.$[queryFilter].resolveEmployeeId": req.Id,
          },
        },
        {
          arrayFilters: [{ "queryFilter.query": query }],
        }
      );

      console.log("Update result >>>>>>", result);

      if (result.matchedCount === 0) {
        return res
          .status(404)
          .json({ error: "No matching query found to resolve" });
      }

      if (result.modifiedCount === 0) {
        return res
          .status(400)
          .json({ error: "Queries found but could not be updated" });
      }

      return res.status(200).json({ message: "Query resolved successfully" });
    } else {
      // Add a new query
      console.log("Adding new query >>>>>>");

      result = await externalVendorFormModel.updateOne(
        { customerId },
        {
          $push: {
            queryDetails: {
              query,
              queryType,
              queryEmployeeId: req.Id,
            },
          },
        },
        { upsert: true } // Ensure the document is created if it doesn't exist
      );

      console.log("Add query result >>>>>>", result);

      if (result.matchedCount === 0 && !result.upsertedCount) {
        return res.status(404).json({ error: "Customer not found" });
      }

      if (result.modifiedCount === 0 && !result.upsertedCount) {
        return res.status(400).json({ error: "Query could not be added" });
      }

      return res.status(200).json({ message: "Query added successfully" });
    }
  } catch (error) {
    console.error("Error in addOrUpdateQuery API >>>>>>", error);
    return res
      .status(500)
      .json({ error: "An unknown error occurred", details: error.message });
  }
};

const getQuery = async (req, res) => {
  try {
    const { customerId } = req.query;
    if (!customerId) {
      return res.status(400).json({ error: "Customer ID  are required" });
    }
    const data = await externalVendorFormModel.findOne({ customerId });
    return res
      .status(200)
      .json({ message: "Query list", data: data?.queryDetails || [] });
  } catch (error) {
    console.error("Error in addQuery API >>>>>>", error);
    console.error(error);
    return unknownError(res, error);
  }
};


async function downloadCamReport(req, res) {
  const spreadsheetId = "1K9EnCErm-NfZCg7--TJtkfOqzPyGc-c5eLrWELS3kMA"; // Your spreadsheet ID
  const sheetName = "Sheet1"; // Your sheet name

  const auth = new google.auth.GoogleAuth({
    credentials,
    scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
  });

  const authClient = await auth.getClient();

  // Construct the export URL for the specified spreadsheet
  const exportUrl = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/export?format=xlsx&sheet=${sheetName}`;

  try {
    // Get the access token
    const token = await authClient.getAccessToken();

    // Download the file using Axios with the access token
    const response = await axios.get(exportUrl, {
      responseType: "stream",
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    // Set response headers for file download
    res.setHeader(
      "Content-Type",
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    );
    res.setHeader(
      "Content-Disposition",
      `attachment; filename="${sheetName}.xlsx"`
    );

    // Pipe the file stream to the response
    response.data.pipe(res);
  } catch (err) {
    console.error("Error during export:", err.message);
  }
}

const SelectSelection = async (req, res) => {
  try {
    const { selection, customerId } = req.body; // Ensure both are passed in the request body

    if (!customerId || !selection) {
      return badRequest(res, "customerId and selection are required");
    } 

    const updatedDocument = await finalModel.findOneAndUpdate(
      { customerId }, // Find by customerId
      { pdfSelection: selection }, // Update pdfSelection field
      { upsert: true, new: true } // Create new document if none exists
    );

    return success(res, "Selection updated successfully", {
      updatedDocument,
    });
  } catch (error) {
    // console.error("Error in SelectSelection API >>>>>>", error);
    console.error(error);
    return unknownError(res, error);
  }
};

// const IncomeSanctionsendToPartner = async (req, res) => {
//   try {
//     const { customerId } = req.query;

//     const partnerData = await finalModel.findOne({ customerId })

//     if (!partnerData) {
//       return badRequest(res, "partner's is required.");
//     }
//     const partnerModel = await lendersModel.findOne({ _id: partnerData.partnerId });
//     if (!partnerModel) {
//       return badRequest(res, "Partner not found.");
//     }

//     const normalizedPartnerName = (partnerModel.fullName || "")
//       .trim()
//       .toLowerCase();

//     if (normalizedPartnerName === "ratnaafin capital pvt ltd") {
//       // Ratna logic
//       let selectionData = partnerData?.pdfSelection || 'acg';
//       console.log(selectionData,"selectionDataselectionData")
//       if (!selectionData || typeof selectionData !== "string") {
//         selectionData = "ac";
//       }

//       const sectionData = await incomeSanctionLatter(customerId);
//       if (!sectionData) {
//         return badRequest(res, "sectionData not found.");
//       }

//      const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;
//      console.log(uploadUrl,"uploadUrl")
//     // console.log(uploadUrl,"uploadUrluploadUrl")

//       const processFile = async (filePath) => {
//         const resolvedPath = path
//           .resolve(__dirname, `../../../..${filePath}`)
//           .replace(/\\/g, "/");
//           // console.log("Resolved File Path: ", resolvedPath);
//         const formData = new FormData();
//         formData.append("image", fs.createReadStream(resolvedPath));
//         // console.log("File Stream: ", fs.existsSync(resolvedPath));
//         const response = await axios.post(uploadUrl, formData, {

//           headers: { ...formData.getHeaders() },
//         });
//         // console.log("Upload Response: ", response.data);

//         return response.data?.items;
//       };
//       // console.log("Section Data Path: ", sectionData);
//       const uploadedSectionUrl = await processFile(sectionData);
//       // console.log("Applicant Data Path: ", applicantData);
//       // const uploadedApplicantUrl = await processFile(applicantData);
//       // console.log("LdAndPdDeed Data Path: ", LdAndPdDeedData);
//       // const uploadedLdAndPdDeedUrl = await processFile(LdAndPdDeedData);

//       return success(res, "pdf urls are", {
//         sectionLatter: `${process.env.BASE_URL}${uploadedSectionUrl.image}`,
//         // LdAndPdDeed: `${process.env.BASE_URL}${uploadedLdAndPdDeedUrl.image}`,
//         // applicantionLatter: `${process.env.BASE_URL}${uploadedApplicantUrl.image}`,

//         //new upload
//         // sectionLatter: `${uploadedSectionUrl.image}`,
//         // LdAndPdDeed: `${uploadedLdAndPdDeedUrl.image}`,
//         // applicantionLatter: `${uploadedApplicantUrl.image}`,
//       });
//     }

//   } catch (error) {
//     console.error(error);
//     return unknownError(res, error);
//   }
// };

const IncomeSanctionsendToPartner = async (req, res) => {
  try {
    let { customerId } = req.query;

    const bankData = await bankStatementModel.findOne({ customerId });
    //disbursementModel
    const kfsData = await disbursementModel.findOne({ customerId });
    const applicant = await applicantModel.findOne({ customerId });
    const coapplicant = await coApplicantModel.findOne({ customerId });
    const secondRecord = await coApplicantModel.findOne({ customerId }).sort({ createdAt: 1 }).skip(1);
    
   console.log(secondRecord,"secondRecord")
    const gauranter = await guarantorModel.findOne({ customerId });
    const cibilData = await cibilModel.findOne({ customerId });
    const customerDetails = await customerModel.findById({ _id: (customerId) });
    
    //technicalApproveFormModel
   const technicalData = await technicalApproveFormModel.findOne({ customerId });

  const pdformdatasDetail = await creditPdModel.findOne({ customerId });

//sanctionPendencyModel
const sanctionPendencyData = await sanctionPendencyModel.findOne({ customerId });

    const finalData = await finalModel.findOne({ customerId });

    const bankKycsDEtails = await bankDeatilsKycs.findOne({ customerId });
    

    const bankDetail = bankKycsDEtails?.bankDetails?.find(
      (detail) => detail.E_Nach_Remarks === "true"
    ) || {}; // Default to an empty object if no bank details are found

    const bankDetails = {
      bankName: bankDetail?.bankName || "NA",
      accNo: bankDetail?.accountNumber || "NA",
     
    };
    const technicalrequiredFields = [
      "fullAddressOfProperty",
      "nameOfDocumentHolder",
      "totalLandArea",
      "totalBuiltUpArea",
    ];

    const customerrequiredFields = [
      "customerFinId", 
    ];
    
  
const finalSanctionrequiredFields = [
  "finalLoanAmount",
  "tenureInMonth",
  "EndUseOfLoan",
  "emiAmount",
  "roi",
  "loanAmountInWords", 
];

// finalSanctionrequiredFields.forEach((field) => {
//   if (!finalData[field] || finalData[field].trim() === "") {
//     // missingFields[field] = `${field} is required.`;
//     return badRequest(res, `final Sanction ${field} is required.`);
//   }
// });

// technicalrequiredFields.forEach((field) => {
//   if (!technicalData[field] || technicalData[field].trim() === "") {
//     // missingFields[field] = `${field} is required.`;
//     return badRequest(res, `These ${field} is required.`);

//   }
// });

// finalSanctionrequiredFields.forEach((field) => {
//   if (!customerDetails[loginFees] || customerDetails[loginFees].trim() === "") {
//     // missingFields[field] = `${field} is required.`;
//     return badRequest(res, `These ${field} is required.`);

//   }
// });

const errors = []; 
finalSanctionrequiredFields.forEach((field) => {
  if (!finalData?.[field] || String(finalData[field]).trim() === "") {
    errors.push(`final Sanction ${field} is required.`);
  }
});


technicalrequiredFields.forEach((field) => {
  if (!technicalData?.[field] || String(technicalData[field]).trim() === "") {
    errors.push(`property paper field ${field} is required.`);
  }
});

customerrequiredFields.forEach((field) => {
  if (!customerDetails?.[field] || String(customerDetails[field]).trim() === "") {
    errors.push(`Customer field ${field} is required.`);
  }
});

if (!bankDetails?.bankName || bankDetails?.bankName === "NA") {
  errors.push("applicant Bank Name is required.");
}
if (!bankDetails?.accNo || bankDetails?.accNo === "NA") {
  errors.push("applicant Bank Account Number is required.");
}
if (!applicant?.fullName || applicant?.fullName === "") {
  errors.push("applicant  Name is required.");
}

if (!applicant?.localAddress?.addressLine1 || applicant.localAddress.addressLine1 === "") {
  errors.push("applicant  address is required.");
}

// if (!gauranter?.fullName || gauranter?.fullName === "") {
//   errors.push("gauranter  Name is required.");
// }

if (!coapplicant?.fullName || coapplicant?.fullName === "") {
  errors.push("coapplicant1  Name is required.");
}
// if (!coapplicant[1].fullName || coapplicant[1].fullName === "") {
//   errors.push("applicant  Name is required.");
// }
// const  coapp2=coApplicantDetails[1]?.fullName || "NA" ;
// console.log("coapp2",coapp2)
if (finalData.pdfSelection === "accg" || finalData.pdfSelection === "acc") {
  if (!secondRecord.fullName || secondRecord.fullName === "") {
    errors.push("Co-applicant2 Name is required.");
  }
}

if (finalData.pdfSelection === "accg" || finalData.pdfSelection === "acg") {
  if (!gauranter?.fullName || gauranter?.fullName === "") {
    errors.push("Co-applicant2 Name is required.");
  }
}

// if (errors.length > 0) {
//   return badRequest(res,{ errors }); // Return all errors as an array
// }

if (errors.length > 0) {
  return badRequestwitherror(res, "Failed to generate incomeSanction PDF", errors,); // Pass errors with a descriptive structure
}



// if(customerId){
//   console.log(secondRecord,"secondRecord")

// }

    const sectionData = await incomesectionLatter(customerId);

    // call the DissionBox API //

    const disissionBoxResult = await DissionBox({
      customerId,
      employeeId: req.Id,
      IncomeSanction: "completed",
    });

    success(res, "income Sanction pdf generated successfully.",sectionData)
    await processModel.findOneAndUpdate(
      { customerId },
      { $set: {
        incomeSanctionGeneration:true
      } },
      { new: true }
  );
  await finalApprovalSheet(customerId)
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

const IncomeSanctionSendEmail = async (req, res) => {
  try {
    let { customerId } = req.query;
    const partnerData = await finalModel.findOne({ customerId });
    const partnerModel = await lendersModel.findOne({
      _id: partnerData.partnerId,
    });

    console.log(req.query, "<><><><><><><><>");
    const sectionincomeData = await incomesectionLatter(customerId);

    const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;
    console.log(uploadUrl, "uploadUrl");

    const processFile = async (filePath) => {
      let resolvedPath = path
        .resolve(__dirname, `../../../..${filePath}`)
        .replace(/\\/g, "/");
      const formData = new FormData();
      formData.append("image", fs.createReadStream(resolvedPath));
      const response = await axios.post(uploadUrl, formData, {
        headers: { ...formData.getHeaders() },
      });
      return response.data?.items;
    };

    const uploadedincSectionUrl = await processFile(sectionincomeData);
    console.log(uploadedincSectionUrl, "uploadedincSectionUrl");

    const BASEURL = process.env.BASE_URL;

    // Attachments for the email
    const attachments = [
      {
        path: `${BASEURL}${uploadedincSectionUrl.image}`,
        contentType: "sanction/pdf",
      },
    ];
    console.log(attachments, "attachmentsattachmentsattachments");

    const emailContent = `
      <div style="font-family: Arial, sans-serif; line-height: 1.6;">
        <p>Dear Sir,</p>
        <p>Caption case Report is for final approval.</p>
        <p>Need your immediate action in this case.</p>
        <p>Regards,</p>
        <p>Team FinCoopers</p>
      </div>
    `;

    // Sending email with eSign links in the email body
    await sendEmail(
      [partnerModel.sanctionEmailTo],
      ["akashsharma199425@gmail.com"],
      [partnerModel.sanctionEmailCc],
      `Final approval email for review`,
      emailContent,
      attachments
    );

    // Responding with eSign links and success message
    return success(
      res,
      "email sent successfully"
      //   {
      //   ...esignLinks,
      // }
    );
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

// const allLegalPdfs = async (req, res) => {
//   try {
//     let { customerId,loanType,propertyType,LegalType } = req.query;

//     if (loanType === "NEW" && propertyType === "newCoownership" && LegalType === "NewLegal") {
//     const sectionData = await legalPdf(customerId);

//     const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//     const processFile = async (filePath) => {
//       let resolvedPath = path
//         .resolve(__dirname, `../../../..${filePath}`)
//         .replace(/\\/g, "/");
//       const formData = new FormData();
//       formData.append("image", fs.createReadStream(resolvedPath));
//       const response = await axios.post(uploadUrl, formData, {
//         headers: { ...formData.getHeaders() },
//       });
//       return response.data?.items;
//     };

//     const uploadedincomeSectionUrl = await processFile(sectionData);

//     const legalPdfUrl = `${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;

//     // Update the database
//     await internalLegalModel.findOneAndUpdate(
//       { customerId }, // Query to find the specific customer document
//       {
//         Generate_new_legal: "true",
//         Generate_new_legal_link: legalPdfUrl,
//       },
//       { new: true, upsert: false } // Options: Return the updated document, don't create a new one
//     );

//     return success(res, "PDF generated  successfully.", {
//       legalPdf: legalPdfUrl,
//     });
//   }else if (loanType === "NEW" && propertyType === "newCoownership" && LegalType === "FinalLegal") {
//     const sectionData = await finallegalPdf(customerId);

//     const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//     const processFile = async (filePath) => {
//       let resolvedPath = path
//         .resolve(__dirname, `../../../..${filePath}`)
//         .replace(/\\/g, "/");
//       const formData = new FormData();
//       formData.append("image", fs.createReadStream(resolvedPath));
//       const response = await axios.post(uploadUrl, formData, {
//         headers: { ...formData.getHeaders() },
//       });
//       return response.data?.items;
//     };

//     const uploadedincomeSectionUrl = await processFile(sectionData);

//     const finalLegalPdfUrl=`${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;

//     await internalLegalModel.findOneAndUpdate(
//       { customerId }, // Query to find the specific customer document
//       {
//         Generate_final_legal: "true",
//         Generate_final_legal_link:finalLegalPdfUrl,
//       },
//       { new: true, upsert: false } // Options: Return the updated document, don't create a new one
//     );

//     return success(res, "pdf generated successfully.", {
//       finalLegalPdf:finalLegalPdfUrl,
//     });
//   }else if (loanType === "NEW" && propertyType === "newCoownership" && LegalType === "Vetting") {
//     const sectionData = await vettingPdf(customerId);

//     const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//     const processFile = async (filePath) => {
//       let resolvedPath = path
//         .resolve(__dirname, `../../../..${filePath}`)
//         .replace(/\\/g, "/");
//       const formData = new FormData();
//       formData.append("image", fs.createReadStream(resolvedPath));
//       const response = await axios.post(uploadUrl, formData, {
//         headers: { ...formData.getHeaders() },
//       });
//       return response.data?.items;
//     };

//     const uploadedincomeSectionUrl = await processFile(sectionData);

//    const vettingPdfUrl= `${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;

//     await internalLegalModel.findOneAndUpdate(
//       { customerId },
//       {
//         Generate_vetting_Report: "true",
//         Generate_vetting_Report_link:vettingPdfUrl,
//       },
//       { new: true, upsert: false }
//     );

//     return success(res, "pdf generated successfully.", {
//       vettingPdf: vettingPdfUrl,
//     });
//   }
//   else if (loanType === "NEW" && propertyType === "7PagerPatta" && LegalType === "FinalLegal") {
//     const sectionData = await sevenPagerpdf(customerId);

//     const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//     const processFile = async (filePath) => {
//       let resolvedPath = path
//         .resolve(__dirname, `../../../..${filePath}`)
//         .replace(/\\/g, "/");
//       const formData = new FormData();
//       formData.append("image", fs.createReadStream(resolvedPath));
//       const response = await axios.post(uploadUrl, formData, {
//         headers: { ...formData.getHeaders() },
//       });
//       return response.data?.items;
//     };

//     const uploadedincomeSectionUrl = await processFile(sectionData);

//     const  SevenPagerLegalPdfUrl= `${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;

//     await internalLegalModel.findOneAndUpdate(
//       { customerId },
//       {
//         Generate_final_legal: "true",
//         Generate_final_legal_link:SevenPagerLegalPdfUrl,
//       },
//       { new: true, upsert: false }
//     );

//     return success(res, "pdf generated successfully.", {
//       SevenPagerLegalPdf: SevenPagerLegalPdfUrl,
//     });
//   }
//   else if (loanType === "NEW" && propertyType === "7PagerPatta" && LegalType === "Vetting") {
//     const sectionData = await sevenPagervettingPdf(customerId);

//     const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//     const processFile = async (filePath) => {
//       let resolvedPath = path
//         .resolve(__dirname, `../../../..${filePath}`)
//         .replace(/\\/g, "/");
//       const formData = new FormData();
//       formData.append("image", fs.createReadStream(resolvedPath));
//       const response = await axios.post(uploadUrl, formData, {
//         headers: { ...formData.getHeaders() },
//       });
//       return response.data?.items;
//     };

//     const uploadedincomeSectionUrl = await processFile(sectionData);

//     const sevenPagervettingPdfUrl =`${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;

//     await internalLegalModel.findOneAndUpdate(
//       { customerId },
//       {
//         Generate_vetting_Report: "true",
//         Generate_vetting_Report_link:sevenPagervettingPdfUrl,
//       },
//       { new: true, upsert: false }
//     );

//     return success(res, "pdf generated successfully.", {
//       sevenPagervettingPdf: sevenPagervettingPdfUrl,
//     });
//   }
//   else if (loanType === "BT" && propertyType === "7PagerPatta" && LegalType === "FinalLegal") {
//     const sectionData = await BtsevenPagerLegalpdf(customerId);

//     const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//     const processFile = async (filePath) => {
//       let resolvedPath = path
//         .resolve(__dirname, `../../../..${filePath}`)
//         .replace(/\\/g, "/");
//       const formData = new FormData();
//       formData.append("image", fs.createReadStream(resolvedPath));
//       const response = await axios.post(uploadUrl, formData, {
//         headers: { ...formData.getHeaders() },
//       });
//       return response.data?.items;
//     };

//     const uploadedincomeSectionUrl = await processFile(sectionData);

//     const  BtSevenPagerLegalPdfUrl= `${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;

//     await internalLegalModel.findOneAndUpdate(
//       { customerId },
//       {
//         Generate_final_legal: "true",
//         Generate_final_legal_link:BtSevenPagerLegalPdfUrl,
//       },
//       { new: true, upsert: false }
//     );

//     return success(res, "pdf generated successfully.", {
//       BtsevenPagerLegalpdf: BtSevenPagerLegalPdfUrl,
//     });
//   }
//   else if (loanType === "BT" && propertyType === "7PagerPatta" && LegalType === "Vetting") {
//     const sectionData = await bt7PagervettingPdf(customerId);

//     const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//     const processFile = async (filePath) => {
//       let resolvedPath = path
//         .resolve(__dirname, `../../../..${filePath}`)
//         .replace(/\\/g, "/");
//       const formData = new FormData();
//       formData.append("image", fs.createReadStream(resolvedPath));
//       const response = await axios.post(uploadUrl, formData, {
//         headers: { ...formData.getHeaders() },
//       });
//       return response.data?.items;
//     };

//     const uploadedincomeSectionUrl = await processFile(sectionData);

//     const BtsevenPagervettingPdfUrl =`${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;

//     await internalLegalModel.findOneAndUpdate(
//       { customerId },
//       {
//         Generate_vetting_Report: "true",
//         Generate_vetting_Report_link:BtsevenPagervettingPdfUrl,
//       },
//       { new: true, upsert: false }
//     );

//     return success(res, "pdf generated successfully.", {
//       bt7Pagervetting: BtsevenPagervettingPdfUrl,
//     });
//   }
//   else if (loanType === "NEW" && propertyType === "executedCoownership" && LegalType === "FinalLegal") {
//     const sectionData = await executedfinallegalPdf(customerId);

//     const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//     const processFile = async (filePath) => {
//       let resolvedPath = path
//         .resolve(__dirname, `../../../..${filePath}`)
//         .replace(/\\/g, "/");
//       const formData = new FormData();
//       formData.append("image", fs.createReadStream(resolvedPath));
//       const response = await axios.post(uploadUrl, formData, {
//         headers: { ...formData.getHeaders() },
//       });
//       return response.data?.items;
//     };

//     const uploadedincomeSectionUrl = await processFile(sectionData);
//     const  newexecutedfinallegalUrl= `${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;

//     await internalLegalModel.findOneAndUpdate(
//       { customerId },
//       {
//         Generate_final_legal: "true",
//         Generate_final_legal_link:newexecutedfinallegalUrl,
//       },
//       { new: true, upsert: false }
//     );

//     return success(res, "pdf generated successfully.", {
//       newexecutedfinallegal: newexecutedfinallegalUrl,
//     });
//   }
//   else if (loanType === "NEW" && propertyType === "executedCoownership" && LegalType === "Vetting") {
//     const sectionData = await executedvettingPdf(customerId);

//     const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//     const processFile = async (filePath) => {
//       let resolvedPath = path
//         .resolve(__dirname, `../../../..${filePath}`)
//         .replace(/\\/g, "/");
//       const formData = new FormData();
//       formData.append("image", fs.createReadStream(resolvedPath));
//       const response = await axios.post(uploadUrl, formData, {
//         headers: { ...formData.getHeaders() },
//       });
//       return response.data?.items;
//     };

//     const uploadedincomeSectionUrl = await processFile(sectionData);

//     const newexecutedvettingUrl =`${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;

//     await internalLegalModel.findOneAndUpdate(
//       { customerId },
//       {
//         Generate_vetting_Report: "true",
//         Generate_vetting_Report_link:newexecutedvettingUrl,
//       },
//       { new: true, upsert: false }
//     );

//     return success(res, "pdf generated successfully.", {
//       newexecutedvetting: newexecutedvettingUrl,
//     });
//   }
//   else if (loanType === "BT" && propertyType === "executedCoownership" && LegalType === "FinalLegal") {
//     const sectionData = await executedfinallegalPdf(customerId);

//     const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//     const processFile = async (filePath) => {
//       let resolvedPath = path
//         .resolve(__dirname, `../../../..${filePath}`)
//         .replace(/\\/g, "/");
//       const formData = new FormData();
//       formData.append("image", fs.createReadStream(resolvedPath));
//       const response = await axios.post(uploadUrl, formData, {
//         headers: { ...formData.getHeaders() },
//       });
//       return response.data?.items;
//     };

//     const uploadedincomeSectionUrl = await processFile(sectionData);
//     const  BtwexecutedfinallegalUrl= `${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;

//     await internalLegalModel.findOneAndUpdate(
//       { customerId },
//       {
//         Generate_final_legal: "true",
//         Generate_final_legal_link:BtwexecutedfinallegalUrl,
//       },
//       { new: true, upsert: false }
//     );

//     return success(res, "pdf generated successfully.", {
//       btexecutedfinallegal: BtwexecutedfinallegalUrl,
//     });
//   }
//   else if (loanType === "BT" && propertyType === "executedCoownership" && LegalType === "Vetting") {
//     const sectionData = await executedvettingPdf(customerId);

//     const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//     const processFile = async (filePath) => {
//       let resolvedPath = path
//         .resolve(__dirname, `../../../..${filePath}`)
//         .replace(/\\/g, "/");
//       const formData = new FormData();
//       formData.append("image", fs.createReadStream(resolvedPath));
//       const response = await axios.post(uploadUrl, formData, {
//         headers: { ...formData.getHeaders() },
//       });
//       return response.data?.items;
//     };

//     const uploadedincomeSectionUrl = await processFile(sectionData);

//     const BtexecutedvettingUrl =`${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;

//     await internalLegalModel.findOneAndUpdate(
//       { customerId },
//       {
//         Generate_vetting_Report: "true",
//         Generate_vetting_Report_link:BtexecutedvettingUrl,
//       },
//       { new: true, upsert: false }
//     );

//     return success(res, "pdf generated successfully.", {
//       btexecutedvetting: BtexecutedvettingUrl,
//     });
//   }
//   } catch (error) {
//     console.log(error);
//     return unknownError(res, error);
//   }

// };

const allLegalPdfs = async (req, res) => {
  try {
    // let { customerId,loanType,propertyType,LegalType } = req.body;

    const {
      customerId,
      loanType,
      LegalType,
      propertyType,
      propertyPaperType,
      selectedBuyer,
      selectedSeller,
      btBankName,
      propertyOwnerName,
      propertyOwnerFatherName,
      tableRows,
      newLegalLink,
      finalLegalLink,
      vettingReportLink,
      sellerFatherName,
      sealandSignedBy,
    } = req.body;

    // Fetch the existing record
    const existingData = await internalLegalModel.findOne({ customerId });

    // Construct updated data dynamically
    const legalData = {
      sellerFatherName:
        sellerFatherName || existingData?.sellerFatherName || null,
      // SealandSignedBy: sealandSignedBy|| existingData?.SealandSignedBy?.signedBy || null,
      LoanType: loanType || existingData?.LoanType || null,
      LegalType: LegalType || existingData?.LegalType || null,
      propertyPaperType:
        propertyPaperType || existingData?.propertyPaperType || null,
      buyerName: selectedBuyer || existingData?.buyerName || null,
      sellerName: selectedSeller || existingData?.sellerName || null,
      BT_BANK_NAME: btBankName || existingData?.BT_BANK_NAME || null,
      PropertyOwnerName:
        propertyOwnerName || existingData?.PropertyOwnerName || null,
      PropertyOwnerFatherName:
        propertyOwnerFatherName ||
        existingData?.PropertyOwnerFatherName ||
        null,
      pramanPatra: {
        no:
          tableRows?.find((row) => row.particular === "PRAMAN PATRA")?.number ||
          existingData?.pramanPatra?.no ||
          null,
        date:
          tableRows?.find((row) => row.particular === "PRAMAN PATRA")?.date ||
          existingData?.pramanPatra?.date ||
          null,
      },
      taxReceipt: {
        no:
          tableRows?.find((row) => row.particular === "TAX RECEIPT")?.number ||
          existingData?.taxReceipt?.no ||
          null,
        date:
          tableRows?.find((row) => row.particular === "TAX RECEIPT")?.date ||
          existingData?.taxReceipt?.date ||
          null,
      },
      co_ownership_deed: {
        no:
          tableRows?.find((row) => row.particular === "CO-OWNERSHIP DEED")
            ?.number ||
          existingData?.co_ownership_deed?.no ||
          null,
        date:
          tableRows?.find((row) => row.particular === "CO-OWNERSHIP DEED")
            ?.date ||
          existingData?.co_ownership_deed?.date ||
          null,
      },
      EM_DEED: {
        no:
          tableRows?.find((row) => row.particular === "EM DEED")?.number ||
          existingData?.EM_DEED?.no ||
          null,
        date:
          tableRows?.find((row) => row.particular === "EM DEED")?.date ||
          existingData?.EM_DEED?.date ||
          null,
      },
      gramPanchayat: {
        no:
          tableRows?.find((row) => row.particular === "GRAM PANCHAYAT PATTA")
            ?.number ||
          existingData?.gramPanchayat?.no ||
          null,
        date:
          tableRows?.find((row) => row.particular === "GRAM PANCHAYAT PATTA")
            ?.date ||
          existingData?.gramPanchayat?.date ||
          null,
      },
      Noc_certificate: {
        no:
          tableRows?.find((row) => row.particular === "NOC CERTIFICATE")
            ?.number ||
          existingData?.Noc_certificate?.no ||
          null,
        date:
          tableRows?.find((row) => row.particular === "NOC CERTIFICATE")
            ?.date ||
          existingData?.Noc_certificate?.date ||
          null,
      },
      Buliding_Permission_Certificate: {
        no:
          tableRows?.find(
            (row) => row.particular === "BUILDING PERMISSION CERTIFICATE"
          )?.number ||
          existingData?.Buliding_Permission_Certificate?.no ||
          null,
        date:
          tableRows?.find(
            (row) => row.particular === "BUILDING PERMISSION CERTIFICATE"
          )?.date ||
          existingData?.Buliding_Permission_Certificate?.date ||
          null,
      },
      Mutation_Certificate: {
        no:
          tableRows?.find((row) => row.particular === "MUTATION CERTIFICATE")
            ?.number ||
          existingData?.Mutation_Certificate?.no ||
          null,
        date:
          tableRows?.find((row) => row.particular === "MUTATION CERTIFICATE")
            ?.date ||
          existingData?.Mutation_Certificate?.date ||
          null,
      },
      Owner_Certificate: {
        no:
          tableRows?.find((row) => row.particular === "OWNER CERTIFICATE")
            ?.number ||
          existingData?.Owner_Certificate?.no ||
          null,
        date:
          tableRows?.find((row) => row.particular === "OWNER CERTIFICATE")
            ?.date ||
          existingData?.Owner_Certificate?.date ||
          null,
      },
      Property_Tax_Reciept: {
        no:
          tableRows?.find((row) => row.particular === "PROPERTY TAX RECEIPT")
            ?.number ||
          existingData?.Property_Tax_Reciept?.no ||
          null,
        date:
          tableRows?.find((row) => row.particular === "PROPERTY TAX RECEIPT")
            ?.date ||
          existingData?.Property_Tax_Reciept?.date ||
          null,
      },
      RM_DEED: {
        no:
          tableRows?.find((row) => row.particular === "RM DEED")?.number ||
          existingData?.RM_DEED?.no ||
          null,
        date:
          tableRows?.find((row) => row.particular === "RM DEED")?.date ||
          existingData?.RM_DEED?.date ||
          null,
      },
      Generate_new_legal_link:
        newLegalLink || existingData?.Generate_new_legal_link || null,
      Generate_final_legal_link:
        finalLegalLink || existingData?.Generate_final_legal_link || null,
      Generate_vetting_Report_link:
        vettingReportLink || existingData?.Generate_vetting_Report_link || null,
    };

    if (!legalData.SealandSignedBy) {
      legalData.SealandSignedBy = {
        no: null,
        date: null,
        signedBy: null,
        file: null
      };
    }
    legalData.SealandSignedBy.signedBy = sealandSignedBy || existingData?.SealandSignedBy?.signedBy || null;
    // Save data to the database
    const savedLegalData = await internalLegalModel.findOneAndUpdate(
      { customerId }, // Query condition
      legalData, // Data to update or insert
      { upsert: true, new: true } // Options
    );

    const fileStageForms = await processModel.findOneAndUpdate(
      { customerId: req.body.customerId },  
      { $set: { 'fileStageForms.internalLegal': true } },
      { new: true }  
  );
    if (!savedLegalData) {
      return res
        .status(400)
        .json({ message: "Failed to save data to the database." });
    }

    if (
      loanType === "NEW" &&
      propertyType === "newCoownership" &&
      LegalType === "NewLegal"
    ) {
      const sectionData = await legalPdf(customerId);

      // const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

      // const processFile = async (filePath) => {
      //   let resolvedPath = path
      //     .resolve(__dirname, `../../../..${filePath}`)
      //     .replace(/\\/g, "/");
      //   const formData = new FormData();
      //   formData.append("image", fs.createReadStream(resolvedPath));
      //   const response = await axios.post(uploadUrl, formData, {
      //     headers: { ...formData.getHeaders() },
      //   });
      //   return response.data?.items;
      // };

      // const uploadedincomeSectionUrl = await processFile(sectionData);

      // const legalPdfUrl = `${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;

      // Update the database
      // await internalLegalModel.findOneAndUpdate(
      //   { customerId }, // Query to find the specific customer document
      //   {
      //     Generate_new_legal: "true",
      //     Generate_new_legal_link: legalPdfUrl,
      //   },
      //   { new: true, upsert: false } // Options: Return the updated document, don't create a new one
      // );

      return success(res, "PDF generated  successfully.",sectionData); 
      //   {
      //   legalPdf: legalPdfUrl,
      // });
    } else if (
      loanType === "NEW" &&
      propertyType === "newCoownership" &&
      LegalType === "FinalLegal"
    ) {
      const sectionData = await finallegalPdf(customerId);

     


     

      return success(res, "pdf generated successfully.",sectionData);
      //    {
      //   finalLegalPdf: finalLegalPdfUrl,
      // });
    } else if (
      loanType === "NEW" &&
      propertyType === "newCoownership" &&
      LegalType === "Vetting"
    ) {
      const sectionData = await vettingPdf(customerId);

    
      return success(res, "pdf generated successfully.",sectionData);
      //    {
      //   vettingPdf: vettingPdfUrl,
      // });
    } else if (
      loanType === "NEW" &&
      propertyType === "7PagerPatta" &&
      LegalType === "FinalLegal"
    ) {
      const sectionData = await sevenPagerpdf(customerId);

    
      return success(res, "pdf generated successfully.",sectionData)
      //  {
      //   SevenPagerLegalPdf: SevenPagerLegalPdfUrl,
      // });
    } else if (
      loanType === "NEW" &&
      propertyType === "7PagerPatta" &&
      LegalType === "Vetting"
    ) {
      const sectionData = await sevenPagervettingPdf(customerId);

      return success(res, "pdf generated successfully.",sectionData)
      //  {
      //   sevenPagervettingPdf: sevenPagervettingPdfUrl,
      // });
    } else if (
      loanType === "BT" &&
      propertyType === "7PagerPatta" &&
      LegalType === "FinalLegal"
    ) {
      const sectionData = await BtsevenPagerLegalpdf(customerId);

      

      

      return success(res, "pdf generated successfully.",sectionData)
      //  {
      //   BtsevenPagerLegalpdf: BtSevenPagerLegalPdfUrl,
      // });
    } else if (
      loanType === "BT" &&
      propertyType === "7PagerPatta" &&
      LegalType === "Vetting"
    ) {
      const sectionData = await bt7PagervettingPdf(customerId);

      

      
      return success(res, "pdf generated successfully.",sectionData);
      //  {
      //   bt7Pagervetting: BtsevenPagervettingPdfUrl,
      // });
    } else if (
      loanType === "NEW" &&
      propertyType === "executedCoownership" &&
      LegalType === "FinalLegal"
    ) {
      const sectionData = await executedfinallegalPdf(customerId);

     

      return success(res, "pdf generated successfully.",sectionData)
      //   {
      //   newexecutedfinallegal: newexecutedfinallegalUrl,
      // });
    } else if (
      loanType === "NEW" &&
      propertyType === "executedCoownership" &&
      LegalType === "Vetting"
    ) {
      const sectionData = await executedvettingPdf(customerId);

      

      return success(res, "pdf generated successfully.",sectionData)
      //    {
      //   newexecutedvetting: newexecutedvettingUrl,
      // });
    } else if (
      loanType === "BT" &&
      propertyType === "executedCoownership" &&
      LegalType === "FinalLegal"
    ) {
      const sectionData = await btexecutedfinallegalPdf(customerId);

      
       

      

      return success(res, "pdf generated successfully.",sectionData)
      //  {
      //   btexecutedfinallegal: BtwexecutedfinallegalUrl, 
      // });
    } else if (
      loanType === "BT" &&
      propertyType === "executedCoownership" &&
      LegalType === "Vetting"
    ) {
      const sectionData = await btexecutedvettingPdf(customerId);

      
        

      return success(res, "pdf generated successfully.",sectionData)
      //  {
      //   btexecutedvetting: BtexecutedvettingUrl,
      // });
    }
    // construction 
    else if (
      loanType === "CONSTRUCTION" &&
      propertyType === "newCoownership" &&
      LegalType === "NewLegal"
    ) {
      const sectionData = await legalPdf(customerId);

      // const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

      // const processFile = async (filePath) => {
      //   let resolvedPath = path
      //     .resolve(__dirname, `../../../..${filePath}`)
      //     .replace(/\\/g, "/");
      //   const formData = new FormData();
      //   formData.append("image", fs.createReadStream(resolvedPath));
      //   const response = await axios.post(uploadUrl, formData, {
      //     headers: { ...formData.getHeaders() },
      //   });
      //   return response.data?.items;
      // };

      // const uploadedincomeSectionUrl = await processFile(sectionData);

      // const legalPdfUrl = `${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;

      // Update the database
      // await internalLegalModel.findOneAndUpdate(
      //   { customerId }, // Query to find the specific customer document
      //   {
      //     Generate_new_legal: "true",
      //     Generate_new_legal_link: legalPdfUrl,
      //   },
      //   { new: true, upsert: false } // Options: Return the updated document, don't create a new one
      // );

      return success(res, "PDF generated  successfully.",sectionData); 
      //   {
      //   legalPdf: legalPdfUrl,
      // });
    } else if (
      loanType === "CONSTRUCTION" &&
      propertyType === "newCoownership" &&
      LegalType === "FinalLegal"
    ) {
      const sectionData = await finallegalPdf(customerId);

     


     

      return success(res, "pdf generated successfully.",sectionData);
      //    {
      //   finalLegalPdf: finalLegalPdfUrl,
      // });
    } else if (
      loanType === "CONSTRUCTION" &&
      propertyType === "newCoownership" &&
      LegalType === "Vetting"
    ) {
      const sectionData = await vettingPdf(customerId);

    
      return success(res, "pdf generated successfully.",sectionData);
      //    {
      //   vettingPdf: vettingPdfUrl,
      // });
    } else if (
      loanType === "CONSTRUCTION" &&
      propertyType === "7PagerPatta" &&
      LegalType === "FinalLegal"
    ) {
      const sectionData = await sevenPagerpdf(customerId);

    
      return success(res, "pdf generated successfully.",sectionData)
      //  {
      //   SevenPagerLegalPdf: SevenPagerLegalPdfUrl,
      // });
    } else if (
      loanType === "CONSTRUCTION" &&
      propertyType === "7PagerPatta" &&
      LegalType === "Vetting"
    ) {
      const sectionData = await sevenPagervettingPdf(customerId);

      return success(res, "pdf generated successfully.",sectionData)
      //  {
      //   sevenPagervettingPdf: sevenPagervettingPdfUrl,
      // });
    } else if (
      loanType === "CONSTRUCTION" &&
      propertyType === "executedCoownership" &&
      LegalType === "FinalLegal"
    ) {
      const sectionData = await executedfinallegalPdf(customerId);

     

      return success(res, "pdf generated successfully.",sectionData)
      //   {
      //   newexecutedfinallegal: newexecutedfinallegalUrl,
      // });
    } else if (
      loanType === "CONSTRUCTION" &&
      propertyType === "executedCoownership" &&
      LegalType === "Vetting"
    ) {
      const sectionData = await executedvettingPdf(customerId);

      

      return success(res, "pdf generated successfully.",sectionData)
      //    {
      //   newexecutedvetting: newexecutedvettingUrl,
      // });
    } 

    //--------------------------new top u--------------p

    //-----------------7pagerpatta bt top up --------------------
    else if (
      loanType === "BT-TOPUP" &&
      propertyType === "7PagerPatta" &&
      LegalType === "FinalLegal"
    ) {
      const sectionData = await BtsevenPagerLegalpdf(customerId);

      return success(res, "pdf generated successfully.",sectionData)
      //  {
      //   BtsevenPagerLegalpdf: BtSevenPagerLegalPdfUrl,
      // });
    } else if (
      loanType === "BT-TOPUP" &&
      propertyType === "7PagerPatta" &&
      LegalType === "Vetting"
    ) {
      const sectionData = await bt7PagervettingPdf(customerId);

      

      
      return success(res, "pdf generated successfully.",sectionData);
      //  {
      //   bt7Pagervetting: BtsevenPagervettingPdfUrl,
      // });
    } else if (
      loanType === "BT-TOPUP" &&
      propertyType === "executedCoownership" &&
      LegalType === "FinalLegal"
    ) {
      const sectionData = await btexecutedfinallegalPdf(customerId);

      
       

      

      return success(res, "pdf generated successfully.",sectionData)
      //  {
      //   btexecutedfinallegal: BtwexecutedfinallegalUrl, 
      // });
    } else if (
      loanType === "BT-TOPUP" &&
      propertyType === "executedCoownership" &&
      LegalType === "Vetting"
    ) {
      const sectionData = await btexecutedvettingPdf(customerId);

      
        

      return success(res, "pdf generated successfully.",sectionData)
      //  {
      //   btexecutedvetting: BtexecutedvettingUrl,
      // });
    }
    
     else {
      return badRequest(
        res,
        `Unsupported  legal types:please send correct types`
      );
    }
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

// const dobsignnew = async (req, res) => {
//   try {
//     const { customerId,selections } = req.query;

//     const partnerData = await finalModel.findOne({ customerId });

//     if (!partnerData) {
//       return badRequest(res, "partner's is required.");
//     }
//     const partnerModel = await lendersModel.findOne({
//       _id: partnerData.partnerId,
//     });
//     if (!partnerModel) {
//       return badRequest(res, "Partner not found.");
//     }

//     const normalizedPartnerName = (partnerModel.fullName || "")
//       .trim()
//       .toLowerCase();

//     if (normalizedPartnerName === "ratnaafin capital pvt ltd") {
//       // Ratna logic
//       // let selectionData = partnerData?.pdfSelection || 'acg';
//       // console.log(selectionData,"selectionDataselectionData")
//       // if (!selectionData || typeof selectionData !== "string") {
//       //   selectionData = "ac";
//       // }

//       const sectionData = await ratnaDobSignForm(customerId);
//       if (!sectionData) {
//         return badRequest(res, "sectionData not found.");
//       }
//       // const applicantData = await applicantLatter(customerId, selectionData);
//       // if (!applicantData) {
//       //   return badRequest(res, "applicantData not found.");
//       // }
//       // const LdAndPdDeedData = await LdAndPdDeed(customerId, selectionData);
//       // if (!LdAndPdDeedData) {
//       //   return badRequest(res, "LdAndPdDeedData not found.");
//       // }

//       const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;
//       console.log(uploadUrl, "uploadUrl");
//       // console.log(uploadUrl,"uploadUrluploadUrl")

//       const processFile = async (filePath) => {
//         const resolvedPath = path
//           .resolve(__dirname, `../../../..${filePath}`)
//           .replace(/\\/g, "/");
//         // console.log("Resolved File Path: ", resolvedPath);
//         const formData = new FormData();
//         formData.append("image", fs.createReadStream(resolvedPath));
//         // console.log("File Stream: ", fs.existsSync(resolvedPath));
//         const response = await axios.post(uploadUrl, formData, {
//           headers: { ...formData.getHeaders() },
//         });
//         // console.log("Upload Response: ", response.data);

//         return response.data?.items;
//       };
//       // console.log("Section Data Path: ", sectionData);
//       const uploadedSectionUrl = await processFile(sectionData);
//       // console.log("Applicant Data Path: ", applicantData);
//       // const uploadedApplicantUrl = await processFile(applicantData);
//       // // console.log("LdAndPdDeed Data Path: ", LdAndPdDeedData);
//       // const uploadedLdAndPdDeedUrl = await processFile(LdAndPdDeedData);

//       return success(res, "pdf urls are", {
//         ratnaaDobform: `${process.env.BASE_URL}${uploadedSectionUrl.image}`,
//         // LdAndPdDeed: `${process.env.BASE_URL}${uploadedLdAndPdDeedUrl.image}`,
//         // applicantionLatter: `${process.env.BASE_URL}${uploadedApplicantUrl.image}`,

//         //new upload
//         // sectionLatter: `${uploadedSectionUrl.image}`,
//         // LdAndPdDeed: `${uploadedLdAndPdDeedUrl.image}`,
//         // applicantionLatter: `${uploadedApplicantUrl.image}`,
//       });
//     } else if (normalizedPartnerName === "grow money capital pvt ltd") {
//       // Fin Cooper logic with selection handling
//       // let selectionData = partnerData?.pdfSelection || 'acg';
//       // console.log(selectionData,"selectionDataselectionData")
//       // if (!selectionData || typeof selectionData !== "string") {
//       //   selectionData = "ac";
//       // }

//       const partnerLogo = FinpdfLogo;

//       const pdfFunctions = {
//         growDualNamepdf,
//         growSignaturepdf,
//       };

//       const pdfData = {};
//       for (const [key, func] of Object.entries(pdfFunctions)) {
//         const pdfResult = await func(
//           customerId,
//           partnerLogo,
//           partnerModel.fullName
//           // selectionData // Pass selection to all functions
//         );
//         pdfData[key] = pdfResult;
//       }

//       const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//       const processFile = async (filePath) => {
//         const resolvedPath = path
//           .resolve(__dirname, `../../../..${filePath}`)
//           .replace(/\\/g, "/");
//         const formData = new FormData();
//         formData.append("image", fs.createReadStream(resolvedPath));
//         const response = await axios.post(uploadUrl, formData, {
//           headers: { ...formData.getHeaders() },
//         });
//         return response.data?.items;
//       };

//       const uploadedUrls = {};
//       for (const [key, data] of Object.entries(pdfData)) {
//         const uploadedUrl = await processFile(data);
//         // Replace "grow" or "rcpl" with "fincooper" in the URL
//         uploadedUrls[key] = `${process.env.BASE_URL}${uploadedUrl.image}`;
//         // processedUrl = processedUrl.replace(/grow|rcpl/gi, "fincooper"); grow money capital pvt ltd
//         // const newKey = key.replace(/grow|rcpl/gi, "fincooper");

//         // uploadedUrls[key] = processedUrl;
//       }

//       return success(res, "pdf urls are", uploadedUrls);
//     }
//     // else if (normalizedPartnerName === "fin coopers capital pvt ltd") {
//     //   // Grow Money logic with selection handling
//     //   let selectionData = partnerData?.pdfSelection || 'acg';
//     //   console.log(selectionData,"selectionDataselectionData")
//     //   if (!selectionData || typeof selectionData !== "string") {
//     //     selectionData = "ac";
//     //   }

//     //   const partnerLogo = growPdfLogo;

//     //   const pdfFunctions = {
//     //     growDualNamepdf,
//     //     growSignaturepdf,

//     //   };

//     //   const pdfData = {};
//     //   for (const [key, func] of Object.entries(pdfFunctions)) {
//     //     const pdfResult = await func(
//     //       customerId,
//     //       partnerLogo,
//     //       partnerModel.fullName,
//     //       selectionData // Pass selection to all functions
//     //     );
//     //     pdfData[key] = pdfResult;
//     //   }

//     //   const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//     //   const processFile = async (filePath) => {
//     //     const resolvedPath = path
//     //       .resolve(__dirname, `../../../..${filePath}`)
//     //       .replace(/\\/g, "/");
//     //     const formData = new FormData();
//     //     formData.append("image", fs.createReadStream(resolvedPath));
//     //     const response = await axios.post(uploadUrl, formData, {
//     //       headers: { ...formData.getHeaders() },
//     //     });
//     //     return response.data?.items;
//     //   };

//     //   const uploadedUrls = {};
//     //   for (const [key, data] of Object.entries(pdfData)) {
//     //     const uploadedUrl = await processFile(data);
//     //     uploadedUrls[key] = `${process.env.BASE_URL}${uploadedUrl.image}`;
//     //   }

//     //   return success(res, "pdf urls are", uploadedUrls);
//     // }
//     //  else {
//     //   return badRequest(res, `Unsupported partner: ${partnerModel.fullName}`);
//     // }
//   } catch (error) {
//     console.error(error);
//     return unknownError(res, error);
//   }
// };

const dobsignnew = async (req, res) => {
  try {
    const { customerId, selections } = req.query;

    if (!selections || typeof selections !== "string") {
      selections = "applicant";
    }

    const partnerData = await finalModel.findOne({ customerId });

    if (!partnerData) {
      return badRequest(res, "partner's is required.");
    }
    const partnerModel = await lendersModel.findOne({
      _id: partnerData.partnerId,
    });
    if (!partnerModel) {
      return badRequest(res, "Partner not found.");
    }

    const normalizedPartnerName = (partnerModel.fullName || "")
      .trim()
      .toLowerCase();

    if (normalizedPartnerName === "ratnaafin capital pvt ltd") {
      // Ratna logic
      // let selectionData = partnerData?.pdfSelection || 'acg';
      // console.log(selectionData,"selectionDataselectionData")
      // if (!selectionData || typeof selectionData !== "string") {
      //   selectionData = "ac";
      // }

      const sectionData = await ratnaDobSignForm(customerId, selections);
      if (!sectionData) {
        return badRequest(res, "ratnaDualName dual pdf not found.");
      }


      return success(res, "pdf urls are",sectionData);
    } else if (normalizedPartnerName === "grow money capital pvt ltd") {
      // Fin Cooper logic with selection handling
      // let selectionData = partnerData?.pdfSelection || 'acg';
      // console.log(selectionData,"selectionDataselectionData")
      // if (!selectionData || typeof selectionData !== "string") {
      //   selectionData = "ac";
      // }

      const partnerLogo = FinpdfLogo;

      const pdfFunctions = {
        growDualNamepdf,
        growSignaturepdf,
      };

      const pdfData = {};
      for (const [key, func] of Object.entries(pdfFunctions)) {
        const pdfResult = await func(
          customerId,
          partnerLogo,
          partnerModel.fullName
          // selectionData // Pass selection to all functions
        );
        pdfData[key] = pdfResult;
      }

      const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

      const processFile = async (filePath) => {
        const resolvedPath = path
          .resolve(__dirname, `../../../..${filePath}`)
          .replace(/\\/g, "/");
        const formData = new FormData();
        formData.append("image", fs.createReadStream(resolvedPath));
        const response = await axios.post(uploadUrl, formData, {
          headers: { ...formData.getHeaders() },
        });
        return response.data?.items;
      };

      const uploadedUrls = {};
      for (const [key, data] of Object.entries(pdfData)) {
        const uploadedUrl = await processFile(data);
        // Replace "grow" or "rcpl" with "fincooper" in the URL
        uploadedUrls[key] = `${process.env.BASE_URL}${uploadedUrl.image}`;
        // processedUrl = processedUrl.replace(/grow|rcpl/gi, "fincooper"); grow money capital pvt ltd
        // const newKey = key.replace(/grow|rcpl/gi, "fincooper");

        // uploadedUrls[key] = processedUrl;
      }

      return success(res, "pdf urls are", uploadedUrls);
    }
    // else if (normalizedPartnerName === "fin coopers capital pvt ltd") {
    //   // Grow Money logic with selection handling
    //   let selectionData = partnerData?.pdfSelection || 'acg';
    //   console.log(selectionData,"selectionDataselectionData")
    //   if (!selectionData || typeof selectionData !== "string") {
    //     selectionData = "ac";
    //   }

    //   const partnerLogo = growPdfLogo;

    //   const pdfFunctions = {
    //     growDualNamepdf,
    //     growSignaturepdf,

    //   };

    //   const pdfData = {};
    //   for (const [key, func] of Object.entries(pdfFunctions)) {
    //     const pdfResult = await func(
    //       customerId,
    //       partnerLogo,
    //       partnerModel.fullName,
    //       selectionData // Pass selection to all functions
    //     );
    //     pdfData[key] = pdfResult;
    //   }

    //   const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

    //   const processFile = async (filePath) => {
    //     const resolvedPath = path
    //       .resolve(__dirname, `../../../..${filePath}`)
    //       .replace(/\\/g, "/");
    //     const formData = new FormData();
    //     formData.append("image", fs.createReadStream(resolvedPath));
    //     const response = await axios.post(uploadUrl, formData, {
    //       headers: { ...formData.getHeaders() },
    //     });
    //     return response.data?.items;
    //   };

    //   const uploadedUrls = {};
    //   for (const [key, data] of Object.entries(pdfData)) {
    //     const uploadedUrl = await processFile(data);
    //     uploadedUrls[key] = `${process.env.BASE_URL}${uploadedUrl.image}`;
    //   }

    //   return success(res, "pdf urls are", uploadedUrls);
    // }
    //  else {
    //   return badRequest(res, `Unsupported partner: ${partnerModel.fullName}`);
    // }
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

const addSelfAssign = async (req, res) => {
  try {
    const empId = req.Id; // Employee ID from the request
    const { customerId, finalSenctionFileSelfAssign, branchSelfAssign } = req.query;
    // const todayDate = checkTime.format("YYYY-MM-DDThh:mm:ss A");
   const todayDate =  moment().tz("Asia/Kolkata").format("YYYY-MM-DDThh:mm:ss A");
    // console.log(customerId, finalSenctionFileSelfAssign, typeof branchSelfAssign, empId);

    const partnerCheck = await finalModel.findOne({ customerId });

    if (!partnerCheck && !finalSenctionFileSelfAssign) {
      return success(res, "self assigned details", {
        finalSenctionFileSelfAssign: false,
        branchSelfAssign:false
      });
    }

    if (partnerCheck && !finalSenctionFileSelfAssign && !branchSelfAssign) {
      return success(res, "self assigned details", {
        finalSenctionFileSelfAssign: partnerCheck?.finalSenctionFileSelfAssign,
        branchSelfAssign: partnerCheck?.branchSelfAssign,
      });
    }
    let updateData;
    if (customerId && finalSenctionFileSelfAssign == "true") {
      // Check if customerId is provided
      updateData = {
        customerId,
        employeeId: empId,
        selfAassignDate : todayDate,
        finalSenctionFileSelfAssign: finalSenctionFileSelfAssign, // Default to false if not provided
      };
    }
    if (customerId && finalSenctionFileSelfAssign == "false") {
      // Check if customerId is provided
      updateData = {
        customerId,
        employeeId: null,
        selfAassignDate : "",
        finalSenctionFileSelfAssign: finalSenctionFileSelfAssign, // Default to false if not provided
      };
    }
    if (customerId && branchSelfAssign == "true") {
      // Check if customerId is provided
      console.log("inside if block<<>><>>",branchSelfAssign,customerId)
      updateData = {
        customerId,
        branchSelfAssignEmpId: empId,
        branchSelfAssignDate : todayDate,
        branchSelfAssign: branchSelfAssign, // Default to false if not provided
      };
    }
    if (customerId && branchSelfAssign == "false") {
      // Check if customerId is provided
      console.log("inside if block<<>><>>",branchSelfAssign,customerId)
      updateData = {
        customerId,
        branchSelfAssignEmpId: null,
        branchSelfAssignDate : "",
        branchSelfAssign: branchSelfAssign, // Default to false if not provided
      };
    }
    // console.log(updateData,"updateDataupdateData")
    const partnerData = await finalModel.findOneAndUpdate(
      { customerId }, // Match by customerId
      { $set: updateData }, // Update or set the fields
      { new: true, upsert: true } // Create a new document if none exists
    );

     success(res, "Self-assigned successfully", {
      finalSenctionFileSelfAssign: partnerData.finalSenctionFileSelfAssign,
      branchSelfAssign: partnerData?.branchSelfAssign,
    });
    // await finalApprovalSheet(customerId)
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

// async function disbursementFormAdd(req, res) {
//   try {
//     // Validate incoming request
//     const errors = validationResult(req);
//     if (!errors.isEmpty()) {
//       return res.status(400).json({
//         errorName: "serverValidation",
//         errors: errors.array(),
//       });
//     }

//     // Validate required fields
//     const { customerId } = req.body;
//     if (!customerId) {
//       return badRequest(res, "Customer ID is required");
//     }

//     // Check if the disbursement form for the customer already exists
//     const existingDisbursement = await disbursementModel.findOne({ customerId });
//     if (existingDisbursement) {
//       return badRequest(res, "Disbursement form for this customer already exists");
//     }

//     // Create a new disbursement document
//     const disbursementDetail = await disbursementModel.create(req.body);

//     // Respond with success
//     success(res, "Disbursement Form Added Successfully", disbursementDetail);
//   } catch (error) {
//     console.error(error);
//     unknownError(res, error);
//   }
// }
const disbursementFormAdd = async (req, res) => {
  try {
    // Validate incoming request
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        errorName: "serverValidation",
        errors: errors.array(),
      });
    }

    // Validate required fields
    const { customerId } = req.body;
    if (!customerId) {
      return badRequest(res, "Customer ID is required");
    }
    const todayDate = moment().tz("Asia/Kolkata").format("YYYY-MM-DDThh:mm:ss A");
    // Allowed fields for filtering request data
    const allowedFields = [
      "formFillBy",
      "customerId",
      "physicalFileCourier",
      "eNachLinkSentToBranch",
      "eNachLinkSignUpload",
      "kycAndAffidavit",
      "pdcAndBsv",
      "estampRequirement",
      "esignDocument",
      "finalDisbursementDocuments",
      "finalLegalAndVetting",
      "postDisbursement",
      "eSignatureSentToBranch"
    ];

    // Filter incoming request body to include only allowed fields
    const filteredData = Object.keys(req.body)
      .filter((key) => allowedFields.includes(key))
      .reduce((obj, key) => {
        obj[key] = req.body[key];
        return obj;
      }, {});

    console.log(filteredData, "filteredData");

    // Check if the disbursement form for the customer already exists
    let existingDisbursement = await disbursementModel.findOne({ customerId });

    if (existingDisbursement) {
      // Merge existing nested fields with the new data
      let updateFields = { ...filteredData };

      // Deep merge for nested fields like `kycAndAffidavit`
      if (
        filteredData.kycAndAffidavit &&
        filteredData.kycAndAffidavit.kycDetail
      ) {
        updateFields["kycAndAffidavit.kycDetail"] =
          existingDisbursement.kycAndAffidavit.kycDetail.map((existingKyc) => {
            const updatedKyc = filteredData.kycAndAffidavit.kycDetail.find(
              (newKyc) => newKyc.type === existingKyc.type
            );

            if (updatedKyc) {
              Object.keys(updatedKyc).forEach((key) => {
                existingKyc[key] =
                  updatedKyc[key] === "" || updatedKyc[key] === null
                    ? ""
                    : updatedKyc[key];
              });
            }
            return existingKyc;
          });
      }

      // Ensure `estampRequirement` is updated correctly
      let updateQuery = {
        $set: updateFields,
      };

      if (filteredData.estampRequirement) {
        if (Array.isArray(filteredData.estampRequirement)) {
          updateQuery.$set["estampRequirement"] = [
            ...(existingDisbursement.estampRequirement || []),
            ...filteredData.estampRequirement,
          ];
        } else {
          updateQuery.$set["estampRequirement"] = filteredData.estampRequirement;
        }
      }

      // Ensure `pdcAndBsv` merges properly instead of overwriting
      if (filteredData.pdcAndBsv) {
        updateQuery["$set"]["pdcAndBsv"] = {
          ...existingDisbursement.pdcAndBsv,
          ...filteredData.pdcAndBsv,
        };
      }

      // Update document
      const updatedDisbursement = await disbursementModel.findOneAndUpdate(
        { customerId },
        updateQuery,
        { new: true }
      );

      let statusUpdateFields = {};
      if (
        updatedDisbursement?.pdcAndBsv?.applicantChequeAndBSV?.chequeDetail
          ?.length > 0 ||
        updatedDisbursement?.pdcAndBsv?.guarantorChequeAndBSV?.chequeDetail
          ?.length > 0
      ) {
        statusUpdateFields.pdcDetailsFormStart = true;
      }
      if (
        updatedDisbursement?.pdcAndBsv?.applicantChequeAndBSV?.chequeDetail
          ?.length >= 5 ||
        updatedDisbursement?.pdcAndBsv?.guarantorChequeAndBSV?.chequeDetail
          ?.length >= 2
      ) {
        statusUpdateFields.pdcDetailsFormComplete = true;
      }

      if (
        updatedDisbursement.pdcAndBsv &&
        Object.keys(updatedDisbursement.pdcAndBsv).length > 0
      ) {
        statusUpdateFields.postDisbursementFormStart = true;
        statusUpdateFields.postDisbursementFormComplete = true;
      }

      // Update process model if required
      if (Object.keys(statusUpdateFields).length > 0) {
        await processModel.findOneAndUpdate(
          { customerId },
          { $set: statusUpdateFields },
          { new: true, upsert: true }
        );
      }

              let finalDisbursementUpdate = {
                sendToPartnerPostDisbursedStatus: "complete",
                sendToPartnerPostDisbursedDate:todayDate
              };
            if (filteredData.postDisbursement) {
              finalDisbursementUpdate.finalDisbursementStatus = "complete";
              finalDisbursementUpdate.finalDisbursementStatusDate = todayDate;
            }

        if (Object.keys(finalDisbursementUpdate).length > 0) {
          await finalModel.findOneAndUpdate(
            { customerId },
            { $set: finalDisbursementUpdate },
            { new: true, upsert: true }
          );
        }


       success( res,"Disbursement Form Updated Successfully", updatedDisbursement );
             await fileProcessSheet(customerId)
      return await finalApprovalSheet(customerId)
    } else {
      // Create a new disbursement document
      const disbursementDetail = await disbursementModel.create(filteredData);

      let statusUpdateFields = {};
      if (
        disbursementDetail?.pdcAndBsv?.applicantChequeAndBSV?.chequeDetail
          ?.length > 0 ||
        disbursementDetail?.pdcAndBsv?.guarantorChequeAndBSV?.chequeDetail
          ?.length > 0
      ) {
        statusUpdateFields.pdcDetailsFormStart = true;
      }
      if (
        disbursementDetail?.pdcAndBsv?.applicantChequeAndBSV?.chequeDetail
          ?.length >= 5 ||
        disbursementDetail?.pdcAndBsv?.guarantorChequeAndBSV?.chequeDetail
          ?.length >= 2
      ) {
        statusUpdateFields.pdcDetailsFormComplete = true;
      }

      if (
        disbursementDetail.pdcAndBsv &&
        Object.keys(disbursementDetail.pdcAndBsv).length > 0
      ) {
        statusUpdateFields.postDisbursementFormStart = true;
        statusUpdateFields.postDisbursementFormComplete = true;
      }

      // Update process model if required
      if (Object.keys(statusUpdateFields).length > 0) {
        await processModel.findOneAndUpdate(
          { customerId },
          { $set: statusUpdateFields },
          { new: true, upsert: true }
        );
      }

       success(res,"Disbursement Form Added Successfully", disbursementDetail );
       await processModel.findOneAndUpdate(
        { customerId },
        { $set: {
          enachLink: req?.body?.eNachLinkSentToBranch ? true : false,
          disbursementDetail: req?.body?.postDisbursement ? true : false,
          inventoryDetail:req?.body?.applicantChequeAndBSV ? true : false, //courierDetail
          physicalFileSendToLendor:req?.body?.courierDetail ? true : false,
          pdc:req?.body?.pdc ? true : false
        } },
        { new: true }
    );
       await fileProcessSheet(customerId)
        return await finalApprovalSheet(customerId)
    }
  } catch (error) {
    console.error(error);
    unknownError(res, error);
  }
};




// const slefAssignList = async (req, res) => {
//   try {
//     const empId = new mongoose.Types.ObjectId(req.Id);
//     const { pageLimit, pageNumber, search } = req.query;
//     const { offset, limit } = paginationData(pageLimit, pageNumber);

//     // console.log(empId,'empId')
//     // Build search filter
//     const searchFilter = {};
//     if (search) {
//       searchFilter.$or = [
//         { "nearestBranchData.name": { $regex: search, $options: "i" } }, // Branch name (case-insensitive)
//         { "applicantDetail.fullName": { $regex: search, $options: "i" } }, // Applicant name (case-insensitive)
//         { customerFinId: { $regex: search, $options: "i" } },
//         {
//           $expr: {
//             $regexMatch: {
//               input: { $toString: "$mobileNo" }, // Convert numeric field to string
//               regex: search,
//               options: "i",
//             },
//           },
//         }, // Mobile number as string (case-insensitive)
//       ];
//     }

//     const userData = await customerModel.aggregate([
//       {
//         $lookup: {
//           from: "products",
//           localField: "productId",
//           foreignField: "_id",
//           as: "productData",
//         },
//       },
//       {
//         $addFields: {
//           productData: { $arrayElemAt: ["$productData", 0] },
//         },
//       },
//       {
//         $lookup: {
//           from: "employees",
//           localField: "employeId",
//           foreignField: "_id",
//           as: "employeeDetail",
//         },
//       },
//       {
//         $addFields: {
//           employeeDetail: { $arrayElemAt: ["$employeeDetail", 0] },
//         },
//       },
//       {
//         $lookup: {
//           from: "employees",
//           localField: "employeeDetail.reportingManagerId",
//           foreignField: "_id",
//           as: "salesManagerDetails",
//         },
//       },
//       {
//         $addFields: {
//           salesManagerDetails: { $arrayElemAt: ["$salesManagerDetails", 0] },
//         },
//       },
//       {
//         $lookup: {
//           from: "newbranches",
//           localField: "employeeDetail.branchId",
//           foreignField: "_id",
//           as: "nearestBranchData",
//         },
//       },
//       {
//         $addFields: {
//           nearestBranchData: { $arrayElemAt: ["$nearestBranchData", 0] },
//         },
//       },
//       {
//         $lookup: {
//           from: "applicantdetails",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "applicantDetail",
//         },
//       },
//       {
//         $addFields: {
//           applicantDetail: { $arrayElemAt: ["$applicantDetail", 0] },
//         },
//       },
//       {
//         $lookup: {
//           from: "cibildetails",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "cibildetailDetail",
//         },
//       },
//       {
//         $addFields: {
//           cibildetailDetail: { $arrayElemAt: ["$cibildetailDetail", 0] },
//         },
//       },
//       {
//         $lookup: {
//           from: "pdformdatas",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "pdData",
//         },
//       },
//       {
//         $addFields: {
//           pdData: { $arrayElemAt: ["$pdData", 0] },
//         },
//       },
//       {
//         $lookup: {
//           from: "finalsanctiondetaails",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "finalSanctionData",
//         },
//       },
//       {
//         $addFields: {
//           finalSanctionData: { $arrayElemAt: ["$finalSanctionData", 0] },
//         },
//       },
//       {
//         $match: {
//           $and: [
//             {
//               $or: [{ "pdData.status": "complete" }, { "pdData.status": "approve" }],
//             },
//             { "finalSanctionData.employeeId": empId },
//             { "finalSanctionData.finalSenctionFileSelfAssign": true },
//           ],
//         },
//       },
//       {
//         $project: {
//           _id: 1,
//           employeId: 1,
//           productId: 1,
//           customerFinId: 1,
//           mobileNo: 1,
//           loanAmount: 1,
//           roi: 1,
//           tenure: 1,
//           emi: 1,
//           executiveName: 1,
//           createdAt: 1,
//           updatedAt: 1,
//           "applicantDetail.fullName": 1,
//           "applicantDetail.fatherName": 1,
//           "applicantDetail.mobileNo": 1,
//           "applicantDetail.applicantPhoto": 1,
//           "applicantDetail.applicantAddress":
//             "$applicantDetail.permanentAddress.addressLine1",
//           "cibildetailDetail.applicantCibilScore": 1,
//           "nearestBranchData.name": 1,
//           "productData.productName": 1,
//           "employeeDetail.employeName": 1,
//           "employeeDetail.userName": 1,
//           "employeeDetail.employeUniqueId": 1,
//           "salesManagerDetails.employeName": 1,
//           "salesManagerDetails.employeUniqueId": 1,
//           "salesManagerDetails.userName": 1,
//           tvrDetails: {
//             income: "7%",
//             propertyValue: "50L",
//             foir: "30%",
//             ltv: "9%",
//           },
//         },
//       },
//       { $match: searchFilter },
//       { $skip: offset },
//       { $limit: limit },
//     ]);
    

//     // Fetch total count without pagination for accurate results
//     const totalCount = await customerModel.aggregate([
//       {
//         $lookup: {
//           from: "pdformdatas",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "pdData",
//         },
//       },
//       {
//         $addFields: {
//           pdData: { $arrayElemAt: ["$pdData", 0] },
//         },
//       },
//       {
//         $lookup: {
//           from: "finalsanctiondetaails",
//           localField: "_id",
//           foreignField: "customerId",
//           as: "finalSanctionData",
//         },
//       },
//       {
//         $addFields: {
//           finalSanctionData: { $arrayElemAt: ["$finalSanctionData", 0] },
//         },
//       },
//       {
//         $match: {
//           $and: [
//             {
//               $or: [{ "pdData.status": "complete" }, { "pdData.status": "approve" }],
//             },
//             { "finalSanctionData.employeeId": empId },
//             { "finalSanctionData.finalSenctionFileSelfAssign": true },
//           ],
//         },
//       },
//     ]);

//     return success(res, "All customer details List", {
//       totalCount: totalCount.length,
//       userDataLength: userData.length,
//       userData,
//     });
//   } catch (error) {
//     console.log(error);
//     return unknownError(res, error);
//   }
// };

// ----------------Get All estampRequirement----------------------



const slefAssignList = async (req, res) => {
  try {
    console.time();
    const empId = new mongoose.Types.ObjectId(req.Id);
    const { pageLimit, pageNumber, search } = req.query;
    const { offset, limit } = paginationData(pageLimit, pageNumber);
   
    // Build search filter
    const searchFilter = {};
    if (search) {
      searchFilter.$or = [
        { "nearestBranchData.name": { $regex: search, $options: "i" } }, // Branch name (case-insensitive)
        { "applicantDetail.fullName": { $regex: search, $options: "i" } }, // Applicant name (case-insensitive)
        { customerFinId: { $regex: search, $options: "i" } },
        {
          $expr: {
            $regexMatch: {
              input: { $toString: "$mobileNo" }, // Convert numeric field to string
              regex: search,
              options: "i",
            },
          },
        }, // Mobile number as string (case-insensitive)
      ];
    }

    // Aggregation pipeline
    const userData = await customerModel.aggregate([
      // Early $match stage for filtering based on employeeId and sanction data
      {
        $lookup: {
          from: "pdformdatas",
          localField: "_id",
          foreignField: "customerId",
          as: "pdData",
        },
      },
      {
        $addFields: {
          pdData: { $arrayElemAt: ["$pdData", 0] },
        },
      },
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "_id",
          foreignField: "customerId",
          as: "finalSanctionData",
        },
      }, 
      {
        $addFields: {
          finalSanctionData: { $arrayElemAt: ["$finalSanctionData", 0] },
        },
      },
      {
        $match: {
          $and: [
            // {
            //   $or: [{ "pdData.status": "complete" }, { "pdData.status": "approve" }],
            // },
            { "finalSanctionData.employeeId": empId },
            { "finalSanctionData.finalSenctionFileSelfAssign": true },
          ],
        },
      },
      // Lookup stages
      {
        $lookup: {
          from: "products",
          localField: "productId",
          foreignField: "_id",
          as: "productData",
        },
      },
      {
        $lookup: {
          from: "employees",
          localField: "employeId",
          foreignField: "_id",
          as: "employeeDetail",
        },
      },
      {
        $lookup: {
          from: "employees",
          localField: "employeeDetail.reportingManagerId",
          foreignField: "_id",
          as: "salesManagerDetails",
        },
      },
      {
        $lookup: {
          from: "newbranches",
          localField: "employeeDetail.branchId",
          foreignField: "_id",
          as: "nearestBranchData",
        },
      },
      {
        $lookup: {
          from: "applicantdetails",
          localField: "_id",
          foreignField: "customerId",
          as: "applicantDetail",
        },
      },
      {
        $lookup: {
          from: "cibildetails",
          localField: "_id",
          foreignField: "customerId",
          as: "cibildetailDetail",
        },
      },
      // Combining all addFields into one stage
      {
        $addFields: {
          productData: { $arrayElemAt: ["$productData", 0] },
          employeeDetail: { $arrayElemAt: ["$employeeDetail", 0] },
          salesManagerDetails: { $arrayElemAt: ["$salesManagerDetails", 0] },
          nearestBranchData: { $arrayElemAt: ["$nearestBranchData", 0] },
          applicantDetail: { $arrayElemAt: ["$applicantDetail", 0] },
          cibildetailDetail: { $arrayElemAt: ["$cibildetailDetail", 0] },
        },
      },
      {
        $project: {
          _id: 1,
          employeId: 1,
          productId: 1,
          customerFinId: 1,
          mobileNo: 1,
          loanAmount: 1,
          roi: 1,
          tenure: 1,
          emi: 1,
          executiveName: 1,
          createdAt: 1,
          updatedAt: 1,
          "applicantDetail.fullName": 1,
          "applicantDetail.fatherName": 1,
          "applicantDetail.mobileNo": 1,
          "applicantDetail.applicantPhoto": 1,
          "applicantDetail.applicantAddress":
            "$applicantDetail.permanentAddress.addressLine1",
          "cibildetailDetail.applicantCibilScore": 1,
          "nearestBranchData.name": 1,
          "productData.productName": 1,
          "employeeDetail.employeName": 1,
          "employeeDetail.userName": 1,
          "employeeDetail.employeUniqueId": 1,
          "salesManagerDetails.employeName": 1,
          "salesManagerDetails.employeUniqueId": 1,
          "salesManagerDetails.userName": 1,
          tvrDetails: {
            income: "7%",
            propertyValue: "50L",
            foir: "30%",
            ltv: "9%",
          },
        },
      },
      { $match: searchFilter },
      {
        $facet: {
          paginatedResults: [{ $skip: offset }, { $limit: limit }],
          totalCount: [{ $count: "count" }],
        },
      },
    ]);

    const totalCount = userData[0].totalCount[0]?.count || 0;
    const paginatedResults = userData[0].paginatedResults;
    console.timeEnd();

    return success(res, "All customer details List", {
      totalCount,
      userDataLength: paginatedResults.length,
      userData: paginatedResults,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};



async function getAllEstampReq(req, res) {
  try {
    // Fetch disbursement data
    const data = await disbursementModel.find(
      {},
      { customerId: 1, estampRequirement: 1 }
    );

    if (!data || data.length === 0) {
      return notFound(res, "No disbursement data found", []);
    }

    // Extract customer IDs
    const customerIds = data.map((item) => item.customerId);

    // Fetch customerFinId for each customerId
    const customerDetails = await customerModel.find(
      { _id: { $in: customerIds } },
      { _id: 1, customerFinId: 1 }
    );

    // Fetch applicant details for fullName
    const applicantDetails = await applicantModel.find(
      { customerId: { $in: customerIds } },
      { customerId: 1, fullName: 1 }
    );

    // Create maps for quick lookups
    const customerMap = customerDetails.reduce((map, customer) => {
      map[customer._id] = customer.customerFinId;
      return map;
    }, {});

    const applicantMap = applicantDetails.reduce((map, applicant) => {
      map[applicant.customerId] = applicant.fullName;
      return map;
    }, {});

    // Format the data to include required details
    const formattedData = data.map((item) => ({
      customerId: item.customerId,
      customerFinId: customerMap[item.customerId] || null,
      customerName: applicantMap[item.customerId] || null, // Fetch fullName from applicantModel
      estampRequirement: Array.isArray(item.estampRequirement) ? item.estampRequirement : [],
    }));

    // Return successful response with formatted data
    success(res, "Get Disbursement Details", formattedData);
  } catch (error) {
    console.error("Error fetching disbursement details:", error);
    unknownError(res, error);
  }
}



// --------------Get customer estampRequirement---------------------------------------

async function getEstampReq(req, res) {
  try {
    const { customerId } = req.query;
    // Fetch disbursement data
    const data = await disbursementModel
      .find(
        { customerId },
        {
          customerId: 1,
          estampRequirement: 1,
        }
      )
      .populate("estampRequirement.partnerName", "fullName userName") // Populates the partnerName field from lender
      .populate("estampRequirement.vendorName", "fullName userName");

    // Return successful response with formatted data
    success(res, "Get stamp Details", data);
    
  } catch (error) {
    console.error("Error fetching disbursement details:", error);
    unknownError(res, error);
  }
}

// ---------------Update EstampUpload By Branch OR Other Departmenet----------
const eStampUploadApi = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        errorName: "serverValidation",
        errors: errors.array(),
      });
    }

    const tokenId = new ObjectId(req.Id); // eStampUploadBy
    const { customerId, estampRequirementId, eStampUpload } = req.body;

    const customerDetail = await disbursementModel.findOne({
      customerId: new ObjectId(req.body.customerId),
    });
    if (!customerDetail) {
      return notFound(res, "CustomerId Not Found");
    }

    if (!customerId || !estampRequirementId || !Array.isArray(eStampUpload)) {
      return badRequest(
        res,
        "Customer ID, estampRequirementId, and eStampUpload are required. eStampUpload must be an array."
      );
    }

    const updatedDisbursement = await disbursementModel.findOneAndUpdate(
      {
        customerId,
        "estampRequirement._id": estampRequirementId, // Match specific item by ID
      },
      {
        $push: {
          "estampRequirement.$.eStampUpload": { $each: eStampUpload }, // Append eStampUpload array
        },
        $set: {
          "estampRequirement.$.eStampUploadBy": tokenId,
        },
      },
      { new: true }
    );

    if (!updatedDisbursement) {
      return notFound(res, "EstampRequirement not found for the provided IDs.");
    }

    success(
      res,
      "E-stamp uploaded and updated successfully.",
      updatedDisbursement.estampRequirement
    );
  } catch (error) {
    console.error(error);
    unknownError(res, error);
  }
};

// --------------Partner Name List By CustomerId -----------------
async function getPartnerDetailByCustomerId(req, res) {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        errorName: "serverValidation",
        errors: errors.array(),
      });
    }

    const customerId = req.query.customerId;

    const partnerDetail = await finalModel.aggregate([
      { $match: { customerId: new ObjectId(customerId) } },
      {
        $lookup: {
          from: "lenders",
          localField: "partnerId",
          foreignField: "_id",
          as: "partnerDetail",
        },
      },
      {
        $project: {
          partnerDetail:1
          // "partnerDetail.fullName": 1, // Include only the partnerName field
          // "partnerDetail._id": 1,
          // "partnerDetail.partnerUniqueId": 1,
          // _id:0                    // Optionally exclude the _id field if not needed
        },
      },
    ]);

    success(res, "Partner Detail Retrieved", partnerDetail);
  } catch (error) {
    console.log(error);
    unknownError(res, error);
  }
}

// ------------Esign Document Gate From Final Model------------
const getCustomerEsignDocument = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        errorName: "serverValidation",
        errors: errors.array(),
      });
    }
    const { customerId, lenderId } = req.query;

    // Validate the required query parameters
    if (!customerId || !lenderId) {
      return badRequest(res, "Customer ID and Lender ID are required.");
    }

    // Fetch the document based on customerId and lenderId
    const customerEsignDocument = await lenderDocumentModel.findOne({
      customerId: new ObjectId(customerId),
      lenderId: lenderId,
    });

    // If no document is found, return a not found response
    if (!customerEsignDocument) {
      return notFound(res, "CustomerId and lenderId Not Match", []);
    }

    const esignDocuments = (customerEsignDocument.esignDocument || []).sort(
      (a, b) => a.serialNo - b.serialNo
    );

    success(res, "Esign Document Customer List", esignDocuments);
  } catch (error) {
    console.error(error);
    unknownError(res, error);
  }
};

// ------------Esign Document Gate From Lender Document Model------------
const getCustomerEsignUrl = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        errorName: "serverValidation",
        errors: errors.array(),
      });
    }
    const { customerId, partnerId } = req.query;

    // Validate the required query parameters
    if (!customerId || !partnerId) {
      return notFound(res, "Customer ID and Partner ID are required.", []);
    }

    // Fetch the document based on customerId and lenderId
    const customerEsignDocument = await finalModel.findOne({
      customerId: new ObjectId(customerId),
      partnerId: partnerId,
    });

    // If no document is found, return a not found response
    if (!customerEsignDocument) {
      return notFound(res, "CustomerId and lenderId Not Match", []);
    }

    const esignDocuments = customerEsignDocument.esignLink || [];

    success(res, "E-Sign Document URL for Customer", esignDocuments);
  } catch (error) {
    console.error(error);
    unknownError(res, error);
  }
};

const updatePropertyDetails = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        errorName: "serverValidation",
        errors: errors.array(),
      });
    }
    const { documentName, documentId, customerId } = req.body;
    console.log(req.body, "<<>>><<>><<>><<>>");
    const fileData = req.file;

    if (!customerId) {
      return res.status(400).json({ message: "Customer ID is required." });
    }

    // Find the customer document details
    const customerDocumentDetails = await customerDocumentModel.findOne({
      customerId,
    });

    if (!customerDocumentDetails) {
      return res.status(404).json({ message: "Customer not found." });
    }

    let updatedDocument;

    if (documentId) {
      // Update the existing document (documentName and/or propertyDocument)
      updatedDocument = await customerDocumentModel.findOneAndUpdate(
        {
          customerId,
          "propertyDocument.document._id": documentId,
        },
        {
          $set: {
            "propertyDocument.document.$.documentName": documentName,
            "propertyDocument.document.$.propertyDocument": fileData?.filename
              ? [`uploads/${fileData.filename}`]
              : [],
          },
        },
        { new: true }
      );
    } else {
      // Push a new document
      updatedDocument = await customerDocumentModel.findOneAndUpdate(
        { customerId },
        {
          $push: {
            "propertyDocument.document": {
              documentName,
              propertyDocument: fileData?.filename
                ? [`uploads/${fileData?.filename}`]
                : [],
            },
          },
        },
        { new: true }
      );
    }

    success(
      res,
      "Document updated successfully",
      updatedDocument?.propertyDocument
    );
  } catch (error) {
    console.log(error, "error");
    console.error(error);
    unknownError(res, error.message);
  }
};

// Reject by Ho //
const RejectByHo = async (req, res) => {
  console.log(req.Id);
  try {
    const { customerId, remark } = req.query;
    if (!customerId || customerId.trim() === "") {
      return badRequest(res, "CustomerId is required");
    }

    const employeeData = await employeModel.findOne({ _id: req.Id });
    if (!employeeData) {
      return badRequest(res, "Employee not found");
    }

    const customer = await customerModel.findById(customerId);
    if (!customer) {
      return notFound(res, "Customer not found");
    }

    const inactiveStatus = "inactive";

    const updatedCustomer = await externalVendorFormModel.findOneAndUpdate(
      { customerId: customerId }, // Query filter
      {
        $set: {
          rejectemployeeId: employeeData._id,
          rejectRemark: remark,
          fileStatus: inactiveStatus,
        },
      },
      { new: true } // Return the updated document
    );

    if (!updatedCustomer) {
      return unknownError(
        res,
        "Failed to update customer status in externalVendorFormModel"
      );
    }

    // Update the PD model with rejection status
    const updatedPd = await creditPdModel.findOneAndUpdate(
      { customerId: customerId }, // Query filter
      {
        $set: {
          status: "rejectByHo",
        },
      },
      { new: true } // Return the updated document
    );

    if (!updatedPd) {
      return unknownError(
        res,
        "Failed to update customer status in creditPdModel"
      );
    }

    // Respond with the updated customer details
    return success(res, "Customer status updated to 'Rejected by HO'");
  } catch (error) {
    console.error("Error in RejectByHo:", error);
    return unknownError(res, error.message || "An unexpected error occurred");
  }
};

// update status by HO(complete,reject)
// update this api
const updateStatusByHo = async (req, res) => {
  // console.log(req.Id)
  try {
    const { customerId, remark, status, type } = req.body;
    if (!customerId || customerId.trim() === "") {
      return badRequest(res, "CustomerId is required");
    }

    // const employeeData = await employeModel.findOne({ _id: req.Id });
    // if (!employeeData) {
    //     return badRequest(res, "Employee not found");
    // }
    const customer = await customerModel.findById(customerId);
    if (!customer) {
      return notFound(res, "Customer not found");
    }
    const partnerCheck = await finalModel.findOne({ customerId });
    const coApplicantData = await coApplicantModel.find({ customerId });
    const applicantData = await applicantModel.findOne({ customerId });
    const guarantorData = await guarantorModel.findOne({ customerId });
    const cibilData = await cibilModel.findOne({ customerId });
    const SignKycDetails = await SignKycModel.findOne({ customerId });
    const customerDocumentDetails = await customerDocumentModel.findOne({
      customerId,
    });
    const appPdcData = await appPdcModel.findOne({ customerId });
    const gtrPdcData = await gtrPdcModel.findOne({ customerId });
    const loanDocumentData = await loanDocumentModel.findOne({ customerId });


    if (type === "finalSanction") {
      // console.log(
      //   // partnerCheck.fileProcessSanctionStatus,
      //   // coApplicantData.length > 0 && coApplicantData[0].kycUpload && Object.keys(coApplicantData[0].kycUpload).length,
      //   // // coApplicantData.length > 0 && coApplicantData[1]?.kycUpload && Object.keys(coApplicantData[0]?.kycUpload).length ,
      //   // guarantorData.kycUpload && Object.keys(guarantorData.kycUpload).length,
      //   // cibilData?.coApplicantData[0]?.coApplicantCibilReport.length,
      //   // // cibilData?.coApplicantData[1]?.coApplicantCibilReport?.length,
      //   // cibilData?.guarantorCibilReport.length ,
      //   customerDocumentDetails.signApplicantKyc.length
      // )
      if(  partnerCheck.fileProcessSanctionStatus === "complete" &&
        applicantData.kycUpload && Object.keys(applicantData.kycUpload).length > 0 &&
        coApplicantData.length > 0 && coApplicantData[0].kycUpload && Object.keys(coApplicantData[0].kycUpload).length > 0 &&
        // coApplicantData.length > 0 && coApplicantData[1]?.kycUpload && Object.keys(coApplicantData[0]?.kycUpload).length > 0 &&
        guarantorData.kycUpload && Object.keys(guarantorData.kycUpload).length > 0 &&
        cibilData?.applicantCibilReport.length > 0 &&
        cibilData?.coApplicantData[0].coApplicantCibilReport?.length > 0 &&
        // cibilData?.coApplicantData[1].coApplicantCibilReport?.length > 0 &&
        cibilData?.guarantorCibilReport.length > 0 &&
        customerDocumentDetails.signApplicantKyc.length > 0 &&
        customerDocumentDetails.signCoApplicantKyc.length > 0 &&
        customerDocumentDetails.signGurantorKyc.length > 0 &&
        customerDocumentDetails.incomeDocument.utilityBillDocument?.length > 0 &&
        customerDocumentDetails.incomeDocument.familyCardDocument?.length > 0 &&
        customerDocumentDetails.incomeDocument.udyamCertificateDocument?.length > 0 &&
        customerDocumentDetails.incomeDocument.bankStatementDocument?.length > 0 &&
        customerDocumentDetails.incomeDocument.incomeStatemenDocument?.length > 0 &&
        customerDocumentDetails.propertyDocument.propertyDocument?.length > 0
      )
      {
        const updatedPd = await creditPdModel.findOneAndUpdate(
          { customerId: customerId }, // Query filter
          {
            $set: {
              branchStatus: status,
              hoRemark: remark,
            },
          },
          { new: true } // Return the updated document
        );
         await finalModel.findOneAndUpdate(
          { customerId: customerId }, // Query filter
          {
            $set: {
              fileProcessSendToSanctionStatus: "complete",
            },
          },
          { new: true } // Return the updated document
        );
        // console.log(updatedPd, "updatedPd");
        if (!updatedPd) {
          return unknownError(
            res,
            "Failed to update customer status in creditPdModel"
          );
        }
         // Respond with the updated customer details
       return success(res, "sanction send successfully");
      }else {
       return badRequest(res, "please fill sanction form details and documents");
      }
    }
   
    if (type === "disbursement"){
      console.log(
        partnerCheck.fileProcessDisbursementStatus,
        appPdcData?.applicantPdcDocument?.length,
        gtrPdcData?.guarantorPdcDocument?.length,
        loanDocumentData?.applicantBSV?.length,
        loanDocumentData?.guarantorBSV?.length
      )
      if(partnerCheck.fileProcessDisbursementStatus === "complete" &&
        appPdcData?.applicantPdcDocument?.length > 0 &&
        gtrPdcData?.guarantorPdcDocument?.length > 0 &&
        loanDocumentData?.applicantBSV?.length > 0 && 
        loanDocumentData?.guarantorBSV?.length > 0 
      ){
        const updatedPd = await creditPdModel.findOneAndUpdate(
          { customerId: customerId }, // Query filter
          {
            $set: {
              branchStatus: status,
              hoRemark: remark,
            },
          },
          { new: true } // Return the updated document
        );
        await finalModel.findOneAndUpdate(
          { customerId: customerId }, // Query filter
          {
            $set: {
              fileProcessSendDisbursementStatus: "complete",
            },
          },
          { new: true } // Return the updated document
        );
        console.log(updatedPd, "updatedPd");
        if (!updatedPd) {
          return unknownError(
            res,
            "Failed to update customer status in creditPdModel"
          );
        }
         // Respond with the updated customer details
       return success(res, "disbursement send successfully");
      }else {
       return badRequest(res, "please fill disbursement form details and documents");
      }
    }

    if (type === "reject"){
       await creditPdModel.findOneAndUpdate(
        { customerId: customerId }, // Query filter
        {
          $set: {
            branchStatus: status,
            hoRemark: remark,
          },
        },
        { new: true } // Return the updated document
      );
      return success(res, "disbursement send successfully");
    }
    
  } catch (error) {
    console.error("Error in RejectByHo:", error);
    return unknownError(res, error.message || "An unexpected error occurred");
  }
};

const signEsignDocument = async (req, res) => {
  // console.log(req.Id)
  try {
    const {
      customerId,
      applicantLink,
      coapplicantLink,
      coapplicantTwoLink,
      guarantorLink,
    } = req.body;
    // console.log(req.body,"<>><><><>")
    if (!customerId || customerId.trim() === "") {
      return badRequest(res, "CustomerId is required");
    }

    const customer = await customerModel.findById(customerId);
    if (!customer) {
      return notFound(res, "Customer not found");
    }

    // Update the PD model with rejection status
    // Dynamically construct the update object
    const updateFields = {};
    if (applicantLink)
      updateFields["signEsignLink.applicantLink"] = applicantLink;
    if (coapplicantLink)
      updateFields["signEsignLink.coapplicantLink"] = coapplicantLink;
    if (coapplicantTwoLink)
      updateFields["signEsignLink.coapplicantTwoLink"] = coapplicantTwoLink;
    if (guarantorLink)
      updateFields["signEsignLink.guarantorLink"] = guarantorLink;

    const updatedPd = await finalModel.findOneAndUpdate(
      { customerId: customerId },
      { $set: updateFields },
      { new: true }
    );

    if (!updatedPd) {
      return unknownError(
        res,
        "Failed to update customer status in creditPdModel"
      );
    }

    // Respond with the updated customer details
    return success(res, "sign esign link updated successfully", updatedPd);
  } catch (error) {
    console.error("Error in RejectByHo:", error);
    return unknownError(res, error.message || "An unexpected error occurred");
  }
};

const signEsignDocumentDetails = async (req, res) => {
  // console.log(req.Id)
  try {
    const { customerId } = req.query;
    // console.log(req.body,"<>><><><>")
    if (!customerId || customerId.trim() === "") {
      return badRequest(res, "CustomerId is required");
    }

    const customer = await customerModel.findById(customerId);
    if (!customer) {
      return notFound(res, "Customer not found");
    }

    const updatedPd = await finalModel.findOne({ customerId: customerId });

    if (!updatedPd) {
      return unknownError(
        res,
        "Failed to update customer status in creditPdModel"
      );
    }

    // let links = (updatedPd?.signEsignLink && Object.keys(updatedPd.signEsignLink).length > 0) 
    // ? updatedPd.signEsignLink 
    // : updatedPd?.esignLinks;
    let links = 
    (updatedPd?.signEsignLink && Object.values(updatedPd.signEsignLink).some(val => val)) 
    ? updatedPd.signEsignLink 
    : updatedPd?.esignLinks;



    // Respond with the updated customer details
     success(res, "sign esign link details", {links});
     await processModel.findOneAndUpdate(
      { customerId },
      { $set: {
        esign:true
      } },
      { new: true }
  );
  await finalApprovalSheet(customerId)
  } catch (error) {
    console.error("Error in RejectByHo:", error);
    return unknownError(res, error.message || "An unexpected error occurred");
  }
};

// const deedpdfs = async (req, res) => {
//   try {
//     let { customerId, conditions } = req.query;

//     if (conditions === "rmDeed") {
//       const rmDeedData = await GmRmDeedPdf(customerId);

//       const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

//       const processFile = async (filePath) => {
//         let resolvedPath = path
//           .resolve(__dirname, `../../../..${filePath}`)
//           .replace(/\\/g, "/");
//         const formData = new FormData();
//         formData.append("image", fs.createReadStream(resolvedPath));
//         const response = await axios.post(uploadUrl, formData, {
//           headers: { ...formData.getHeaders() },
//         });

//         return response.data?.items;
//       };

//       const uploadedincomeSectionUrl = await processFile(rmDeedData);

//       const rmDeedPdfUrl = `${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;

//       return success(res, "PDF generated  successfully.", {
//         rmDeedPdf: rmDeedPdfUrl,
//       });
//     } else {
//       return badRequest(
//         res,
//         `Unsupported  deed types:please send correct types`
//       );
//     }
//   } catch (error) {
//     console.log(error);
//     return unknownError(res, error);
//   }
// };


const deedpdfs = async (req, res) => {
  try {
    let { customerId, conditions } = req.query;
    const partnerData = await finalModel.findOne({ customerId });
    if (!partnerData) {
      return badRequest(res, "partner's is required.");
    }
    const partnerModel = await lendersModel.findOne({
      _id: partnerData.partnerId,
    });
    if (!partnerModel) {
      return badRequest(res, "Partner not found.");
    }

    const normalizedPartnerName = (partnerModel.fullName || "")
      .trim()
      .toLowerCase();

    if (conditions === "rmDeed" &&normalizedPartnerName === "grow money capital pvt ltd") {
      const rmDeedData = await GmRmDeedPdf(customerId);

      // const uploadUrl = `${process.env.BASE_URL}v1/formData/ImageUpload`;

      // const processFile = async (filePath) => {
      //   let resolvedPath = path
      //     .resolve(__dirname, `../../../..${filePath}`)
      //     .replace(/\\/g, "/");
      //   const formData = new FormData();
      //   formData.append("image", fs.createReadStream(resolvedPath));
      //   const response = await axios.post(uploadUrl, formData, {
      //     headers: { ...formData.getHeaders() },
      //   });

      //   return response.data?.items;
      // };

      // const uploadedincomeSectionUrl = await processFile(uploadResponse.url);

      // const rmDeedPdfUrl = `${process.env.BASE_URL}${uploadedincomeSectionUrl.image}`;


      return success(res, "PDF generated  successfully.",rmDeedData);
      //   {
      //   rmDeedPdf: rmDeedData.uploadResponse,
      // });
    }
    else if (conditions === "emDeed"&&normalizedPartnerName === "grow money capital pvt ltd") {
      const rmDeedData = await GmemDeedPdf(customerId);

     


      return success(res, "PDF generated  successfully.",rmDeedData);
     
    }
      else if (conditions === "emDeed"&&normalizedPartnerName === "ratnaafin capital pvt ltd") {
          const rmDeedData = await ratnaEmDeedPdf(customerId);
          return success(res, "PDF generated  successfully.",rmDeedData);
        }
      if (conditions === "rmDeed" &&normalizedPartnerName === "fin coopers capital pvt ltd") {
      const rmDeedData = await fcplRmDeedPdf(customerId);
      return success(res, "PDF generated  successfully.",rmDeedData);
      //   {
      //   rmDeedPdf: rmDeedData.uploadResponse,
      // });
    }
     else {
      return badRequest(
        res,
        `Unsupported  partner (${partnerModel.fullName}) or Types:please send correct partner.`
      );
    }
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

// --------------------------final approval update status ----------------------------------

const updateStatus = async (req, res) => {
  try {
    const { customerId, type, status, remark } = req.query;

    if (!customerId || !type) {
      return badRequest(res, "Missing required fields: customerId or type");
    }

    const processDetails = await processModel.findOne({ customerId });
    const documentData = await lenderDocumentModel.findOne({ customerId });
    const finalData = await finalModel.findOne({ customerId  })
    const todayDate = moment().tz("Asia/Kolkata").format("YYYY-MM-DDThh:mm:ss A");

    if (type === "postDisbursement") {
      if (processDetails?.postDisbursementFormComplete) {
        await finalModel.findOneAndUpdate(
          { customerId },
          { $set: { sendToPartnerPostDisbursedStatus: "complete",
            sendToPartnerPostDisbursedDate:todayDate
           } },
          {new: true, upsert:true}
        );
        return success(res, "Post disbursement completed");
      } else {
        return badRequest(res, "Please complete post disbursement details");
      }
    }
    // console.log(finalData.disbursementZipUrl.length,"documentData?.sanctionZipUrl")
    if (type === "preDisbursement") {
      if (finalData.disbursementZipUrl.length > 0) {
        await finalModel.findOneAndUpdate(
          { customerId },
          { $set: { sendToPartnerPreDisbursedStatus: "complete",
            sendToPartnerPreDisbursedDate:todayDate
           } },
          {new: true, upsert:true}
        );
        return success(res, "Pre disbursement completed");
      } else {
        return badRequest(res, "Please complete pre disbursement details");
      }
    }
    if (type === "sanction") {
      // if (finalData.sanctionZipUrl.length > 0) {
        await finalModel.findOneAndUpdate(
          { customerId },
          { $set: { sendToPartnerSanctionStatus: "complete",
            sendToPartnerSanctionDate:todayDate
           } },
          {new: true, upsert:true}
        );
        // send email function
        await mailSendPartnerToSanction(customerId, req)
        return success(res, "Sanction completed");
      // } else {
      //   return badRequest(res, "Please complete sanction details");
      // }
    }
    if (type === "incomeSanction") {
      if (finalData.generateSanctionLatterStatus == "complete") {
        await finalModel.findOneAndUpdate(
          { customerId },
          { $set: { incomeSanctionStatus : "complete",
            incomeSanctionDate:todayDate
           } }
        );
        return success(res, "income Sanction completed");
      } else {
        return badRequest(res, "Please complete income sanction details");
      }
    }
    if (type === "reject") {
      
      await finalModel.findOneAndUpdate(
        { customerId },
        {
          $set: {
            fileProcessRejectStatus: status,
            fileProcessRejectDate: status === "complete"?todayDate:"",
            fileProcessRejectRemark: status === "complete"?remark:""
          }
        }
      );
      return success(res, `File ${status === "complete"?"Reject successfully":"Return Back"}`);
    }
    return badRequest(res, "Invalid type provided");
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

const statusList = async (req, res) => {
  try {
    const { customerId } = req.query;

    if (!customerId) {
      return badRequest(res, "Missing required fields: customerId");
    }
   const finalData = await finalModel.findOne({ customerId });
   
        return success(res, "status is fetched successfully",{
          sendToPartnerSanctionStatus: finalData?.sendToPartnerSanctionStatus || "",
          sendToPartnerPreDisbursedStatus: finalData?.sendToPartnerPreDisbursedStatus || "",
          sendToPartnerPostDisbursedStatus : finalData?.sendToPartnerPostDisbursedStatus || "",
          incomeSanctionStatus : finalData?.incomeSanctionStatus || "",
          finalSanctionStatus:finalData?.incomeSanctionStatus || "",
        });
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

    const generateLegalityDocument = async (req, res) => {
     try {
    const { customerId, links } = req.body;
    
    if (!customerId || !links) {
      return res.status(400).json({ success: false, message: "customerId and links are required" });
    }

    const selectionData = await final.findOne({ customerId });
    console.log(selectionData.pdfSelection, "selectionData<<>><<>>, selectionData");
    
    if (!selectionData || !selectionData.pdfSelection) {
      return badRequest(res, "Please select selection first");
    }

    const sectionEsign = await initESign(links, customerId);
    console.log(sectionEsign,"sectionEsign")
     // Check for error in sectionEsign response
     if (sectionEsign?.data && sectionEsign?.messages?.length > 0 && sectionEsign?.status === 0) {
      return badRequest(res, sectionEsign.messages[0].message || "Error in eSign process");
    }

    await final.findOneAndUpdate(
      {customerId},
      {
        $set:{
          esignLinks:sectionEsign
      }
    }
    )
     success(res, "Link generated successfully", { sectionEsign });
     await processModel.findOneAndUpdate(
      { customerId },
      { $set: {
        esign:true
      } },
      { new: true }
  );
  // await finalApprovalSheet(customerId)
  } catch (error) {
    console.error("Error in generateLegalityDocument:", error);
    return unknownError(res, error);
  }
};


const webhookMethod = async (req, res) => {
  try {
    const { request, documentId } = req.body;
    console.log(req.body, " salt, payload");

    const applicantData = await applicantModel.findOne({ email: request.email });
    const finalData = await final.findOne({ customerId: applicantData?.customerId });

    if (!finalData) {
      return res.status(404).json({ success: false, message: 'Customer data not found' });
    }

    // Initialize update query
    let updateQuery = {};

    // Check if documentId exists in esignLinks values
    const documentExists = Object.values(finalData.esignLinks || {}).some(value => 
      value === documentId || 
      value.applicantDocumentId === documentId || 
      value.coApplicantDocumentId === documentId
    );

    // Check if invitationUrl exists in esignLinks values
    const urlExists = Object.values(finalData.esignLinks || {}).some(value => 
      value === request.invitationUrl || 
      value.applicant === request.invitationUrl || 
      value.coApplicant === request.invitationUrl
    );

    if (documentExists) {
      if (request.action === "Signed") {
        // Get existing signEsignLinks or initialize if doesn't exist
        const existingSignLinks = finalData.signEsignLinks || {};
        
        // Get existing URLs for this documentId or initialize empty array
        const existingUrlsForDoc = existingSignLinks[documentId] || [];
        
        updateQuery = {
          $set: {
            signEsignLinks: {
              ...existingSignLinks,
              [`${documentId}`]: Array.isArray(existingUrlsForDoc) 
                ? [...existingUrlsForDoc, request.invitationUrl]
                : [request.invitationUrl]
            }
          }
        };
      } 

      // Only update if updateQuery is not empty
      if (Object.keys(updateQuery).length > 0) {
        const updatedDoc = await final.findOneAndUpdate(
          { customerId: applicantData.customerId },
          updateQuery,
          { new: true }
        );

        console.log('Updated document:', updatedDoc);
      }
    }

    res.status(200).json({ 
      success: true, 
      message: 'Webhook processed successfully'
    });

  } catch (error) {
    console.error('Error processing webhook:', error);
    const errorMessage = error.message || "An unknown error occurred";
    const errorStack = error.stack || "No stack trace available";
    
    return unknownError(res, error);
  }
};


const finalApprovalDashbord = async (req, res) => {
  try {
    const {
      regionalBranch,
      branch,
      employee,
      product,
      fileProcessStatus,
      finalApprovalStatus,
      startDateFilter: startDate,
      endDateFilter: endDate,
      pageLimit = 10000,
      pageNumber = 1,
      searchQuery,
    } = req.query;
    const { offset, limit } = paginationData(
      Number(pageLimit),
      Number(pageNumber)
    );
    const employeeId = req.Id;

    // Early employee validation with lean() for better performance
    const employeeExist = await employeModel
      .findOne({ _id: employeeId, status: "active" }, { _id: 1 })
      .lean();

    if (!employeeExist) {
      return badRequest(res, "Employee Not Found");
    }

    // Build initial match conditions
    let matchConditions = {};

    if (searchQuery) {
      matchConditions.$or = [
        { "applicantDetails.mobileNo": { $regex: searchQuery, $options: "i" } },
        {
          "applicantDetails.customerFatherName": {
            $regex: searchQuery,
            $options: "i",
          },
        },
        {
          "applicantDetails.customerFullName": {
            $regex: searchQuery,
            $options: "i",
          },
        },
        {
          "customerDetailData.customerFinId": {
            $regex: searchQuery,
            $options: "i",
          },
        },
      ];
    }

    if (regionalBranch && regionalBranch !== "all") {
      matchConditions.regionalBranch = {
        $in: (Array.isArray(regionalBranch) ? regionalBranch : regionalBranch.split(",")).map(
          (id) => new ObjectId(id)
        ),
      };
    }
    if (branch && branch !== "all") {
      matchConditions.branch = {
        $in: (Array.isArray(branch) ? branch : branch.split(",")).map(
          (id) => new ObjectId(id)
        ),
      };
    }

    if (employee && employee !== "all") {
      matchConditions["employeeDetail._id"] = {
        $in: (Array.isArray(employee) ? employee : employee.split(",")).map(
          (id) => new ObjectId(id)
        ),
      };
    }

    if (product && product !== "all") {
      matchConditions.productId = {
        $in: (Array.isArray(product) ? product : product.split(",")).map(
          (id) => new ObjectId(id)
        ),
      };
    }

    //added start and end date filter
    let dateConditions = {};
    const hasAll = [startDate, endDate].includes("all");
    if ((startDate || endDate) && !hasAll) {
      dateConditions = {
        $and: [
          ...(startDate ? [{ $gte: ["$createdAt", moment(startDate).toDate()] }] : []),
          ...(endDate ? [{ $lte: ["$createdAt", moment(endDate).toDate()] }] : []),
        ],
      };
    }
    const aggregationPipeline = [
      // Initial match to filter documents early
      {
        $match: matchConditions,
      },
      // Combine related lookups and add early filtering
      {
        $lookup: {
          from: "externalvendordynamics",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: {
                  $and: [
                    { $eq: ["$customerId", "$$customerId"] },
                    { $in: ["$statusByCreditPd", ["complete", "approve"]] },
                    { $eq: ["$fileStatus", "active"] },
                  ],
                },
              },
            },
            { $limit: 1 }, // We only need to know if it exists
          ],
          as: "externalVenderData",
        },
      },
      { $match: { "externalVenderData.0": { $exists: true } } }, // More efficient than checking array length

      // Optimize PD Form lookup
      {
        $lookup: {
          from: "pdformdatas",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: {
                  $and: [
                    { $eq: ["$customerId", "$$customerId"] },
                    { $in: ["$status", ["complete", "approve"]] },
                  ],
                },
              },
            },
            { $project: { status: 1, bdCompleteDate: 1, pdId: 1 } },
            { $limit: 1 },
          ],
          as: "pdData",
        },
      },
      { $match: { "pdData.0": { $exists: true } } },

      // Combine employee and related lookups
      {
        $lookup: {
          from: "employees",
          let: { employeId: "$employeId" },
          pipeline: [
            { $match: { $expr: { $eq: ["$_id", "$$employeId"] } } },
            {
              $lookup: {
                from: "employees",
                let: { reportingManagerId: "$reportingManagerId" },
                pipeline: [
                  {
                    $match: {
                      $expr: { $eq: ["$_id", "$$reportingManagerId"] },
                    },
                  },
                  {
                    $project: {
                      employeName: 1,
                      employeUniqueId: 1,
                      userName: 1,
                    },
                  },
                ],
                as: "manager",
              },
            },
            {
              $lookup: {
                from: "newbranches",
                let: { branchId: "$branchId" },
                pipeline: [
                  { $match: { $expr: { $eq: ["$_id", "$$branchId"] } } },
                  { $project: { name: 1 } },
                ],
                as: "branch",
              },
            },
            {
              $project: {
                employeName: 1,
                userName: 1,
                employeUniqueId: 1,
                manager: { $arrayElemAt: ["$manager", 0] },
                branch: { $arrayElemAt: ["$branch", 0] },
              },
            },
          ],
          as: "employeeDetail",
        },
      },

      // Optimize applicant details lookup
      {
        $lookup: {
          from: "applicantdetails",
          let: { customerId: "$_id" },
          pipeline: [
            { $match: { $expr: { $eq: ["$customerId", "$$customerId"] } } },
            {
              $project: {
                fullName: 1,
                fatherName: 1,
                mobileNo: 1,
                applicantPhoto: 1,
              },
            },
            { $limit: 1 },
          ],
          as: "applicantDetail",
        },
      },

      // Optimize final sanction lookup
      {
        $lookup: {
          from: "finalsanctiondetaails",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: {
                  $and: [
                    { $eq: ["$customerId", "$$customerId"] }, // Apply filter here
                    dateConditions,
                  ],
                },
              },
            },
            {
              $lookup: {
                from: "lenders",
                let: { partnerId: "$partnerId" },
                pipeline: [
                  { $match: { $expr: { $eq: ["$_id", "$$partnerId"] } } },
                  { $project: { fullName: 1 } },
                  { $limit: 1 },
                ],
                as: "lendersData",
              },
            },
            {
              $project: {
                createdAt: 1,
                fileProcessSanctionStatus: 1,
                fileProcessDisbursementStatus: 1,
                fileProcessFinalDisbursementStatus: 1,
                fileProcessSendToSanctionStatus: 1,
                fileProcessSendDisbursementStatus: 1,
                sendToPartnerPostDisbursedStatus:1,
                sendToPartnerPreDisbursedStatus:1,
                sendToPartnerSanctionStatus:1,
                incomeSanctionStatus:1,
                fileProcessRejectRemark: 1,
                lenderFullName: { $arrayElemAt: ["$lendersData.fullName", 0] },
              },
            },
            { $limit: 1 },
          ],
          as: "finalSanctionData",
        },
      },
      // {
      //   $match: {
      //     "finalSanctionData.createdAt": { $exists: true },
      //   },
      // },
      {
        $match: {
          $or:
            fileProcessStatus && fileProcessStatus !== "all"
              ? (typeof fileProcessStatus === "string"
                  ? fileProcessStatus.split(",").map((s) => s.trim())
                  : fileProcessStatus
                ).map((status) => {
                  switch (status) {
                    case "sentForSanction":
                    case "sendForSanction": // Adding support for both versions
                      return {
                        "finalSanctionData.sendToPartnerSanctionStatus":
                          "complete",
                      };
                    case "sentForDisbursement":
                      return {
                        "finalSanctionData.fileProcessDisbursementStatus":
                          "complete",
                      };
                    case "finalDisbursement":
                      return {
                        "finalSanctionData.fileProcessFinalDisbursementStatus":
                          "complete",
                      };
                    case "pending":
                      return {
                        $or: [
                          { finalSanctionData: { $size: 0 } },
                          {
                            $and: [
                              { finalSanctionData: { $ne: [] } },
                              {
                                $or: [
                                  {
                                    "finalSanctionData.sendToPartnerSanctionStatus":
                                      { $ne: "complete" },
                                  },
                                  {
                                    "finalSanctionData.fileProcessDisbursementStatus":
                                      { $ne: "complete" },
                                  },
                                  {
                                    "finalSanctionData.fileProcessFinalDisbursementStatus":
                                      { $ne: "complete" },
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      };
                    default:
                      return {};
                  }
                })
              : [{}],
        },
      },
      {
        $match: {
          $or:
            finalApprovalStatus && finalApprovalStatus !== "all"
              ? (typeof finalApprovalStatus === "string"
                  ? finalApprovalStatus.split(",").map((s) => s.trim())
                  : finalApprovalStatus
                ).map((status) => {
                  switch (status) {
                    case "incomeSanction":
                    case "incomeSanction": // Adding support for both versions
                      return {
                        "finalSanctionData.incomeSanctionStatus": "complete",
                      };
                    case "sendToPartnerSanction":
                      return {
                        "finalSanctionData.sendToPartnerSanctionStatus":
                          "complete",
                      };
                    case "sendToPartnerDisbursed":
                      return {
                        "finalSanctionData.sendToPartnerPreDisbursedStatus":
                          "complete",
                      };
                    case "disbursed":
                      return {
                        "finalSanctionData.sendToPartnerPostDisbursedStatus":
                          "complete",
                      };
                    case "pending":
                      return {
                        $or: [
                          { finalSanctionData: { $size: 0 } },
                          {
                            $and: [
                              { finalSanctionData: { $ne: [] } },
                              {
                                $or: [
                                  {
                                    "finalSanctionData.incomeSanctionStatus": {
                                      $ne: "complete",
                                    },
                                  },
                                  {
                                    "finalSanctionData.sendToPartnerSanctionStatus":
                                      { $ne: "complete" },
                                  },
                                  {
                                    "finalSanctionData.sendToPartnerPreDisbursedStatus":
                                      { $ne: "complete" },
                                  },
                                  {
                                    "finalSanctionData.sendToPartnerPostDisbursedStatus":
                                      { $ne: "complete" },
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      };
                    default:
                      return {};
                  }
                })
              : [{}],
        },
      },
      // Optimize facet operation
      {
        $facet: {
          metaData: [
            {
              $group: {
                _id: null,
                totalCases: { $sum: 1 },
                Disbursement: {
                  $sum: {
                    $cond: [
                      {
                        $and: [
                          {
                            $eq: [
                              {
                                $arrayElemAt: [
                                  "$finalSanctionData.sendToPartnerPostDisbursedStatus",
                                  0,
                                ],
                              },
                              "complete",
                            ],
                          },
                          // {
                          //   $eq: [
                          //     {
                          //       $arrayElemAt: [
                          //         "$finalSanctionData.fileProcessDisbursementStatus",
                          //         0,
                          //       ],
                          //     },
                          //     "complete",
                          //   ],
                          // },
                          // {
                          //   $eq: [
                          //     {
                          //       $arrayElemAt: [
                          //         "$finalSanctionData.fileProcessFinalDisbursementStatus",
                          //         0,
                          //       ],
                          //     },
                          //     "complete",
                          //   ],
                          // },
                        ],
                      },
                      1,
                      0,
                    ],
                  },
                },
                sentForDisbursement: {
                  $sum: {
                    $cond: [
                      {
                        $and: [
                          {
                            $eq: [
                              {
                                $arrayElemAt: [
                                  "$finalSanctionData.sendToPartnerPreDisbursedStatus",
                                  0,
                                ],
                              },
                              "complete",
                            ],
                          },
                          // {
                          //   $ne: [
                          //     {
                          //       $arrayElemAt: [
                          //         "$finalSanctionData.sendToPartnerPostDisbursedStatus",
                          //         0,
                          //       ],
                          //     },
                          //     "complete",
                          //   ],
                          // },
                          // {
                          //   $ne: [
                          //     {
                          //       $arrayElemAt: [
                          //         "$finalSanctionData.sendToPartnerSanctionStatus",
                          //         0,
                          //       ],
                          //     },
                          //     "complete",
                          //   ],
                          // },
                        ],
                      },
                      1,
                      0,
                    ],
                  },
                },
                sendForSanction: {
                  $sum: {
                    $cond: [
                      {
                        $and: [
                          {
                            $eq: [
                              {
                                $arrayElemAt: [
                                  "$finalSanctionData.sendToPartnerSanctionStatus",
                                  0,
                                ],
                              },
                              "complete",
                            ],
                          },
                          // {
                          //   $ne: [
                          //     {
                          //       $arrayElemAt: [
                          //         "$finalSanctionData.sendToPartnerPostDisbursedStatus",
                          //         0,
                          //       ],
                          //     },
                          //     "complete",
                          //   ],
                          // },
                        ],
                      },
                      1,
                      0,
                    ],
                  },
                },
                incomeSanction: {
                  $sum: {
                    $cond: [
                      {
                        $and: [
                          {
                            $eq: [
                              {
                                $arrayElemAt: [
                                  "$finalSanctionData.incomeSanctionStatus",
                                  0,
                                ],
                              },
                              "complete",
                            ],
                          },
                          // {
                          //   $ne: [
                          //     {
                          //       $arrayElemAt: [
                          //         "$finalSanctionData.fileProcessDisbursementStatus",
                          //         0,
                          //       ],
                          //     },
                          //     "complete",
                          //   ],
                          // },
                        ],
                      },
                      1,
                      0,
                    ],
                  },
                },
                reject: {
                  $sum: {
                    $cond: [
                      {
                        $eq: [
                          {
                            $arrayElemAt: [
                              "$finalSanctionData.fileProcessRejectStatus",
                              0,
                            ],
                          },
                          "complete",
                        ],
                      },
                      1,
                      0,
                    ],
                  },
                },
              },
            },
          ],
          data: [
            { $skip: offset },
            { $limit: limit },
            {
              $project: {
                _id: 1,
                employeId: 1,
                customerFinId: 1,
                mobileNo: 1,
                branch: 1,
                createdAt: 1,
                productId: 1,
                pdData: { $arrayElemAt: ["$pdData", 0] },
                employeeDetail: {
                  $let: {
                    vars: { emp: { $arrayElemAt: ["$employeeDetail", 0] } },
                    in: {
                      _id: "$$emp._id",
                      employeName: "$$emp.employeName",
                      managerName: "$$emp.manager.employeName",
                      managerUniqueId: "$$emp.manager.employeUniqueId",
                      managerUserName: "$$emp.manager.userName",
                      branchId: "$$emp.branch._id",
                      branchName: "$$emp.branch.name",
                    },
                  },
                },
                applicantDetail: { $arrayElemAt: ["$applicantDetail", 0] },
                TAT: {
                  $let: {
                    vars: {
                      bdDate: {
                        $arrayElemAt: ["$pdData.bdCompleteDate", 0],
                      },
                    },
                    in: {
                      $cond: {
                        if: { $eq: ["$$bdDate", null] },
                        else: {
                          $dateDiff: {
                            startDate: {
                              $dateFromString: {
                                dateString: {
                                  $trim: {
                                    input: {
                                      $replaceAll: {
                                        input: {
                                          $replaceAll: {
                                            input: "$$bdDate",
                                            find: " PM",
                                            replacement: "",
                                          },
                                        },
                                        find: " AM",
                                        replacement: "",
                                      },
                                    },
                                  },
                                },
                                format: "%Y-%m-%dT%H:%M:%S",
                              },
                            },
                            endDate: "$$NOW",
                            unit: "day",
                          },
                        },
                        then: null,
                      },
                    },
                  },
                },
                finalSanctionData: {
                  $let: {
                    vars: {
                      fs: { $arrayElemAt: ["$finalSanctionData", 0] },
                    },
                    in: {
                      _id: "$$fs._id",
                      lenderFullName: "$$fs.lenderFullName",
                      fileProcessRejectRemark: "$$fs.fileProcessRejectRemark",
                      createdAt: "$$fs.createdAt",
                      fileProcessStatus: {
                        $switch: {
                          branches: [
                            {
                              case: {
                                $and: [
                                  {
                                    $eq: [
                                      "$$fs.fileProcessSanctionStatus",
                                      "complete",
                                    ],
                                  },
                                  {
                                    $eq: [
                                      "$$fs.fileProcessDisbursementStatus",
                                      "complete",
                                    ],
                                  },
                                  {
                                    $eq: [
                                      "$$fs.fileProcessFinalDisbursementStatus",
                                      "complete",
                                    ],
                                  },
                                ],
                              },
                              then: "Final Disbursement",
                            },
                            {
                              case: {
                                $and: [
                                  {
                                    $eq: [
                                      "$$fs.fileProcessSanctionStatus",
                                      "complete",
                                    ],
                                  },
                                  {
                                    $eq: [
                                      "$$fs.fileProcessDisbursementStatus",
                                      "complete",
                                    ],
                                  },
                                ],
                              },
                              then: "send for Disbursement",
                            },
                          ],
                          default: "",
                        },
                      },
                      hoStatus: {
                        $switch: {
                          branches: [
                            {
                              case: {
                                $and: [
                                  {
                                    $eq: [
                                      "$$fs.fileProcessSendToSanctionStatus",
                                      "complete",
                                    ],
                                  },
                                  {
                                    $eq: [
                                      "$$fs.fileProcessSendDisbursementStatus",
                                      "complete",
                                    ],
                                  },
                                ],
                              },
                              then: "send for Disbursement",
                            },
                            {
                              case: {
                                $eq: [
                                  "$$fs.fileProcessSendToSanctionStatus",
                                  "complete",
                                ],
                              },
                              then: "send for Sanction",
                            },
                          ],
                          default: "",
                        },
                      },
                    },
                  },
                },
              },
            },
          ],
        },
      },
    ];

    const results = await customerModel
      .aggregate(aggregationPipeline)
      .allowDiskUse(true);

    // console.timeEnd("API Execution Time");

    return success(res, "customerDetails", {
      totalCount: results[0].data.length,
      userDataLength: results[0].data.length,
      userData: results,
    });
  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


const finalApprovalDashboardUpdate = async (req, res) => {
  try {
    const {
      regionalBranch,
      branch,
      product,
      selfAssignEmployee,
      startDateFilter,
      endDateFilter,
      finalApproverStatus,
      fileProcessStatus,
      pageLimit = 10000,
      pageNumber = 1,
      searchQuery,
      sanctionStage,
    } = req.query;

    const employeeId = req.Id;

    // Basic validation
    const employeeExist = await employeModel
      .findOne({ _id: employeeId, status: "active" }, { _id: 1 })
      .lean();

    if (!employeeExist) {
      return badRequest(res, "Employee Not Found");
    }

    const today = new Date();
    const defaultStartDate = new Date(today.setHours(0, 0, 0, 0));
    const defaultEndDate = new Date(today.setHours(23, 59, 59, 999));

    function formatDateToISO(date) {
      return new Date(date).toISOString();
    }

    let formattedStart = startDateFilter && startDateFilter !== "all"
      ? new Date(new Date(startDateFilter).setHours(0, 0, 0, 0))
      : defaultStartDate;

    let formattedEnd = endDateFilter && endDateFilter !== "all"
      ? new Date(new Date(endDateFilter).setHours(23, 59, 59, 999))
      : defaultEndDate;

    if (startDateFilter && endDateFilter && startDateFilter === endDateFilter) {
      formattedStart = new Date(new Date(startDateFilter).setHours(0, 0, 0, 0));
      formattedEnd = new Date(new Date(startDateFilter).setHours(23, 59, 59, 999));
    }

    formattedStart = formatDateToISO(formattedStart);
    formattedEnd = formatDateToISO(formattedEnd);

    const aggregationPipeline = [
      // Initial basic match
      {
        $match: {
          fileStatus: "active",
          statusByCreditPd: { $in: ["complete", "approve"] }
        }
      },

      // All lookups first
      {
        $lookup: {
          from: "customerdetails",
          localField: "customerId",
          foreignField: "_id",
          as: "customerDetailData"
        }
      },
      { 
        $unwind: { 
          path: "$customerDetailData",
          preserveNullAndEmptyArrays: true 
        }
      },

      {
        $lookup: {
          from: "employees",
          localField: "customerDetailData.employeId",
          foreignField: "_id",
          as: "salesPerson"
        }
      },
      {
        $unwind: {
          path: "$salesPerson",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "newbranches",
          localField: "customerDetailData.branch",
          foreignField: "_id",
          as: "branchDetails"
        }
      },
      {
        $unwind: {
          path: "$branchDetails",
          preserveNullAndEmptyArrays: true
        }
      },

      {
        $lookup: {
          from: "newbranches",
          localField: "branchDetails.regionalBranchId",
          foreignField: "_id",
          as: "regionalBranchDetails"
        }
      },
      {
        $unwind: {
          path: "$regionalBranchDetails",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "employees",
          localField: "salesPerson.reportingManagerId",
          foreignField: "_id",
          as: "reportingManager"
        }
      },
      {
        $unwind: {
          path: "$reportingManager",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "applicantdetails",
          localField: "customerId",
          foreignField: "customerId",
          as: "applicantDetails"
        }
      },
      {
        $unwind: {
          path: "$applicantDetails",
          preserveNullAndEmptyArrays: true
        }
      },

      {
        $lookup: {
          from: "employees",
          localField: "creditPdId",
          foreignField: "_id",
          as: "pdEmployeeDetail"
        }
      },
      {
        $unwind: {
          path: "$pdEmployeeDetail",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "products",
          localField: "customerDetailData.productId",
          foreignField: "_id",
          as: "productDetailData"
        }
      },
      {
        $unwind: {
          path: "$productDetailData",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "customerId",
          foreignField: "customerId",
          as: "finalsanctionData"
        }
      },
      {
        $unwind: {
          path: "$finalsanctionData",
          preserveNullAndEmptyArrays: true
        }
      },

      {
        $lookup: {
          from: "employees",
          localField: "finalsanctionData.employeeId",
          foreignField: "_id",
          as: "selfAssignEmployee"
        }
      },
      {
        $unwind: {
          path: "$selfAssignEmployee",
          preserveNullAndEmptyArrays: true
        }
      },

      {
        $lookup: {
          from: "lenders",
          localField: "finalsanctionData.partnerId",
          foreignField: "_id",
          as: "partnerDetails"
        }
      },
      {
        $unwind: {
          path: "$partnerDetails",
          preserveNullAndEmptyArrays: true
        }
      },

      {
        $lookup: {
          from: "bankstatementkycs",
          localField: "customerId",
          foreignField: "customerId",
          as: "bankstatementkycData"
        }
      },
      {
        $unwind: {
          path: "$bankstatementkycData",
          preserveNullAndEmptyArrays: true
        }
      },
      // Apply all filters after lookups
      {
        $match: {
          $and: [
            // Search query
            searchQuery ? {
              $or: [
                { "applicantDetails.mobileNo": { $regex: searchQuery, $options: "i" } },
                { "applicantDetails.fullName": { $regex: searchQuery, $options: "i" } },
                { "applicantDetails.fatherName": { $regex: searchQuery, $options: "i" } },
                { "customerDetailData.customerFinId": { $regex: searchQuery, $options: "i" } }
              ]
            } : {},

            // Branch filter
            branch && branch !== "all" ? {
              "branchDetails._id": {
                $in: (Array.isArray(branch) ? branch : branch.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},

            // Regional branch filter
            regionalBranch && regionalBranch !== "all" ? {
              "regionalBranchDetails._id": {
                $in: (Array.isArray(regionalBranch) ? regionalBranch : regionalBranch.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},

            // Product filter
            product && product !== "all" ? {
              "customerDetailData.productId": {
                $in: (Array.isArray(product) ? product : product.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},

            // SanctionStage filter
            sanctionStage ? 
              sanctionStage === "partnerNotSelect" ? 
                { "finalsanctionData.partnerId": null } : 
              sanctionStage === "sanctionDetailNotComplete" ?
                {
                  $or: [
                    { "vendors.vendorType": "legal", "vendors.statusByVendor": { $ne: "approve" } },
                    { "vendors.vendorType": "technical", "vendors.statusByVendor": { $ne: "complete" } },
                    { "vendors.vendorType": "rcu", "vendors.statusByVendor": { $ne: "notRequired" } }
                  ]
                } :
              sanctionStage === "sanctionDetailComplete" ?
                {
                  $and: [
                    { $or: [
                        { "vendors.vendorType": "legal", "vendors.statusByVendor": "approve" },
                        { "vendors": { $not: { $elemMatch: { vendorType: "legal" } } } }
                      ]
                    },
                    { $or: [
                        { "vendors.vendorType": "technical", "vendors.statusByVendor": "complete" },
                        { "vendors": { $not: { $elemMatch: { vendorType: "technical" } } } }
                      ]
                    },
                    { $or: [
                        { "vendors.vendorType": "rcu", "vendors.statusByVendor": "notRequired" },
                        { "vendors": { $not: { $elemMatch: { vendorType: "rcu" } } } }
                      ]
                    },
                    { "finalsanctionData.sendToPartnerSanctionStatus": { $ne: "complete" } }
                  ]
                } : 
                {}
              : {},

            // finalApproverStatus filter
            finalApproverStatus && finalApproverStatus !== "partnerNotSelect" ? {
              $and: finalApproverStatus.split(",").map(statusKey => ({
                [`finalsanctionData.${statusKey}`]: "complete"
              }))
            } : {},

            // Special case for finalApproverStatus=partnerNotSelect
            finalApproverStatus === "partnerNotSelect" ? {
              "finalsanctionData.partnerId": null
            } : {},

            fileProcessStatus
            ? {
                $and: fileProcessStatus.split(",").map(statusKey => ({
                  [`finalsanctionData.${statusKey}`]: "complete"
                }))
              }
            : {},

            startDateFilter && endDateFilter && startDateFilter !== "all" && endDateFilter !== "all"? {
              creditPdCompleteDate: {
                $gte: formattedStart,
                $lt: formattedEnd,
              }
            }:{},
            
            selfAssignEmployee && selfAssignEmployee !=="all"?{
              "finalsanctionData.employeeId": {
                $in: (Array.isArray(selfAssignEmployee) ? selfAssignEmployee : selfAssignEmployee.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},
            
            // Exclude specific products when no product filter
            (!product || product === "all") ? {
              "customerDetailData.productId": {
                $nin: [].map(id => new ObjectId(id))
              }
            } : {}
          ].filter(condition => Object.keys(condition).length > 0)
        }
      },

      {
        $addFields: {
          vendors: [
            // RM Vendor
            {
              vendorType: "rm",
              statusByVendor: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "rm"] }
                          }
                        },
                        in: "$$this.statusByVendor"
                      }
                    }
                  },
                  "notAssign"
                ]
              },
              fileStageStatus: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "rm"] }
                          }
                        },
                        in: "$$this.fileStageStatus"
                      }
                    }
                  },
                  ""
                ]
              }
            },
            
            // RCU Vendor
            {
              vendorType: "rcu",
              statusByVendor: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "rcu"] }
                          }
                        },
                        in: "$$this.statusByVendor"
                      }
                    }
                  },
                  "notRequired"
                ]
              },
              fileStageStatus: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "rcu"] }
                          }
                        },
                        in: "$$this.fileStageStatus"
                      }
                    }
                  },
                  ""
                ]
              }
            },
            
            // Legal Vendor
            {
              vendorType: "legal",
              statusByVendor: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "legal"] }
                          }
                        },
                        in: "$$this.statusByVendor"
                      }
                    }
                  },
                  "approve"
                ]
              },
              fileStageStatus: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "legal"] }
                          }
                        },
                        in: "$$this.fileStageStatus"
                      }
                    }
                  },
                  ""
                ]
              }
            },
            
            // Technical Vendor
            {
              vendorType: "technical",
              statusByVendor: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "technical"] }
                          }
                        },
                        in: "$$this.statusByVendor"
                      }
                    }
                  },
                  "complete"
                ]
              },
              fileStageStatus: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "technical"] }
                          }
                        },
                        in: "$$this.fileStageStatus"
                      }
                    }
                  },
                  ""
                ]
              }
            },
            
            // Tagging Vendor
            {
              vendorType: "tagging",
              statusByVendor: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "tagging"] }
                          }
                        },
                        in: "$$this.statusByVendor"
                      }
                    }
                  },
                  "WIP"
                ]
              },
              fileStageStatus: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "tagging"] }
                          }
                        },
                        in: "$$this.fileStageStatus"
                      }
                    }
                  },
                  ""
                ]
              }
            }
          ]
        }
      },
      
      
      // Add calculated fields and format vendor information
      {
        $addFields: {
          selfAssignEmployee: {$ifNull:[ "$finalsanctionData.employeeId", null]},
          esignLinks :"$finalsanctionData.esignLinks",
          esignStatus: {
            $cond: {
              if: {
                $or: [
                  { $eq: ["$finalsanctionData.esignLinks", null] },
                  { $eq: ["$finalsanctionData.esignLinks", {}] },
                  {
                    $and: [
                      { $eq: [{ $ifNull: ["$finalsanctionData.esignLinks.applicant", ""] }, ""] },
                      { $eq: [{ $ifNull: ["$finalsanctionData.esignLinks.coApplicant", ""] }, ""] },
                      { $eq: [{ $ifNull: ["$finalsanctionData.esignLinks.coApplicantTwo", ""] }, ""] }
                    ]
                  }
                ]
              },
              then: "No",
              else: "Yes"
            }
          },
          Nachlink: {
            $cond: {
              if: { 
                $or: [
                  { $eq: ["$bankstatementkycData.Nachlink", null] }, 
                  { $eq: ["$bankstatementkycData.Nachlink", ""] }
                ] 
              },
              then: "NO",
              else: "YES"
            }
          },
          finalLoanAmount:{ $ifNull: [ "$finalsanctionData.finalLoanAmount", ""]},
          tenureInMonth :{ $ifNull: [ "$finalsanctionData.tenureInMonth",""]},
          roi:{ $ifNull: ["$finalsanctionData.roi",""]},
          selfAssignStatus : {$ifNull :["$finalsanctionData.finalSenctionFileSelfAssign",false]},
          customerId: "$customerDetailData._id",
          productName: { $ifNull: ["$productDetailData.productName",""]},
          selfAssignEmployeeName: { $ifNull: ["$selfAssignEmployee.employeName",""]},
          partnerName : { $ifNull: ["$partnerDetails.fullName",""]},
          regionalBranchName: { $ifNull: ["$regionalBranchDetails.name",""]},
          branchName :{ $ifNull: ["$branchDetails.name",""]},
          loginDate: { $ifNull: ["$customerDetailData.createdAt",""]},
          customerFinId:{ $ifNull: [ "$customerDetailData.customerFinId",""]},
          customerFullName:{ $ifNull: [ "$applicantDetails.fullName",""]},
          customerFatherName:{ $ifNull: [ "$applicantDetails.fatherName",""]},
          mobileNo:{ $ifNull: [ "$applicantDetails.mobileNo",""]},
          salesPersonName: "$salesPerson.employeName",
          salesPersonManagerName: "$reportingManager.employeName",
          pdPersonName: "$pdEmployeeDetail.employeName",
          incomeSanctionStatus: { $ifNull: ["$finalsanctionData.incomeSanctionStatus", ""] },
          sendToPartnerPostDisbursedStatus: { $ifNull: ["$finalsanctionData.sendToPartnerPostDisbursedStatus", ""] },
          sendToPartnerPreDisbursedStatus: { $ifNull: ["$finalsanctionData.sendToPartnerPreDisbursedStatus", ""] },
          sendToPartnerSanctionStatus: { $ifNull: ["$finalsanctionData.sendToPartnerSanctionStatus", ""] },
          fileProcessRejectStatus: { $ifNull: ["$finalsanctionData.fileProcessRejectStatus", ""] }
        }
      },

      // Group by customerId
      {
        $group: {
          _id: "$customerId",
          customerFinId: { $first: "$customerFinId" },
          customerId: { $first: "$customerId" },
          loginDate: { $first: "$loginDate" },
          branchName: { $first: "$branchName" },
          productName: { $first: "$productName" },
          esignStatus: { $first: "$esignStatus" },
          esignLinks : { $first: "$esignLinks" },
          Nachlink: { $first: "$Nachlink" },
          selfAssignEmployeeName: { $first: "$selfAssignEmployeeName" },
          roi : { $first: "$roi" },
          tenureInMonth : { $first: "$tenureInMonth" },
          selfAssignStatus: { $first: "$selfAssignStatus" },
          finalLoanAmount : { $first: "$finalLoanAmount" },
          partnerName: { $first: "$partnerName" },
          regionalBranchName: { $first: "$regionalBranchName" },
          salesPersonName: { $first: "$salesPersonName" },
          customerFullName: { $first: "$customerFullName" },
          customerFatherName: { $first: "$customerFatherName" },
          mobileNo: { $first: "$mobileNo" },
          salesPersonManagerName: { $first: "$salesPersonManagerName" },
          pdPersonName: { $first: "$pdPersonName" },
          creditPdCompleteDate: { $first: "$creditPdCompleteDate" },
          statusByCreditPd: { $first: "$statusByCreditPd" },
          vendors: { $first: "$vendors" },
          selfAssignEmployee: { $first: "$selfAssignEmployee" },
          incomeSanctionStatus: { $first: "$incomeSanctionStatus" },
          sendToPartnerPostDisbursedStatus: { $first: "$sendToPartnerPostDisbursedStatus" },
          sendToPartnerPreDisbursedStatus: { $first: "$sendToPartnerPreDisbursedStatus" },
          sendToPartnerSanctionStatus: { $first: "$sendToPartnerSanctionStatus" },
          fileProcessRejectStatus: { $first: "$fileProcessRejectStatus" }
        }
      },

      // Facet for pagination and counts
      {
        $facet: {
          totalCases: [{ $count: "total" }],
          fileDetails: [
            { $skip: (pageNumber - 1) * pageLimit },
            { $limit: parseInt(pageLimit) }
          ],
          notAssignCount: [
            { $match: { selfAssignEmployee : null } },
            { $count: "count" }
          ],
          selfAssignCount: [
            { $match: { selfAssignEmployee: {$ne:null} } },
            { $count: "count" }
          ],
          incomeSanctionStatus: [
            { $match: { incomeSanctionStatus: "complete" } },
            { $count: "count" }
          ],
          fileProcessRejectStatus: [
            { $match: { fileProcessRejectStatus: "complete" } },
            { $count: "count" }
          ],
          sendToPartnerPostDisbursedStatus: [
            { $match: { sendToPartnerPostDisbursedStatus: "complete" } },
            { $count: "count" }
          ],
          sendToPartnerPreDisbursedStatus: [
            { $match: { sendToPartnerPreDisbursedStatus: "complete" } },
            { $count: "count" }
          ],
          sendToPartnerSanctionStatus: [
            { $match: { sendToPartnerSanctionStatus: "complete" } },
            { $count: "count" }
          ]
        }
      },

      // Format the final output
      {
        $project: {
          totalCases: { $arrayElemAt: ["$totalCases.total", 0] },
          fileDetails: 1,
          counts: {
            notAssignCount : { $arrayElemAt: ["$notAssignCount.count", 0] },
            selfAssignCount: { $arrayElemAt: ["$selfAssignCount.count", 0] },
            fileProcessRejectStatus:{ $arrayElemAt: ["$fileProcessRejectStatus.count", 0] },
            incomeSanctionStatus: { $arrayElemAt: ["$incomeSanctionStatus.count", 0] },
            sendToPartnerPostDisbursedStatus: { $arrayElemAt: ["$sendToPartnerPostDisbursedStatus.count", 0] },
            sendToPartnerPreDisbursedStatus: { $arrayElemAt: ["$sendToPartnerPreDisbursedStatus.count", 0] },
            sendToPartnerSanctionStatus: { $arrayElemAt: ["$sendToPartnerSanctionStatus.count", 0] }
          }
        }
      }
    ];

    const results = await externalVendorFormModel
      .aggregate(aggregationPipeline)
      .allowDiskUse(true);

    // Calculate pagination metadata
    const totalRecords = results[0]?.totalCases || 0;
    const currentPage = Number(pageNumber);
    const totalPages = Math.ceil(totalRecords / pageLimit);
    const hasNextPage = currentPage < totalPages;
    const hasPreviousPage = currentPage > 1;

    const {
      notAssignCount = 0,
      selfAssignCount = 0,
      incomeSanctionStatus = 0,
      fileProcessRejectStatus = 0,
      sendToPartnerPostDisbursedStatus = 0,
      sendToPartnerPreDisbursedStatus = 0,
      sendToPartnerSanctionStatus = 0,
    } = results[0]?.counts || {};

    return success(res, "customerDetails", {
      totalCount: totalRecords,
      notAssignCount,
      selfAssignCount,
      incomeSanctionStatus,
      fileProcessRejectStatus,
      sendToPartnerPostDisbursedStatus,
      sendToPartnerPreDisbursedStatus,
      sendToPartnerSanctionStatus,
      fileDetails: results[0]?.fileDetails || [],
      pagination: {
        totalRecords,
        currentPage,
        pageSize: Number(pageLimit),
        totalPages,
      }
    });

  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


const secondWebhookMethod = async (req, res) => {
  try {
    const { request, documentId } = req.body;
    console.log(req.body, " salt, payload");

    const applicantData = await applicantModel.findOne({ email: request.email });
    const finalData = await final.findOne({ customerId: applicantData?.customerId });

    if (!finalData) {
      return res.status(404).json({ success: false, message: 'Customer data not found' });
    }

    // Initialize update query
    let updateQuery = {};

    // Check if documentId exists in esignLinks values
    const documentExists = Object.values(finalData.esignLinks || {}).some(value => 
      value === documentId || 
      value.applicantDocumentId === documentId || 
      value.coApplicantDocumentId === documentId
    );

    // Check if invitationUrl exists in esignLinks values
    const urlExists = Object.values(finalData.esignLinks || {}).some(value => 
      value === request.invitationUrl || 
      value.applicant === request.invitationUrl || 
      value.coApplicant === request.invitationUrl
    );

    if (documentExists) {
      if (request.action === "Signed") {
        // Get existing signEsignLinks or initialize if doesn't exist
        const existingSignLinks = finalData.signEsignLinks || {};
        
        // Get existing URLs for this documentId or initialize empty array
        const existingUrlsForDoc = existingSignLinks[documentId] || [];
        
        updateQuery = {
          $set: {
            signEsignLinks: {
              ...existingSignLinks,
              [`${documentId}`]: Array.isArray(existingUrlsForDoc) 
                ? [...existingUrlsForDoc, request.invitationUrl]
                : [request.invitationUrl]
            }
          }
        };
      } 

      // Only update if updateQuery is not empty
      if (Object.keys(updateQuery).length > 0) {
        const updatedDoc = await final.findOneAndUpdate(
          { customerId: applicantData.customerId },
          updateQuery,
          { new: true }
        );

        console.log('Updated document:', updatedDoc);
      }
    }

    res.status(200).json({ 
      success: true, 
      message: 'Webhook processed successfully'
    });

  } catch (error) {
    console.error('Error processing webhook:', error);
    const errorMessage = error.message || "An unknown error occurred";
    const errorStack = error.stack || "No stack trace available";
    
    return unknownError(res, error);
  }
};


// check legality document is sign or not
const documentLeegilatyDetails = async (req,res) =>{
  try{
    const { customerId } = req.query

    const finalData = await final.findOne({ customerId });

    const documentId = finalData?.esignLinks?.documentId

    if(documentId)
    {  
      const response = await axios.get(
        `https://app1.leegality.com/api/v3.0/document/details?documentId=${documentId}&file=true`, // <-- Add comma here
        {
          headers: { 
            'X-Auth-Token': process.env.LEGALITY_AUTH_TOKEN
          }
        }
      );
      // console.log(response, "response<<>><<>><>>>");
      
      const pdfBase64 = response?.data?.data?.file;
      if (!pdfBase64) {
        throw new Error("No PDF data received in API response");
      }
  
      const pdfBuffer = Buffer.from(pdfBase64, "base64");
  
      console.log('XML Response:', pdfBuffer);
      // const buffer = Buffer.from(xmlBuffer, 'base64');
      const filePathInBucket = `${process.env.PATH_BUCKET}/LOS/PDF/${Date.now()}_transactions.pdf`;
      const contentType = 'application/pdf';
      const bucketName = 'finexe'; // Replace with your actual bucket name
  
      const data = await uploadToSpaces(
        bucketName,
        filePathInBucket,
        pdfBuffer,
        'public-read',
        contentType
      );
  
      // Return the uploaded file's URL
      const fileUrl = `https://cdn.fincooper.in/${filePathInBucket}`;
      // console.log('PDF uploaded successfully:', fileUrl);

      const allInvitations = response.data.data.invitations;
      if (allInvitations && allInvitations.every(invite => invite.signed === true)) {
        // console.log(fileUrl, "<><><><><><><><><><>");
    const finalData = await final.findOneAndUpdate(
      { customerId },
      {
        $set:{
          signLeegalityLink:fileUrl
        }
      },
      {
        new:true
      }
    );
    // console.log(finalData,"finalData finalData finalData finalData " )
    return success(res,"all document signed",{signedUrl: fileUrl})
      }else{
        return badRequest(res,"document is not signed")
      }

    }else {
      return badRequest(res,"document id not found")
    }

  }catch (error) {
    console.error('Error processing webhook:', error);
    const errorMessage = error.message || "An unknown error occurred";
    const errorStack = error.stack || "No stack trace available";
    
    return unknownError(res, error);
  }
}

async function getDashboardTableByEmployee1(req, res) {
  try {
    const { startDateFilter, endDateFilter } = req.query;

    const formattedStart = new Date(new Date(startDateFilter).setHours(0, 0, 0, 0));
    const formattedEnd = new Date(new Date(endDateFilter).setHours(23, 59, 59, 999));

    let dateFilter = {};
    if (startDateFilter && endDateFilter) {
      dateFilter["createdAt"] = { $gte: formattedStart, $lt: formattedEnd };
    }

    const results = await final.aggregate([
      {
        $match: {
          employeeId: { $exists: true, $ne: null },
          ...dateFilter,
        },
      },
      {
        $group: {
          _id: "$employeeId",
          sendForSanction: {
            $sum: { $cond: [{ $eq: ["$sendToPartnerSanctionStatus", "complete"] }, 1, 0] },
          },
          // disbursementComplete: {
          //   $sum: { $cond: [{ $eq: ["$fileProcessDisbursementStatus", "complete"] }, 1, 0] },
          // },
          sentForDisbursement: {
            $sum: { $cond: [{ $eq: ["$sendToPartnerPreDisbursedStatus", "complete"] }, 1, 0] },
          },
          disbursment: {
            $sum: { $cond: [{ $eq: ["$sendToPartnerPostDisbursedStatus", "complete"] }, 1, 0] },
          },
          incomeSanction: {
            $sum: { $cond: [{ $eq: ["$incomeSanctionStatus", "complete"] }, 1, 0] },
          },
          pending: {
            $sum: {
              $cond: [
                {
                  $or: [
                    { $ne: ["$sendToPartnerSanctionStatus", "complete"] },
                    { $ne: ["$sendToPartnerPreDisbursedStatus", "complete"] },
                    { $ne: ["$sendToPartnerPostDisbursedStatus", "complete"] },
                    { $ne: ["$incomeSanctionStatus", "complete"] },

                  ],
                },
                1,
                0,
              ],
            },
          },
        },
      },
      {
        $addFields: {
          total: {
            $add: [
              "$sendForSanction",
              "$sentForDisbursement",
              "$disbursment",
              "$incomeSanction",
              "$pending",
            ],
          },
        },
      },
      {
        $lookup: {
          from: "employees",
          localField: "_id",
          foreignField: "_id",
          as: "employeeInfo",
        },
      },
      {
        $unwind: {
          path: "$employeeInfo",
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $project: {
          _id: 1,
          employeeName: "$employeeInfo.employeName",
          sendForSanction: 1,
          sentForDisbursement: 1,
          disbursment: 1,
          incomeSanction:1,
          pending: 1,
          total: 1, 
        },
      },
      {
        $group: {
          _id: null,
          totalSendToSanctionComplete: { $sum: "$sendForSanction" },
          totalSendDisbursementComplete: { $sum: "$sentForDisbursement" },
          totalDisbursementComplete: { $sum: "$disbursment" },
          totalIncomeSanctionComplete: { $sum: "$incomeSanction" },
          totalPendingCases: { $sum: "$pending" },
          totalCases: { $sum: "$total" }, 
          employees: { $push: "$$ROOT" },
        },
      },
      {
        $project: {
          _id: 0,
          grandTotal: {
            sendToSanctionComplete: "$totalSendToSanctionComplete",
            sendDisbursementComplete: "$totalSendDisbursementComplete",
            DisbursementComplete: "$totalDisbursementComplete",
            IncomeSanctionComplete: "$totalIncomeSanctionComplete",
            pendingCases: "$totalPendingCases",
            totalCases: "$totalCases", 
          },
          items: "$employees",
        },
      },
    ]);

    return success(res, "Dashboard data retrieved successfully", results[0] || { grandTotal: {}, items: [] });
  } catch (error) {
    console.error("Error in getDashboardData:", error);
    return unknownError(res, error);
  }
}

const getDashboardTableByEmployee= async (req, res) => {
  try {
    const { startDateFilter, endDateFilter } = req.query;

    const formattedStart = new Date(new Date(startDateFilter).setHours(0, 0, 0, 0));
    const formattedEnd = new Date(new Date(endDateFilter).setHours(23, 59, 59, 999));

    let dateFilter = {};
    if (startDateFilter && endDateFilter) {
      dateFilter["createdAt"] = { $gte: formattedStart, $lt: formattedEnd };
    }

    const results = await final.aggregate([
      {
        $match: {
          employeeId: { $exists: true, $ne: null },
          ...dateFilter,
        },
      },
      {
        $lookup: {
          from: "externalvendordynamics",
          localField: "customerId",
          foreignField: "customerId",
          as: "externalVendorData",
          pipeline: [
            {
              $match: {
                statusByCreditPd: { $in: ["complete", "approve"] },
                fileStatus: "active",
              },
            },
          ],            
           },
      },
      {
        $match: {
          "externalVendorData": { $ne: [] },
          // "externalVendorData.statusByCreditPd": { $in: ["complete", "approve"] },
          // "externalVendorData.fileStatus": "active",
        },
      },
      {
        $group: {
          _id: "$employeeId",
          sendForSanction: {
            $sum: {
              $cond: [
                {
                  $and: [
                    { $eq: ["$sendToPartnerSanctionStatus", "complete"] },
                    // { $ne: ["$sendToPartnerPreDisbursedStatus", "complete"] },
                  ],
                },
                1,
                0,
              ],
            },
          },
          sentForDisbursement: {
            $sum: {
              $cond: [
                {
                  $and: [
                    { $eq: ["$sendToPartnerSanctionStatus", "complete"] },
                    { $eq: ["$sendToPartnerPreDisbursedStatus", "complete"] },
                    { $ne: ["$sendToPartnerPostDisbursedStatus", "complete"] },
                  ],
                },
                1,
                0,
              ],
            },
          },
          disbursment: {
            $sum: {
              $cond: [
                {
                  $and: [
                    { $eq: ["$sendToPartnerSanctionStatus", "complete"] },
                    { $eq: ["$sendToPartnerPreDisbursedStatus", "complete"] },
                    { $eq: ["$sendToPartnerPostDisbursedStatus", "complete"] },
                  ],
                },
                1,
                0,
              ],
            },
          },
          incomeSanction: {
            $sum: {
              $cond: [
                {
                  $and: [
                    { $eq: ["$incomeSanctionStatuss", "complete"] },
                   
                  ],
                },
                1,
                0,
              ],
            },
          },
          pending: {
            $sum: {
              $cond: [
                {
                  $and: [
                    { $ne: ["$sendToPartnerSanctionStatus", "complete"] },
                    { $ne: ["$sendToPartnerPreDisbursedStatus", "complete"] },
                    { $ne: ["$sendToPartnerPostDisbursedStatus", "complete"] },
                    { $ne: ["$incomeSanctionStatus", "complete"] },

                  ],
                },
                1,
                0,
              ],
            },
          },
        },
      },
      {
        $addFields: {
          total: {
            $add: [
              "$sendForSanction",
              "$sentForDisbursement",
              "$disbursment",
              "$incomeSanction",
              "$pending",
            ],
          },
        },
      },
      {
        $lookup: {
          from: "employees",
          localField: "_id",
          foreignField: "_id",
          as: "employeeInfo",
        },
      },
      {
        $unwind: {
          path: "$employeeInfo",
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $project: {
          _id: 1,
          employeeName: "$employeeInfo.employeName",
          sendForSanction: 1,
          sentForDisbursement: 1,
          disbursment: 1,
          incomeSanction:1,
          pending: 1,
          total: 1,
        },
      },
      {
        $group: {
          _id: null,
          totalSendToSanctionComplete: { $sum: "$sendForSanction" },
          totalSendDisbursementComplete: { $sum: "$sentForDisbursement" },
          totalDisbursementComplete: { $sum: "$disbursment" },
          totalIncomeSanctionComplete: { $sum: "$incomeSanction" },
          totalPendingCases: { $sum: "$pending" },
          totalCases: { $sum: "$total" },
          employees: { $push: "$$ROOT" },
        },
      },
      {
        $project: {
          _id: 0,
          grandTotal: {
            sendToSanctionComplete: "$totalSendToSanctionComplete",
            sendDisbursementComplete: "$totalSendDisbursementComplete",
            DisbursementComplete: "$totalDisbursementComplete",
            IncomeSanctionComplete: "$totalIncomeSanctionComplete",
            pendingCases: "$totalPendingCases",
            totalCases: "$totalCases",
          },
          items: "$employees",
        },
      },
    ]);

    return success(res, "Dashboard data retrieved successfully", results[0] || { grandTotal: {}, items: [] });
  } catch (error) {
    console.error("Error in getDashboardData:", error);
    return unknownError(res, error);
  }
};
const getDashboardTableByEmployee3 = async (req, res) => {
  try {
    const { startDateFilter, endDateFilter } = req.query;
    const employeeId = req.Id;

    const employeeExist = await employeModel.findOne({
      _id: employeeId,
      status: "active",
    });
    if (!employeeExist) {
      return badRequest(res, "Employee Not Found");
    }

    const formattedStart = new Date(
      new Date(startDateFilter).setHours(0, 0, 0, 0)
    );
    const formattedEnd = new Date(
      new Date(endDateFilter).setHours(23, 59, 59, 999)
    );
    let dateFilter = {};
    if (startDateFilter && endDateFilter) {
      dateFilter["createdAt"] = {
        // Correct way to assign a filter condition
        $gte: formattedStart,
        $lt: formattedEnd,
      };
    }
    console.log(dateFilter, "dateFilter");
    const data = await customerModel.aggregate([
      {
        $lookup: {
          from: "externalvendordynamics",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: { $eq: ["$customerId", "$$customerId"] },
                statusByCreditPd: { $in: ["complete", "approve"] },
                fileStatus: "active",
              },
            },
          ],
          as: "externalVenderData",
        },
      },
      {
        $match: { "externalVenderData.0": { $exists: true } },
      },
      {
        $lookup: {
          from: "pdformdatas",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: { $eq: ["$customerId", "$$customerId"] },
                status: { $in: ["complete", "approve"] },
              },
            },
          ],
          as: "pdData",
        },
      },
      {
        $match: { "pdData.0": { $exists: true } },
      },
      // {
      //   $lookup: {
      //     from: "newbranches",
      //     let: { branchId: "$branch" },
      //     pipeline: [
      //       {
      //         $match: { $expr: { $eq: ["$_id", "$$branchId"] } },
      //       },
      //     ],
      //     as: "branchData",
      //   },
      // },
      // {
      //   $unwind: {
      //     path: "$branchData",
      //     preserveNullAndEmptyArrays: true,
      //   },
      // },
      {
        $lookup: {
          from: "employees", // `employeeModel` ka collection name
          localField: "employeId",
          foreignField: "_id",
          as: "employeeDetails",
        },
      },
      {
        $unwind: {
          path: "$employeeDetails",
          preserveNullAndEmptyArrays: true, // Agar employee details na mile toh bhi result aaye
        },
      },
      {
        $lookup: {
          from: "finalsanctiondetaails",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: { $eq: ["$customerId", "$$customerId"] },
                ...dateFilter, // Applying date filter here
              },
            },
            {
              $project: {
                createdAt: 1,
                sendToPartnerSanctionStatus: 1,
                sendToPartnerPreDisbursedStatus: 1,
                sendToPartnerPostDisbursedStatus: 1,
                incomeSanctionStatus:1,
              },
            },
          ],
          as: "finalSanctionData",
        },
      },
      {
        $group: {
          _id: 1,
          employeeName: { $first: "$employeeDetails.employeName" }, // Use $first to get the value of employeeName
          totalDocuments: { $sum: 1 },
          finalSanctionData: { $push: "$finalSanctionData" },
        },
      },
      
      {
        $project: {
          _id: 1,
          branchName: 1,
          branchCode: 1,
          totalDocuments: 1,
          metaData: {
            totalCases: { $size: "$finalSanctionData" },
            finalDisbursement: {
              $size: {
                $filter: {
                  input: "$finalSanctionData",
                  as: "fsd",
                  cond: {
                    $and: [
                      {
                        $eq: [
                          {
                            $arrayElemAt: [
                              "$$fsd.sendToPartnerSanctionStatus",
                              0,
                            ],
                          },
                          "complete",
                        ],
                      },
                      {
                        $eq: [
                          {
                            $arrayElemAt: [
                              "$$fsd.sendToPartnerPreDisbursedStatus",
                              0,
                            ],
                          },
                          "complete",
                        ],
                      },
                      {
                        $eq: [
                          {
                            $arrayElemAt: [
                              "$$fsd.sendToPartnerPostDisbursedStatus",
                              0,
                            ],
                          },
                          "complete",
                        ],
                      },
                    ],
                  },
                },
              },
            },
            sentForDisbursement: {
              $size: {
                $filter: {
                  input: "$finalSanctionData",
                  as: "fsd",
                  cond: {
                    $and: [
                      {
                        $eq: [
                          {
                            $arrayElemAt: [
                              "$$fsd.sendToPartnerSanctionStatus",
                              0,
                            ],
                          },
                          "complete",
                        ],
                      },
                      {
                        $eq: [
                          {
                            $arrayElemAt: [
                              "$$fsd.sendToPartnerPreDisbursedStatus",
                              0,
                            ],
                          },
                          "complete",
                        ],
                      },
                      {
                        $ne: [
                          {
                            $arrayElemAt: [
                              "$$fsd.sendToPartnerPostDisbursedStatus",
                              0,
                            ],
                          },
                          "complete",
                        ],
                      },
                    ],
                  },
                },
              },
            },
            sendForSanction: {
              $size: {
                $filter: {
                  input: "$finalSanctionData",
                  as: "fsd",
                  cond: {
                    $and: [
                      {
                        $eq: [
                          {
                            $arrayElemAt: [
                              "$$fsd.sendToPartnerSanctionStatus",
                              0,
                            ],
                          },
                          "complete",
                        ],
                      },
                      {
                        $ne: [
                          {
                            $arrayElemAt: [
                              "$$fsd.sendToPartnerPreDisbursedStatus",
                              0,
                            ],
                          },
                          "complete",
                        ],
                      },
                    ],
                  },
                },
              },
            },
            pending: {
              $size: {
                $filter: {
                  input: "$finalSanctionData",
                  as: "fsd",
                  cond: {
                    $and: [
                      {
                        $ne: [
                          {
                            $arrayElemAt: [
                              "$$fsd.sendToPartnerSanctionStatus",
                              0,
                            ],
                          },
                          "complete",
                        ],
                      },
                      {
                        $ne: [
                          {
                            $arrayElemAt: [
                              "$$fsd.sendToPartnerPreDisbursedStatus",
                              0,
                            ],
                          },
                          "complete",
                        ],
                      },
                      {
                        $ne: [
                          {
                            $arrayElemAt: [
                              "$$fsd.sendToPartnerPostDisbursedStatus",
                              0,
                            ],
                          },
                          "complete",
                        ],
                      },
                    ],
                  },
                },
              },
            },
            total: {
              $add: [
                "$metaData.finalDisbursement",
                "$metaData.sentForDisbursement",
                "$metaData.sendForSanction",
                "$metaData.pending",
              ],
            },
          },
        },
      },
    ]);

    return success(res, "PD Files employee Table Dashboard", {
      status: true,
      message: "Table Dashboard",
      data,
    });
  } catch (error) {
    console.error("Dashboard API Error:", error);
    return res
      .status(500)
      .json({ message: "Internal server error", error: error.toString() });
  }
};

// const getDashboardTableByEmployee = async (req, res) => {
//   try {
//     const { startDateFilter, endDateFilter } = req.query;

//     // Format start and end dates
//     const formattedStart = new Date(new Date(startDateFilter).setHours(0, 0, 0, 0));
//     const formattedEnd = new Date(new Date(endDateFilter).setHours(23, 59, 59, 999));

//     let dateFilter = {};
//     if (startDateFilter && endDateFilter) {
//       dateFilter["createdAt"] = { $gte: formattedStart, $lt: formattedEnd };
//     }

//     const results = await finalSanctionModel.aggregate([
//       // Match documents with optional date filter and required employeeId
//       {
//         $match: {
//           employeeId: { $exists: true, $ne: null },
//           ...dateFilter,
//         },
//       },
//       // Lookup externalVendorDynamic collection to join with finalSanctionModel
//       {
//         $lookup: {
//           from: "externalvendordynamics",
//           localField: "customerId", // Assuming finalSanctionModel._id matches externalVendorDynamic.customerId
//           foreignField: "customerId",
//           as: "externalVendorData",
//         },
//       },
//       // Filter results based on external vendor conditions
//       {
//         $match: {
//           "externalVendorData": { $ne: [] }, // Only include documents with related externalVendorData
//           "externalVendorData.statusByCreditPd": { $in: ["complete", "approve"] },
//           "externalVendorData.fileStatus": "active",
//         },
//       },
//       // Group by employeeId and calculate aggregates
//       {
//         $group: {
//           _id: "$employeeId",
//           sendForSanction: {
//             $sum: { $cond: [{ $eq: ["$sendToPartnerSanctionStatus", "complete"] }, 1, 0] },
//           },
//           // disbursementComplete: {
//           //   $sum: { $cond: [{ $eq: ["$fileProcessDisbursementStatus", "complete"] }, 1, 0] },
//           // },
//           sentForDisbursement: {
//             $sum: { $cond: [{ $eq: ["$sendToPartnerPreDisbursedStatus", "complete"] }, 1, 0] },
//           },
//           disbursment: {
//             $sum: { $cond: [{ $eq: ["$fileProcessFinalDisbursementStatus", "complete"] }, 1, 0] },
//           },
//           incomeSanction: {
//             $sum: { $cond: [{ $eq: ["$incomeSanctionStatus", "complete"] }, 1, 0] },
//           },
//           pending: {
//             $sum: {
//               $cond: [
//                 {
//                   $or: [
//                     { $ne: ["$sendToPartnerSanctionStatus", "complete"] },
//                     { $ne: ["$sendToPartnerPreDisbursedStatus", "complete"] },
//                     { $ne: ["$fileProcessFinalDisbursementStatus", "complete"] },
//                     { $ne: ["$incomeSanctionStatus", "complete"] },

//                   ],
//                 },
//                 1,
//                 0,
//               ],
//             },
//           },
//         },
//       },
//       // Add a total field for each employee's aggregates
//       {
//         $addFields: {
//           total: {
//             $add: [
//               "$sendForSanction",
//               "$sentForDisbursement",
//               "$disbursment",
//               "$incomeSanction",
//               "$pending",
//             ],
//           },
//         },
//       },
//       // Lookup employee details from employees collection
//       {
//         $lookup: {
//           from: "employees",
//           localField: "_id",
//           foreignField: "_id",
//           as: "employeeInfo",
//         },
//       },
//       // Unwind employeeInfo array to simplify structure
//       {
//         $unwind: {
//           path: "$employeeInfo",
//           preserveNullAndEmptyArrays: true,
//         },
//       },
//       // Project fields for each employee
//       {
//         $project: {
//           _id: 1,
//           employeeName: "$employeeInfo.employeName",
//           sendForSanction: 1,
//           sentForDisbursement: 1,
//           finalDisbursement: 1,
//           pending: 1,
//           total: 1,
//         },
//       },
//       // Group all data into a summary with grand totals and employee-level data
//       {
//         $group: {
//           _id: null,
//           totalSendToSanctionComplete: { $sum: "$sendForSanction" },
//           totalSendDisbursementComplete: { $sum: "$sentForDisbursement" },
//           totalDisbursementComplete: { $sum: "$disbursment" },
//           totalIncomeSanctionComplete: { $sum: "$incomeSanction" },
//           totalPendingCases: { $sum: "$pending" },
//           totalCases: { $sum: "$total" }, 
//           employees: { $push: "$$ROOT" },
//         },
//       },
//       // Project final structure
//       {
//         $project: {
//           _id: 0,
//           grandTotal: {
//             sendToSanctionComplete: "$totalSendToSanctionComplete",
//             sendDisbursementComplete: "$totalSendDisbursementComplete",
//             DisbursementComplete: "$totalDisbursementComplete",
//             IncomeSanctionComplete: "$totalIncomeSanctionComplete",
//             pendingCases: "$totalPendingCases",
//             totalCases: "$totalCases", 
//           },
//           items: "$employees",
//         },
//       },
//     ]);

//     // Return the response
//     return success(res, "Dashboard data retrieved successfully", results[0] || { grandTotal: {}, items: [] });
//   } catch (error) {
//     console.error("Error in getDashboardData:", error);
//     return unknownError(res, error);
//   }
// };


async function getDashboardDataByProduct(req, res) {
  try {
    const { startDateFilter, endDateFilter } = req.query;

    const formattedStart = new Date(new Date(startDateFilter).setHours(0, 0, 0, 0));
    const formattedEnd = new Date(new Date(endDateFilter).setHours(23, 59, 59, 999));

    let dateFilter = {};
    if (startDateFilter && endDateFilter) {
      dateFilter["createdAt"] = { $gte: formattedStart, $lt: formattedEnd };
    }

    const results = await final.aggregate([
      {
        $match: {
          employeeId: { $exists: true, $ne: null },
          ...dateFilter,
        },
      },
      {
        $group: {
          _id: "$employeeId",
          sendToSanctionComplete: {
            $sum: { $cond: [{ $eq: ["$fileProcessSendToSanctionStatus", "complete"] }, 1, 0] },
          },
          // disbursementComplete: {
          //   $sum: { $cond: [{ $eq: ["$fileProcessDisbursementStatus", "complete"] }, 1, 0] },
          // },
          sendDisbursementComplete: {
            $sum: { $cond: [{ $eq: ["$fileProcessSendDisbursementStatus", "complete"] }, 1, 0] },
          },
          finalDisbursementComplete: {
            $sum: { $cond: [{ $eq: ["$fileProcessFinalDisbursementStatus", "complete"] }, 1, 0] },
          },
          pendingCases: {
            $sum: {
              $cond: [
                {
                  $or: [
                    { $ne: ["$fileProcessSendToSanctionStatus", "complete"] },
                    // { $ne: ["$fileProcessDisbursementStatus", "complete"] },
                    { $ne: ["$fileProcessSendDisbursementStatus", "complete"] },
                    { $ne: ["$fileProcessFinalDisbursementStatus", "complete"] },
                  ],
                },
                1,
                0,
              ],
            },
          },
        },
      },
      {
        $lookup: {
          from: "customerdetails",
          localField: "_id",
          foreignField: "employeId",
          as: "customerInfo",
        },
      },
      {
        $unwind: {
          path: "$customerInfo",
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $lookup: {
          from: "products",
          localField: "customerInfo.productId",
          foreignField: "_id",
          as: "productInfo",
        },
      },
      {
        $unwind: {
          path: "$productInfo",
          preserveNullAndEmptyArrays: true,
        },
      },
      {
        $group: {
          _id: "$_id",
          productName: { $first: "$productInfo.productName" }, 
          sendForSanction: { $first: "$sendToSanctionComplete" },
          // disbursementComplete: { $first: "$disbursementComplete" },
          sentForDisbursement: { $first: "$sendDisbursementComplete" },
          finalDisbursement: { $first: "$finalDisbursementComplete" },
          pending: { $first: "$pendingCases" },
          total: {
            $first: {
              $add: [
                "$sendToSanctionComplete",
                "$sendDisbursementComplete",
                "$finalDisbursementComplete",
                "$pendingCases",
              ],
            },
          },
        },
      },
      {
        $group: {
          _id: null,
          totalSendToSanctionComplete: { $sum: "$sendForSanction" },
          totalSendDisbursementComplete: { $sum: "$sentForDisbursement" },
          totalFinalDisbursementComplete: { $sum: "$finalDisbursement" },
          totalPendingCases: { $sum: "$pending" },
          totalCases: { $sum: "$total" },
          items: { $push: "$$ROOT" },
        },
      },
      {
        $project: {
          _id: 0,
          grandTotal: {
            sendForSanction: "$totalSendToSanctionComplete",
            sentForDisbursement: "$totalSendDisbursementComplete",
            finalDisbursement: "$totalFinalDisbursementComplete",
            pending: "$totalPendingCases",
            total: "$totalCases",
          },
          items: "$items",
        },
      },
    ]);

    return success(res, "Dashboard data retrieved successfully", results[0] || { grandTotal: {}, items: [] });
  } catch (error) {
    console.error("Error in getDashboardData:", error);
    return unknownError(res, error);
  }
}


async function disbursementEstampDelete(req, res) {
  try {
    const { customerId, estampId } = req.query;

    if (!mongoose.Types.ObjectId.isValid(customerId) || !mongoose.Types.ObjectId.isValid(estampId)) {
      return badRequest(res ,"Invalid customerId or estampId" );
    }

    const disbursementRecord = await disbursementModel.findOne({ customerId });
    if (!disbursementRecord) {
      return badRequest(res, "Customer not found");
    }

    const estampExists = disbursementRecord.estampRequirement.some(estamp => estamp._id.toString() === estampId);
    if (!estampExists) {
      return badRequest(res, "Estamp ID not found");
    }

    const updatedDisbursement = await disbursementModel.findOneAndUpdate(
      { customerId },
      { $pull: { estampRequirement: { _id: estampId } } },
      { new: true }
    );

    return success(res ,"Estamp Requirement deleted successfully",{ data: updatedDisbursement});
  } catch (error) {
    console.error("Error deleting estampRequirement:", error);
    return unknownError(res, error);
  }
}

const finalApprovalFilterApi = async(req,res) =>{
  try{
    const { pageLimit, pageNumber, search } = req.query;
    const { offset, limit } = paginationData(pageLimit, pageNumber);

    console.log("api test------", offset, limit);
    // Build search filter
    const searchFilter = {};
    if (search) {
      searchFilter.$or = [
        { "nearestBranchData.name": { $regex: search, $options: "i" } },
        { "branchDetail.name": { $regex: search, $options: "i" } },
        { "applicantDetail.fullName": { $regex: search, $options: "i" } }, // Applicant name (case-insensitive)
        { customerFinId: { $regex: search, $options: "i" } },
        {
          $expr: {
            $regexMatch: {
              input: { $toString: "$mobileNo" }, // Convert numeric field to string
              regex: search,
              options: "i",
            },
          },
        }, // Mobile number as string (case-insensitive)
      ];
    }
    console.time("API Execution Time");

    const results = await customerModel.aggregate([
      // Lookup pdData with filtered pipeline
      {
        $lookup: {
          from: "externalvendordynamics",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: { $eq: ["$customerId", "$$customerId"] },
                statusByCreditPd: { $in: ["complete", "approve"] },
                fileStatus: { $in: ["active"] },
              },
            },
            {
              $project: {
                customerId: 1,
                statusByCreditPd: 1,
                fileStatus: 1,
              },
            },
          ],
          as: "externalVenderData",
        },
      },
      { $match: { externalVenderData: { $ne: [] } } },
      {
        $lookup: {
          from: "pdformdatas",
          let: { customerId: "$_id" },
          pipeline: [
            
            {
              $project: {
                status: 1,
                bdCompleteDate: 1,
                pdId: 1,
                hoStatus: 1,
                hoRemark: 1,
                defaultStatus: 1,
                fileProcessStatus: 1,
                branchStatus: 1,
              },
            },
          ],
          as: "pdData",
        },
      },
      // Match customers with pdData
      { $match: { pdData: { $ne: [] } } },
      {
        $lookup: {
          from: "employees",
          let: { pdId: { $arrayElemAt: ["$pdData.pdId", 0] } }, // Lookup using the first pdId
          pipeline: [
            { $match: { $expr: { $eq: ["$_id", "$$pdId"] } } },
            { $project: { employeName: 1 } },
          ],
          as: "pdCompleteDetails",
        },
      },
      // Lookup employeeDetail and branchDetail in one go
      {
        $lookup: {
          from: "employees",
          let: { employeeId: "$employeId" },
          pipeline: [
            { $match: { $expr: { $eq: ["$_id", "$$employeeId"] } } },
            {
              $project: {
                employeName: 1,
                userName: 1,
                employeUniqueId: 1,
                reportingManagerId: 1,
                branchId: 1,
              },
            },
          ],
          as: "employeeDetail",
        },
      },
      // Lookup salesManagerDetails
      {
        $lookup: {
          from: "employees",
          let: {
            reportingManagerId: {
              $arrayElemAt: ["$employeeDetail.reportingManagerId", 0],
            },
          },
          pipeline: [
            { $match: { $expr: { $eq: ["$_id", "$$reportingManagerId"] } } },
            { $project: { employeName: 1, employeUniqueId: 1, userName: 1 } },
          ],
          as: "salesManagerDetails",
        },
      },
      // Lookup branchDetail
      {
        $lookup: {
          from: "newbranches",
          let: { branchId: { $arrayElemAt: ["$employeeDetail.branchId", 0] } },
          pipeline: [
            { $match: { $expr: { $eq: ["$_id", "$$branchId"] } } },
            { $project: { name: 1 } },
          ],
          as: "branchDetail",
        },
      },
      // Lookup applicantDetail
      {
        $lookup: {
          from: "applicantdetails",
          localField: "_id",
          foreignField: "customerId",
          pipeline: [
            {
              $project: {
                fullName: 1,
                fatherName: 1,
                mobileNo: 1,
                applicantPhoto: 1,
                applicantAddress: "$permanentAddress.addressLine1",
              },
            },
          ],
          as: "applicantDetail",
        },
      },
      // Lookup cibildetailDetail
      {
        $lookup: {
          from: "cibildetails",
          localField: "_id",
          foreignField: "customerId",
          pipeline: [{ $project: { applicantCibilScore: 1 } }],
          as: "cibildetailDetail",
        },
      },
      // Lookup finalSanctionData with nested employee details
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "_id",
          foreignField: "customerId",
          pipeline: [
            {
              $lookup: {
                from: "employees",
                localField: "employeeId",
                foreignField: "_id",
                as: "employeeDetail",
              },
            },
            {
              $addFields: {
                isEmployeeIdMissing: {
                  $not: { $ifNull: ["$employeeId", false] },
                },
                esignLinkStatus: {
                  $cond: [
                    {
                      $and: [
                        { $eq: [{ $type: "$esignLink" }, "array"] },
                        {
                          $gt: [{ $size: { $ifNull: ["$esignLink", []] } }, 0],
                        },
                      ],
                    },
                    "Yes",
                    "No",
                  ],
                },
              },
            },
          ],
          as: "finalSanctionData",
        },
      },
      {
        $lookup: {
          from: "bankstatementkycs",
          localField: "_id",
          foreignField: "customerId",
          pipeline: [
            { $match: { Nachlink: { $nin: ["", null] } } }, // Filter out empty/null Nachlink earlier
            { $project: { Nachlink: 1 } },
          ],
          as: "bankStatementKycDetail",
        },
      },

      // Add field to check if Nachlink exists
      {
        $addFields: {
          hasNachLink: {
            $cond: {
              if: { $gt: [{ $size: "$bankStatementKycDetail" }, 0] },
              then: true,
              else: false,
            },
          },
        },
      },
      {
        $lookup: {
          from: "externalvendordynamics",
          localField: "_id",
          foreignField: "customerId",
          as: "externalVendorDetail",
          pipeline: [
            {
              $project: {
                vendors: {
                  $map: {
                    input: "$vendors",
                    as: "vendor",
                    in: {
                      vendorType: "$$vendor.vendorType",
                      statusByVendor: "$$vendor.statusByVendor",
                    },
                  },
                },
              },
            },
          ],
        },
      },
      // Final Projection
      {
        $project: {
          _id: 1,
          employeId: 1,
          productId: 1,
          customerFinId: 1,
          mobileNo: 1,
          executiveName: 1,
          "externalVenderData.customerId": 1,
          "externalVenderData.statusByCreditPd": 1,
          "externalVenderData.fileStatus": 1,
          "pdData.fileProcessStatus": 1,
          "pdData.branchStatus": 1,
          "pdData.branchStatus": 1,
          "pdData.status": 1,
          "pdData.bdCompleteDate": 1,
          "pdData.hoStatus": 1,
          "pdData.hoRemark": 1,
          "pdData.defaultStatus": 1,
          "pdData.fileProcessStatus": 1,
          "pdCompleteDetails.employeName": 1,
          "employeeDetail.employeName": {
            $arrayElemAt: ["$employeeDetail.employeName", 0],
          },
          "employeeDetail.userName": {
            $arrayElemAt: ["$employeeDetail.userName", 0],
          },
          "employeeDetail.employeUniqueId": {
            $arrayElemAt: ["$employeeDetail.employeUniqueId", 0],
          },
          "salesManagerDetails.employeName": {
            $arrayElemAt: ["$salesManagerDetails.employeName", 0],
          },
          "salesManagerDetails.employeUniqueId": {
            $arrayElemAt: ["$salesManagerDetails.employeUniqueId", 0],
          },
          "salesManagerDetails.userName": {
            $arrayElemAt: ["$salesManagerDetails.userName", 0],
          },
          "branchDetail.name": { $arrayElemAt: ["$branchDetail.name", 0] },
          "applicantDetail.fullName": {
            $arrayElemAt: ["$applicantDetail.fullName", 0],
          },
          "applicantDetail.fatherName": {
            $arrayElemAt: ["$applicantDetail.fatherName", 0],
          },
          "applicantDetail.mobileNo": {
            $arrayElemAt: ["$applicantDetail.mobileNo", 0],
          },
          "applicantDetail.applicantPhoto": {
            $arrayElemAt: ["$applicantDetail.applicantPhoto", 0],
          },
          "applicantDetail.applicantAddress": {
            $arrayElemAt: ["$applicantDetail.applicantAddress", 0],
          },
          "cibildetailDetail.applicantCibilScore": {
            $arrayElemAt: ["$cibildetailDetail.applicantCibilScore", 0],
          },
          finalSanctionData: {
            _id: { $arrayElemAt: ["$finalSanctionData._id", 0] },
            status: { $arrayElemAt: ["$finalSanctionData.status", 0] },
            employeeId: { $arrayElemAt: ["$finalSanctionData.employeeId", 0] },
            employeeDetail: {
              employeName: {
                $arrayElemAt: [
                  {
                    $arrayElemAt: [
                      "$finalSanctionData.employeeDetail.employeName",
                      0,
                    ],
                  },
                  0,
                ],
              },
            },
            finalLoanAmount: {
              $arrayElemAt: ["$finalSanctionData.finalLoanAmount", 0],
            },
            roi: { $arrayElemAt: ["$finalSanctionData.roi", 0] },
            tenureInMonth: {
              $arrayElemAt: ["$finalSanctionData.tenureInMonth", 0],
            },
            selfAssignStatus: {
              $cond: {
                if: {
                  $gt: [
                    { $arrayElemAt: ["$finalSanctionData.employeeId", 0] },
                    null,
                  ],
                },
                then: true,
                else: false,
              },
            },
            esignLinkStatus: {
              $cond: {
                if: {
                  $and: [
                    {
                      $eq: [
                        {
                          $type: {
                            $arrayElemAt: ["$finalSanctionData.esignLink", 0],
                          },
                        },
                        "array",
                      ],
                    },
                    {
                      $gt: [
                        {
                          $size: {
                            $ifNull: [
                              {
                                $arrayElemAt: [
                                  "$finalSanctionData.esignLink",
                                  0,
                                ],
                              },
                              [],
                            ],
                          },
                        },
                        0,
                      ],
                    },
                  ],
                },
                then: "Yes",
                else: "No",
              },
            },
          },
          hasNachLink: 1,
          externalVendorDetail: {
            $arrayElemAt: ["$externalVendorDetail.vendors", 0],
          },
        },
      },
      { $match: searchFilter },
      {
        $skip: offset,
      },
      {
        $limit: limit,
      },
    ]);
    // const finalData = await creditPdModel.findOne({customerId: "676f8a4f4e55f86160f1804d"})
    // console.log(finalData,"finalData")
    // Fetch total count without pagination for accurate results
    const totalCount = await customerModel.aggregate([
      // Lookup pdData with filtered pipeline
      {
        $lookup: {
          from: "externalvendordynamics",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: { $eq: ["$customerId", "$$customerId"] },
                statusByCreditPd: { $in: ["complete", "approve"] },
                fileStatus: { $in: ["active"] },
              },
            },
            {
              $project: {
                customerId: 1,
                statusByCreditPd: 1,
                fileStatus: 1,
              },
            },
          ],
          as: "externalVenderData",
        },
      },
      { $match: { externalVenderData: { $ne: [] } } },
      {
        $lookup: {
          from: "pdformdatas",
          let: { customerId: "$_id" },
          pipeline: [
            {
              $match: {
                $expr: {
                  $and: [
                    { $eq: ["$customerId", "$$customerId"] },
                    // { $in: ["$status", ["complete", "approve"]] },
                  ],
                },
              },
            },
            {
              $project: {
                status: 1,
                bdCompleteDate: 1,
                pdId: 1,
                hoStatus: 1,
                hoRemark: 1,
                defaultStatus: 1,
                fileProcessStatus: 1,
                branchStatus: 1,
              },
            },
          ],
          as: "pdData",
        },
      },
      { $match: { pdData: { $ne: [] } } },
      { $match: searchFilter },
    ]);

    // Respond with success
    res.status(200).json({
      success: true,
      totalCount: totalCount.length,
      userDataLength: results.length,
      userData: results,
    });
 
    return success(res ,"Estamp Requirement deleted successfully");
  } catch (error) {
    console.error("Error deleting estampRequirement:", error);
    return unknownError(res, error);
  }
}

//roshni code 
const testDigioApi1 = async (req, res) => {
  try {
    // Fetch PDF from URL
    const pdfUrl = 'https://cdn.fincooper.in/PROD/LOS/PDF/IncomeSanctionLetter1739773256381.pdf';
    
    console.log('Attempting to fetch PDF from:', pdfUrl);
    
    let pdfResponse;
    try {
      pdfResponse = await axios({
        method: 'get',
        url: pdfUrl,
        responseType: 'arraybuffer',
        timeout: 30000, // 30 second timeout
        maxContentLength: 10 * 1024 * 1024, // 10MB max size
        headers: {
          'Accept': 'application/pdf'
        }
      });
      console.log('PDF fetched successfully, size:', pdfResponse.data.length);
    } catch (pdfError) {
      console.error('Error fetching PDF:', pdfError.message);
      return unknownError(res, { message: 'Failed to fetch PDF file' });
    }

  // Convert PDF to base64 and verify the conversion
  const base64Data = Buffer.from(pdfResponse.data, 'binary').toString('base64');
  console.log('Base64 conversion completed, length:', base64Data.length);

    // Prepare the request body
    const requestBody = {
      signers: [{
        identifier: "roshniraikwar@fincoopers.in",
        name: "Roshni Raikwar",
        sign_type: "aadhaar",
        reason: "Testing signature"
      }],
      expire_in_days: 10,
      display_on_page: "custom",
      notify_signers: true,
      send_sign_link: true,
      generate_access_token: true,
      file_name: "IncomeSanctionLetter.pdf",
      file_data: base64Data,  // Using the actual PDF data
      sign_coordinates: {
        "6261439001": {
          "1": [{
            llx: 376.55510204081634,
            lly: 67.89677419354838,
            urx: 535.8943577430973,
            ury: 129.36122241086588
          }]
        }
      },
      estamp_request: {
        tags: {
          estamp_tag_name: "quantity"
        },
        sign_on_page: "ALL",
        note_content: "This is dummy content",
        note_on_page: "ALL"
      }
    };

    // Make the API call to Digio
    const digioResponse = await axios({
      method: 'post',
      url: 'https://api.digio.in/v2/client/document/uploadpdf',
      headers: {
        'accept': 'application/json',
        'content-type': 'application/json',
        'x-session': 'SIDWMHPBWRWXWTIVVBOZOCJKYRXXQDUS'
      },
      data: requestBody
    });

    // Return the success response
    return success(res, "Document uploaded successfully", digioResponse.data);

  } catch (error) {
    // Enhanced error logging
    if (error.response) {
      // The request was made and the server responded with a status code
      console.error("Error response:", {
        status: error.response.status,
        data: error.response.data
      });
    } else if (error.request) {
      // The request was made but no response was received
      console.error("No response received:", error.request);
    } else {
      // Something happened in setting up the request
      console.error("Error setting up request:", error.message);
    }
    return unknownError(res, error);
  }
};

//my updated code
async function testDigioApi3(pdfUrl, aadhaarNumber) {
  try {
      const response = await axios.post(
          "https://ext.digio.in/api/v1/esign/initiate",
          {
              document_url: 'https://cdn.fincooper.in/PROD/LOS/PDF/IncomeSanctionLetter1739773256381.pdf', // Direct PDF URL
              signer_aadhaar: ``, // Aadhaar Number of Signer
              // redirect_url: "https://yourwebsite.com/esign-callback", // Redirect after Signing
              redirect_url: "google.com", // Redirect after Signing

              reason: "Loan Approval Document", // Signing Reason
              notify_signer: true, // Send OTP to Signer
          },
          
          {
              headers: {
                  "Authorization": `Basic ${Buffer.from(`${process.env.DIGIO_CLIENT_ID}:${process.env.DIGIO_CLIENT_SECRET}`).toString("base64")}`,
                  "Content-Type": "application/json",
              },
          }
      );

      return response.data;
  } catch (error) {
      console.error("eSign Initiation Failed:", error.response?.data || error.message);
  }
}


const DIGIO_CLIENT_ID = "ACK2501221719453279F1NVXROSOOFW5";
const DIGIO_CLIENT_SECRET = "ZV1PJIVZ9LXQYZI8UQ4Y9QG6HB4TB7DJ";
// const DIGIO_ESIGN_URL = "https://api.digio.in/v2/client/document/uploadpdf";
const DIGIO_ESIGN_URL = "https://ext.digio.in/v3/client/esign/link";

const PDF_URL = "https://cdn.fincooper.in/PROD/LOS/PDF/IncomeSanctionLetter1739773256381.pdf";


// async function testDigioApi(){
//   try {
//     console.log("📢 Starting eSign process...");

//     // Step 1: Request Payload
//     const requestData = {
//         client_id: DIGIO_CLIENT_ID,
//         document: {
//             document_url: PDF_URL,
//             document_type: "PDF",
//             esign: {
//                 provider: "digio", // Aadhaar-based eSign
//                 signer: {
//                     identifier_type: "aadhaar",
//                     identifier: "123412341234", // Aadhaar number (Replace dynamically)
//                     reason: "Loan Agreement Signature",
//                     location: "Mumbai, India",
//                 },
//                 signature_position: {
//                     page_number: 2, // जिस पेज पर साइन करना है
//                     x: 200, // X-coordinates (Pixels)
//                     y: 500, // Y-coordinates (Pixels)
//                 },
//             },
//         },
//         signer: {
//             name: "Rahul Sharma",
//             email: "rahul@example.com",
//             mobile: "9876543210",
//         },
//     };

//     console.log("📨 Sending request to Digio API...", JSON.stringify(requestData, null, 2));

//     // Step 2: API Call
//     const response = await axios.post(DIGIO_ESIGN_URL, requestData, {
//         auth: {
//             username: DIGIO_CLIENT_ID,
//             password: DIGIO_CLIENT_SECRET,
//         },
//         headers: {
//             "Content-Type": "application/json",
//         },
//     });

//     console.log("✅ eSign Link Generated Successfully:", response.data);

//     return response.data; // Response contains the eSign link
// }  catch (error) {
//         console.error("Error generating eSign link:", error.response?.data || error.message);
//     }
// }

const testDigioApii = async (req, res) => {
  try {
    const pdfUrl = 'https://cdn.fincooper.in/PROD/LOS/PDF/IncomeSanctionLetter1739773256381.pdf';
    console.log('Attempting to fetch PDF from:', pdfUrl);

    let pdfResponse;
    try {
      pdfResponse = await axios({
        method: 'get',
        url: pdfUrl,
        responseType: 'arraybuffer',
        timeout: 30000,
        maxContentLength: 10 * 1024 * 1024, // 10MB max size
        headers: {
          'Accept': 'application/pdf'
        }
      });
      console.log('PDF fetched successfully, size:', pdfResponse.data);
    } catch (pdfError) {
      console.error('Error fetching PDF:', pdfError.message);
      return unknownError(res, { message: 'Failed to fetch PDF file' });
    }

    // Convert PDF to base64
    const base64Data = Buffer.from(pdfResponse.data, 'binary').toString('base64');
    console.log('Base64 conversion completed, length:', base64Data.length);

    // Digio API credentials from environment variables
    const digioClientId = process.env.DIGIO_CLIENT_ID;
    const digioClientSecret = process.env.DIGIO_CLIENT_SECRET;

    if (!digioClientId || !digioClientSecret) {
      console.error("Digio credentials are missing in environment variables.");
      return unknownError(res, { message: "Server misconfiguration: Missing Digio credentials" });
    }

    // Generate Basic Auth Token
    const authToken = Buffer.from(`${digioClientId}:${digioClientSecret}`).toString('base64');

    // Prepare the request body
    const requestBody = {
      signers: [{
        identifier: "akashsharma199425@gmail.com",
        name: "akash sharma",
        sign_type: "aadhaar",
        reason: "Testing signature"
      }],
      expire_in_days: 10,
      display_on_page: "custom",
      notify_signers: true,
      send_sign_link: true,
      generate_access_token: true,
      file_name: "IncomeSanctionLetter.pdf",
      file_data: base64Data, // Using the actual PDF data
      sign_coordinates: {
        "6261439001": {
          "1": [{
            llx: 376.55510204081634,
            lly: 67.89677419354838,
            urx: 535.8943577430973,
            ury: 129.36122241086588
          }]
        }
      },
      // estamp_request: {
      //   // tags: {
      //   //   estamp_tag_name: 1
      //   // },
      //   sign_on_page: "ALL",
      //   note_content: "This is dummy content",
      //   note_on_page: "ALL"
      // }
    };

    // Make the API call to Digio
    const digioResponse = await axios({
      method: 'post',
      url: 'https://api.digio.in/v2/client/document/uploadpdf',
      headers: {
        'accept': 'application/json',
        'content-type': 'application/json',
        'Authorization': `Basic ${authToken}`
      },
      data: requestBody
    });

    // Return the success response
    return success(res, "Document uploaded successfully", digioResponse.data);

  } catch (error) {
    // Enhanced error logging
    if (error.response) {
      console.error("Error response:", {
        status: error.response.status,
        data: error.response.data
      });
    } else if (error.request) {
      console.error("No response received:", error.request);
    } else {
      console.error("Error setting up request:", error.message);
    }
    return unknownError(res, error);
  }
};



// Upload signature on e-sign // 


// const testDigioApi = async (req, res) => { 
//   try {

//           // Digio API credentials from environment variables
//           const digioClientId = process.env.DIGIO_CLIENT_ID;
//           const digioClientSecret = process.env.DIGIO_CLIENT_SECRET;
//     // Extract P
//     // 
//     // DF data from request body if available
//     // const pdfData = ""

//     // // Digio API credentials from environment variables
//     // const digioClientId = process.env.DIGIO_CLIENT_ID;
//     // const digioClientSecret = process.env.DIGIO_CLIENT_SECRET;

//     const pdfData = ""
//     if (!digioClientId || !digioClientSecret) {
//       console.error("Digio credentials are missing in environment variables.");
//       return res.status(500).json({ message: "Server misconfiguration: Missing Digio credentials" });
//     }

//     // Generate Basic Auth Token
//     const authToken = Buffer.from(`${digioClientId}:${digioClientSecret}`).toString('base64');

//     console.log('Auth token:', authToken);

//     // Prepare the request body
//     const requestBody = {
  
//       "signers": [{
//         "identifier": "9482202991",
//         "name": "Mohini Khokane",
//         "sign_type": "aadhaar",
//         "reason": "eMandate"
//       }],
//       "expire_in_days": 10,
//       "display_on_page": "custom",
//       "notify_signers": true,
//       "send_sign_link": true,
//       "file_name": "Test.pdf",
//       "file_data": "<JVBERi0xLjMNCiXi48/TDQoNCjEgMCBvYmoNCjw8DQovVHlwZSAvQ2F0YWxvZw0KL091dGxpbmVzIDIgMCBSDQovUGFnZXMgMyAwIFINCj4+DQplbmRvYmoNCg0KMiAwIG9iag0KPDwNCi9UeXBlIC9PdXRsaW5lcw0KL0NvdW50IDANCj4+DQplbmRvYmoNCg0KMyAwIG9iag0KPDwNCi9UeXBlIC9QYWdlcw0KL0NvdW50IDINCi9LaWRzIFsgNCAwIFIgNiAwIFIgXSANCj4+DQplbmRvYmoNCg0KNCAwIG9iag0KPDwNCi9UeXBlIC9QYWdlDQovUGFyZW50IDMgMCBSDQovUmVzb3VyY2VzIDw8DQovRm9udCA8PA0KL0YxIDkgMCBSIA0KPj4NCi9Qcm9jU2V0IDggMCBSDQo+Pg0KL01lZGlhQm94IFswIDAgNjEyLjAwMDAgNzkyLjAwMDBdDQovQ29udGVudHMgNSAwIFINCj4+DQplbmRvYmoNCg0KNSAwIG9iag0KPDwgL0xlbmd0aCAxMDc0ID4+DQpzdHJlYW0NCjIgSg0KQlQNCjAgMCAwIHJnDQovRjEgMDAyNyBUZg0KNTcuMzc1MCA3MjIuMjgwMCBUZA0KKCBBIFNpbXBsZSBQREYgRmlsZSApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY4OC42MDgwIFRkDQooIFRoaXMgaXMgYSBzbWFsbCBkZW1vbnN0cmF0aW9uIC5wZGYgZmlsZSAtICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNjY0LjcwNDAgVGQNCigganVzdCBmb3IgdXNlIGluIHRoZSBWaXJ0dWFsIE1lY2hhbmljcyB0dXRvcmlhbHMuIE1vcmUgdGV4dC4gQW5kIG1vcmUgKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA2NTIuNzUyMCBUZA0KKCB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDYyOC44NDgwIFRkDQooIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNjE2Ljg5NjAgVGQNCiggdGV4dC4gQW5kIG1vcmUgdGV4dC4gQm9yaW5nLCB6enp6ei4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNjA0Ljk0NDAgVGQNCiggbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDU5Mi45OTIwIFRkDQooIEFuZCBtb3JlIHRleHQuIEFuZCBtb3JlIHRleHQuICkgVGoNCkVUDQpCVA0KL0YxIDAwMTAgVGYNCjY5LjI1MDAgNTY5LjA4ODAgVGQNCiggQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA1NTcuMTM2MCBUZA0KKCB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBFdmVuIG1vcmUuIENvbnRpbnVlZCBvbiBwYWdlIDIgLi4uKSBUag0KRVQNCmVuZHN0cmVhbQ0KZW5kb2JqDQoNCjYgMCBvYmoNCjw8DQovVHlwZSAvUGFnZQ0KL1BhcmVudCAzIDAgUg0KL1Jlc291cmNlcyA8PA0KL0ZvbnQgPDwNCi9GMSA5IDAgUiANCj4+DQovUHJvY1NldCA4IDAgUg0KPj4NCi9NZWRpYUJveCBbMCAwIDYxMi4wMDAwIDc5Mi4wMDAwXQ0KL0NvbnRlbnRzIDcgMCBSDQo+Pg0KZW5kb2JqDQoNCjcgMCBvYmoNCjw8IC9MZW5ndGggNjc2ID4+DQpzdHJlYW0NCjIgSg0KQlQNCjAgMCAwIHJnDQovRjEgMDAyNyBUZg0KNTcuMzc1MCA3MjIuMjgwMCBUZA0KKCBTaW1wbGUgUERGIEZpbGUgMiApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY4OC42MDgwIFRkDQooIC4uLmNvbnRpbnVlZCBmcm9tIHBhZ2UgMS4gWWV0IG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA2NzYuNjU2MCBUZA0KKCBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSB0ZXh0LiBBbmQgbW9yZSApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY2NC43MDQwIFRkDQooIHRleHQuIE9oLCBob3cgYm9yaW5nIHR5cGluZyB0aGlzIHN0dWZmLiBCdXQgbm90IGFzIGJvcmluZyBhcyB3YXRjaGluZyApIFRqDQpFVA0KQlQNCi9GMSAwMDEwIFRmDQo2OS4yNTAwIDY1Mi43NTIwIFRkDQooIHBhaW50IGRyeS4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gQW5kIG1vcmUgdGV4dC4gKSBUag0KRVQNCkJUDQovRjEgMDAxMCBUZg0KNjkuMjUwMCA2NDAuODAwMCBUZA0KKCBCb3JpbmcuICBNb3JlLCBhIGxpdHRsZSBtb3JlIHRleHQuIFRoZSBlbmQsIGFuZCBqdXN0IGFzIHdlbGwuICkgVGoNCkVUDQplbmRzdHJlYW0NCmVuZG9iag0KDQo4IDAgb2JqDQpbL1BERiAvVGV4dF0NCmVuZG9iag0KDQo5IDAgb2JqDQo8PA0KL1R5cGUgL0ZvbnQNCi9TdWJ0eXBlIC9UeXBlMQ0KL05hbWUgL0YxDQovQmFzZUZvbnQgL0hlbHZldGljYQ0KL0VuY29kaW5nIC9XaW5BbnNpRW5jb2RpbmcNCj4+DQplbmRvYmoNCg0KMTAgMCBvYmoNCjw8DQovQ3JlYXRvciAoUmF2ZSBcKGh0dHA6Ly93d3cubmV2cm9uYS5jb20vcmF2ZVwpKQ0KL1Byb2R1Y2VyIChOZXZyb25hIERlc2lnbnMpDQovQ3JlYXRpb25EYXRlIChEOjIwMDYwMzAxMDcyODI2KQ0KPj4NCmVuZG9iag0KDQp4cmVmDQowIDExDQowMDAwMDAwMDAwIDY1NTM1IGYNCjAwMDAwMDAwMTkgMDAwMDAgbg0KMDAwMDAwMDA5MyAwMDAwMCBuDQowMDAwMDAwMTQ3IDAwMDAwIG4NCjAwMDAwMDAyMjIgMDAwMDAgbg0KMDAwMDAwMDM5MCAwMDAwMCBuDQowMDAwMDAxNTIyIDAwMDAwIG4NCjAwMDAwMDE2OTAgMDAwMDAgbg0KMDAwMDAwMjQyMyAwMDAwMCBuDQowMDAwMDAyNDU2IDAwMDAwIG4NCjAwMDAwMDI1NzQgMDAwMDAgbg0KDQp0cmFpbGVyDQo8PA0KL1NpemUgMTENCi9Sb290IDEgMCBSDQovSW5mbyAxMCAwIFINCj4+DQoNCnN0YXJ0eHJlZg0KMjcxNA0KJSVFT0YNCg==>",
   
//       "sign_coordinates": {
//         "9482202991": {
//           "1": [{
//             "llx": 380.5,
//             "lly": 696.41,
//             "urx": 540.81,
//             "ury": 737.01
//           }],
//           "2": [{
//             "llx": 148.14,
//             "lly": 784.73,
//             "urx": 308.46,
//             "ury": 825.33
//           }]
//         }
//       }
//   };

//     const pdfUrl = 'https://api.digio.in/v2/client/document/uploadpdf';
//     console.log('Attempting to send PDF to:', pdfUrl);

//     // Make an API request using axios
//     const response = await axios.post(pdfUrl, requestBody, {
//       headers: {
//         'accept': 'application/json',
//         'content-type': 'application/json',
//         'Authorization': `Basic ${authToken}`
//       }
//     });

//     console.log("API Response:", response);
//     return res.status(200).json(response.data);

//   } catch (error) {
//     console.error('Error in Signature:', error.response?.data || error.message);
//     return res.status(500).json({ message: "Internal Server Error", error: error.message });
//   }
// };

const pdfUrl = `https://cdn.fincooper.in/PROD/LOS/PDF/IncomeSanctionLetter1739773256381.pdf`;
const digioClientId = process.env.DIGIO_CLIENT_ID;
const digioClientSecret = process.env.DIGIO_CLIENT_SECRET;
const https = require("https");


async function fetchPdfAsBase64(url) {
  return new Promise((resolve, reject) => {
      https.get(url, (response) => {
          let data = [];
          response.on("data", (chunk) => data.push(chunk));
          response.on("end", () => {
              const buffer = Buffer.concat(data);
              resolve(buffer.toString("base64")); // Convert to Base64
          });
      }).on("error", (err) => reject(err));
  });
}

// Function to get Digio access token
async function getDigioAccessToken() {
  try {
      
      return Buffer.from(`${digioClientId}:${digioClientSecret}`).toString('base64'); // Token return kar raha hai
      console.log( Buffer.from(`${digioClientId}:${digioClientSecret}`).toString('base64'),"token")
  } catch (error) {
      console.error("Error getting Digio access token:", error.response?.data || error.message);
      throw new Error("Failed to fetch Digio access token");
  }
}


// const testDigioApi_done = async (req, res) => { 
//   try {
//     const { customerId } = req.query;
    
//     const finalData = await finalModel.findOne({ customerId });

//     const ratnaapdf = finalData?.ratnaPdfUrls;
//     console.log("ratnaapdf", ratnaapdf);

//     pdfSelections =finalData?.pdfSelection;
//     console.log("pdfSelection", pdfSelection);

//     if (!ratnaapdf) {
//       return res.status(400).json({ success: false, error: "No PDF URLs found" });
//     }

//     // Step 1: token generate karenge
//     const accessToken = await getDigioAccessToken();
//     console.log(accessToken, "accessToken");

//     // Step 2: Convert PDFs to Base64**
//     const pdfData = {
//       sectionLatter: ratnaapdf.sectionLatter,
//       applicantionLatter: ratnaapdf.applicantionLatter,
//       LdAndPdDeed: ratnaapdf.LdAndPdDeed
//     };

//     // har ek page par kaha-2 sign karvana he vo batayenge
//     const signPages = {
//       sectionLatter: [1, 5, 6, 7, 8],
//       applicantionLatter: [2, 4, 7, 5, 9, 11],
//       LdAndPdDeed: [15, 17, 19]
//     };

//     let uploadedDocs = {};

//     for (const [pdfName, pdfUrl] of Object.entries(pdfData)) {
//       const base64PDF = await fetchPdfAsBase64(pdfUrl);

//       // **Dynamically Generate Sign Coordinates for Each Page**
//       let signCoordinates = {};
//       const pages = signPages[pdfName];

//       if (!pages) continue;

//       pages.forEach(page => {
//         signCoordinates["sagarsamediya@fincoopers.in"] = signCoordinates["sagarsamediya@fincoopers.in"] || {};
//         signCoordinates["sagarsamediya@fincoopers.in"][page] = [
//           {
//             "llx": 376.55,
//             "lly": 67.89,
//             "urx": 535.89,
//             "ury": 129.36
//           }
//         ];

//         // signCoordinates["akashsharma199425@gmail.com"] = signCoordinates["akashsharma199425@gmail.com"] || {};
//         // signCoordinates["akashsharma199425@gmail.com"][page] = [
//         //   {
//         //     "llx": 376.55,
//         //     "lly": 67.89,
//         //     "urx": 535.89,
//         //     "ury": 129.36
//         //   }
//         // ];
//       });

//       const payload = {
//         signers: [
//           {
//             identifier: "sagarsamediya@fincoopers.in",
//             name: "John Doe",
//             sign_type: "aadhaar",
//             reason: "Approving the document",
//           }
//           // ,
//           // {
//           //   identifier: "akashsharma199425@gmail.com",
//           //   name: "akash",
//           //   sign_type: "aadhaar",
//           //   reason: "Approving the document",
//           // }
//         ],
//         expire_in_days: 10,
//         display_on_page: "custom",
//         notify_signers: true,
//         send_sign_link: true,
//         generate_access_token: true,
//         file_name: `${pdfName}.pdf`,
//         file_data: base64PDF,
//         sign_coordinates: signCoordinates,
//         estamp_request: null
//       };

//       console.log(payload, `payload for ${pdfName}`);

//       const response = await axios.post("https://api.digio.in/v2/client/document/uploadpdf", payload, {
//         headers: {
//           'accept': 'application/json',
//           'content-type': 'application/json',
//           'Authorization': `Basic ${accessToken}`
//         }
//       });

//       const docId = response.data.id;
//       console.log(`docId for ${pdfName}`, docId);
//       uploadedDocs[pdfName] = docId;  
//     }

//     await finalModel.findOneAndUpdate(
//       { customerId }, 
//       { ratnaDocument_ids: uploadedDocs }, 
//       { new: true, upsert: true }
//     );

//     res.json({ success: true, data: uploadedDocs });

//   } catch (error) {
//     console.error("Error uploading PDFs:", error.response?.data || error.message);
//     res.status(500).json({ success: false, error: error.message });
//   }
// };

const testDigioApi_done1 = async (req, res) => {
  try {
    const { customerId } = req.query;
    const applicantData = await applicantModel.findOne({customerId})
    const coAppData = await coApplicantModel.find({customerId})
    const guarantorData = await guarantorModel.findOne({ customerId })
    const finalData = await finalModel.findOne({ customerId });

    const ratnaapdf = finalData?.ratnaPdfUrls;
    console.log("ratnaapdf", ratnaapdf);

    const pdfSelections = finalData?.pdfSelection;
    console.log("pdfSelection", pdfSelections);

    if (!ratnaapdf) {
      return res.status(400).json({ success: false, error: "No PDF URLs found" });
    }

    // Step 1: Token generate karenge
    const accessToken = await getDigioAccessToken();
    console.log(accessToken, "accessToken");

    // Step 2: Convert PDFs to Base64
    const pdfData = {
      sectionLatter: ratnaapdf.sectionLatter,
      applicantionLatter: ratnaapdf.applicantionLatter,
      LdAndPdDeed: ratnaapdf.LdAndPdDeed
    };

    // Sign Pages ko `pdfSelections` ke basis par set karenge
    // const signPages = {
    //         sectionLatter: [1, 5, 6, 7, 8],
    //         applicantionLatter: [2, 4, 7, 5, 9, 11],
    //         LdAndPdDeed: [15, 17, 19]
    //       };

    let signPages = {};

    switch (pdfSelections) {
      case "accg":
        signPages = {
          sectionLatter: [1, 5, 6, 7, 8],
          applicantionLatter: [2, 4, 7, 9, 10, 11],
          LdAndPdDeed: [11, 14, 17]
        };
        break;
      case "acg":
        signPages = {
          sectionLatter: [1, 3, 5, 6, 9],
          applicantionLatter: [2, 5, 6, 10, 11],
          LdAndPdDeed: [10, 11, 12]
        };
        break;
      case "acc":
        signPages = {
          sectionLatter: [2, 6, 7, 8, 10],
          applicantionLatter: [1, 3, 7, 9, 11],
          LdAndPdDeed: [15, 16, 17]
        };
        break;
      case "ac":
        signPages = {
          sectionLatter: [3, 5, 7, 9, 11],
          applicantionLatter: [4, 8, 12, 16, 10],
          LdAndPdDeed: [10, 15, 17]
        };
        break;
      default:
        signPages = {
          sectionLatter: [],
          applicantionLatter: [],
          LdAndPdDeed: []
        };
        break;
    }

    let uploadedDocs = {};

    for (const [pdfName, pdfUrl] of Object.entries(pdfData)) {
      const base64PDF = await fetchPdfAsBase64(pdfUrl);
      let signCoordinates = {};
      const pages = signPages[pdfName];

      if (!pages) continue;

      pages.forEach(page => {

        //applicant
        signCoordinates[applicantData?.email] = signCoordinates[applicantData?.email] || {};
        signCoordinates[applicantData?.email][page] = [
          {
            "llx": 376.55,
            "lly": 67.89,
            "urx": 535.89,
            "ury": 129.36,
            
          }
        ];

        //coApplicant 1
        signCoordinates[coAppData?.[0].email] = signCoordinates[coAppData?.[0].email] || {};
        signCoordinates[coAppData?.[0].email][page] = [
          {
            "llx": 376.55,
            "lly": 67.89,
            "urx": 535.89,
            "ury": 129.36,
            
          }
        ];

        //coApplicant 2

        signCoordinates[coAppData?.[1].email] = signCoordinates[coAppData?.[1].email] || {};
        signCoordinates[coAppData?.[1].email][page] = [
          {
            "llx": 376.55,
            "lly": 67.89,
            "urx": 535.89,
            "ury": 129.36,
            
          }
        ];

        //gaurantor

        signCoordinates[guarantorData?.email] = signCoordinates[guarantorData?.email] || {};
        signCoordinates[guarantorData?.email][page] = [
          {
            "llx": 376.55,
            "lly": 67.89,
            "urx": 535.89,
            "ury": 129.36,
            
          }
        ];

      });

      const payload = {
        signers: [
          {
            identifier: applicantData?.email,
            name: applicantData?.fullName,
            sign_type: "aadhaar",
            reason: "Approving the document",
          },
          {
            identifier: coAppData?.[0].email,
            name: coAppData?.[0].fullName,
            sign_type: "aadhaar",
            reason: "Approving the document",
          },
          {
            identifier: coAppData?.[1].email,
            name: coAppData?.[1].fullName,
            sign_type: "aadhaar",
            reason: "Approving the document",
          },
          {
            identifier: guarantorData?.email,
            name: guarantorData?.fullName,
            sign_type: "aadhaar",
            reason: "Approving the document",
          }
        ],
        expire_in_days: 10,
        display_on_page: "custom",
        notify_signers: true,
        send_sign_link: true,
        generate_access_token: true,
        file_name: `${pdfName}.pdf`,
        file_data: base64PDF,
        sign_coordinates: signCoordinates,
        estamp_request: null
      };

      console.log(payload, `payload for ${pdfName}`);

      // const response = await axios.post("https://api.digio.in/v2/client/document/uploadpdf", payload, {
      //   headers: {
      //     'accept': 'application/json',
      //     'content-type': 'application/json',
      //     'Authorization': `Basic ${accessToken}`
      //   }
      // });

      const response = await axios.post("https://api.digio.in/v2/client/document/uploadpdf", payload, {
                headers: {
                  'accept': 'application/json',
                  'content-type': 'application/json',
                  'Authorization': `Basic ${accessToken}`
                }
              });

      const docId = response.data.id;
      console.log(`docId for ${pdfName}`, docId);
      uploadedDocs[pdfName] = docId;  
    }

    await finalModel.findOneAndUpdate(
      { customerId }, 
      { ratnaDocument_ids: uploadedDocs }, 
      { new: true, upsert: true }
    );

    res.json({ success: true, data: uploadedDocs });

  } catch (error) {
    console.error("Error uploading PDFs:", error.response?.data || error.message);
    res.status(500).json({ success: false, error: error.message });
  }
};

const testDigioApi_done2 = async (req, res) => {
  try {
    const { customerId } = req.query;
    const applicantData = await applicantModel.findOne({ customerId });
    const coAppData = await coApplicantModel.find({ customerId });
    const guarantorData = await guarantorModel.findOne({ customerId });
    const finalData = await finalModel.findOne({ customerId });

    const ratnaapdf = finalData?.ratnaPdfUrls;
    console.log("ratnaapdf", ratnaapdf);

    const pdfSelections = finalData?.pdfSelection;
    console.log("pdfSelection", pdfSelections);

    const coappSelections = coAppData?.[1]?.email;
    console.log("coappSelections", coappSelections);

    if (!ratnaapdf) {
      return res.status(400).json({ success: false, error: "No PDF URLs found" });
    }

    const accessToken = await getDigioAccessToken();
    console.log(accessToken, "accessToken");

    const pdfData = {
      sectionLatter: ratnaapdf.sectionLatter,
      applicantionLatter: ratnaapdf.applicantionLatter,
      LdAndPdDeed: ratnaapdf.LdAndPdDeed
    };

    let signPages = {};

    switch (pdfSelections) {
      case "accg":
        signPages = {
          sectionLatter: [1, 5, 6, 7, 8],
          applicantionLatter: [2, 4, 7, 9, 10, 11],
          LdAndPdDeed: [11, 14, 17]
        };
        break;
      case "acg":
        signPages = {
          sectionLatter: [1, 3, 5, 6, 9],
          applicantionLatter: [2, 5, 6, 10, 11],
          LdAndPdDeed: [10, 11, 12]
        };
        break;
      case "acc":
        signPages = {
          sectionLatter: [2, 6, 7, 8, 10],
          applicantionLatter: [1, 3, 7, 9, 11],
          LdAndPdDeed: [15, 16, 17]
        };
        break;
      case "ac":
        signPages = {
          sectionLatter: [3, 5, 7, 9, 11],
          applicantionLatter: [4, 8, 12, 16, 10],
          LdAndPdDeed: [10, 15, 17]
        };
        break;
      default:
        signPages = {
          sectionLatter: [],
          applicantionLatter: [],
          LdAndPdDeed: []
        };
        break;
    }

    let uploadedDocs = {};

    for (const [pdfName, pdfUrl] of Object.entries(pdfData)) {
      const base64PDF = await fetchPdfAsBase64(pdfUrl);
      let signCoordinates = {};
      const pages = signPages[pdfName];

      if (!pages) continue;

      pages.forEach(page => {
        signCoordinates[applicantData?.email] = signCoordinates[applicantData?.email] || {};
        signCoordinates[applicantData?.email][page] = [{  llx: 50, lly: 60, urx: 150, ury: 120}];

        signCoordinates[coAppData?.[0]?.email] = signCoordinates[coAppData?.[0]?.email] || {};
        signCoordinates[coAppData?.[0]?.email][page] = [{ llx: 180, lly: 60, urx: 280, ury: 120 }];

        signCoordinates[coAppData?.[1]?.email] = signCoordinates[coAppData?.[1]?.email] || {};
        signCoordinates[coAppData?.[1]?.email][page] = [{ llx: 310, lly: 60, urx: 410, ury: 120}];

        signCoordinates[guarantorData?.email] = signCoordinates[guarantorData?.email] || {};
        signCoordinates[guarantorData?.email][page] = [{ llx: 440, lly: 60, urx: 540, ury: 120 }];
      });

      const payload = {
        signers: [
          { identifier: applicantData?.email, name: applicantData?.fullName, sign_type: "aadhaar", reason: "Approving the document" },
          { identifier: coAppData?.[0]?.email, name: coAppData?.[0]?.fullName, sign_type: "aadhaar", reason: "Approving the document" },
          { identifier: coAppData?.[1]?.email, name: coAppData?.[1]?.fullName, sign_type: "aadhaar", reason: "Approving the document" },
          { identifier: guarantorData?.email, name: guarantorData?.fullName, sign_type: "aadhaar", reason: "Approving the document" }
        ],
        expire_in_days: 10,
        display_on_page: "custom",
        notify_signers: true,
        send_sign_link: true,
        generate_access_token: true,
        file_name: `${pdfName}.pdf`,
        file_data: base64PDF,
        sign_coordinates: signCoordinates,
        estamp_request: null
      };

      console.log(payload, `payload for ${pdfName}`);

      const response = await axios.post("https://api.digio.in/v2/client/document/uploadpdf", payload, {
        headers: {
          'accept': 'application/json',
          'content-type': 'application/json',
          'Authorization': `Basic ${accessToken}`
        }
      });

      const docId = response.data.id;
      console.log(`docId for ${pdfName}`, docId);
      uploadedDocs[pdfName] = docId;
    }

    await finalModel.findOneAndUpdate(
      { customerId }, 
      { ratnaDocument_ids: uploadedDocs }, 
      { new: true, upsert: true }
    );

    res.json({ success: true, data: uploadedDocs });
  } catch (error) {
    console.error("Error uploading PDFs:", error.response?.data || error.message);
    res.status(500).json({ success: false, error: error.message });
  }
}

const testDigioApi_done = async (req, res) => {
  try {
    const { customerId } = req.query;
    const applicantData = await applicantModel.findOne({ customerId });
    const coAppData = await coApplicantModel.find({ customerId });
    const guarantorData = await guarantorModel.findOne({ customerId });
    const finalData = await finalModel.findOne({ customerId });

    const ratnaapdf = finalData?.ratnaPdfUrls;
    const pdfSelections = finalData?.pdfSelection;
    if (!ratnaapdf) {
      return res.status(400).json({ success: false, error: "No PDF URLs found" });
    }

    const accessToken = await getDigioAccessToken();

    const pdfData = {
      sectionLatter: ratnaapdf.sectionLatter,
      applicantionLatter: ratnaapdf.applicantionLatter,
      LdAndPdDeed: ratnaapdf.LdAndPdDeed
    };

    let signPages = {
      accg: {
        sectionLatter: [1, 5, 6, 7, 8],
        applicantionLatter: [2, 4, 7, 9, 10, 11],
        LdAndPdDeed: [11, 14, 17]
      },
      acg: {
        sectionLatter: [1, 3, 5, 6, 9],
        applicantionLatter: [2, 5, 6, 10, 11],
        LdAndPdDeed: [10, 11, 12]
      },
      acc: {
        sectionLatter: [2, 6, 7, 8, 10],
        applicantionLatter: [1, 3, 7, 9, 11],
        LdAndPdDeed: [15, 16, 17]
      },
      ac: {
        sectionLatter: [3, 5, 7, 9, 11],
        applicantionLatter: [4, 8, 12, 16, 10],
        LdAndPdDeed: [10, 15, 17]
      }
    };

    let uploadedDocs = {};
    for (const [pdfName, pdfUrl] of Object.entries(pdfData)) {
      const base64PDF = await fetchPdfAsBase64(pdfUrl);
      let signCoordinates = {};
      const pages = signPages[pdfSelections]?.[pdfName] || [];
      
      if (!pages.length) continue;
      
      pages.forEach(page => {
        if (pdfSelections.includes('a')) {
          signCoordinates[applicantData?.mobileNo] = { [page]: [{ llx: 50, lly: 60, urx: 150, ury: 120 }] };
        }
        // if (pdfSelections.includes('a')) {
        //   signCoordinates[applicantData?.email] = { [page]: [{ llx: 50, lly: 60, urx: 150, ury: 120 }] };
        // }
        if (pdfSelections.includes('c')) {
          signCoordinates[coAppData?.[0]?.mobileNo] = { [page]: [{ llx: 180, lly: 60, urx: 280, ury: 120 }] };
        }
        if (pdfSelections.includes('c') && coAppData?.[1]) {
          signCoordinates[coAppData?.[1]?.mobileNo] = { [page]: [{ llx: 310, lly: 60, urx: 410, ury: 120 }] };
        }
        if (pdfSelections.includes('g')) {
          signCoordinates[guarantorData?.mobileNo] = { [page]: [{ llx: 440, lly: 60, urx: 540, ury: 120 }] };
        }
      });

      let signers = [];
      if (pdfSelections.includes('a')) {
        signers.push({ identifier: applicantData?.mobileNo, name: applicantData?.fullName, sign_type: "aadhaar", reason: "Approving the document" });
      }
      if (pdfSelections.includes('c')) {
        signers.push({ identifier: coAppData?.[0]?.mobileNo, name: coAppData?.[0]?.fullName, sign_type: "aadhaar", reason: "Approving the document" });
      }
      if (pdfSelections.includes('c') && coAppData?.[1]) {
        signers.push({ identifier: coAppData?.[1]?.mobileNo, name: coAppData?.[1]?.fullName, sign_type: "aadhaar", reason: "Approving the document" });
      }
      if (pdfSelections.includes('g')) {
        signers.push({ identifier: guarantorData?.mobileNo, name: guarantorData?.fullName, sign_type: "aadhaar", reason: "Approving the document" });
      }

      const payload = {
        signers,
        expire_in_days: 10,
        display_on_page: "custom",
        notify_signers: true,
        send_sign_link: true,
        generate_access_token: true,
        file_name: `${pdfName}.pdf`,
        file_data: base64PDF,
        sign_coordinates: signCoordinates,
        estamp_request: null
      };

      console.log(payload, `payload for ${pdfName}`);

      const response = await axios.post("https://api.digio.in/v2/client/document/uploadpdf", payload, {
        headers: {
          'accept': 'application/json',
          'content-type': 'application/json',
          'Authorization': `Basic ${accessToken}`
        }});
      uploadedDocs[pdfName] = response.data.id;
    }

    await finalModel.findOneAndUpdate(
      { customerId },
      { ratnaDocument_ids: uploadedDocs },
      { new: true, upsert: true });

    res.json({ success: true, data: uploadedDocs });
  } catch (error) {
    console.error("Error uploading PDFs:", error.response?.data || error.message);
    res.status(500).json({ success: false, error: error.message });
  }
};

const documentId = "DID250224175111745PKBXNLAFFJK3US";  


const isBase64 = (str) => {
  try {
      return Buffer.from(str, "base64").toString("base64") === str;
  } catch (err) {
      return false;
  }
};

// async function testDigioApi(req,res) {
//   try {
//     const { customerId } = req.query;
//     const existingData = await final.findOne({ customerId });


//       // const documentId = req.params;
//       // const documentId = "DID250224175111745PKBXNLAFFJK3US";  
//       const documentId =existingData?.ratnaDocument_id ;  


//       const accessToken = await getDigioAccessToken();

//       const statusUrl = `https://api.digio.in/v2/client/document/${documentId}`;
//       const statusResponse = await axios.get(statusUrl, {
//         headers: {
//           Authorization: `Basic ${accessToken}`,
//                "Content-Type": "application/json"

//         },
//       });
  
//       const documentStatus = statusResponse.data.signing_parties?.[0]?.status;
//       console.log("Document Status:", documentStatus);
  
//       // Agar document signed nahi hai toh error return karo
//       if (documentStatus !== "signed") {
//         return badRequest(res, "PDF is not signed yet");
//       }
   

//       const apiUrl = `https://api.digio.in/v2/client/document/download?document_id=${documentId}`;

//       console.log("API URL:", apiUrl);
//       console.log("Authorization Token:", accessToken);

//       const response = await axios.get(apiUrl, {
//           headers: {
//               Authorization: `Basic ${accessToken}`,
//               // "Content-Type": "application/json"
//           },
//           responseType: "arraybuffer" 

//       });

//       // const pdfBase64 = response?.data;
//       // console.log(pdfBase64,"pdfBase64")
//       // if (!pdfBase64) {
//       //   throw new Error("No PDF data received in API response");
//       // }
      
  
//       const pdfBuffer = Buffer.from(response.data, "base64");

    
  
//       console.log('XML Response:', pdfBuffer);
//       // const buffer = Buffer.from(xmlBuffer, 'base64');
//       // const filePathInBucket = `${process.env.PATH_BUCKET}/LOS/PDF/${Date.now()}incomesanction.pdf`;
//       const uploadResponse = await uploadPDFToBucket(pdfBuffer, `incomesanction${Date.now()}.pdf`);
//       console.log(uploadResponse.url,"uploadResponse")

//       const fileUrl =uploadResponse.url

//       await final.findOneAndUpdate(
//         { customerId }, // Query to find the specific customer document
//         {
//           'ratnaSignEsignLink.loandocument': fileUrl,
//         },
//         { new: true, upsert: true } // Options: Return the updated document, don't create a new one
//       );

      
  
      
//       // console.log('PDF uploaded successfully:', fileUrl);


//     return success(res,"all document signed",{signedUrl: fileUrl})

//       // console.log("API Response:", response?.data);
//       // return response.data;
//   } catch (error) {
//     console.error("Error fetching document:", error.message);
        
//     // 🔹 Circular structure issue fix: Only return `error.response?.data || error.message`
//     // return res.status(500).json({ 
//     //     success: false, 
//     //     error: error.response|| error.message 
//     // });

//   console.error("Error deleting estampRequirement:", error);
//   return unknownError(res, error);
//   }


// };



async function testDigioApi(req, res) {
  try {
    const { customerId } = req.query;
    const existingData = await final.findOne({ customerId });

    if (!existingData || !existingData.ratnaDocument_ids) {
      return badRequest(res, "No document IDs found for this customer");
    }

    const accessToken = await getDigioAccessToken();
    const uploadedFiles = {}; 

    // **Loop through all stored document IDs**
    for (const [pdfName, documentId] of Object.entries(existingData.ratnaDocument_ids)) {
      const statusUrl = `https://api.digio.in/v2/client/document/${documentId}`;
      const statusResponse = await axios.get(statusUrl, {
        headers: {
          Authorization: `Basic ${accessToken}`,
          "Content-Type": "application/json",
        },
      });

      const documentStatus = statusResponse.data.signing_parties?.[0]?.status;
      console.log(`Status of ${pdfName}:`, documentStatus);

      if (documentStatus !== "signed") {
        return badRequest(res, `${pdfName} is not signed yet`);
      }

      const apiUrl = `https://api.digio.in/v2/client/document/download?document_id=${documentId}`;
      console.log("Downloading:", apiUrl);

      const response = await axios.get(apiUrl, {
        headers: {
          Authorization: `Basic ${accessToken}`,
        },
        responseType: "arraybuffer",
      });

      const pdfBuffer = Buffer.from(response.data, "base64");

      const uploadResponse = await uploadPDFToBucket(pdfBuffer, `${pdfName}_${Date.now()}.pdf`);
      console.log(`Uploaded ${pdfName} =>`, uploadResponse.url);

      uploadedFiles[pdfName] = uploadResponse.url; // Store the uploaded file URL
    }

    // **Update Database with signed document URLs**
    await final.findOneAndUpdate(
      { customerId },
      { 'ratnaSignEsignLink': uploadedFiles },
      { new: true, upsert: true }
    );

    return success(res, "All documents signed and uploaded successfully", { signedUrls: uploadedFiles });

  } catch (error) {
    console.error("Error fetching documents:", error.message);
    return unknownError(res, error);
  }
};


const uploadPDFToBucket = async (pdfBuffer, fileName) => {
  try {
    const filePathInBucket = `${process.env.PATH_BUCKET}/LOS/PDF/${fileName}`;
    const bucketName = 'finexe'; 
    const contentType = 'application/pdf';

    const uploadResult = await uploadToSpaces(bucketName, filePathInBucket, pdfBuffer, 'public-read', contentType);

    return { url: `https://cdn.fincooper.in/${filePathInBucket}` };
  } catch (error) {
    console.error('Error uploading PDF to bucket:', error);
    throw new Error('Upload failed');
  }
};

const testDigioApi11 = async (req, res) => {
  try {
    // **Step 1: Generate Access Token**
    const accessToken = await getDigioAccessToken();
    console.log(accessToken, "accessToken");

    // **Step 2: Fetch PDF and Convert to Base64**
    const base64PDF = await fetchPdfAsBase64(pdfUrl);
    console.log("✅ PDF Converted to Base64");

    // **Step 3: Prepare API Payload**
    const payload = {
      signers: [
        {
          identifier: "user@example.com",
          name: "John Doe",
          sign_type: "aadhaar",
          reason: "Approving the document",
        },
      ],
      expire_in_days: 10,
      display_on_page: "custom",
      notify_signers: true,
      send_sign_link: true,
      generate_access_token: true,
      file_name: "IncomeSanctionLetter.pdf",
      file_data: base64PDF,
      sign_coordinates: {
        "user@example.com": {
          "1": [
            {
              llx: 376.55,
              lly: 67.89,
              urx: 535.89,
              ury: 129.36,
            },
          ],
        },
      },
      estamp_request: null, // ✅ No e-stamp
    };

    console.log(payload, "payload");

    // **Step 4: Upload PDF to Digio**
    const uploadResponse = await axios.post(
      "https://ext.digio.in/api/v2/client/document/uploadpdf",
      payload,
      {
        headers: {
          accept: "application/json",
          "content-type": "application/json",
          Authorization: `Basic ${accessToken}`,
        },
      }
    );

    console.log("✅ Upload Response:", uploadResponse.data.data);

    const entityId = uploadResponse.data.id; // ✅ Extract `entity_id`
    console.log("📄 Entity ID:", entityId);

    // **Step 5: Fetch Signed PDF URL**
    let signedPDFUrl = null;
    let statusCheckCount = 0;

    while (!signedPDFUrl && statusCheckCount < 10) { // 🔄 Retry for ~10 sec
      await new Promise(resolve => setTimeout(resolve, 2000)); // ⏳ Wait 2 sec

      const statusResponse = await axios.get(
        `https://ext.digio.in/api/v2/client/document/status/${entityId}`,
        { headers: { Authorization: `Basic ${accessToken}` } }
      );

      console.log("📊 Status Response:", statusResponse.data);

      if (statusResponse.data.data.signed_file_url) {
        signedPDFUrl = statusResponse.data.data.signed_file_url; 
        break;
      }

      statusCheckCount++;
    }

    // **Step 6: Return Response**
    if (signedPDFUrl) {
      console.log("✅ Signed PDF URL:", signedPDFUrl);
      res.json({ success: true, signed_pdf_url: signedPDFUrl });
    } else {
      console.log("❌ PDF Not Signed Yet, Try Again Later.");
      res.json({ success: false, message: "PDF not signed yet, retry later." });
    }
  } catch (error) {
    console.error("❌ Error:", error.response?.data || error.message);
    res.status(500).json({ success: false, error: error.message });
  }
};


const addDistanceOfMap = async(req,res) =>{
  try{
    const {customerId,distanceOfMap} = req.body
     await approverFormModel.findOneAndUpdate({
      customerId: new ObjectId(customerId),
    },
  {
    $set:{
      distanceOfMap
    }
  }
  );
  return success(res ,"distanceOfMap added successfully");
  }catch (error) {
    console.error("Error deleting estampRequirement:", error);
    return unknownError(res, error);
  }
}


const sendToBranch = async(req, res) => {
  try {
    const { customerId,ccEmail,isEmail } = req.query;
    const todayDate = moment().tz("Asia/Kolkata").format("YYYY-MM-DDThh:mm:ss A");
    
    if (!customerId) {
      return badRequest(res, "Customer ID is required");
    }

    const customerDetail = await customerModel.findById(customerId)

    if (!customerDetail) {
      return badRequest(res, "Customer Not Found");
    }

    const finalData = await finalModel
      .findOne({ customerId })
      .populate("partnerId")
      .populate("employeeId");

// console.log(customerId,"customerIdcustomerIdcustomerId")
    // const customerDetails =  await customerModel.findById(customerId)
    const customerDetails = await customerModel.aggregate([
      {
          $match: { _id: new mongoose.Types.ObjectId(customerId) }
      },
      {
          $lookup: {
              from: "employees",
              localField: "employeId",
              foreignField: "_id",
              as: "employeeDetails"
          }
      },
      {
          $unwind: { path: "$employeeDetails", preserveNullAndEmptyArrays: true }
      },
      {
        $lookup: {
            from: "newbranches",
            localField: "branch",
            foreignField: "_id",
            as: "customerBranchDetails"
        }
    },
    

    {
      $lookup: {
          from: "applicantdetails",
          localField: "_id",
          foreignField: "customerId",
          as: "applicantDataDetails"
      }
  },
  {
      $unwind: { path: "$applicantDataDetails", preserveNullAndEmptyArrays: true }
  },
  
    {
        $unwind: { path: "$customerBranchDetails", preserveNullAndEmptyArrays: true }
    },
      {
          $lookup: {
              from: "employees",
              localField: "employeeDetails.reportingManagerId",
              foreignField: "_id",
              as: "reportingManager"
          }
      },
      {
          $unwind: { path: "$reportingManager", preserveNullAndEmptyArrays: true }
      },

      {
        $lookup: {
            from: "employees",
            localField: "reportingManager.reportingManagerId",
            foreignField: "_id",
            as: "seniorReportingManager"
        }
    },
    {
        $unwind: { path: "$seniorReportingManager", preserveNullAndEmptyArrays: true }
    },

      {
        $project:{
          customerFinId:1,
          "employeeDetails._id":1,
          "employeeDetails.employeName":1,
          "employeeDetails.workEmail":1,
          "reportingManager._id":1,
          "reportingManager.employeName":1,
          "reportingManager.workEmail":1,
          "seniorReportingManager.workEmail":1,
          "customerBranchDetails.name":1,
          "applicantDataDetails.fullName":1,
          "applicantDataDetails.mobileNo":1,
        }
      }
  ]);
    // console.log(customerDetails,"customerDetailscustomerDetailscustomerDetails")

    if(customerDetails.length === 0){
      return badRequest(res, "customer Details Not Find");
    }
    const applicantDetails = await applicantModel.findOne({customerId})
    if(!applicantDetails){
      return badRequest(res, "applicant Not Find");
    }

    const data = await finalModel.findOne({ customerId });
    
    // Check if data exists
    if (!data) {
      return badRequest(res, "No record found for this customer ID");
    }

    
    
    // Check if incomesectionLatterUrl exists and is not empty
    if (!data.incomesectionLatterUrl) {
      return badRequest(res, "Please generate income sanction");
    }

    // Update the document
    await finalModel.findOneAndUpdate(
      { customerId },
      { 
        $set: { 
          incomeSanctionStatus: "complete",
          incomeSanctionDate: todayDate
        } 
      }
    );

    success(res, "Send to branch successfully");


    const { employeeDetails, customerFinId, reportingManager , seniorReportingManager , customerBranchDetails , applicantDataDetails} = customerDetails[0];
    // console.log(employeeDetails, customerFinId, reportingManager,"employeeDetails, customerFinId, reportingManager")
    const toEmails = [];
    const ccEmails = [];

    if (req.headers.host.includes("prod.fincooper.in")) {
      toEmails.push(`${employeeDetails?.workEmail}`);
      ccEmails.push(`${reportingManager?.workEmail}`) 
      ccEmails.push(`${seniorReportingManager?.workEmail}`) 
      ccEmails.push("finexe@fincoopers.com");
      ccEmails.push("ketavpipaliya@fincoopers.in") 
      ccEmails.push("ho@fincoopers.in") 
       //ccEmail
      try {
        const parsedCcEmails = JSON.parse(ccEmail);  // assuming ccEmail is a stringified array
        if (Array.isArray(parsedCcEmails)) {
            ccEmails.push(...parsedCcEmails);  // spread into ccEmails
        } else {
            ccEmails.push(ccEmail);  // fallback if somehow it's a normal string
        }
      } catch (error) {
        // If JSON.parse fails, treat it as a normal email string
        ccEmails.push(ccEmail);
    }
    } else {
      toEmails.push(`${employeeDetails?.workEmail}`);
      ccEmails.push("darshanrajput@fincoopers.in");
      ccEmails.push(`${reportingManager?.workEmail}`)  //ccEmail
      try {
        const parsedCcEmails = JSON.parse(ccEmail);  // assuming ccEmail is a stringified array
        if (Array.isArray(parsedCcEmails)) {
            ccEmails.push(...parsedCcEmails);  // spread into ccEmails
        } else {
            ccEmails.push(ccEmail);  // fallback if somehow it's a normal string
        }
      } catch (error) {
        // If JSON.parse fails, treat it as a normal email string
        ccEmails.push(ccEmail);
    }
    }

    const filteredCcEmails = ccEmails.filter(email => email !== undefined && email !== "");
    const filteredToEmails = toEmails.filter(email => email !== undefined && email !== "");
    

    // console.log('customerFinId-------',customerFinId,toEmails,ccEmails)
    const fullName = applicantDetails?.fullName?.toUpperCase() || "";
    const subject = `Income Sanction Letter - Loan Application for ${fullName} // ${customerFinId} // ${customerBranchDetails.name}`;
//     const pdfContent = `
//   <div style="font-family: Arial, sans-serif; line-height: 1.6;">
//     <div style="border-top: 1px solid #cccccc; padding-top: 10px; margin-top: 10px;">
//       <p>Dear Team,</p>
//       <p>Please Find Attached Income Sanction Letter for the loan application ${customerFinId}</p>

//    <table>
//   <thead>
//       <tr>
//           <th colspan="2" style="text-align: center; padding: 5px;">Recommendation Profile</th>
//       </tr>
//   </thead>
//   <tbody>
//       <tr>
//           <td style="font-weight: bold; padding: 3px; width: 50%;">BRANCH NAME</td>
//           <td style="padding: 3px; width: 50%;">${customerBranchDetails.name}</td>
//       </tr>
//       <tr>
//           <td style="font-weight: bold; padding: 3px;">CUSTOMER NAME</td>
//           <td style="padding: 3px;">${applicantDataDetails?.fullName}</td>
//       </tr>
//       <tr>
//           <td style="font-weight: bold; padding: 3px;">CONTACT NO</td>
//           <td style="padding: 3px;">${applicantDataDetails?.mobileNo}</td>
//       </tr>
//        <tr>
//           <td style="font-weight: bold; padding: 3px;">LOAN AMOUNT</td>
//           <td style="padding: 3px;">Rs.${finalData?.finalLoanAmount}</td>
//       </tr>
//        <tr>
//           <td style="font-weight: bold; padding: 3px;">TENURE</td>
//           <td style="padding: 3px;">${finalData?.tenureInMonth} months</td>
//       </tr>
//       <tr>
//           <td style="font-weight: bold; padding: 3px;">IRR</td>
//           <td style="padding: 3px;">${finalData?.roi}%</td>
//       </tr>
//       <tr>
//           <td style="font-weight: bold; padding: 3px;">EMI</td>
//           <td style="padding: 3px;">Rs.${Math.round(finalData?.emiAmount)}</td>
//       </tr>
//   </tbody>
// </table>

//       <p>Please review the terms and conditions detailed within, including loan amount, interest rate, repayment schedule, and pre-disbursement requirements.</p>

//       <p>The document outlines the necessary steps for finalizing the loan disbursement, such as providing the required documents and completing the E-NACH process. Please ensure all requirements are met to avoid any delays.</p>
// <p> If you have any questions or require further clarification, please do not hesitate to contact HO Person.</p>
// <p> <strong>Please note that this is an automated notification, and replies to this email will not be received. </strong></p>
//       <p>Sincerely.</p>
//       <p>Team Fin Coopers</p>
//     </div>
//   </div>
// `;


const pdfContent = `
  <html>
  <head>
    <style>
      body { font-family: Arial, sans-serif; line-height: 1.6; }
      h2 { color: #4CAF50; }
      p { font-size: 14px; color: #333; }
      table { 
        width: 60%;
        border-collapse: collapse; 
        margin: 20px auto;
        font-size: 12px;
      }
      table, th, td { 
        border: 1px solid #ddd; 
        padding: 6px;
        margin: 15px 0;
        text-align: left;
      }
      th { 
        background-color: rgb(19, 79, 92);
        text-align: left;
        color: white;
      }
      td[style*="font-weight: bold"] {
        background-color: #f8f8f8;
      }
      .footer { margin-top: 20px; font-size: 12px; color: #888; }
    </style>
  </head>
  <body>
    <p>Dear Team,</p>
    <p>Please Find Attached Income Sanction Letter for the loan application ${customerFinId}</p>

    <table>
      <thead>
        <tr>
          <th colspan="2" style="text-align: center; padding: 5px;">Recommendation Profile</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="font-weight: bold; padding: 3px; width: 50%;">BRANCH NAME</td>
          <td style="padding: 3px; width: 50%;">${customerBranchDetails?.name}</td>
        </tr>
        <tr>
          <td style="font-weight: bold; padding: 3px;">CUSTOMER NAME</td>
          <td style="padding: 3px;">${applicantDataDetails?.fullName}</td>
        </tr>
        <tr>
          <td style="font-weight: bold; padding: 3px;">CONTACT NO</td>
          <td style="padding: 3px;">${applicantDataDetails?.mobileNo}</td>
        </tr>
        <tr>
          <td style="font-weight: bold; padding: 3px;">LOAN AMOUNT</td>
          <td style="padding: 3px;">Rs.${finalData?.finalLoanAmount}</td>
        </tr>
        <tr>
          <td style="font-weight: bold; padding: 3px;">TENURE</td>
          <td style="padding: 3px;">${finalData?.tenureInMonth} months</td>
        </tr>
        <tr>
          <td style="font-weight: bold; padding: 3px;">IRR</td>
          <td style="padding: 3px;">${finalData?.roi}%</td>
        </tr>
        <tr>
          <td style="font-weight: bold; padding: 3px;">EMI</td>
          <td style="padding: 3px;">Rs.${Math.round(finalData?.emiAmount)}</td>
        </tr>
      </tbody>
    </table>

    <p>Please review the terms and conditions detailed within, including loan amount, interest rate, repayment schedule, and pre-disbursement requirements.</p>

    <p>The document outlines the necessary steps for finalizing the loan disbursement, such as providing the required documents and completing the E-NACH process. Please ensure all requirements are met to avoid any delays.</p>

    <p>If you have any questions or require further clarification, please do not hesitate to contact HO Person.</p>
    <p><strong>Please note that this is an automated notification, and replies to this email will not be received.</strong></p>
    <p>Sincerely.</p>
    <p>Team Fin Coopers</p>
    </div>
  </body>
  </html>
`;


const attachment = data.incomesectionLatterUrl
  ? [{
      path: data.incomesectionLatterUrl,
      filename: data.incomesectionLatterUrl.split('/').pop(),
      contentType: 'application/pdf'
    }]
  : [];

  if(isEmail == "true" || isEmail == true){
    await sendEmailByVendor("finalApproverQuery", filteredToEmails, filteredCcEmails, subject, pdfContent , attachment);
  }
     await fileProcessSheet(customerId)
  } catch (error) {
    console.error("Error in sendToBranch:", error);
    return unknownError(res, error);
  }
}


const sendToPartnerSanction = async(req, res) => {
  try {
    const { customerId, isEmail = "true"  } = req.query;
    const empId = req.Id
    // console.log(empId,"empIdempId")
    const todayDate = moment().tz("Asia/Kolkata").format("YYYY-MM-DDThh:mm:ss A");
    if (!customerId) {
      return badRequest(res, "Customer ID is required");
    }
    const approverData = await approverFormModel.findOne({
      customerId: new ObjectId(customerId),
    });

    if (!approverData) {
      return badRequest(res, "Approver data not found");
    }

    const finalData = await finalModel.findOne({ customerId });
    // console.log(finalData,"finalDatafinalDatafinalData")

    // if(!finalData.partnerId){
    //   return badRequest(res,"please select partner first")
    // }
    // const partnerData = await lenderModel({_id: finalData.partnerId})
    // console.log(partnerData,"partnerDatapartnerDatapartnerData")


    const cultivationAcres = finalData?.agricultureIncome?.details[0]?.AreaCultivationAcres || finalData?.agricultureRatnaIncome?.details[0]?.AreaCultivationAcres
    // console.log(cultivationAcres,"cultivationAcrescultivationAcres",
    //   finalData.sanctionZipUrl
    // )

    const externalVendorFormData = await externalVendorFormModel.findOne({
      customerId,
    });

    const rcuVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "rcu"
    );
    const legalVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "legal"
    );
    const technicalVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "technical"
    );

    // console.log(rcuVendor,legalVendor,technicalVendor,"externalVenderData externalVenderData")
    // Extract only numbers from any string/number input
    const extractNumber = (value) => {
      if (typeof value === 'number') return value;
      if (typeof value === 'string') {
        // Extract all numbers (including decimals) from string
        const matches = value.match(/\d+\.?\d*/);
        return matches ? parseFloat(matches[0]) : 0;
      }
      return 0;
    };

    // Extract numerical values only
    const totalLandArea = extractNumber(approverData?.totalLandArea);
    const propertyAge = extractNumber(approverData?.propertyAge);
    const Ltv = extractNumber(approverData?.Ltv);
    const distanceOfMap = extractNumber(approverData?.distanceOfMap);

    // Log parsed values for debugging
    // console.log('Extracted numerical values:', {
    //   totalLandArea,
    //   propertyAge,
    //   Ltv,
    //   distanceOfMap
    // });

     // Validation checks dynamic
    // if (totalLandArea < partnerData.policy.minimumAgricultureLand) {
    //   return badRequest(res, `Property area must be at least ${partnerData.policy.minimumAgricultureLand} sqft. Current area: ${totalLandArea}`);
    // }

    // if (propertyAge > 50) {
    //   return badRequest(res, `Property age must be less than 50 years. Current age: ${propertyAge}`);
    // }

    // if (Ltv > partnerData.policy.ltv) {
    //   return badRequest(res, `LTV must be less than ${partnerData.policy.ltv},Current LTV: ${Ltv}`);
    // }

    // if (distanceOfMap > 60 ){
    //   return badRequest(res, `Distance must be less than  60km. rrent distance: ${distanceOfMap}`);
    // }

    // if (cultivationAcres < partnerData.policy.propertyArea) {
    //   return badRequest(res, `property area min ${partnerData.policy.propertyArea} Acre. Current are: ${cultivationAcres}`);
    // }

    // if (finalData.sanctionZipUrl.length == 0) {
    //   return badRequest(res, `sanction zip is not generated`);
    // }

    // // if (rcuVendor.uploadProperty.length == 0) {
    // //   return badRequest(res, `rcu is not completed`);
    // // }

    // if (legalVendor.uploadProperty.length == 0) {
    //   return badRequest(res, `legal is not completed`);
    // }

    // if (technicalVendor.uploadProperty.length == 0) {
    //   return badRequest(res, `technical is not completed`);
    // }

    // Validation checks
    if (totalLandArea < 400) {
      return badRequest(res, `Property area must be at least 400 sqft. Current area: ${totalLandArea}`);
    }

    if (propertyAge > 50) {
      return badRequest(res, `Property age must be less than 50 years. Current age: ${propertyAge}`);
    }

    if (Ltv > 60) {
      return badRequest(res, `LTV must be less than 60%,Current LTV: ${Ltv}`);
    }

    if (distanceOfMap > 60 ){
      return badRequest(res, `Distance must be less than  60km. rrent distance: ${distanceOfMap}`);
    }

    if (cultivationAcres < 2) {
      return badRequest(res, `property area min 2 Acre. Current are: ${cultivationAcres}`);
    }

    if (finalData.sanctionZipUrl.length == 0) {
      return badRequest(res, `sanction zip is not generated`);
    }

    // if (rcuVendor.uploadProperty.length == 0) {
    //   return badRequest(res, `rcu is not completed`);
    // }

    if (legalVendor.uploadProperty.length == 0) {
      return badRequest(res, `legal is not completed`);
    }

    // if (technicalVendor.uploadProperty.length == 0) {
    //   return badRequest(res, `technical is not completed`);
    // }

    await finalModel.findOneAndUpdate(
      { customerId },
      { $set: { sendToPartnerSanctionStatus: "complete",
        sendToPartnerSanctionDate:todayDate,
        finalSanctionStatus:"complete",
        finalSanctionStatusDate:todayDate
       } },
      {new: true, upsert:true}
    );
    // Success response with original values
    success(res, "Send to partner sanction successfully");
    if(isEmail == "true" || isEmail == true){
      console.log("inside the if block <><><><><><><><><><>")
      await mailSendPartnerToSanction(customerId, req, empId)
    }
    // await fileProcessSheet(customerId)
  } catch (error) {
    console.error("Error in sendToPartnerSanction:", error);
    return unknownError(res, error);
  }
};


const uploadDocument = async(req, res) => {
  try {
    const { customerId,sanctionLetter,applicationForm,loanAgreement,repaymentSchedule,kfs,otherDocument } = req.body;
 
   const data =  await finalModel.findOneAndUpdate(
      { customerId },
      { $set: { 
        physicalEsignDocument:{
          sanctionLetter,applicationForm,loanAgreement,repaymentSchedule,kfs,otherDocument
        }
       } },
      {new: true, upsert:true}
    );

     success(res, "document uploaded successfully",{data:data.physicalEsignDocument});
  } catch (error) {
    console.error("Error in sendToPartnerSanction:", error);
    return unknownError(res, error);
  }
};

//uploadDocumentList
const uploadDocumentList = async(req, res) => {
  try {
    const { customerId  } = req.query;
    // console.log(req.query,"<>customerId<>---0")
    const data =  await finalModel.findOne({ customerId : customerId  });
    let existingDisbursement = await disbursementModel.findOne({ customerId });
    // console.log(data,"data<<<<<<<<<<<<<<<<<<<<<<<<<<")
    success(res, "document list are",{
      physicalEsignDocument:data?.physicalEsignDocument || {},
      reUploadPhysicalEsignDocument: data?.reUploadPhysicalEsignDocument || {},
      esignLinks: data?.esignLinks || {},
      pasteEsignDocument: data.pasteEsignDocument || ""
    });
  } catch (error) {
    console.error("Error in sendToPartnerSanction:", error);
    return unknownError(res, error);
  }
};

//reUploadDocument
const reUploadDocument = async(req, res) => {
  try {
    const { customerId,sanctionLetter,applicationForm,loanAgreement,repaymentSchedule,kfs,otherDocument } = req.body;
 
   const data =  await finalModel.findOneAndUpdate(
      { customerId },
      { $set: { 
        reUploadPhysicalEsignDocument:{
          sanctionLetter,applicationForm,loanAgreement,repaymentSchedule,kfs,otherDocument
        }
       } },
      {new: true, upsert:true}
    );

     success(res, "document uploaded successfully",{data:data.reUploadPhysicalEsignDocument});
  } catch (error) {
    console.error("Error in sendToPartnerSanction:", error);
    return unknownError(res, error);
  }
};


const addMortgageDetails = async (req, res) => {
  try {
    const { customerId, mortgageDetails, authorizedPerson } = req.body;
    const todayDate = moment().tz("Asia/Kolkata").format("YYYY-MM-DDThh:mm:ss A");


    const mortgageData = await finalModel.findOneAndUpdate(
      { customerId },
      { $set: { 
          mortgageDetails: mortgageDetails,
          authorizedPerson: authorizedPerson || "" 
        } 
      },
      { new: true, upsert: true }
    );

    const data = {
      mortgageDetails: mortgageData?.mortgageDetails ,
      authorizedPerson:authorizedPerson
    }

    success(res, "Mortgage details updated successfully",data);

    // Update mortgageDetail flag in processModel
    await processModel.findOneAndUpdate(
      { customerId },
      { $set: { mortgageDetail: true } },
      { new: true }
    );

    // Call final approval sheet function
    // await finalApprovalSheet(customerId);

  } catch (error) {
    console.error("Error in addMortgageDetails:", error);
    return unknownError(res, error);
  }
};


const getMortgageDetails = async (req, res) => {
  try {
    const { customerId } = req.query;

    if (!customerId) {
      return badRequest(res, "Customer ID is required");
    }

    const mortgageData = await finalModel.findOne({ customerId })
      .select('mortgageDetails authorizedPerson')
      .lean(); // Use `.lean()` for better performance

    if (!mortgageData) {
      return notFound(res, "Mortgage details not found");
    }

    const data = {
      mortgageDetails: mortgageData.mortgageDetails || [],
      authorizedPerson: mortgageData.authorizedPerson || ""
    };

    return success(res, "Mortgage Details fetched successfully", data);
    
  } catch (error) {
    console.error("Error in getMortgageDetails:", error);
    return unknownError(res, error);
  }
};





const documentList = async(req, res) => {
  try {
    const { customerId } = req.query;
    const data =  await finalModel.findOne({ customerId }).populate("partnerId")
    const bankStatementData = await bankStatementModel.findOne({ customerId })
    const disbursementData = await disbursementModel.findOne({ customerId });
    console.log(data,"data<<>><<>>")

    // let links = 
    // (data?.signEsignLink && Object.values(data.signEsignLink).some(val => val)) 
    // ? data.signEsignLink 
    // : data?.signLeegalityLink//updatedPd?.esignLinks;

    let links = 
        (data?.partnerId?.loanDocument == "physical" && Object.values(data.physicalEsignDocument).some(val => val)) 
        ? data.physicalEsignDocument 
        : data?.signLeegalityLink
        //updatedPd?.esignLinks;
    // console.log(data,"data<><><><><>")
    success(res, "document details",{
      legalDetail:data?.legalDetails,
      nachLink: bankStatementData?.Nachlink?.trim() ? bankStatementData?.Nachlink : disbursementData?.eNachLinkSentToBranch || "",
      esignLinks: links,
      reUploadPhysicalEsignDocument:data?.reUploadPhysicalEsignDocument
    });
  } catch (error) {
    console.error("Error in sendToPartnerSanction:", error);
    return unknownError(res, error);
  }
};

//docGenerate
const docGenerate = async(req, res) => {
  try {
    const { customerId } = req.query;
    // const data =  await finalModel.findOne({ customerId })
    const externalVendorFormData = await externalVendorFormModel.findOne({
      customerId,
    });
    const creditPdData = await creditPdModel.findOne({ customerId });
    const gtrPdcData = await gtrPdcModel.findOne({ customerId });
    const appPdcData = await appPdcModel.findOne({ customerId });
    const disbursementData = await disbursementModel.findOne({ customerId });
    const coApplicantData = await coApplicantModel.find({ customerId });
    const applicantData = await applicantModel.findOne({ customerId });
    const guarantorData = await guarantorModel.findOne({ customerId });
    const cibilData = await cibilModel.findOne({ customerId });
    const loanDocumentData = await loanDocumentModel.findOne({ customerId });
    const SignKycDetails = await SignKycModel.findOne({ customerId });
    const finalData = await finalModel.findOne({ customerId })

    const customerObjectId = mongoose.Types.ObjectId.isValid(customerId)
      ? new mongoose.Types.ObjectId(customerId)
      : customerId;
    console.log(customerObjectId, "customerObjectId")
    const customerDocumentDetails = await customerDocumentModel.findOne({ customerId: customerObjectId });
    const loanDocument = await loanDocumentModel.findOne({ customerId });
    const bankStatementData = await bankStatementModel.findOne({ customerId })

    const rcuVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "rcu"
    );
    const legalVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "legal"
    );
    const technicalVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "technical"
    );
    const rmVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "rm"
    );
    const taggingVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "tagging"
    );

    const responseData = {
        // login check list
        utilityBillAndResiProof:
          customerDocumentDetails?.incomeDocument?.utilityBillDocument || [],
        familyCardDocument:
          customerDocumentDetails?.incomeDocument?.familyCardDocument || [],
        familyCardDocumentDetails: "Recive from sales form",
        udyamCertificate:
          customerDocumentDetails?.incomeDocument?.udyamCertificateDocument ||
          [],
        udyamCertificateDetails: "Recive from sales form",
        bankStatement:
          customerDocumentDetails?.incomeDocument?.bankStatementDocument || [],
        bankStatementDetails: "Recive from sales form",
        incomeDocument:
          customerDocumentDetails?.incomeDocument?.incomeStatemenDocument || [],
        incomeDocumentDetails: "Recive from sales form",
        propertyDocument:
          customerDocumentDetails?.propertyDocuments?.propertyDocument || [],
        propertyDocumentDetails: "Recive from sales form",
        signApplicantKyc: customerDocumentDetails?.signApplicantKyc || [],
        propertyDocumentDetails: "Recive from sales form",
        signCoApplicantKyc: customerDocumentDetails?.signCoApplicantKyc || [],
        signCoApplicantKycDetails: "Recive from sales form",
        signCoTwoApplicantKyc:
          customerDocumentDetails?.signCoTwoApplicantKyc || [],
        signCoTwoApplicantKycDetails: "Recive from sales form",
        signGurantorKyc: customerDocumentDetails?.signGurantorKyc || [],
        signGurantorKycDetails: "Recive from sales form",
        //
        electricityBill: creditPdData?.utilityBillDocument || [],
        electricityBillDetails: "Recive from electricity form",
        SamagraId: creditPdData?.SSSMPhoto || [],
        SamagraIdDetails: "Recive from SamagraId form",
        // gasDiaryDocument:,
        // gasDiaryDocumentDetails:"",

        applicantPhoto: applicantData?.applicantPhoto || "",
        applicantPhotoDetails: "Recive from login form",
        coApplicantPhoto: coApplicantData[0]?.coApplicantPhoto || "",
        coApplicantPhotoDetails: "Recive from login form",
        coApplicantPhotoTwo: coApplicantData[1]?.coApplicantPhoto || "",
        coApplicantPhotoTwoDetails: "Recive from login form",
        guarantorPhoto: guarantorData?.guarantorPhoto || "",
        guarantorPhotoDetails: "Recive from login form",
        applicantKycOsv: SignKycDetails?.ApplicantSignDocument || "",
        applicantKycOsvDetails: "Recive from branch",
        coApplicantKycOsv: SignKycDetails?.coApplicantSignDocument || "",
        coApplicantKycOsvDetails: "Recive from branch",
        gurantorKycOsv: SignKycDetails?.guarantorSignDocument || "",
        gurantorKycOsv: "Recive from branch",
        applicantKyc: {
          applicantAadharFrontImage:
            applicantData?.kycUpload?.aadharFrontImage || "",
          applicantAadharBackImage:
            applicantData?.kycUpload?.aadharBackImage || "",
          applicantPanFrontImage: applicantData?.kycUpload?.panFrontImage || "",
          applicantDrivingLicenceImage:
            applicantData?.kycUpload?.drivingLicenceImage || "",
          applicantVoterIdImage: applicantData?.kycUpload?.voterIdImage || "",
        },
        applicantKycDetails: "Recive from login form",
        coApplicantKyc: {
          coApplicantKycAadharFrontImage:
            coApplicantData[0]?.kycUpload?.aadharFrontImage || "",
          coApplicantKycAadharBackImage:
            coApplicantData[0]?.kycUpload?.aadharBackImage || "",
          // coApplicantKycDocType:coApplicantData[0]?.kycUpload?.docImage || "",
          coApplicantKycDocImage: coApplicantData[0]?.kycUpload?.docImage || "",
        },
        coApplicantKycDetails: "Recive from login form",
        coApplicantKycTwo: {
          coApplicantKycTwoAadharFrontImage:
            coApplicantData[1]?.kycUpload?.aadharFrontImage || "",
          coApplicantKycTwoAadharBackImage:
            coApplicantData[1]?.kycUpload?.aadharBackImage || "",
          coApplicantKycTwoDocImage:
            coApplicantData[1]?.kycUpload?.docImage || "",
        },
        coApplicantKycTwoDetails: "Recive from login form",
        gurantorKyc: {
          gurantorAadharFrontImage:
            guarantorData?.kycUpload?.aadharFrontImage || "",
          gurantorAadharBackImage:
            guarantorData?.kycUpload?.aadharBackImage || "",
          gurantorDocImage: guarantorData?.kycUpload?.docImage || "",
        },
        gurantorKycDetails: "Recive from login form",
        applicantCibilReport: cibilData?.applicantFetchHistory?.slice(-1)[0]?.cibilReport || "",
        applicantCibilReportDetails: "Recive from cibil form",
        coApplicantCibilReport:
          Array.isArray(cibilData?.coApplicantData[0]?.coApplicantFetchHistory)
            ? cibilData.coApplicantData[0].coApplicantFetchHistory.slice(-1)[0]?.cibilReport
            : "",
        coApplicantCibilReportDetails: "Recive from cibil form",
        coApplicantTwoCibilReport:
          Array.isArray(cibilData?.coApplicantData[1]?.coApplicantFetchHistory)
            ? cibilData.coApplicantData[0].coApplicantFetchHistory.slice(-1)[0]?.cibilReport
            : "",
        coApplicantTwoCibilReportDetails: "Recive from cibil form",
        guarantorCibilReport: cibilData?.guarantorFetchHistory?.slice(-1)[0]?.cibilReport || "",
        guarantorCibilReportDetails: "Recive from cibil form",
        pdReport: creditPdData?.pdfLink || "",
        pdReportDetails: "Recive from creditPd form",
        rcuReport: rcuVendor?.uploadProperty || [],
        rcuReportDetails: "Recive from externalVendor form",
        legalReport: legalVendor?.uploadProperty || [],
        legalReportDetails: "Recive from externalVendor form",
        technicalReport: technicalVendor?.uploadProperty || [],
        technicalReportDetails: "Recive from externalVendor form",
        technicalEstimateDocument: technicalVendor?.estimateDocument || [],
        estimateDocumentDetails: "Recive from externalVendor form",
        taggingReport: taggingVendor?.uploadProperty || [],
        taggingReportDetails: "Recive from externalVendor form",
        housePhotos: [
          ...(Array.isArray(creditPdData?.fourBoundaryPhotos)
            ? creditPdData?.fourBoundaryPhotos
            : [creditPdData?.fourBoundaryPhotos]),
          ...(Array.isArray(creditPdData?.houseInsidePhoto)
            ? creditPdData?.houseInsidePhoto
            : [creditPdData?.houseInsidePhoto]),
          ...(Array.isArray(creditPdData?.propertyOtherPhotos)
            ? creditPdData?.propertyOtherPhotos
            : [creditPdData?.propertyOtherPhotos]),
          creditPdData?.selfiWithCustomer || "",
          creditPdData?.photoWithLatLong || "",
          creditPdData?.front || "",
          creditPdData?.leftSide || "",
          creditPdData?.rightSide || "",
          creditPdData?.approachRoad || "",
          creditPdData?.mainRoad || "",
          creditPdData?.interiorRoad || "",
          creditPdData?.selfieWithProperty || "",
          creditPdData?.landmarkPhoto || "",
          creditPdData?.latLongPhoto || "",
        ].filter(Boolean),
        housePhotosDetails: "Recive from creditPd form",
        // workPhotos: creditPdData?.workPhotos || [],
        // workPhotosDetails: "Recive from creditPd form",
        workPhotos: incomeSourcePhotos || [],
        workPhotosDetails: "Recive from creditPd incomeSource data",
        camReport: loanDocument?.camReport || "",
        camReportDetails: "Recive from cam form",
      disbursmentCheckList: {
        dualNameDeclaration: loanDocumentData?.dualNameDeclaration || "",
        dualNameDeclarationDetails: "Recive at the time of final approval",
        dualSignDeclaration: loanDocumentData?.dualSignDeclaration || "",
        dualSignDeclarationDetails: "Recive at the time of final approval",
        dualDoBDeclaration: loanDocumentData?.dualDoBDeclaration || "",
        dualDoBDeclarationDetails: "Recive at the time of final approval",
        applicantPDC: appPdcData?.applicantPdcDocument || [],
        applicantPDCDetails: "Recive from appPdc form",
        guarantorPDC: gtrPdcData?.guarantorPdcDocument || [],
        guarantorPDCDetails: "Recive from gtrPdc form",
        applicantBSV: loanDocumentData?.applicantBSV || "",
        applicantBSVDetails: "Recive at the time of final approval",
        guarantorBSV: loanDocumentData?.guarantorBSV || "",
        guarantorBSVDetails: "Recive at the time of final approval",
        coOwnershipDeed: loanDocumentData?.coOwnershipDeed || "",
        eStampUpload:
          disbursementData?.estampRequirement?.flatMap(
            (stamp) => stamp.eStampUpload || []
          ) || [],

        estampRequirementDetail: "Recive at the time of final approval",
        // ratnaPdfUrls: finalSanctionData?.ratnaPdfUrls || {},
        // fcplPdfUrls: finalSanctionData?.fcplPdfUrls || {},
        // growMoneyPdfUrls: finalSanctionData?.growMoneyPdfUrls || {},

        insuranceForm: loanDocumentData?.insuranceForm || "",
        insuranceFormDetails: "Recive at the time of final approval",
        emOrRmDeed: loanDocumentData?.emOrRmDeed || "",
        emOrRmDeedDetails: "Recive at the time of final approval",
        finalLegal: legalVendor?.finalLegalUpload || "",
        finalLegalDetails: "Recive at the time of final approval",
        vettingReport: loanDocument?.vettingReport || "",
        vettingReportDetails: "Recive at the time of final approval",
        nachLink: bankStatementData?.Nachlink?.trim() ? bankStatementData.Nachlink : disbursementData?.eNachLinkSentToBranch || "",
        nachLinkDetails: "Recive from nach form",
        eNachLinkSignUpload: disbursementData?.eNachLinkSignUpload || "",
        nachLinkSignDetails: "Recive from nach  signsture Complete",
        eSignatureDocuments: disbursementData?.eSignatureDocuments || "",
        eSignatureDocumentsDetails: "Recive from nach  signsture Complete",
        appKycDocument: loanDocument?.appKycDocument || [],
        appKycDocumentDetails: "Recive at the time of final approval",
        coAppKycDocument: loanDocument?.coAppKycDocument || [],
        coApplicantPhotoDetails: "Recive at the time of final approval",
        stampPdf: loanDocumentData?.stampPdf || [],
        sanctionZipUrl: finalData?.sanctionZipUrl || [],
        disbursementZipUrl: finalData?.disbursementZipUrl || [],
        incomeSectionLatterUrl: finalData?.incomesectionLatterUrl || "",
        esignLinks: links || {}
      },
    };
    // console.log(data,"data<><><><><>")
    success(res, "document details",{data:data.physicalEsignDocument});
  } catch (error) {
    console.error("Error in sendToPartnerSanction:", error);
    return unknownError(res, error);
  }
};

const customerCoApplicantDetailold = async (req, res) => {
  try {
    const { customerId } = req.query;
    const data = await coApplicantModel.find({ customerId });
    const pdformdatasDetail = await creditPdModel.findOne({ customerId });
    const camReportDetails = await camReportModel.findOne({ customerId });
    const udhyamKycData = await udhyamKycModel.findOne({ customerId });
    // console.log(data, "datadatadata");

    const coApplicantDetailsArray = (
      pdformdatasDetail?.co_Applicant &&
      pdformdatasDetail.co_Applicant.length > 0
        ? pdformdatasDetail.co_Applicant
        : [{}]
    ).map((value = {}, index) => {
      return {
        [`coApplicantDetails_${index + 1}`]: {
          ApplicantType: value.coApplicantType || "",
          bussinessType: value.businessType || "",
          coApplicantPhoto: data?.[index]?.coApplicantPhoto || "",
          fullName: data?.[index]?.fullName || "",
          fatherName: data?.[index]?.fatherName || "",
          motherName: data?.[index]?.motherName || "",
          dob: data?.[index]?.dob || "",
          age: data?.[index]?.age || "",
          gender: data?.[index]?.gender || "",
          maritalStatus: data?.[index]?.maritalStatus || "",
          educationDetails: data?.[index]?.education || "",
          relationWithApplicant: data?.[index]?.relationWithApplicant || "",
          religion: data?.[index]?.religion || "",
          nationality: "indian" || "",
          caste: value.caste || "",
          category: data?.[index]?.category || "",
          occupation: value?.occupation || "",
          residenceType: value?.residenceType || "",

          contactInformation: {
            mobileNo: data?.[index]?.mobileNo || "",
            mobileNoTwo: value.alternateMobileNo || "",
            email: data?.[index]?.email || "",
          },

          kycDetails: {
            udyamRegistrationNo: "",
            docType: data?.[index]?.docType || "",
            aadharNo: data?.[index]?.aadharNo || "",
            docNo: data?.[index]?.docNo || "",
          },
          kycUpload: {
            aadharFrontImage:data?.[index]?.kycUpload?.aadharFrontImage || "",
            aadharBackImage: data?.[index]?.kycUpload?.aadharBackImage || "",
            docImage: data?.[index]?.kycUpload?.docImage || "",
          },

          // permanentAddressInformation: {
          //   presentAddress: data?.[index]?.permanentAddress?.addressLine1 || "",
          //   // landmark: value.houseLandMark || "",
          //   nameOfCity: data?.[index]?.permanentAddress?.city || "",
          //   city: data?.[index]?.permanentAddress?.city || "",
          //   state: data?.[index]?.permanentAddress?.state || "",
          //   districtName: data?.[index]?.permanentAddress?.district || "",
          //   pinCode: data?.[index]?.permanentAddress?.pinCode || "",
          //   // noOfyearsAtCurrentAddress: value.noOfyearsAtCurrentAddress || "",
          //   country: "India",
          //   residenceType: value.residenceType || "",
          // },

          presentAddressInformation: {
            AddressAsPerAdhar: data?.[index]?.localAddress?.addressLine1 || "",
            addressLine2: data?.[index]?.localAddress?.addressLine2 || "",
            // fullAddress: data?.[index]?.permanentAddress?.addressLine2 || "",
            landmark: value.houseLandMark || "",
            nameOfCity: data?.[index]?.localAddress?.city || "",
            // addressLine1: data?.[index]?.permanentAddress?.addressLine1 || "",
            // addressLine2: data?.[index]?.permanentAddress?.addressLine2 || "",
            city: data?.[index]?.localAddress?.city || "",
            state: data?.[index]?.localAddress?.state || "",
            districtName: data?.[index]?.localAddress?.district || "",
            pinCode: data?.[index]?.localAddress?.pinCode || "",
            noOfyearsAtCurrentAddress: value.noOfyearsAtCurrentAddress || "",
            country: "India",
            residenceType: data?.[index]?.permanentAddress?.residenceType || "",
          },

          employeDetails: {
            education: data?.[index]?.education || "",
            occupation:
              camReportDetails?.coApplicationInformation?.[index]?.occupation ||
              "",
            monthlyIncome:
              camReportDetails?.coApplicationInformation?.[index]
                ?.monthlyIncome || "",
            otherMonthlyIncome:
              camReportDetails?.coApplicationInformation?.[index]
                ?.otherMonthlyIncome || "",
            sourceOfOtherIncome:
              camReportDetails?.coApplicationInformation?.[index]
                ?.sourceOfOtherIncome || "",
            annualIncome:
              camReportDetails?.coApplicationInformation?.[index]
                ?.annualIncome || "",
            totalHouseHoldExpenses:
              camReportDetails?.coApplicationInformation?.[index]
                ?.totalHouseHoldExpenses || "",
          },
        },
      };
    });
    console.log("data",data[0].kycUpload.aadharFrontImage )

    // Combine array into an object
    const responseData = coApplicantDetailsArray.reduce(
      (acc, curr) => Object.assign(acc, curr),
      {}
    );

    if (!Object.keys(responseData).length) {
      responseData[`coApplicantDetails_1`] = {
        ApplicantType: "",
        bussinessType: "",
        fullName: "",
        fatherName: "",
        motherName: "",
        dob: "",
        age: "",
        gender: "",
        maritalStatus: "",
        educationDetails: "",
        relationWithApplicant: "",
        religion: "",
        nationality: "",
        category: "",
        caste: "",
        occupation: "",
        residenceType: "",

        contactInformation: {
          mobileNo: "",
          mobileNoTwo: "",
          email: "",
        },

        kycDetails: {
          udyamRegistrationNo: "",
          docType: "",
          aadharNo: "",
          docNo: "",
        },

        permanentAddressInformation: {
          AddressAsPerAdhar: "",
          // landmark: "",
          nameOfCity: "",
          city: "",
          state: "",
          districtName: "",
          pinCode: "",
          noOfyearsAtCurrentAddress: "",
          country: "India",
          residenceType: "",
        },

        presentAddressInformation: {
          presentAddress: "",
          fullAddress: "",
          landmark: "",
          nameOfCity: "",
          addressLine1: "",
          addressLine2: "",
          city: "",
          state: "",
          districtName: "",
          pinCode: "",
          noOfyearsAtCurrentAddress: "",
          country: "India",
        },

        employeDetails: {
          education: "",
          occupation: "",
          monthlyIncome: "",
          otherMonthlyIncome: "",
          sourceOfOtherIncome: "",
          annualIncome: "",
          totalHouseHoldExpenses: "",
        },
      };
    }

    return success(res, "Customer co-applicant details", {
      data: responseData,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

// ----------------------FIle Stage Status Update APi-------------------------------
async function fileStageStatusUpdate(req, res){
  try {
      const { customerId, fileStage } = req.body;

      const validKeys = [
          'dealSummaryBranch',
          'cibilBranch',
          'creditPdBranch',
          'sanctionDetailBranch',
          'preDisbursementBranch',
          'partnerSelectionHo',
          'sanctionHo',
          'nachAndEsignHo',
          'postDisbursementHo'
      ];

      if (!customerId) {
          return badRequest(res, 'customerId is required');
      }

      if (!fileStage || !validKeys.includes(fileStage)) {
          return badRequest(res,'Invalid fileStage key provided');
      }

      // Prepare dynamic update object
      const update = { [`fileStage.${fileStage}`]: true };

      const fileStageDetail = await processModel.findOneAndUpdate(
          { customerId },
          { $set: update },
          { new: true }
      );

      if (!fileStageDetail) {
          return notFound(res,'Process model not found for the given customerId');
      }
       // Filter response to only include customerId and fileStage
       const responseData = {
        customerId: fileStageDetail.customerId,
        fileStage: fileStageDetail.fileStage
    };


      success(res, `${fileStage} updated to true for customerId`, responseData);
     } catch (error) {
      console.error(error);
      unknownError(res, error);
  }
}

// --------------------File Stage Get APi------------------------------
async function getFileStageForAllCustomers(req, res) {
  try {
    const { 
      page, 
      limit,
      regionalBranch,
      branch,
      product,
      selfAssignEmployee,
      startDateFilter,
      endDateFilter,
      finalApproverStatus,
      fileProcessStatus,
      searchQuery,
      sanctionStage
    } = req.query;
    
    const pageNumber = parseInt(page) || 1;
    const limitNumber = parseInt(limit) || 10;
    const skip = (pageNumber - 1) * limitNumber;
    
    // Date filtering logic from finalApprovalDashboardUpdate
    const today = new Date();
    const defaultStartDate = new Date(today.setHours(0, 0, 0, 0));
    const defaultEndDate = new Date(today.setHours(23, 59, 59, 999));

    function formatDateToISO(date) {
      return new Date(date).toISOString();
    }

    let formattedStart = startDateFilter && startDateFilter !== "all"
      ? new Date(new Date(startDateFilter).setHours(0, 0, 0, 0))
      : defaultStartDate;

    let formattedEnd = endDateFilter && endDateFilter !== "all"
      ? new Date(new Date(endDateFilter).setHours(23, 59, 59, 999))
      : defaultEndDate;

    if (startDateFilter && endDateFilter && startDateFilter === endDateFilter) {
      formattedStart = new Date(new Date(startDateFilter).setHours(0, 0, 0, 0));
      formattedEnd = new Date(new Date(startDateFilter).setHours(23, 59, 59, 999));
    }

    formattedStart = formatDateToISO(formattedStart);
    formattedEnd = formatDateToISO(formattedEnd);
    
    // Using aggregation pipeline to get complete customer data
    const aggregationPipeline = [
      // Initial match for eligible customers
      {
        $match: {
          statusByCreditPd: { $in: ["complete", "approve"] },
          fileStatus: "active"
        }
      },
      
      // All necessary lookups to gather customer data
      {
        $lookup: {
          from: "customerdetails",
          localField: "customerId",
          foreignField: "_id",
          as: "customerDetailData"
        }
      },
      { 
        $unwind: { 
          path: "$customerDetailData",
          preserveNullAndEmptyArrays: true 
        }
      },
      
      {
        $lookup: {
          from: "employees",
          localField: "customerDetailData.employeId",
          foreignField: "_id",
          as: "salesPerson"
        }
      },
      {
        $unwind: {
          path: "$salesPerson",
          preserveNullAndEmptyArrays: true
        }
      },
      
      {
        $lookup: {
          from: "newbranches",
          localField: "salesPerson.branchId",
          foreignField: "_id",
          as: "branchDetails"
        }
      },
      {
        $unwind: {
          path: "$branchDetails",
          preserveNullAndEmptyArrays: true
        }
      },
      
      {
        $lookup: {
          from: "newbranches",
          localField: "branchDetails.regionalBranchId",
          foreignField: "_id",
          as: "regionalBranchDetails"
        }
      },
      {
        $unwind: {
          path: "$regionalBranchDetails",
          preserveNullAndEmptyArrays: true
        }
      },
      
      {
        $lookup: {
          from: "employees",
          localField: "salesPerson.reportingManagerId",
          foreignField: "_id",
          as: "reportingManager"
        }
      },
      {
        $unwind: {
          path: "$reportingManager",
          preserveNullAndEmptyArrays: true
        }
      },
      
      {
        $lookup: {
          from: "applicantdetails",
          localField: "customerId",
          foreignField: "customerId",
          as: "applicantDetails"
        }
      },
      {
        $unwind: {
          path: "$applicantDetails",
          preserveNullAndEmptyArrays: true
        }
      },
      
      {
        $lookup: {
          from: "employees",
          localField: "creditPdId",
          foreignField: "_id",
          as: "pdEmployeeDetail"
        }
      },
      {
        $unwind: {
          path: "$pdEmployeeDetail",
          preserveNullAndEmptyArrays: true
        }
      },
      
      {
        $lookup: {
          from: "products",
          localField: "customerDetailData.productId",
          foreignField: "_id",
          as: "productDetailData"
        }
      },
      {
        $unwind: {
          path: "$productDetailData",
          preserveNullAndEmptyArrays: true
        }
      },
      
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "customerId",
          foreignField: "customerId",
          as: "finalsanctionData"
        }
      },
      {
        $unwind: {
          path: "$finalsanctionData",
          preserveNullAndEmptyArrays: true
        }
      },
      
      {
        $lookup: {
          from: "lenders",
          localField: "finalsanctionData.partnerId",
          foreignField: "_id",
          as: "partnerDetails"
        }
      },
      {
        $unwind: {
          path: "$partnerDetails",
          preserveNullAndEmptyArrays: true
        }
      },
      
      // Additional lookup for self assign employee from finalApprovalDashboardUpdate
      {
        $lookup: {
          from: "employees",
          localField: "finalsanctionData.employeeId",
          foreignField: "_id",
          as: "selfAssignEmployee"
        }
      },
      {
        $unwind: {
          path: "$selfAssignEmployee",
          preserveNullAndEmptyArrays: true
        }
      },
      
      // Additional lookup for bank statement data from finalApprovalDashboardUpdate
      {
        $lookup: {
          from: "bankstatementkycs",
          localField: "customerId",
          foreignField: "customerId",
          as: "bankstatementkycData"
        }
      },
      {
        $unwind: {
          path: "$bankstatementkycData",
          preserveNullAndEmptyArrays: true
        }
      },
      
      // Lookup to the process model to get fileStage data
      {
        $lookup: {
          from: "processes",
          localField: "customerId",
          foreignField: "customerId",
          as: "processData"
        }
      },
      {
        $unwind: {
          path: "$processData",
          preserveNullAndEmptyArrays: true
        }
      },
      
      // Apply filters after lookups
      {
        $match: {
          $and: [
            // Search query
            searchQuery ? {
              $or: [
                { "applicantDetails.mobileNo": { $regex: searchQuery, $options: "i" } },
                { "applicantDetails.fullName": { $regex: searchQuery, $options: "i" } },
                { "applicantDetails.fatherName": { $regex: searchQuery, $options: "i" } },
                { "customerDetailData.customerFinId": { $regex: searchQuery, $options: "i" } }
              ]
            } : {},

            // Branch filter
            branch && branch !== "all" ? {
              "branchDetails._id": {
                $in: (Array.isArray(branch) ? branch : branch.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},

            // Regional branch filter
            regionalBranch && regionalBranch !== "all" ? {
              "regionalBranchDetails._id": {
                $in: (Array.isArray(regionalBranch) ? regionalBranch : regionalBranch.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},

            // Product filter
            product && product !== "all" ? {
              "customerDetailData.productId": {
                $in: (Array.isArray(product) ? product : product.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},

            // SanctionStage filter
            sanctionStage ? 
              sanctionStage === "partnerNotSelect" ? 
                { "finalsanctionData.partnerId": null } : 
              sanctionStage === "sanctionDetailNotComplete" ?
                {
                  $or: [
                    { "vendors.vendorType": "legal", "vendors.statusByVendor": { $ne: "approve" } },
                    { "vendors.vendorType": "technical", "vendors.statusByVendor": { $ne: "complete" } },
                    { "vendors.vendorType": "rcu", "vendors.statusByVendor": { $ne: "notRequired" } }
                  ]
                } :
              sanctionStage === "sanctionDetailComplete" ?
                {
                  $and: [
                    { $or: [
                        { "vendors.vendorType": "legal", "vendors.statusByVendor": "approve" },
                        { "vendors": { $not: { $elemMatch: { vendorType: "legal" } } } }
                      ]
                    },
                    { $or: [
                        { "vendors.vendorType": "technical", "vendors.statusByVendor": "complete" },
                        { "vendors": { $not: { $elemMatch: { vendorType: "technical" } } } }
                      ]
                    },
                    { $or: [
                        { "vendors.vendorType": "rcu", "vendors.statusByVendor": "notRequired" },
                        { "vendors": { $not: { $elemMatch: { vendorType: "rcu" } } } }
                      ]
                    },
                    { "finalsanctionData.sendToPartnerSanctionStatus": { $ne: "complete" } }
                  ]
                } : 
                {}
              : {},

            // finalApproverStatus filter
            finalApproverStatus && finalApproverStatus !== "partnerNotSelect" ? {
              $and: finalApproverStatus.split(",").map(statusKey => ({
                [`finalsanctionData.${statusKey}`]: "complete"
              }))
            } : {},

            // Special case for finalApproverStatus=partnerNotSelect
            finalApproverStatus === "partnerNotSelect" ? {
              "finalsanctionData.partnerId": null
            } : {},

            // fileProcessStatus filter
            fileProcessStatus ? {
              $and: fileProcessStatus.split(",").map(statusKey => ({
                [`finalsanctionData.${statusKey}`]: "complete"
              }))
            } : {},

            // Date range filter
            startDateFilter && endDateFilter && startDateFilter !== "all" && endDateFilter !== "all" ? {
              creditPdCompleteDate: {
                $gte: formattedStart,
                $lt: formattedEnd,
              }
            } : {},
            
            // Self assign employee filter
            selfAssignEmployee && selfAssignEmployee !== "all" ? {
              "finalsanctionData.employeeId": {
                $in: (Array.isArray(selfAssignEmployee) ? selfAssignEmployee : selfAssignEmployee.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},
            
            // Exclude specific products when no product filter
            (!product || product === "all") ? {
              "customerDetailData.productId": {
                $nin: [].map(id => new ObjectId(id))
              }
            } : {}
          ].filter(condition => Object.keys(condition).length > 0)
        }
      },
      
      {
        $addFields: {
          vendors: [
            // RM Vendor
            {
              vendorType: "rm",
              statusByVendor: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "rm"] }
                          }
                        },
                        in: "$$this.statusByVendor"
                      }
                    }
                  },
                  "notAssign"
                ]
              },
              fileStageStatus: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "rm"] }
                          }
                        },
                        in: "$$this.fileStageStatus"
                      }
                    }
                  },
                  ""
                ]
              }
            },
            
            // RCU Vendor
            {
              vendorType: "rcu",
              statusByVendor: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "rcu"] }
                          }
                        },
                        in: "$$this.statusByVendor"
                      }
                    }
                  },
                  "notRequired"
                ]
              },
              fileStageStatus: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "rcu"] }
                          }
                        },
                        in: "$$this.fileStageStatus"
                      }
                    }
                  },
                  ""
                ]
              }
            },
            
            // Legal Vendor
            {
              vendorType: "legal",
              statusByVendor: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "legal"] }
                          }
                        },
                        in: "$$this.statusByVendor"
                      }
                    }
                  },
                  "approve"
                ]
              },
              fileStageStatus: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "legal"] }
                          }
                        },
                        in: "$$this.fileStageStatus"
                      }
                    }
                  },
                  ""
                ]
              }
            },
            
            // Technical Vendor
            {
              vendorType: "technical",
              statusByVendor: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "technical"] }
                          }
                        },
                        in: "$$this.statusByVendor"
                      }
                    }
                  },
                  "complete"
                ]
              },
              fileStageStatus: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "technical"] }
                          }
                        },
                        in: "$$this.fileStageStatus"
                      }
                    }
                  },
                  ""
                ]
              }
            },
            
            // Tagging Vendor
            {
              vendorType: "tagging",
              statusByVendor: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "tagging"] }
                          }
                        },
                        in: "$$this.statusByVendor"
                      }
                    }
                  },
                  "WIP"
                ]
              },
              fileStageStatus: {
                $ifNull: [
                  {
                    $first: {
                      $map: {
                        input: {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "tagging"] }
                          }
                        },
                        in: "$$this.fileStageStatus"
                      }
                    }
                  },
                  ""
                ]
              }
            }
          ]
        }
      },
      
      // Add calculated fields with additional fields from finalApprovalDashboardUpdate
      {
        $addFields: {
          customerId: "$customerDetailData._id",
          productName: { $ifNull: ["$productDetailData.productName", ""] },
          partnerName: { $ifNull: ["$partnerDetails.fullName", ""] },
          regionalBranchName: { $ifNull: ["$regionalBranchDetails.name", ""] },
          branchName: { $ifNull: ["$branchDetails.name", ""] },
          loginDate: { $ifNull: ["$customerDetailData.createdAt", ""] },
          customerFinId: { $ifNull: ["$customerDetailData.customerFinId", ""] },
          customerFullName: { $ifNull: ["$applicantDetails.fullName", ""] },
          customerFatherName: { $ifNull: ["$applicantDetails.fatherName", ""] },
          mobileNo: { $ifNull: ["$applicantDetails.mobileNo", ""] },
          salesPersonName: "$salesPerson.employeName",
          salesPersonManagerName: "$reportingManager.employeName",
          pdPersonName: "$pdEmployeeDetail.employeName",
          finalLoanAmount: { $ifNull: ["$finalsanctionData.finalLoanAmount", ""] },
          tenureInMonth: { $ifNull: ["$finalsanctionData.tenureInMonth", ""] },
          roi: { $ifNull: ["$finalsanctionData.roi", ""] },
          selfAssignEmployeeName: { $ifNull: ["$selfAssignEmployee.employeName", ""] },
          selfAssignStatus: { $ifNull: ["$finalsanctionData.finalSenctionFileSelfAssign", false] },
          selfAssignEmployee: { $ifNull: ["$finalsanctionData.employeeId", null] },
          // Additional fields from finalApprovalDashboardUpdate
          esignLinks: "$finalsanctionData.esignLinks",
          esignStatus: {
            $cond: {
              if: {
                $or: [
                  { $eq: ["$finalsanctionData.esignLinks", null] },
                  { $eq: ["$finalsanctionData.esignLinks", {}] },
                  {
                    $and: [
                      { $eq: [{ $ifNull: ["$finalsanctionData.esignLinks.applicant", ""] }, ""] },
                      { $eq: [{ $ifNull: ["$finalsanctionData.esignLinks.coApplicant", ""] }, ""] },
                      { $eq: [{ $ifNull: ["$finalsanctionData.esignLinks.coApplicantTwo", ""] }, ""] }
                    ]
                  }
                ]
              },
              then: "No",
              else: "Yes"
            }
          },
          Nachlink: {
            $cond: {
              if: { 
                $or: [
                  { $eq: ["$bankstatementkycData.Nachlink", null] }, 
                  { $eq: ["$bankstatementkycData.Nachlink", ""] }
                ] 
              },
              then: "NO",
              else: "YES"
            }
          },
          incomeSanctionStatus: { $ifNull: ["$finalsanctionData.incomeSanctionStatus", ""] },
          sendToPartnerPostDisbursedStatus: { $ifNull: ["$finalsanctionData.sendToPartnerPostDisbursedStatus", ""] },
          sendToPartnerPreDisbursedStatus: { $ifNull: ["$finalsanctionData.sendToPartnerPreDisbursedStatus", ""] },
          sendToPartnerSanctionStatus: { $ifNull: ["$finalsanctionData.sendToPartnerSanctionStatus", ""] },
          fileProcessRejectStatus: { $ifNull: ["$finalsanctionData.fileProcessRejectStatus", ""] },
          fileStage: {
            $cond: {
              if: { $eq: ["$processData", null] },
              then: {},
              else: { $ifNull: ["$processData.fileStage", {}] }
            }
          },
          fileStageForms: {
            $cond: {
              if: { $eq: ["$processData", null] },
              then: {},
              else: { $ifNull: ["$processData.fileStageForms", {}] }
            }
          }
        }
      },
      
      // Group by customerId
      {
        $group: {
          _id: "$customerId",
          customerFinId: { $first: "$customerFinId" },
          customerId: { $first: "$customerId" },
          loginDate: { $first: "$loginDate" },
          branchName: { $first: "$branchName" },
          productName: { $first: "$productName" },
          partnerName: { $first: "$partnerName" },
          regionalBranchName: { $first: "$regionalBranchName" },
          salesPersonName: { $first: "$salesPersonName" },
          customerFullName: { $first: "$customerFullName" },
          customerFatherName: { $first: "$customerFatherName" },
          mobileNo: { $first: "$mobileNo" },
          salesPersonManagerName: { $first: "$salesPersonManagerName" },
          pdPersonName: { $first: "$pdPersonName" },
          creditPdCompleteDate: { $first: "$creditPdCompleteDate" },
          statusByCreditPd: { $first: "$statusByCreditPd" },
          roi: { $first: "$roi" },
          tenureInMonth: { $first: "$tenureInMonth" },
          finalLoanAmount: { $first: "$finalLoanAmount" },
          vendors: { $first: "$vendors" },
          fileStage: { $first: "$fileStage" },
          fileStageForms: { $first: "$fileStageForms" },
          // Additional fields from finalApprovalDashboardUpdate
          esignLinks: { $first: "$esignLinks" },
          esignStatus: { $first: "$esignStatus" },
          Nachlink: { $first: "$Nachlink" },
          selfAssignEmployeeName: { $first: "$selfAssignEmployeeName" },
          selfAssignStatus: { $first: "$selfAssignStatus" },
          selfAssignEmployee: { $first: "$selfAssignEmployee" },
          incomeSanctionStatus: { $first: "$incomeSanctionStatus" },
          sendToPartnerPostDisbursedStatus: { $first: "$sendToPartnerPostDisbursedStatus" },
          sendToPartnerPreDisbursedStatus: { $first: "$sendToPartnerPreDisbursedStatus" },
          sendToPartnerSanctionStatus: { $first: "$sendToPartnerSanctionStatus" },
          fileProcessRejectStatus: { $first: "$fileProcessRejectStatus" }
        }
      },
      
      // Adding counts like finalApprovalDashboardUpdate
      {
        $facet: {
          totalCount: [{ $count: "total" }],
          paginatedResults: [
            { $skip: skip },
            { $limit: limitNumber }
          ],
          notAssignCount: [
            { $match: { selfAssignEmployee: null } },
            { $count: "count" }
          ],
          selfAssignCount: [
            { $match: { selfAssignEmployee: { $ne: null } } },
            { $count: "count" }
          ],
          incomeSanctionStatus: [
            { $match: { incomeSanctionStatus: "complete" } },
            { $count: "count" }
          ],
          fileProcessRejectStatus: [
            { $match: { fileProcessRejectStatus: "complete" } },
            { $count: "count" }
          ],
          sendToPartnerPostDisbursedStatus: [
            { $match: { sendToPartnerPostDisbursedStatus: "complete" } },
            { $count: "count" }
          ],
          sendToPartnerPreDisbursedStatus: [
            { $match: { sendToPartnerPreDisbursedStatus: "complete" } },
            { $count: "count" }
          ],
          sendToPartnerSanctionStatus: [
            { $match: { sendToPartnerSanctionStatus: "complete" } },
            { $count: "count" }
          ]
        }
      }
    ];
    
    const results = await externalVendorFormModel
      .aggregate(aggregationPipeline)
      .allowDiskUse(true);
    
    const total = results[0]?.totalCount[0]?.total || 0;
    const responseData = results[0]?.paginatedResults || [];
    
    if (responseData.length === 0) {
      return notFound(res, 'No eligible customer data found for this page');
    }
    
    const totalPages = Math.ceil(total / limitNumber);
    
    // Calculate count metrics like finalApprovalDashboardUpdate
    const notAssignCount = results[0]?.notAssignCount[0]?.count || 0;
    const selfAssignCount = results[0]?.selfAssignCount[0]?.count || 0;
    const incomeSanctionStatusCount = results[0]?.incomeSanctionStatus[0]?.count || 0;
    const fileProcessRejectStatusCount = results[0]?.fileProcessRejectStatus[0]?.count || 0;
    const sendToPartnerPostDisbursedStatusCount = results[0]?.sendToPartnerPostDisbursedStatus[0]?.count || 0;
    const sendToPartnerPreDisbursedStatusCount = results[0]?.sendToPartnerPreDisbursedStatus[0]?.count || 0;
    const sendToPartnerSanctionStatusCount = results[0]?.sendToPartnerSanctionStatus[0]?.count || 0;
    
    success(res, 'Customer data with file stages fetched successfully', {
      total,
      page: pageNumber,
      limit: limitNumber,
      totalPages,
      data: responseData,
      counts: {
        notAssignCount,
        selfAssignCount,
        incomeSanctionStatus: incomeSanctionStatusCount,
        fileProcessRejectStatus: fileProcessRejectStatusCount,
        sendToPartnerPostDisbursedStatus: sendToPartnerPostDisbursedStatusCount,
        sendToPartnerPreDisbursedStatus: sendToPartnerPreDisbursedStatusCount,
        sendToPartnerSanctionStatus: sendToPartnerSanctionStatusCount
      },
      pagination: {
        totalRecords: total,
        currentPage: pageNumber,
        pageSize: limitNumber,
        totalPages
      }
    });
  } catch (error) {
    console.error(error);
    unknownError(res, error);
  }
}

const updateLenderProduct = async(req, res) => {
  try {
    const { customerId,lenderProdcutId } = req.body;
      const partnerData = await finalModel.findOneAndUpdate({ customerId },
        {
          $set:{
            lenderProdcutId:lenderProdcutId
          }
        },
        {
          new:true
        }
      )
     
    success(res, "document details",{
      data:partnerData.lenderProdcutId
    });
  } catch (error) {
    console.error("Error in sendToPartnerSanction:", error);
    return unknownError(res, error);
  }
};

const customerPolicyCheck = async(req, res) => {
  try {
    const { customerId } = req.query;
    const customerData = await customerModel.findOne({_id:customerId})
    .populate("branch", "name") 
    .populate("productId", "productName")
    .populate("employeId", "employeName")
    // console.log(customerData,"customerData<<>><<>>")
      const appData = await applicantModel.findOne({ customerId });
      const cibilData = await cibilModel.findOne({ customerId }).populate("customerId");
      const coAppData = await coApplicantModel.find({ customerId });
      const technicalData = await technicalApproveFormModel.findOne({ customerId });
      const creditPdData = await creditPdModel.findOne({ customerId });
      const partnerData = await finalModel.findOne({ customerId }).populate('partnerId');
      const guarantorDetails = await guarantorModel.findOne({ customerId });
      const approveTechnicalDetails = await approverFormModel.findOne({ customerId })
      const finalData = await finalModel.findOne({ customerId })
      const customerObjectId = mongoose.Types.ObjectId.isValid(customerId)
        ? new mongoose.Types.ObjectId(customerId)
        : customerId;
      let links = (finalData?.signEsignLink && Object.keys(finalData.signEsignLink).length > 0)
        ? finalData.signEsignLink
        : finalData?.esignLinks;
      // console.log(customerDocumentDetails, "customerDocumentDetails")
  
      // Function to extract all income source photos
      const extractIncomeSourcePhotos = (creditPdData) => {
        const allPhotos = [];
        
        if (creditPdData?.incomeSource && Array.isArray(creditPdData.incomeSource)) {
          creditPdData.incomeSource.forEach(source => {
            // Extract agriculture photos
            if (source.agricultureBusiness?.agriculturePhotos && Array.isArray(source.agricultureBusiness.agriculturePhotos)) {
              allPhotos.push(...source.agricultureBusiness.agriculturePhotos);
            }
            
            // Extract milk business photos (milk photos and animal photos)
            if (source.milkBusiness) {
              if (source.milkBusiness.milkPhotos && Array.isArray(source.milkBusiness.milkPhotos)) {
                allPhotos.push(...source.milkBusiness.milkPhotos);
              }
              if (source.milkBusiness.animalPhotos && Array.isArray(source.milkBusiness.animalPhotos)) {
                allPhotos.push(...source.milkBusiness.animalPhotos);
              }
            }
            
            // Extract salary income photos
            if (source.salaryIncome) {
              if (source.salaryIncome.last3MonthSalarySlipPhotos && Array.isArray(source.salaryIncome.last3MonthSalarySlipPhotos)) {
                allPhotos.push(...source.salaryIncome.last3MonthSalarySlipPhotos);
              }
              if (source.salaryIncome.salaryPhotos && Array.isArray(source.salaryIncome.salaryPhotos)) {
                allPhotos.push(...source.salaryIncome.salaryPhotos);
              }
              if (source.salaryIncome.bankStatementPhoto) {
                allPhotos.push(source.salaryIncome.bankStatementPhoto);
              }
              if (source.salaryIncome.salaryCredited6Month) {
                allPhotos.push(source.salaryIncome.salaryCredited6Month);
              }
            }
            
            // Extract other business photos
            if (source.other?.incomeOtherImages && Array.isArray(source.other.incomeOtherImages)) {
              allPhotos.push(...source.other.incomeOtherImages);
            }
          });
        }
        
        // Remove duplicates and filter out empty values
        return [...new Set(allPhotos)].filter(photo => photo);
      };
  
      // Extract income source photos
      const incomeSourcePhotos = extractIncomeSourcePhotos(creditPdData);
      let monthlyIncome = ""; // Initialize monthlyIncome
      let aggreLand = 0;
      function getRoundedEMI(emi) {
        if (emi === undefined || emi === null) return ""; // Return empty string for null or undefined
        return Math.round(emi); // Round off the EMI value to the nearest integer
      }
      if (partnerData?.partnerId?.fullName === 'grow money capital pvt ltd' || partnerData?.partnerId?.fullName === 'GROW MONEY CAPITAL PVT LTD') {
        monthlyIncome = getRoundedEMI(partnerData?.totalIncomeMonthlyCalculation?.totalFormula) || "";
       // Safely calculate the total of AreaCultivationAcres
       aggreLand = partnerData?.agricultureIncome?.details[0]?.AreaCultivationAcres;   
       }
       else {
        monthlyIncome = getRoundedEMI(partnerData?.netCalculation?.totalNetMonthlyIncome) || "";
        aggreLand = partnerData?.agricultureRatnaIncome?.details[0]?.AreaCultivationAcres;
      }

      // console.log(partnerData?.partnerId,"partnerData?.partnerIdpartnerData?.partnerId")
      
      let lenderDetail = await lenderModel
      .findOne({_id:partnerData?.partnerId})
      .populate("branchId", "name") // Only select name and location fields
      .populate("productId", "productName")
      .populate("employeeId", "employeName") // Only select name and price fields
      .populate({
        path: "policy",
        populate: [
          {
            path: "productId",
            model: "lenderProduct",
            select: "name",
          }
        ],
      })

      // console.log(lenderDetail.policy,"lenderDetaillenderDetail<<>><<>>",lenderDetail.fullName)

              // Extract the lender product ID from partner data
              const lenderProductId = partnerData?.lenderProdcutId;
               // console.log(lenderProductId,"lenderProductIdlenderProductIdlenderProductId")
              // Find matching policy for the lender product ID
              const matchingPolicy = lenderDetail?.policy?.find(policy => 
                policy.productId?._id?.toString() === lenderProductId?.toString()
              );
              
              if (!matchingPolicy) {
                return badRequest(res, "No matching policy found for this product");
              }
       
              const customerValues = {
                loanAmount: parseFloat(partnerData?.finalLoanAmount || 0),
                tenure: parseInt(partnerData?.tenureInMonth || 0),
                ageOfApplicant: parseInt(appData?.age || 0),
                ageOfPropertyOwner: parseInt(appData?.age || 0),
                cibilScore: parseInt(cibilData?.applicantCibilScore || 0),
                minimumMonthlyFamilyIncome: partnerData?.netCalculationNew?.overAllTotalNetMonthlyIncome,
                foir: parseFloat(partnerData?.netCalculationNew?.foir || 0),
                ageOfCoBorrower: parseInt(coAppData[0]?.age || 0),
                cibilScoreCoBorrower: parseInt(cibilData?.coApplicantData[0]?.coApplicantCibilScore || 0),
                ageOfGuarantor: parseInt(guarantorDetails?.age || 0),
                cibilScoreGuarantor: parseInt(cibilData?.guarantorCibilScore || 0),
                propertyArea: parseFloat(technicalData?.totalLandArea || 0),
                ltv: technicalData?.Ltv,//,
                minimumAgricultureLand: partnerData?.agricultureIncomeNew?.details[0]?.AreaInAcres || 0// parseFloat(aggreLand || 0)
              };
              
              console.log(customerValues,"customerValues")
              // Build the result with policy checks
              const policyCheckResult = {};
              
              const checkValue = (key, value, policyRange) => {
                if (!policyRange) return { value, checkStatus: "N/A" };
              
                const min = parseFloat(policyRange.min || 0);
                const max = parseFloat(policyRange.max || Infinity);
                let checkStatus = "No";
              
                if (key.includes("cibilScore")) {
                  // CIBIL Score Condition (≤ 300 is Yes, ≥ 650 is Yes)
                  if (value <= 300 || value >= 650) {
                    checkStatus = "Yes"; 
                  } else {
                    checkStatus = "No"; 
                  }
                } else if (key === "ltv" || key === "foir") {
                  // Extract numeric value and convert it to a number
                  const numericValue = parseFloat(value.toString().replace("%", "")); 
              
                  // LTV Condition (≤ 50 is Yes, > 50 is No)
                  checkStatus = numericValue !== "" && numericValue <= 50 ? "Yes" : "No";
              } else {
                  // General range check for other fields
                  checkStatus = value >= min && (max === Infinity || value <= max) ? "Yes" : "No";
                }

                  // Ensure 'upto' appears only for 'ltv' and 'foir'
              //  const maxValueLabel = (key === "ltv" || key === "foir") ? "" : (max === Infinity ? "no limit" : max);
              
                return {
                  value,
                  policyRange: (key === "ltv" || key === "foir") ? `upto ${min}` : `${min} - ${max === Infinity ? "no limit" : max}`,
                  checkStatus
                };
              };
          
              for (const [key, value] of Object.entries(customerValues)) {
                if (matchingPolicy[key]) {
                  policyCheckResult[key] = checkValue(key, value, matchingPolicy[key]);
                }
              }
          
              const isCompliant = Object.values(policyCheckResult).every(check =>
                check.checkStatus === "Yes" || check.checkStatus === "N/A"
              );
          
              return success(res, "Policy check completed", {
                isCompliant,
                policyDetails: policyCheckResult
              });
            } catch (error) {
              console.error("Error in sendToPartnerSanction:", error);
              return unknownError(res, error);
            }
};

const customerAllData = async(req, res) => {
  try {
    const { customerId } = req.query;
    const customerData = await customerModel.findOne({_id:customerId})
    .populate("branch", "name") 
    .populate("productId", "productName")
    .populate("employeId", "employeName")
    const finalData = await finalModel.findOne({customerId}).populate('lenderProdcutId')
    // console.log(finalData,"finalDatafinalData")
    const gtrCoappData = await guarantorStatementDetails.findOne({customerId})
    const loanDocument = await loanDocumentModel.findOne({ customerId });

    // console.log(finalData,"finalData<<<<<>>>>>><<>>")
    
              return success(res, "customer details", {
                employeeId: customerData?.employeId || "",
                productId:  customerData?.productId || "",
                branchId: customerData?.branch || "",
                lenderProdcutId : finalData?.lenderProdcutId || "",
                sanctionZipUrl: finalData?.sanctionZipUrl || "",
                gtrCoAppBankDetails:gtrCoappData || {},
                camReport: loanDocument?.camReport || "",
                incomesectionLatterUrl: finalData?.incomesectionLatterUrl || "",
                enderProdcutId: finalData?.lenderProdcutId || ""
              });
            } catch (error) {
              console.error("Error in sendToPartnerSanction:", error);
              return unknownError(res, error);
            }
};

//check document for the sanction
const customerDocumentCheck = async(req, res) => {
  try {
    const { customerId } = req.query;
    console.log(customerId, "customerIdcustomerId");
    const externalVendorFormData = await externalVendorFormModel.findOne({
      customerId,
    });
    const creditPdData = await creditPdModel.findOne({ customerId });
    const gtrPdcData = await gtrPdcModel.findOne({ customerId });
    const appPdcData = await appPdcModel.findOne({ customerId });
    const disbursementData = await disbursementModel.findOne({ customerId });
    const coApplicantData = await coApplicantModel.find({ customerId });
    const applicantData = await applicantModel.findOne({ customerId });
    const guarantorData = await guarantorModel.findOne({ customerId });
    const cibilData = await cibilModel.findOne({ customerId });
    const loanDocumentData = await loanDocumentModel.findOne({ customerId });
    const SignKycDetails = await SignKycModel.findOne({ customerId });
    const finalData = await finalModel.findOne({ customerId })
    const customerObjectId = mongoose.Types.ObjectId.isValid(customerId)
      ? new mongoose.Types.ObjectId(customerId)
      : customerId;
    console.log(customerObjectId, "customerObjectId")
    const customerDocumentDetails = await customerDocumentModel.findOne({ customerId: customerObjectId });
    const loanDocument = await loanDocumentModel.findOne({ customerId });
    const bankStatementData = await bankStatementModel.findOne({ customerId })

    let links = (finalData?.signEsignLink && Object.keys(finalData.signEsignLink).length > 0)
      ? finalData.signEsignLink
      : finalData?.esignLinks;

    const rcuVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "rcu"
    );
    const legalVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "legal"
    );
    const technicalVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "technical"
    );
    const rmVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "rm"
    );
    const taggingVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "tagging"
    );

    // Function to extract all income source photos
    const extractIncomeSourcePhotos = (creditPdData) => {
      const allPhotos = [];
      
      if (creditPdData?.incomeSource && Array.isArray(creditPdData.incomeSource)) {
        creditPdData.incomeSource.forEach(source => {
          // Extract agriculture photos
          if (source.agricultureBusiness?.agriculturePhotos && Array.isArray(source.agricultureBusiness.agriculturePhotos)) {
            allPhotos.push(...source.agricultureBusiness.agriculturePhotos);
          }
          
          // Extract milk business photos (milk photos and animal photos)
          if (source.milkBusiness) {
            if (source.milkBusiness.milkPhotos && Array.isArray(source.milkBusiness.milkPhotos)) {
              allPhotos.push(...source.milkBusiness.milkPhotos);
            }
            if (source.milkBusiness.animalPhotos && Array.isArray(source.milkBusiness.animalPhotos)) {
              allPhotos.push(...source.milkBusiness.animalPhotos);
            }
          }
          
          // Extract salary income photos
          if (source.salaryIncome) {
            if (source.salaryIncome.last3MonthSalarySlipPhotos && Array.isArray(source.salaryIncome.last3MonthSalarySlipPhotos)) {
              allPhotos.push(...source.salaryIncome.last3MonthSalarySlipPhotos);
            }
            if (source.salaryIncome.salaryPhotos && Array.isArray(source.salaryIncome.salaryPhotos)) {
              allPhotos.push(...source.salaryIncome.salaryPhotos);
            }
            if (source.salaryIncome.bankStatementPhoto) {
              allPhotos.push(source.salaryIncome.bankStatementPhoto);
            }
            if (source.salaryIncome.salaryCredited6Month) {
              allPhotos.push(source.salaryIncome.salaryCredited6Month);
            }
          }
          
          // Extract other business photos
          if (source.other?.incomeOtherImages && Array.isArray(source.other.incomeOtherImages)) {
            allPhotos.push(...source.other.incomeOtherImages);
          }
        });
      }
      
      // Remove duplicates and filter out empty values
      return [...new Set(allPhotos)].filter(photo => photo);
    };

    // Extract income source photos
    const incomeSourcePhotos = extractIncomeSourcePhotos(creditPdData);

    let lenderDetail = await lenderModel
    .findOne({ _id: finalData?.partnerId })
    .select('sanctionChecklist');

    console.log(lenderDetail,"lenderDetaillenderDetaillenderDetail")

    const responseData = {
          utilityBillAndResiProof:
          customerDocumentDetails?.incomeDocument?.utilityBillDocument || [],
          familyCard:
          customerDocumentDetails?.incomeDocument?.familyCardDocument || [],
          udyamCertificate:
          customerDocumentDetails?.incomeDocument?.udyamCertificateDocument ||
          [],
          bankStatement:
          customerDocumentDetails?.incomeDocument?.bankStatementDocument || [],
          incomeDocument:
          customerDocumentDetails?.incomeDocument?.incomeStatemenDocument || [],
          propertyDocument:
          customerDocumentDetails?.propertyDocuments?.propertyDocument || [],
          applicantKycSelfAttested: customerDocumentDetails?.signApplicantKyc || [],
          coApplicantKycSelfAttested: customerDocumentDetails?.signCoApplicantKyc || [],
          secondCoApplicantKycSelfAttested:
          customerDocumentDetails?.signCoTwoApplicantKyc || [],
          guarantorKycSelfAttested: customerDocumentDetails?.signGurantorKyc || [],
        //
        applicantKycOsv: SignKycDetails?.ApplicantSignDocument || "",
        coApplicantKycOsv: SignKycDetails?.coApplicantSignDocument || "",
        gurantorKycOsv: SignKycDetails?.guarantorSignDocument || "",
        applicantKycNoSignNoOsv: {
          applicantAadharFrontImage:
            applicantData?.kycUpload?.aadharFrontImage || "",
          applicantAadharBackImage:
            applicantData?.kycUpload?.aadharBackImage || "",
          applicantPanFrontImage: applicantData?.kycUpload?.panFrontImage || "",
          applicantDrivingLicenceImage:
            applicantData?.kycUpload?.drivingLicenceImage || "",
          applicantVoterIdImage: applicantData?.kycUpload?.voterIdImage || "",
        },
        coApplicantKycNoSignNoOsv: {
          coApplicantKycAadharFrontImage:
            coApplicantData[0]?.kycUpload?.aadharFrontImage || "",
          coApplicantKycAadharBackImage:
            coApplicantData[0]?.kycUpload?.aadharBackImage || "",
          // coApplicantKycDocType:coApplicantData[0]?.kycUpload?.docImage || "",
          coApplicantKycDocImage: coApplicantData[0]?.kycUpload?.docImage || "",
        },
        secondCoApplicantKycNoSignNoOsv: {
          coApplicantKycTwoAadharFrontImage:
            coApplicantData[1]?.kycUpload?.aadharFrontImage || "",
          coApplicantKycTwoAadharBackImage:
            coApplicantData[1]?.kycUpload?.aadharBackImage || "",
          coApplicantKycTwoDocImage:
            coApplicantData[1]?.kycUpload?.docImage || "",
        },
        guarantorKycNoSignNoOsv: {
          gurantorAadharFrontImage:
            guarantorData?.kycUpload?.aadharFrontImage || "",
          gurantorAadharBackImage:
            guarantorData?.kycUpload?.aadharBackImage || "",
          gurantorDocImage: guarantorData?.kycUpload?.docImage || "",
        },
        applicantCibilReport: cibilData?.applicantFetchHistory?.slice(-1)[0]?.cibilReport || "",
        coApplicantCibilReport:
          Array.isArray(cibilData?.coApplicantData[0]?.coApplicantFetchHistory)
            ? cibilData.coApplicantData[0].coApplicantFetchHistory.slice(-1)[0]?.cibilReport
            : "",
        secondCoApplicantCibilReport:
          Array.isArray(cibilData?.coApplicantData[1]?.coApplicantFetchHistory)
            ? cibilData.coApplicantData[0].coApplicantFetchHistory.slice(-1)[0]?.cibilReport
            : "",
        guarantorCibilReport: cibilData?.guarantorFetchHistory?.slice(-1)[0]?.cibilReport || "",
        pdReport: creditPdData?.pdfLink || "",
        rcuReport: rcuVendor?.uploadProperty || [],
        legalReport: legalVendor?.uploadProperty || [],
        technicalReport: technicalVendor?.uploadProperty || [],
        taggingReport: taggingVendor?.uploadProperty || [],
        housePhotos: [
          ...(Array.isArray(creditPdData?.fourBoundaryPhotos)
            ? creditPdData?.fourBoundaryPhotos
            : [creditPdData?.fourBoundaryPhotos]),
          ...(Array.isArray(creditPdData?.houseInsidePhoto)
            ? creditPdData?.houseInsidePhoto
            : [creditPdData?.houseInsidePhoto]),
          ...(Array.isArray(creditPdData?.propertyOtherPhotos)
            ? creditPdData?.propertyOtherPhotos
            : [creditPdData?.propertyOtherPhotos]),
          creditPdData?.selfiWithCustomer || "",
          creditPdData?.photoWithLatLong || "",
          creditPdData?.front || "",
          creditPdData?.leftSide || "",
          creditPdData?.rightSide || "",
          creditPdData?.approachRoad || "",
          creditPdData?.mainRoad || "",
          creditPdData?.interiorRoad || "",
          creditPdData?.selfieWithProperty || "",
          creditPdData?.landmarkPhoto || "",
          creditPdData?.latLongPhoto || "",
        ].filter(Boolean),
        // workPhotos: creditPdData?.workPhotos || [],
        // workPhotosDetails: "Recive from creditPd form",
        workPhotos: creditPdData?.workPhotos || [],
        camReport: loanDocument?.camReport || "",
        dualNameDeclaration: loanDocumentData?.dualNameDeclaration || "",
        dualSignDeclaration: loanDocumentData?.dualSignDeclaration || "",
        dualDobDeclaration: loanDocumentData?.dualDoBDeclaration || "",
        applicantPDC: appPdcData?.applicantPdcDocument || [],
        guarantorPDC: gtrPdcData?.guarantorPdcDocument || [],
        applicantBSV: loanDocumentData?.applicantBSV || "",
        guarantorBSV: loanDocumentData?.guarantorBSV || "",
        coOwnershipDeed: loanDocumentData?.coOwnershipDeed || "",
        eStampUpload:
          disbursementData?.estampRequirement?.flatMap(
            (stamp) => stamp.eStampUpload || []
          ) || [],
        insuranceFormWithCalculator: loanDocumentData?.insuranceForm || "",
        emOrRmDeed: loanDocumentData?.emOrRmDeed || "",
        finalLegal: legalVendor?.finalLegalUpload || "",
        vettingReport: loanDocument?.vettingReport || "",
        eNachScreenshort: disbursementData?.eNachLinkSignUpload || "",
        eSignatureDocuments: disbursementData?.eSignatureDocuments || "",
        appKycDocument: loanDocument?.appKycDocument || [],
        coAppKycDocument: loanDocument?.coAppKycDocument || [],
        formSixteenSelfAttested: loanDocument?.form60 || [],
        stampPaper: loanDocumentData?.stampPdf || [],
        applicationForm: finalData?.ratnaPdfUrls?.applicantionLatter || finalData?.fcplPdfUrls?.fincooperApplicantPdf || finalData?.growMoneyPdfUrls?.growApplicantPdf || finalData?.naamDevPdflink?.naamDevApplicantPdf || "",
        sanctionLatter: finalData?.ratnaPdfUrls?.sectionLatter || finalData?.fcplPdfUrls?.fincooperSanctionLetterPdf || finalData?.growMoneyPdfUrls?.growSanctionLetterPdf || finalData?.naamDevPdflink?.naamDevSanctionLetter || "",
        loanDocument:  finalData?.fcplPdfUrls?.fincooperLoanAgreement || finalData?.growMoneyPdfUrls?.rcplLoanAgreement|| finalData?.naamDevPdflink?.naamDevLoanPdf || "",
        pdDeed: finalData?.ratnaPdfUrls?.LdAndPdDeed || finalData?.fcplPdfUrls?.fincooperPgDeedPdf || finalData?.growMoneyPdfUrls?.growPgDeedPdf|| ""

    };

    console.log(responseData,"responseData<><><><>")
    const allDocuments = [
      { name: "PD REPORT", key: "pdReport" },
      { name: "TECHNICAL REPORT", key: "technicalReport" },
      { name: "LEGAL REPORT (Sanction)", key: "legalReport" },
      { name: "RCU REPORT", key: "rcuReport" },
      { name: "APPLICANT CIBIL REPORT", key: "applicantCibilReport" },
      { name: "CO-APPLICANT CIBIL REPORT", key: "coApplicantCibilReport" },
      { name: "2nd CO-APPLICANT CIBIL REPORT", key: "secondCoApplicantCibilReport" },
      { name: "GUARANTOR CIBIL REPORT", key: "guarantorCibilReport" },
      { name: "APPLICANT KYC (NO SIGN , NO OSV )", key: "applicantKycNoSignNoOsv" },
      { name: "CO-APPLICANT KYC (NO SIGN , NO OSV )", key: "coApplicantKycNoSignNoOsv" },
      { name: "2nd CO-APPLICANT KYC (NO SIGN , NO OSV )", key: "secondCoApplicantKycNoSignNoOsv" },
      { name: "GUARANTOR KYC (NO SIGN , NO OSV )", key: "guarantorKycNoSignNoOsv" },
      { name: "HOUSE PHOTOS", key: "housePhotos" },
      { name: "WORK PHOTOS", key: "workPhotos" },
      { name: "CAM REPORT", key: "camReport" },
      { name: "APPLICANT KYC (SELF ATTESTED)", key: "applicantKycSelfAttested" },
      { name: "CO-APPLICANT KYC (SELF ATTESTED)", key: "coApplicantKycSelfAttested" },
      { name: "2nd CO-APPLICANT KYC (SELF ATTESTED)", key: "secondCoApplicantKycSelfAttested" },
      { name: "GUARANTOR KYC (SELF ATTESTED)", key: "guarantorKycSelfAttested" },
      { name: "FORM 60 (SELF ATTESTED)", key: "formSixteenSelfAttested" },
      { name: "INSURANCE FORM WITH CALCULATOR", key: "insuranceFormWithCalculator" },
      { name: "DUAL NAME DECLARATION", key: "dualNameDeclaration" },
      { name: "DUAL SIGN DECLARATION", key: "dualSignDeclaration" },
      { name: "DUAL DOB DECLARATION", key: "dualDobDeclaration" },
      { name: "APPLICANT PDC", key: "applicantPdc" },
      { name: "GUARANTOR PDC", key: "guarantorPdc" },
      { name: "APPLICANT BSV", key: "applicantBsv" },
      { name: "GUARANTOR BSV", key: "guarantorBsv" },
      { name: "E-NACH (Screenshot)", key: "eNachScreenshort" },
      { name: "STAMP PAPER", key: "stampPaper" },
      { name: "APPLICATION FORM", key: "applicationForm" },
      { name: "SANCTION LETTER", key: "sanctionLatter" },
      { name: "LOAN DOCUMENT", key: "loanDocument" },
      { name: "PG DEED", key: "pdDeed" },
      { name: "E-SIGNATURE DOCUMENTS", key: "eSignatureDocuments" },
      { name: "TAGGING REPORT", key: "taggingReport" },
      { name: "CO-OWNERSHIP DEED", key: "coOwnershipDeed" },
      { name: "EM/RM DEED", key: "emRmDeed" },
      { name: "LEGAL REPORT (FINAL)", key: "legalReportFinal" },
      { name: "VETTING REPORT", key: "vettingReport" },
      ]
    // This will hold the final checklist
const checklist = [];

// Go through each document in sanctionChecklist
if (lenderDetail?.sanctionChecklist) {
    lenderDetail.sanctionChecklist.forEach((documentKey) => {
        const document = allDocuments.find(doc => doc.key === documentKey);
        if (document) {
            const documentName = document.name;

            // Check if the document exists in responseData and has value
            const documentValue = responseData[documentKey];

            // Logic to check for presence (handling arrays, objects, strings, etc.)
            let isPresent = false;
            if (Array.isArray(documentValue)) {
                isPresent = documentValue.length > 0;  // non-empty array
            } else if (typeof documentValue === 'object') {
                isPresent = Object.values(documentValue).some(val => val);  // check object values
            } else {
                isPresent = !!documentValue;  // check for string/boolean presence
            }

            checklist.push({
                name: documentName,
                status: isPresent ? "Yes" : "No"
            });
        }
    });
}

// Add this checklist to the final response
// responseData.sanctionChecklistStatus = checklist;

// Finally, send the response with updated data
return success(res, "All documents link", checklist);
    
    // return success(res, "All documents link", responseData);
  } catch (error) {
   console.error("Error in sendToPartnerSanction:", error);
    return unknownError(res, error);
   }
};


//generate document zip
const generateDocumentZip = async(req, res) => {
  try {
    const { customerId } = req.query;
    // console.log(customerId, "customerIdcustomerId");
    const externalVendorFormData = await externalVendorFormModel.findOne({
      customerId,
    });
    const creditPdData = await creditPdModel.findOne({ customerId });
    const gtrPdcData = await gtrPdcModel.findOne({ customerId });
    const appPdcData = await appPdcModel.findOne({ customerId });
    const disbursementData = await disbursementModel.findOne({ customerId });
    const coApplicantData = await coApplicantModel.find({ customerId });
    const applicantData = await applicantModel.findOne({ customerId });
    const guarantorData = await guarantorModel.findOne({ customerId });
    const cibilData = await cibilModel.findOne({ customerId });
    const loanDocumentData = await loanDocumentModel.findOne({ customerId });
    const SignKycDetails = await SignKycModel.findOne({ customerId });
    const finalData = await finalModel.findOne({ customerId })
    const customerObjectId = mongoose.Types.ObjectId.isValid(customerId)
      ? new mongoose.Types.ObjectId(customerId)
      : customerId;
    console.log(customerObjectId, "customerObjectId")
    const customerDocumentDetails = await customerDocumentModel.findOne({ customerId: customerObjectId });
    const loanDocument = await loanDocumentModel.findOne({ customerId });
    const bankStatementData = await bankStatementModel.findOne({ customerId })

    let links = (finalData?.signEsignLink && Object.keys(finalData.signEsignLink).length > 0)
      ? finalData.signEsignLink
      : finalData?.esignLinks;

    const rcuVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "rcu"
    );
    const legalVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "legal"
    );
    const technicalVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "technical"
    );
    const rmVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "rm"
    );
    const taggingVendor = externalVendorFormData?.vendors.find(
      (vendor) => vendor.vendorType === "tagging"
    );

    // Function to extract all income source photos
    const extractIncomeSourcePhotos = (creditPdData) => {
      const allPhotos = [];
      
      if (creditPdData?.incomeSource && Array.isArray(creditPdData.incomeSource)) {
        creditPdData.incomeSource.forEach(source => {
          // Extract agriculture photos
          if (source.agricultureBusiness?.agriculturePhotos && Array.isArray(source.agricultureBusiness.agriculturePhotos)) {
            allPhotos.push(...source.agricultureBusiness.agriculturePhotos);
          }
          
          // Extract milk business photos (milk photos and animal photos)
          if (source.milkBusiness) {
            if (source.milkBusiness.milkPhotos && Array.isArray(source.milkBusiness.milkPhotos)) {
              allPhotos.push(...source.milkBusiness.milkPhotos);
            }
            if (source.milkBusiness.animalPhotos && Array.isArray(source.milkBusiness.animalPhotos)) {
              allPhotos.push(...source.milkBusiness.animalPhotos);
            }
          }
          
          // Extract salary income photos
          if (source.salaryIncome) {
            if (source.salaryIncome.last3MonthSalarySlipPhotos && Array.isArray(source.salaryIncome.last3MonthSalarySlipPhotos)) {
              allPhotos.push(...source.salaryIncome.last3MonthSalarySlipPhotos);
            }
            if (source.salaryIncome.salaryPhotos && Array.isArray(source.salaryIncome.salaryPhotos)) {
              allPhotos.push(...source.salaryIncome.salaryPhotos);
            }
            if (source.salaryIncome.bankStatementPhoto) {
              allPhotos.push(source.salaryIncome.bankStatementPhoto);
            }
            if (source.salaryIncome.salaryCredited6Month) {
              allPhotos.push(source.salaryIncome.salaryCredited6Month);
            }
          }
          
          // Extract other business photos
          if (source.other?.incomeOtherImages && Array.isArray(source.other.incomeOtherImages)) {
            allPhotos.push(...source.other.incomeOtherImages);
          }
        });
      }
      
      // Remove duplicates and filter out empty values
      return [...new Set(allPhotos)].filter(photo => photo);
    };

    // Extract income source photos
    const incomeSourcePhotos = extractIncomeSourcePhotos(creditPdData);

    let lenderDetail = await lenderModel
    .findOne({ _id: finalData?.partnerId })
    .select('sanctionChecklist');

    console.log(lenderDetail,"lenderDetaillenderDetaillenderDetail")

    const responseData = {
          utilityBillAndResiProof:
          customerDocumentDetails?.incomeDocument?.utilityBillDocument || [],
          familyCard:
          customerDocumentDetails?.incomeDocument?.familyCardDocument || [],
          udyamCertificate:
          customerDocumentDetails?.incomeDocument?.udyamCertificateDocument ||
          [],
          bankStatement:
          customerDocumentDetails?.incomeDocument?.bankStatementDocument || [],
          incomeDocument:
          customerDocumentDetails?.incomeDocument?.incomeStatemenDocument || [],
          propertyDocument:
          customerDocumentDetails?.propertyDocuments?.propertyDocument || [],
          applicantKycSelfAttested: customerDocumentDetails?.signApplicantKyc || [],
          coApplicantKycSelfAttested: customerDocumentDetails?.signCoApplicantKyc || [],
          secondCoApplicantKycSelfAttested:
          customerDocumentDetails?.signCoTwoApplicantKyc || [],
          guarantorKycSelfAttested: customerDocumentDetails?.signGurantorKyc || [],
        //
        applicantKycOsv: SignKycDetails?.ApplicantSignDocument || "",
        coApplicantKycOsv: SignKycDetails?.coApplicantSignDocument || "",
        gurantorKycOsv: SignKycDetails?.guarantorSignDocument || "",
        applicantKycNoSignNoOsv: {
          applicantAadharFrontImage:
            applicantData?.kycUpload?.aadharFrontImage || "",
          applicantAadharBackImage:
            applicantData?.kycUpload?.aadharBackImage || "",
          applicantPanFrontImage: applicantData?.kycUpload?.panFrontImage || "",
          applicantDrivingLicenceImage:
            applicantData?.kycUpload?.drivingLicenceImage || "",
          applicantVoterIdImage: applicantData?.kycUpload?.voterIdImage || "",
        },
        coApplicantKycNoSignNoOsv: {
          coApplicantKycAadharFrontImage:
            coApplicantData[0]?.kycUpload?.aadharFrontImage || "",
          coApplicantKycAadharBackImage:
            coApplicantData[0]?.kycUpload?.aadharBackImage || "",
          // coApplicantKycDocType:coApplicantData[0]?.kycUpload?.docImage || "",
          coApplicantKycDocImage: coApplicantData[0]?.kycUpload?.docImage || "",
        },
        secondCoApplicantKycNoSignNoOsv: {
          coApplicantKycTwoAadharFrontImage:
            coApplicantData[1]?.kycUpload?.aadharFrontImage || "",
          coApplicantKycTwoAadharBackImage:
            coApplicantData[1]?.kycUpload?.aadharBackImage || "",
          coApplicantKycTwoDocImage:
            coApplicantData[1]?.kycUpload?.docImage || "",
        },
        guarantorKycNoSignNoOsv: {
          gurantorAadharFrontImage:
            guarantorData?.kycUpload?.aadharFrontImage || "",
          gurantorAadharBackImage:
            guarantorData?.kycUpload?.aadharBackImage || "",
          gurantorDocImage: guarantorData?.kycUpload?.docImage || "",
        },
        applicantCibilReport: cibilData?.applicantFetchHistory?.slice(-1)[0]?.cibilReport || "",
        coApplicantCibilReport:
          Array.isArray(cibilData?.coApplicantData[0]?.coApplicantFetchHistory)
            ? cibilData.coApplicantData[0].coApplicantFetchHistory.slice(-1)[0]?.cibilReport
            : "",
        secondCoApplicantCibilReport:
          Array.isArray(cibilData?.coApplicantData[1]?.coApplicantFetchHistory)
            ? cibilData.coApplicantData[0].coApplicantFetchHistory.slice(-1)[0]?.cibilReport
            : "",
        guarantorCibilReport: cibilData?.guarantorFetchHistory?.slice(-1)[0]?.cibilReport || "",
        pdReport: creditPdData?.pdfLink || "",
        rcuReport: rcuVendor?.uploadProperty || [],
        legalReport: legalVendor?.uploadProperty || [],
        technicalReport: technicalVendor?.uploadProperty || [],
        taggingReport: taggingVendor?.uploadProperty || [],
        housePhotos: [
          ...(Array.isArray(creditPdData?.fourBoundaryPhotos)
            ? creditPdData?.fourBoundaryPhotos
            : [creditPdData?.fourBoundaryPhotos]),
          ...(Array.isArray(creditPdData?.houseInsidePhoto)
            ? creditPdData?.houseInsidePhoto
            : [creditPdData?.houseInsidePhoto]),
          ...(Array.isArray(creditPdData?.propertyOtherPhotos)
            ? creditPdData?.propertyOtherPhotos
            : [creditPdData?.propertyOtherPhotos]),
          creditPdData?.selfiWithCustomer || "",
          creditPdData?.photoWithLatLong || "",
          creditPdData?.front || "",
          creditPdData?.leftSide || "",
          creditPdData?.rightSide || "",
          creditPdData?.approachRoad || "",
          creditPdData?.mainRoad || "",
          creditPdData?.interiorRoad || "",
          creditPdData?.selfieWithProperty || "",
          creditPdData?.landmarkPhoto || "",
          creditPdData?.latLongPhoto || "",
        ].filter(Boolean),
        // workPhotos: creditPdData?.workPhotos || [],
        // workPhotosDetails: "Recive from creditPd form",
        workPhotos: incomeSourcePhotos || [],
        camReport: loanDocument?.camReport || "",
        dualNameDeclaration: loanDocumentData?.dualNameDeclaration || "",
        dualSignDeclaration: loanDocumentData?.dualSignDeclaration || "",
        dualDobDeclaration: loanDocumentData?.dualDoBDeclaration || "",
        applicantPDC: appPdcData?.applicantPdcDocument || [],
        guarantorPDC: gtrPdcData?.guarantorPdcDocument || [],
        applicantBSV: loanDocumentData?.applicantBSV || "",
        guarantorBSV: loanDocumentData?.guarantorBSV || "",
        coOwnershipDeed: loanDocumentData?.coOwnershipDeed || "",
        eStampUpload:
          disbursementData?.estampRequirement?.flatMap(
            (stamp) => stamp.eStampUpload || []
          ) || [],
        insuranceFormWithCalculator: loanDocumentData?.insuranceForm || "",
        emOrRmDeed: loanDocumentData?.emOrRmDeed || "",
        finalLegal: legalVendor?.finalLegalUpload || "",
        vettingReport: loanDocument?.vettingReport || "",
        eNachScreenshort: disbursementData?.eNachLinkSignUpload || "",
        eSignatureDocuments: disbursementData?.eSignatureDocuments || "",
        appKycDocument: loanDocument?.appKycDocument || [],
        coAppKycDocument: loanDocument?.coAppKycDocument || [],
        formSixteenSelfAttested: loanDocument?.form60 || [],
        stampPaper: loanDocumentData?.stampPdf || [],
    };

    const allDocuments = [
      { name: "PD REPORT", key: "pdReport" },
      { name: "TECHNICAL REPORT", key: "technicalReport" },
      { name: "LEGAL REPORT (Sanction)", key: "legalReport" },
      { name: "RCU REPORT", key: "rcuReport" },
      { name: "APPLICANT CIBIL REPORT", key: "applicantCibilReport" },
      { name: "CO-APPLICANT CIBIL REPORT", key: "coApplicantCibilReport" },
      { name: "2nd CO-APPLICANT CIBIL REPORT", key: "secondCoApplicantCibilReport" },
      { name: "GUARANTOR CIBIL REPORT", key: "guarantorCibilReport" },
      { name: "APPLICANT KYC (NO SIGN , NO OSV )", key: "applicantKycNoSignNoOsv" },
      { name: "CO-APPLICANT KYC (NO SIGN , NO OSV )", key: "coApplicantKycNoSignNoOsv" },
      { name: "2nd CO-APPLICANT KYC (NO SIGN , NO OSV )", key: "secondCoApplicantKycNoSignNoOsv" },
      { name: "GUARANTOR KYC (NO SIGN , NO OSV )", key: "guarantorKycNoSignNoOsv" },
      { name: "HOUSE PHOTOS", key: "housePhotos" },
      { name: "WORK PHOTOS", key: "workPhotos" },
      { name: "CAM REPORT", key: "camReport" },
      { name: "APPLICANT KYC (SELF ATTESTED)", key: "applicantKycSelfAttested" },
      { name: "CO-APPLICANT KYC (SELF ATTESTED)", key: "coApplicantKycSelfAttested" },
      { name: "2nd CO-APPLICANT KYC (SELF ATTESTED)", key: "secondCoApplicantKycSelfAttested" },
      { name: "GUARANTOR KYC (SELF ATTESTED)", key: "guarantorKycSelfAttested" },
      { name: "FORM 60 (SELF ATTESTED)", key: "formSixteenSelfAttested" },
      { name: "INSURANCE FORM WITH CALCULATOR", key: "insuranceFormWithCalculator" },
      { name: "DUAL NAME DECLARATION", key: "dualNameDeclaration" },
      { name: "DUAL SIGN DECLARATION", key: "dualSignDeclaration" },
      { name: "DUAL DOB DECLARATION", key: "dualDobDeclaration" },
      { name: "APPLICANT PDC", key: "applicantPdc" },
      { name: "GUARANTOR PDC", key: "guarantorPdc" },
      { name: "APPLICANT BSV", key: "applicantBsv" },
      { name: "GUARANTOR BSV", key: "guarantorBsv" },
      { name: "E-NACH (Screenshot)", key: "eNachScreenshort" },
      { name: "STAMP PAPER", key: "stampPaper" },
      { name: "APPLICATION FORM", key: "applicationForm" },
      { name: "SANCTION LETTER", key: "sanctionLatter" },
      { name: "LOAN DOCUMENT", key: "loanDocument" },
      { name: "PG DEED", key: "pdDeed" },
      { name: "E-SIGNATURE DOCUMENTS", key: "eSignatureDocuments" },
      { name: "TAGGING REPORT", key: "taggingReport" },
      { name: "CO-OWNERSHIP DEED", key: "coOwnershipDeed" },
      { name: "EM/RM DEED", key: "emRmDeed" },
      { name: "LEGAL REPORT (FINAL)", key: "legalReportFinal" },
      { name: "VETTING REPORT", key: "vettingReport" },
      ]
   
      // const docMap = Object.fromEntries(allDocuments.map(doc => [doc.key, doc.name]));

      // // Generating the final object dynamically
      // const finalDocumentObject = {};
      // lenderDetail.sanctionChecklist.forEach(docKey => {
      //     if (docMap[docKey]) {
      //         finalDocumentObject[docKey] = docMap[docKey];  // Assigning document name
      //     }
      // });

      const finalDocumentObject = {};

      lenderDetail.sanctionChecklist.forEach(key => {
                if (responseData.hasOwnProperty(key)) {
                    finalDocumentObject[key] = responseData[key];
                }
            });
      // Console Output
      console.log(finalDocumentObject);
      const timestamp = Date.now();
      const type = "sanctionDocument"
      try {
        const filesToZip = [];
    
        // Recursive function to process all types of values (string, array, object)
        const processDocument = (key, value, parentKey = "") => {
            if (!value) return; // Skip if value is null, undefined, or empty string
            
            const keyPath = parentKey ? `${parentKey}_${key}` : key;
    
            if (Array.isArray(value)) {
                // If value is an array (multiple URLs)
                value.forEach((url, index) => {
                    if (url && url.trim() !== "") {
                        const fileExtension = url.split(".").pop().toLowerCase() || "pdf";
                        filesToZip.push({
                            url: url,
                            name: `${keyPath.replace(/[^a-zA-Z0-9-_]/g, "_")}_${index + 1}.${fileExtension}`
                        });
                    }
                });
            } else if (typeof value === "string") {
                // If value is a single URL string
                if (value.trim() !== "") {
                    const fileExtension = value.split(".").pop().toLowerCase() || "pdf";
                    filesToZip.push({
                        url: value,
                        name: `${keyPath.replace(/[^a-zA-Z0-9-_]/g, "_")}.` + fileExtension
                    });
                }
            } else if (typeof value === "object") {
                // If value is an object (nested KYC documents)
                Object.keys(value).forEach(nestedKey => {
                    processDocument(nestedKey, value[nestedKey], keyPath);
                });
            }
        };
    
        // Loop through each document type and process it
        for (const key of Object.keys(finalDocumentObject)) {
            processDocument(key, finalDocumentObject[key]);
        }
    
        console.log(`Preparing to zip ${filesToZip.length} files`);
    
        if (filesToZip.length > 0) {
            const zipFileName = `${customerId}_${timestamp}_${type}_documents.zip`;
            zipFilePath = await uploadZip(filesToZip, zipFileName);
            console.log(zipFilePath,"zipFilePathzipFilePath")
        }
    } catch (error) {
        console.error("Error preparing zip:", error);
    }

    await finalModel.findOneAndUpdate(
      { customerId },
      { $set: { sanctionZipUrl: zipFilePath } },
      { new: true, upsert: true }
    );

    return success(res, "All documents link", zipFilePath);
  } catch (error) {
   console.error("Error in sendToPartnerSanction:", error);
    return unknownError(res, error);
   }
};

const finalMainDashboard = async (req, res) => {
  try {
    const {
      regionalBranch,
      branch,
      product,
      hoSelfAssign,
      branchSelfAssign,
      startDateFilter,
      endDateFilter,
      finalApproverStatus,
      fileProcessStatus,
      pageLimit = 10000,
      pageNumber = 1,
      searchQuery,
      sanctionStage,
    } = req.query;

    const employeeId = req.Id;

    const activeVendors = await vendorTypeModel.find({ status: "active" }).select("vendorType");
    const vendorTypes = activeVendors.map(v => v.vendorType);
    // Basic validation
    const employeeExist = await employeModel
      .findOne({ _id: employeeId, status: "active" }, { _id: 1 })
      .lean();

    if (!employeeExist) {
      return badRequest(res, "Employee Not Found");
    }

    const today = new Date();
    const defaultStartDate = new Date(today.setHours(0, 0, 0, 0));
    const defaultEndDate = new Date(today.setHours(23, 59, 59, 999));

    function formatDateToISO(date) {
      return new Date(date).toISOString();
    }

    let formattedStart = startDateFilter && startDateFilter !== "all"
      ? new Date(new Date(startDateFilter).setHours(0, 0, 0, 0))
      : defaultStartDate;

    let formattedEnd = endDateFilter && endDateFilter !== "all"
      ? new Date(new Date(endDateFilter).setHours(23, 59, 59, 999))
      : defaultEndDate;

    if (startDateFilter && endDateFilter && startDateFilter === endDateFilter) {
      formattedStart = new Date(new Date(startDateFilter).setHours(0, 0, 0, 0));
      formattedEnd = new Date(new Date(startDateFilter).setHours(23, 59, 59, 999));
    }

    formattedStart = formatDateToISO(formattedStart);
    formattedEnd = formatDateToISO(formattedEnd);

    // Step 1: Get all customer IDs that match initial criteria
    const initialPipeline = [
      // Initial basic match
      {
        $match: {
          fileStatus: "active",
          statusByCreditPd: { $in: ["complete", "approve"] },
        }
      },
      
      // Only lookup what's needed for filtering
      {
        $lookup: {
          from: "customerdetails",
          localField: "customerId",
          foreignField: "_id",
          as: "customerDetailData"
        }
      },
      { 
        $unwind: { 
          path: "$customerDetailData",
          preserveNullAndEmptyArrays: true 
        }
      },
      {
        $lookup: {
          from: "newbranches",
          localField: "customerDetailData.branch",
          foreignField: "_id",
          as: "branchDetails"
        }
      },
      {
        $unwind: {
          path: "$branchDetails",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "newbranches",
          localField: "branchDetails.regionalBranchId",
          foreignField: "_id",
          as: "regionalBranchDetails"
        }
      },
      {
        $unwind: {
          path: "$regionalBranchDetails",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "applicantdetails",
          localField: "customerId",
          foreignField: "customerId",
          as: "applicantDetails"
        }
      },
      {
        $unwind: {
          path: "$applicantDetails",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "customerId",
          foreignField: "customerId",
          as: "finalsanctionData"
        }
      },
      {
        $unwind: {
          path: "$finalsanctionData",
          preserveNullAndEmptyArrays: true
        }
      },
// Apply all filters 
      {
        $match: {
          $and: [
            // Search query
            searchQuery ? {
              $or: [
                { "applicantDetails.mobileNo": { $regex: searchQuery, $options: "i" } },
                { "applicantDetails.fullName": { $regex: searchQuery, $options: "i" } },
                { "applicantDetails.fatherName": { $regex: searchQuery, $options: "i" } },
                { "customerDetailData.customerFinId": { $regex: searchQuery, $options: "i" } }
              ]
            } : {},

            // Branch filter
            branch && branch !== "all" ? {
              "branchDetails._id": {
                $in: (Array.isArray(branch) ? branch : branch.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},

            // Regional branch filter
            regionalBranch && regionalBranch !== "all" ? {
              "regionalBranchDetails._id": {
                $in: (Array.isArray(regionalBranch) ? regionalBranch : regionalBranch.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},

            // Product filter
            product && product !== "all" ? {
              "customerDetailData.productId": {
                $in: (Array.isArray(product) ? product : product.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},

            // SanctionStage filter
            sanctionStage === "partnerNotSelect" ? { "finalsanctionData.partnerId": null } : {},

            // finalApproverStatus filter
            finalApproverStatus && finalApproverStatus !== "partnerNotSelect" ? {
              $and: finalApproverStatus.split(",").map(statusKey => ({
                [`finalsanctionData.${statusKey}`]: "complete"
              }))
            } : {},

            // Special case for finalApproverStatus=partnerNotSelect
            finalApproverStatus === "partnerNotSelect" ? {
              "finalsanctionData.partnerId": null
            } : {},

            fileProcessStatus
            ? {
                $and: fileProcessStatus.split(",").map(statusKey => ({
                  [`finalsanctionData.${statusKey}`]: "complete"
                }))
              }
            : {},

            // startDateFilter && endDateFilter && startDateFilter !== "all" && endDateFilter !== "all"? {
            //   creditPdCompleteDate: {
            //     $gte: formattedStart,
            //     $lt: formattedEnd,
            //   }
            // }:{},
            
            hoSelfAssign && hoSelfAssign !=="all"?{
              "finalsanctionData.employeeId": {
                $in: (Array.isArray(hoSelfAssign) ? hoSelfAssign : hoSelfAssign.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},
            
            // Exclude specific products when no product filter
            (!product || product === "all") ? {
              "customerDetailData.productId": {
                $nin: [].map(id => new ObjectId(id))
              }
            } : {}
          ].filter(condition => Object.keys(condition).length > 0)
        }
      },
    
      // Only project customer IDs for the next stage
      {
        $project: {
          _id: 1,
          customerId: 1
        }
      },
    ];
// Execute the initial pipeline to get filtered customer IDs
    const filteredCustomers = await externalVendorFormModel
      .aggregate(initialPipeline)
      .allowDiskUse(true);

    // Extract customer IDs from the filtered results
    const customerIds = filteredCustomers.map(item => item.customerId);

    // If no customers match the criteria, return empty result
    if (customerIds.length === 0) {
      return success(res, "customerDetails", {
        totalCount: 0,
        notAssignCount: 0,
        selfAssignCount: 0,
        incomeSanctionStatus: 0,
        fileProcessRejectStatus: 0,
        sendToPartnerPostDisbursedStatus: 0,
        sendToPartnerPreDisbursedStatus: 0,
        sendToPartnerSanctionStatus: 0,
        fileDetails: [],
        pagination: {
          totalRecords: 0,
          currentPage: Number(pageNumber),
          pageSize: Number(pageLimit),
          totalPages: 0,
        }
      });
    }

    // Step 2: Fetch complete data for the filtered customer IDs in a second pipeline
    const detailPipeline = [
      // Start with filtered customer IDs
      {
        $match: {
          customerId: { $in: customerIds }
        }
      },
// Perform all lookups in a single batch to reduce pipeline size
      {
        $lookup: {
          from: "customerdetails",
          localField: "customerId",
          foreignField: "_id",
          as: "customerDetailData"
        }
      },
      {
        $lookup: {
          from: "employees",
          localField: "customerDetailData.employeId",
          foreignField: "_id",
          as: "salesPerson"
        }
      },
      {
        $lookup: {
          from: "newbranches",
          localField: "customerDetailData.branch",
          foreignField: "_id",
          as: "branchDetails"
        }
      },
      {
        $lookup: {
          from: "newbranches",
          localField: "branchDetails.regionalBranchId",
          foreignField: "_id",
          as: "regionalBranchDetails"
        }
      },
      {
        $lookup: {
          from: "employees",
          localField: "salesPerson.reportingManagerId",
          foreignField: "_id",
          as: "reportingManager"
        }
      },
      {
        $lookup: {
          from: "applicantdetails",
          localField: "customerId",
          foreignField: "customerId",
          as: "applicantDetails"
        }
      },
      {
        $lookup: {
          from: "employees",
          localField: "creditPdId",
          foreignField: "_id",
          as: "pdEmployeeDetail"
        }
      },
      {
        $lookup: {
          from: "products",
          localField: "customerDetailData.productId",
          foreignField: "_id",
          as: "productDetailData"
        }
      },
      {
        $lookup: {
          from: "internallegals",
          localField: "customerId",
          foreignField: "customerId",
          as: "loanTypeDetail"
        }
      },
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "customerId",
          foreignField: "customerId",
          as: "finalsanctionData"
        }
      },
      {
        $lookup: {
          from: "employees",
          localField: "finalsanctionData.employeeId",
          foreignField: "_id",
          as: "selfAssignEmployee"
        }
      },
      {
        $lookup: {
          from: "employees",
          localField: "finalsanctionData.branchSelfAssignEmpId",
          foreignField: "_id",
          as: "branchSelfAssignEmployee"
        }
      },
      {
        $lookup: {
          from: "lenders",
          localField: "finalsanctionData.partnerId",
          foreignField: "_id",
          as: "partnerDetails"
        }
      },
      {
        $lookup: {
          from: "bankstatementkycs",
          localField: "customerId",
          foreignField: "customerId",
          as: "bankstatementkycData"
        }
      },
      {
        $lookup: {
          from: "processes",
          localField: "customerId",
          foreignField: "customerId",
          as: "processData"
        }
      },
      {
        $lookup: {
          from: "customerdocuments",
          localField: "customerId",
          foreignField: "customerId",
          as: "customerDocuments"
        }
      },
      {
        $lookup: {
          from: "pdformdatas",
          localField: "customerId",
          foreignField: "customerId",
          as: "creditPdData"
        }
      },
      {
        $lookup: {
          from: "gtrpdcs",
          localField: "customerId",
          foreignField: "customerId",
          as: "gtrPdcData"
        }
      },
      {
        $lookup: {
          from: "apppdcs",
          localField: "customerId",
          foreignField: "customerId",
          as: "appPdcData"
        }
      },
      {
        $lookup: {
          from: "disbursements",
          localField: "customerId",
          foreignField: "customerId",
          as: "disbursementData"
        }
      },
      {
        $lookup: {
          from: "coapplicantdetails",
          localField: "customerId",
          foreignField: "customerId",
          as: "coApplicantData"
        }
      },
      {
        $lookup: {
          from: "applicantdetails",
          localField: "customerId",
          foreignField: "customerId",
          as: "applicantData"
        }
      },
      {
        $lookup: {
          from: "guarantors",
          localField: "customerId",
          foreignField: "customerId",
          as: "guarantorData"
        }
      },
      {
        $lookup: {
          from: "cibildetails",
          localField: "customerId",
          foreignField: "customerId",
          as: "cibilData"
        }
      },
      {
        $lookup: {
          from: "loandocumentmodels",
          localField: "customerId",
          foreignField: "customerId",
          as: "loanDocumentData"
        }
      },
      {
        $lookup: {
          from: "customerdocumentdetails",
          localField: "customerId",
          foreignField: "customerId",
          as: "SignKycDetails"
        }
      },
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "customerId",
          foreignField: "customerId",
          as: "finalData"
        }
      },
      {
        $lookup: {
          from: "bankstatementkycs",
          localField: "customerId",
          foreignField: "customerId",
          as: "bankStatementData"
        }
      },
      {
        $lookup: {
          from: "externalvendordynamics",
          localField: "customerId",
          foreignField: "customerId",
          as: "externalvendordynamicData"
        }
      },
// Unwind arrays in a single step using $addFields instead of multiple $unwind stages
      {
        $addFields: {
          customerDetailData: { $arrayElemAt: ["$customerDetailData", 0] },
          salesPerson: { $arrayElemAt: ["$salesPerson", 0] },
          branchDetails: { $arrayElemAt: ["$branchDetails", 0] },
          regionalBranchDetails: { $arrayElemAt: ["$regionalBranchDetails", 0] },
          reportingManager: { $arrayElemAt: ["$reportingManager", 0] },
          applicantDetails: { $arrayElemAt: ["$applicantDetails", 0] },
          pdEmployeeDetail: { $arrayElemAt: ["$pdEmployeeDetail", 0] },
          productDetailData: { $arrayElemAt: ["$productDetailData", 0] },
          loanTypeDetail: { $arrayElemAt: ["$loanTypeDetail", 0] },
          finalsanctionData: { $arrayElemAt: ["$finalsanctionData", 0] },
          selfAssignEmployee: { $arrayElemAt: ["$selfAssignEmployee", 0] },
          branchSelfAssignEmployee: { $arrayElemAt: ["$branchSelfAssignEmployee", 0] },
          partnerDetails: { $arrayElemAt: ["$partnerDetails", 0] },
          bankstatementkycData: { $arrayElemAt: ["$bankstatementkycData", 0] },
          processData: { $arrayElemAt: ["$processData", 0] },
          customerDocuments: { $arrayElemAt: ["$customerDocuments", 0] },
          creditPdData: { $arrayElemAt: ["$creditPdData", 0] },
          gtrPdcData: { $arrayElemAt: ["$gtrPdcData", 0] },
          appPdcData: { $arrayElemAt: ["$appPdcData", 0] },
          disbursementData: { $arrayElemAt: ["$disbursementData", 0] },
          firstCoApplicant: { $arrayElemAt: ["$coApplicantData", 0] },
          secondCoApplicant: { $arrayElemAt: ["$coApplicantData", 1] },
          applicantData: { $arrayElemAt: ["$applicantData", 0] },
          guarantorData: { $arrayElemAt: ["$guarantorData", 0] },
          cibilData: { $arrayElemAt: ["$cibilData", 0] },
          loanDocumentData: { $arrayElemAt: ["$loanDocumentData", 0] },
          SignKycDetails: { $arrayElemAt: ["$SignKycDetails", 0] },
          finalData: { $arrayElemAt: ["$finalData", 0] },
          bankStatementData: { $arrayElemAt: ["$bankStatementData", 0] },
          externalvendordynamicData: { $arrayElemAt: ["$externalvendordynamicData", 0] }
        }
      },
// Extract vendor info and create document checks in one step
      {
        $addFields: {
          // Vendor information
          rcuVendor: {
            $arrayElemAt: [
              {
                $filter: {
                  input: "$vendors",
                  as: "vendor",
                  cond: { $eq: ["$$vendor.vendorType", "rcu"] }
                }
              },
              0
            ]
          },
          legalVendor: {
            $arrayElemAt: [
              {
                $filter: {
                  input: "$vendors",
                  as: "vendor",
                  cond: { $eq: ["$$vendor.vendorType", "legal"] }
                }
              },
              0
            ]
          },
          technicalVendor: {
            $arrayElemAt: [
              {
                $filter: {
                  input: "$vendors",
                  as: "vendor",
                  cond: { $eq: ["$$vendor.vendorType", "technical"] }
                }
              },
              0
            ]
          },
          taggingVendor: {
            $arrayElemAt: [
              {
                $filter: {
                  input: "$vendors",
                  as: "vendor",
                  cond: { $eq: ["$$vendor.vendorType", "tagging"] }
                }
              },
              0
            ]
          },
          
          // Extract esign links
          // esignLinks: {
          //   $cond: {
          //     if: {
          //       $and: [
          //         { $ne: ["$finalData.signEsignLink", null] },
          //         { $ne: ["$finalData.signEsignLink", {}] },
          //         { $gt: [{ $size: { $objectToArray: { $ifNull: ["$finalData.signEsignLink", {}] } } }, 0] }
          //       ]
          //     },
          //     then: "$finalData.signEsignLink",
          //     else: "$finalData.esignLinks"
          //   }
          // },
          esignLinks: {
            $cond: {
              if: {
                $and: [
                  { $ne: ["$finalData.signEsignLink", null] },
                  { $ne: ["$finalData.signEsignLink", {}] },
                  { $gt: [{ $size: { $objectToArray: { $ifNull: ["$finalData.signEsignLink", {}] } } }, 0] }
                ]
              },
              then: "$finalData.signEsignLink",
              else: "$finalData.esignLinks"
            }
          },
          
          // Extract latest CIBIL reports
          // latestApplicantCibilReport: {
          //   $arrayElemAt: [
          //     { $ifNull: ["$cibilData.applicantFetchHistory", []] },
          //     { $subtract: [{ $size: { $ifNull: ["$cibilData.applicantFetchHistory", []] } }, 1] }
          //   ]
          // },

          latestApplicantCibilReport: {
            $arrayElemAt: [
              { $ifNull: ["$cibilData.applicantFetchHistory", []] },
              { $subtract: [{ $size: { $ifNull: ["$cibilData.applicantFetchHistory", []] } }, 1] }
            ]
          },
          // latestGuarantorCibilReport: {
          //   $arrayElemAt: [
          //     { $ifNull: ["$cibilData.guarantorFetchHistory", []] },
          //     { $subtract: [{ $size: { $ifNull: ["$cibilData.guarantorFetchHistory", []] } }, 1] }
          //   ]
          // },

          latestGuarantorCibilReport: {
            $arrayElemAt: [
              { $ifNull: ["$cibilData.guarantorFetchHistory", []] },
              { $subtract: [{ $size: { $ifNull: ["$cibilData.guarantorFetchHistory", []] } }, 1] }
            ]
          },
// Document check info (combining many checks into a single stage)
          document: {
            SanctionCheckList: {
              // Login check list documents
              utilityBillDocument: {
                $cond: {
                  if: { $ifNull: ["$customerDocuments.incomeDocument.utilityBillDocument", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              familyCardDocument: {
                $cond: {
                  if: { $ifNull: ["$customerDocuments.incomeDocument.familyCardDocument", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              udyamCertificate: {
                $cond: {
                  if: { $ifNull: ["$customerDocuments.incomeDocument.udyamCertificateDocument", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              bankStatement: {
                $cond: {
                  if: { $ifNull: ["$customerDocuments.incomeDocument.bankStatementDocument", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              incomeDocument: {
                $cond: {
                  if: { $ifNull: ["$customerDocuments.incomeDocument.incomeStatemenDocument", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              propertyDocument: {
                $cond: {
                  if: { $ifNull: ["$customerDocuments.propertyDocuments.propertyDocument", null] },
                  then: "Yes",
                  else: "No"
                }
              },
             
              
              signApplicantKyc: {
                $cond: {
                  if: { $gt: [{ $size: { $ifNull: ["$SignKycDetails.signApplicantKyc", []] } }, 0] },
                  then: "Yes",
                  else: "No"
                }
              },
              
              signCoApplicantKyc: {
                $cond: {
                  if: { $ifNull: ["$customerDocuments.signCoApplicantKyc", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              // signCoTwoApplicantKyc: {
              //   $cond: {
              //     // if: { "$gt": [{ "$size": { "$ifNull": ["$SignKycDetails.signCoTwoApplicantKyc", []] } }, 0] },
              //     if: { $gt: [{ $size: { $ifNull: ["$SignKycDetails.signCoTwoApplicantKyc", []] } }, 0] },

              //     then: "Yes",
              //     else: "No"
              //   }
              // },

              signCoTwoApplicantKyc: {
                $cond: {
                  if: { $gt: [{ $size: { $ifNull: ["$SignKycDetails.signCoTwoApplicantKyc", []] } }, 0] },
                  then: "Yes",
                  else: "No"
                }
              },
              // signGurantorKyc: {
              //   $cond: {
              //     // if: { "$gt": [{ "$size": { "$ifNull": ["$SignKycDetails.signGurantorKyc", []] } }, 0] },
              //     if: { $gt: [{ $size: { $ifNull: ["$SignKycDetails.signGurantorKyc", []] } }, 0] },

              //     then: "Yes",
              //     else: "No"
              //   }
              // },

              signGurantorKyc: {
                $cond: {
                  if: { $gt: [{ $size: { $ifNull: ["$SignKycDetails.signGurantorKyc", []] } }, 0] },
                  then: "Yes",
                  else: "No"
                }
              },
    
// Add all additional SanctionCheckList items
              electricityBill: {
                $cond: {
                  if: { $ifNull: ["$creditPdData.utilityBillDocument", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              samagraIdDoc: {
                $cond: {
                  if: { $ifNull: ["$creditPdData.samagraIdDetail.samagraIdDoc", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              applicantPhoto: {
                $cond: {
                  if: { $ifNull: ["$applicantData.applicantPhoto", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              coApplicantPhoto: {
                $cond: {
                  if: { $ifNull: ["$firstCoApplicant.coApplicantPhoto", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              coApplicantPhotoTwo: {
                $cond: {
                  if: { $ifNull: ["$secondCoApplicant.coApplicantPhoto", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              guarantorPhoto: {
                $cond: {
                  if: { $ifNull: ["$guarantorData.guarantorPhoto", null] },
                  then: "Yes",
                  else: "No"
                }
              },
            applicantKyc: {
                $cond: {
                  if: {
                    $or: [
                      { $ifNull: ["$applicantData.kycUpload.aadharFrontImage", null] },
                      { $ifNull: ["$applicantData.kycUpload.aadharBackImage", null] },
                      { $ifNull: ["$applicantData.kycUpload.panFrontImage", null] },
                      { $ifNull: ["$applicantData.kycUpload.drivingLicenceImage", null] },
                      { $ifNull: ["$applicantData.kycUpload.voterIdImage", null] }
                    ]
                  },
                  then: "Yes",
                  else: "No"
                }
              },
              coApplicantKyc: {
                $cond: {
                  if: {
                    $or: [
                      { $ifNull: ["$firstCoApplicant.kycUpload.aadharFrontImage", null] },
                      { $ifNull: ["$firstCoApplicant.kycUpload.aadharBackImage", null] },
                      { $ifNull: ["$firstCoApplicant.kycUpload.docImage", null] }
                    ]
                  },
                  then: "Yes",
                  else: "No"
                }
              },
              coApplicantKycTwo: {
                $cond: {
                  if: {
                    $or: [
                      { $ifNull: ["$secondCoApplicant.kycUpload.aadharFrontImage", null] },
                      { $ifNull: ["$secondCoApplicant.kycUpload.aadharBackImage", null] },
                      { $ifNull: ["$secondCoApplicant.kycUpload.docImage", null] }
                    ]
                  },
                  then: "Yes",
                  else: "No"
                }
              },
              gurantorKyc: {
                $cond: {
                  if: {
                    $or: [
                      { $ifNull: ["$guarantorData.kycUpload.aadharFrontImage", null] },
                      { $ifNull: ["$guarantorData.kycUpload.aadharBackImage", null] },
                      { $ifNull: ["$guarantorData.kycUpload.docImage", null] }
                    ]
                  },
                  then: "Yes",
                  else: "No"
                }
              },
              applicantCibilReport: {
                $cond: {
                  if: { $ifNull: ["$latestApplicantCibilReport.cibilReport", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              guarantorCibilReport: {
                $cond: {
                  if: { $ifNull: ["$latestGuarantorCibilReport.cibilReport", null] },
                  then: "Yes",
                  else: "No"
                }
              },
pdReport: {
                $cond: {
                  if: { $ifNull: ["$creditPdData.pdfLink", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              rcuReport: {
                $cond: {
                  if: { $ifNull: ["$rcuVendor.uploadProperty", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              legalReport: {
                $cond: {
                  if: { $ifNull: ["$legalVendor.uploadProperty", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              technicalReport: {
                $cond: {
                  if: { $ifNull: ["$technicalVendor.uploadProperty", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              technicalEstimateDocument: {
                $cond: {
                  if: { $ifNull: ["$technicalVendor.estimateDocument", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              taggingReport: {
                $cond: {
                  if: { $ifNull: ["$taggingVendor.uploadProperty", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              camReport: {
                $cond: {
                  if: { $ifNull: ["$loanDocumentData.camReport", null] },
                  then: "Yes",
                  else: "No"
                }
              }
            },
        disbursmentCheckList: {
              dualNameDeclaration: {
                $cond: {
                  if: { $ifNull: ["$loanDocumentData.dualNameDeclaration", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              dualSignDeclaration: {
                $cond: {
                  if: { $ifNull: ["$loanDocumentData.dualSignDeclaration", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              dualDoBDeclaration: {
                $cond: {
                  if: { $ifNull: ["$loanDocumentData.dualDoBDeclaration", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              applicantPDC: {
                $cond: {
                  if: { $ifNull: ["$appPdcData.applicantPdcDocument", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              guarantorPDC: {
                $cond: {
                  if: { $ifNull: ["$gtrPdcData.guarantorPdcDocument", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              applicantBSV: {
                $cond: {
                  if: { $ifNull: ["$loanDocumentData.applicantBSV", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              guarantorBSV: {
                $cond: {
                  if: { $ifNull: ["$loanDocumentData.guarantorBSV", null] },
                  then: "Yes",
                  else: "No"
                }
              },
          coOwnershipDeed: {
                $cond: {
                  if: { $ifNull: ["$loanDocumentData.coOwnershipDeed", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              eStampUpload: {
                $cond: {
                  if: { 
                   

                    $gt: [
                      {
                        $size: {
                          $ifNull: [
                            {
                              $reduce: {
                                input: "$disbursementData.estampRequirement",
                                initialValue: [],
                                in: { $concatArrays: ["$$value", { $ifNull: ["$$this.eStampUpload", []] }] }
                              }
                            },
                            []
                          ]
                        }
                      },
                      0
                    ]
                  },
                  then: "Yes",
                  else: "No"
                }
              },
              
              insuranceForm: {
                $cond: {
                  if: { $ifNull: ["$loanDocumentData.insuranceForm", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              emOrRmDeed: {
                $cond: {
                  if: { $ifNull: ["$loanDocumentData.emOrRmDeed", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              finalLegal: {
                $cond: {
                  if: { $ifNull: ["$legalVendor.finalLegalUpload", null] },
                  then: "Yes",
                  else: "No"
                }
              },
vettingReport: {
                $cond: {
                  if: { $ifNull: ["$loanDocumentData.vettingReport", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              nachLink: {
                $cond: {
                  if: { $ifNull: ["$bankStatementData.Nachlink", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              eNachLinkSignUpload: {
                $cond: {
                  if: { $ifNull: ["$disbursementData.eNachLinkSignUpload", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              eSignatureDocuments: {
                $cond: {
                  if: { $ifNull: ["$disbursementData.eSignatureDocuments", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              appKycDocument: {
                $cond: {
                  if: { $ifNull: ["$loanDocumentData.appKycDocument", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              coAppKycDocument: {
                $cond: {
                  if: { $ifNull: ["$loanDocumentData.coAppKycDocument", null] },
                  then: "Yes",
                  else: "No"
                }
              },
stampPdf: {
                $cond: {
                  if: { $ifNull: ["$loanDocumentData.stampPdf", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              sanctionZipUrl: {
                $cond: {
                  if: { $ifNull: ["$finalData.sanctionZipUrl", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              disbursementZipUrl: {
                $cond: {
                  if: { $ifNull: ["$finalData.disbursementZipUrl", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              incomeSectionLatterUrl: {
                $cond: {
                  if: { $ifNull: ["$finalData.incomesectionLatterUrl", null] },
                  then: "Yes",
                  else: "No"
                }
              },
              esignLinks: {
                $cond: {
                  if: { $ifNull: ["$esignLinks", null] },
                  then: "Yes",
                  else: "No"
                }
              }
            }
          },

                  
          vendors: {
            $map: {
              input: vendorTypes, // **Dynamic Vendor List**
              as: "vendorType",
              in: {
                vendorType: "$$vendorType",
                statusByVendor: {
                  $ifNull: [
                    {
                      $first: {
                        $map: {
                          input: {
                            $filter: {
                              input: "$vendors",
                              cond: { $eq: ["$$this.vendorType", "$$vendorType"] }
                            }
                          },
                          in: "$$this.statusByVendor"
                        }
                      }
                    },
                    "notAssign"
                  ]
                },
                fileStageStatus: {
                  $ifNull: [
                    {
                      $first: {
                        $map: {
                          input: {
                            $filter: {
                              input: "$vendors",
                              cond: { $eq: ["$$this.vendorType", "$$vendorType"] }
                            }
                          },
                          in: "$$this.fileStageStatus"
                        }
                      }
                    },
                    ""
                  ]
                }
              }
            }
          },
          // Ensure dates are proper date objects
          createdAtDate: {
            $cond: {
              if: { $eq: [{ $type: "$customerDetailData.createdAt" }, "date"] },
              then: "$customerDetailData.createdAt",
              else: new Date()
            }
          },
          pdCompleteDate: {
            $cond: {
              if: { $eq: [{ $type: "$creditPdCompleteDate" }, "date"] },
              then: "$creditPdCompleteDate",
              else: new Date()
            }
          },
// Convert loan details to numbers for calculation
          numericLoanAmount: { 
            $convert: { 
              input: "$finalsanctionData.finalLoanAmount", 
              to: "double",
              onError: 0,
              onNull: 0
            } 
          },
          numericRoi: { 
            $convert: { 
              input: "$finalsanctionData.roi", 
              to: "double",
              onError: 0,
              onNull: 0
            } 
          },
          numericTenure: { 
            $convert: { 
              input: "$finalsanctionData.tenureInMonth", 
              to: "int",
              onError: 0,
              onNull: 0
            } 
          },
          
          // Calculate turnaround times (TAT)
          // loginTat: {
          //   $convert: {
          //     input: {
          //       $round: [
          //         {
          //           $divide: [
          //             { $subtract: [new Date(), "$createdAtDate"] },
          //             1000 * 60 * 60 * 24 // Convert ms to days
          //           ]
          //         },
          //         0
          //       ]
          //     },
          //     to: "int",
          //     onError: 0
          //   }
          // },

          loginTat: {
            $let: {
              vars: {
                caDate: { $toDate: "$customerDetailData.paymentDate" },
                today: { $toDate: "$$NOW" }
              },
              in: {
                $cond: {
                  if: { $not: ["$$caDate"] },
                  then: null,
                  else: {
                    $ceil: {
                      $divide: [
                        {
                          $subtract: [
                            { $dateTrunc: { date: "$$today", unit: "day" } },
                            { $dateTrunc: { date: "$$caDate", unit: "day" } }
                          ]
                        },
                        86400000
                      ]
                    }
                  }
                }
              }
            }
          },          
           
          externalvendordynamicCreatedAt: { $ifNull: ["$externalvendordynamicData.createdAt", ""] },

          pdTat: {
            $let: {
              vars: {
                caDate: "$externalvendordynamicData.createdAt",
                today: "$$NOW"
              },
              in: {
                $cond: {
                  if: { $not: ["$$caDate"] },
                  then: null,
                  else: {
                    $ceil: {
                      $divide: [
                        {
                          $subtract: [
                            { $dateTrunc: { date: "$$today", unit: "day" } },
                            { $dateTrunc: { date: "$$caDate", unit: "day" } }
                          ]
                        },
                        86400000
                      ]
                    }
                  }
                }
              }
            }
          },         

// Extract vendor statuses from the vendor array
          rcuStatus: {
            $ifNull: [
              {
                $let: {
                  vars: {
                    rcu: {
                      $arrayElemAt: [
                        {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "rcu"] }
                          }
                        },
                        0
                      ]
                    }
                  },
                  in: "$$rcu.statusByVendor"
                }
              },
              "notRequired"
            ]
          },
          
          legalStatus: {
            $ifNull: [
              {
                $let: {
                  vars: {
                    legal: {
                      $arrayElemAt: [
                        {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "legal"] }
                          }
                        },
                        0
                      ]
                    }
                  },
                  in: "$$legal.statusByVendor"
                }
              },
              "approve"
            ]
          },
          
          technicalStatus: {
            $ifNull: [
              {
                $let: {
                  vars: {
                    technical: {
                      $arrayElemAt: [
                        {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "technical"] }
                          }
                        },
                        0
                      ]
                    }
                  },
                  in: "$$technical.statusByVendor"
                }
              },
              "complete"
            ]
          },
          
          taggingStatus: {
            $ifNull: [
              {
                $let: {
                  vars: {
                    tagging: {
                      $arrayElemAt: [
                        {
                          $filter: {
                            input: "$vendors",
                            cond: { $eq: ["$$this.vendorType", "tagging"] }
                          }
                        },
                        0
                      ]
                    }
                  },
                  in: "$$tagging.statusByVendor"
                }
              },
              "WIP"
            ]
          },
// Map to new field names
          selfAssignEmployee: { $ifNull: ["$finalsanctionData.employeeId", null] },
          esignStatus: {
            $cond: {
              if: {
                $or: [
                  { $eq: ["$finalsanctionData.esignLinks", null] },
                  { $eq: ["$finalsanctionData.esignLinks", {}] },
                  {
                    $and: [
                      { $eq: [{ $ifNull: ["$finalsanctionData.esignLinks.applicant", ""] }, ""] },
                      { $eq: [{ $ifNull: ["$finalsanctionData.esignLinks.coApplicant", ""] }, ""] },
                      { $eq: [{ $ifNull: ["$finalsanctionData.esignLinks.coApplicantTwo", ""] }, ""] }
                    ]
                  }
                ]
              },
              then: "No",
              else: "Yes"
            }
          },
          nachLink: {
            $cond: {
              if: { 
                $or: [
                  { $eq: ["$bankstatementkycData.nachLink", null] }, 
                  { $eq: ["$bankstatementkycData.nachLink", ""] }
                ] 
              },
              then: "NO",
              else: "YES"
            }
          },
          fileStageForms: {
            $cond: {
              if: { $eq: ["$processData", null] },
              then: {},
              else: { $ifNull: ["$processData.fileStageForms", {}] }
            }
          },
// Status fields
          chargesStatus: "Pending", // Default value
          mortgageStatus: "Pending", // Default value
          
          salesCompleteDate: { $ifNull: ["$processData.salesCompleteDate", ""] },
          pdCreatedAt: { $ifNull: ["$creditPdData.createdAt", ""] },
          // external vender created at

          // Query statuses
          sanctionQueryStatus: { $ifNull: ["$finalsanctionData.sendToPartnerSanctionStatus", "Pending"] },
          preDisbursementQueryStatus: { $ifNull: ["$finalsanctionData.sendToPartnerPreDisbursedStatus", "Pending"] },
          disbursementQueryStatus: { $ifNull: ["$finalsanctionData.sendToPartnerPostDisbursedStatus", "Pending"] },
          
          // Partner related information
          jainamLoanNo: { $ifNull: ["$finalsanctionData.jainamLoanNo", ""] },
          jainamProfileNo: { $ifNull: ["$finalsanctionData.jainamProfileNo", ""] },
          partnerLoanNo: { $ifNull: ["$finalsanctionData.partnerLoanNo", ""] },
          oldFinId: { $ifNull: ["$finalsanctionData.oldFinId", ""] },
          oldLanNo: { $ifNull: ["$finalsanctionData.oldLanNo", ""] },
          
                   // Dates
          sanctionDate: { $ifNull: ["$finalsanctionData.finalSanctionStatusDate", ""] },
          disbursementDate: { $ifNull: ["$finalsanctionData.finalDisbursementStatusDate", ""] },
          
          // Status and responsibility fields
          loanType: { $ifNull: ["$loanTypeDetail.LoanType", ""] },
          fileStatus: { $ifNull: ["$finalsanctionData.fileStatus", ""] },
          responsibility: { $ifNull: ["$finalsanctionData.responsibility", ""] },
          hoRemark: { $ifNull: ["$finalsanctionData.hoRemark", ""] },
          partnerPending: { $ifNull: ["$finalsanctionData.partnerPending", ""] }, 

          // Basic fields
          finalLoanAmount: { $ifNull: ["$finalsanctionData.finalLoanAmount", ""] },
          tenureInMonth: { $ifNull: ["$finalsanctionData.tenureInMonth", ""] },
          roi: { $ifNull: ["$finalsanctionData.roi", ""] },
          emi: { $ifNull: ["$finalsanctionData.emiAmount", ""] },
          selfAssignStatus: { $ifNull: ["$finalsanctionData.finalSenctionFileSelfAssign", false] },
          customerId: "$customerDetailData._id",
          productName: { $ifNull: ["$productDetailData.productName", ""] },
          selfAssignEmployeeName: { $ifNull: ["$selfAssignEmployee.employeName", ""] },
          branchSelfAssignEmployee: { $ifNull: ["$branchSelfAssignEmployee.employeName", ""] },
          partnerName: { $ifNull: ["$partnerDetails.fullName", ""] },
          regionalBranchName: { $ifNull: ["$regionalBranchDetails.name", ""] },
          branchName: { $ifNull: ["$branchDetails.name", ""] },
          loginDate: { $ifNull: ["$customerDetailData.createdAt", ""] },
          paymentDate: { $ifNull: ["$customerDetailData.paymentDate", ""] },
          customerFinId: { $ifNull: ["$customerDetailData.customerFinId", ""] },
          customerFullName: { $ifNull: ["$applicantDetails.fullName", ""] },
          customerFatherName: { $ifNull: ["$applicantDetails.fatherName", ""] },
          mobileNo: { $ifNull: ["$applicantDetails.mobileNo", ""] },
          salesPersonName: { $ifNull: ["$salesPerson.employeName", ""] },
          salesPersonManagerName: { $ifNull: ["$reportingManager.employeName", ""] },
          pdPersonName: { $ifNull: ["$pdEmployeeDetail.employeName", ""] },
          incomeSanctionStatus: { $ifNull: ["$finalsanctionData.incomeSanctionStatus", ""] },
          sendToPartnerPostDisbursedStatus: { $ifNull: ["$finalsanctionData.sendToPartnerPostDisbursedStatus", ""] },
          sendToPartnerPreDisbursedStatus: { $ifNull: ["$finalsanctionData.sendToPartnerPreDisbursedStatus", ""] },
          sendToPartnerSanctionStatus: { $ifNull: ["$finalsanctionData.sendToPartnerSanctionStatus", ""] },
          fileProcessRejectStatus: { $ifNull: ["$finalsanctionData.fileProcessRejectStatus", ""] }
}
      },
      
      // Group by customerId with fixed field names
      {
        $group: {
          _id: "$customerId",
          // Map to new column names per requirement
          customerFinId: { $first: "$customerFinId" },
          hoSelfAssign: { $first: "$selfAssignEmployeeName" },
          branchSelfAssign: { $first: "$branchSelfAssignEmployee" },
          partnerName: { $first: "$partnerName" },
          productName: { $first: "$productName" },
          loanType: { $first: "$loanType" },
          fileStatus: { $first: "$fileStatus" },
          responsibility: { $first: "$responsibility" },
          hoRemark: { $first: "$hoRemark" },
          partnerPending: { $first: "$partnerPending" },
          branchName: { $first: "$branchName" },
          customerName: { $first: "$customerFullName" },
          fatherName: { $first: "$customerFatherName" },
          mobileNo: { $first: "$mobileNo" },
          salesperson: { $first: "$salesPersonName" },
          salesManager: { $first: "$salesPersonManagerName" },
          loginDate: { $first: "$loginDate" },
          paymentDate: { $first: "$paymentDate" },
          salesCompleteDate: { $first: "$salesCompleteDate" },
          loginTat: { $first: "$loginTat" },
          pdDate: { $first: "$creditPdCompleteDate" },
          pdCreatedAt: { $first: "$pdCreatedAt" },
          externalvendordynamicCreatedAt: { $first: "$externalvendordynamicCreatedAt" },
          pdTat: { $first: "$pdTat" },
          nachLink: { $first: "$nachLink" },
          esignStatus: { $first: "$esignStatus" },
          charges: { $first: "$chargesStatus" },
          mortgage: { $first: "$mortgageStatus" },
          sanctionQueryStatus: { $first: "$sanctionQueryStatus" },
          preDisbursementQueryStatus: { $first: "$preDisbursementQueryStatus" },
          disbursementQueryStatus: { $first: "$disbursementQueryStatus" },
          finalLoanAmount: { $first: "$finalLoanAmount" },
          roi: { $first: "$roi" },
          tenure: { $first: "$tenureInMonth" },
          emi: { $first: "$emi" },
          jainamLoanNo: { $first: "$jainamLoanNo" },
          jainamProfileNo: { $first: "$jainamProfileNo" },
          partnerLoanNo: { $first: "$partnerLoanNo" },
          oldFinId: { $first: "$oldFinId" },
          oldLanNo: { $first: "$oldLanNo" },
          sanctionDate: { $first: "$sanctionDate" },
          disbursementDate: { $first: "$disbursementDate" },
          
          // Keep original fields for internal use
          customerId: { $first: "$customerId" },
          regionalBranchName: { $first: "$regionalBranchName" },
          pdPersonName: { $first: "$pdPersonName" },
          statusByCreditPd: { $first: "$statusByCreditPd" },
          vendors: { $first: "$vendors" },
          fileStageForms: { $first: "$fileStageForms" },
          document: { $first: "$document" }, // Include document data in the grouping
          selfAssignEmployee: { $first: "$selfAssignEmployee" },
          incomeSanctionStatus: { $first: "$incomeSanctionStatus" },
          sendToPartnerPostDisbursedStatus: { $first: "$sendToPartnerPostDisbursedStatus" },
          sendToPartnerPreDisbursedStatus: { $first: "$sendToPartnerPreDisbursedStatus" },
          sendToPartnerSanctionStatus: { $first: "$sendToPartnerSanctionStatus" },
          fileProcessRejectStatus: { $first: "$fileProcessRejectStatus" }
        }
      },
// Facet for pagination and counts
      {
        $facet: {
          totalCases: [{ $count: "total" }],
          fileDetails: [
            { $skip: (pageNumber - 1) * pageLimit },
            { $limit: parseInt(pageLimit) }
          ],
          notAssignCount: [
            { $match: { selfAssignEmployee: null } },
            { $count: "count" }
          ],
          selfAssignCount: [
            { $match: { selfAssignEmployee: { $ne: null } } },
            { $count: "count" }
          ],
          incomeSanctionStatus: [
            { $match: { incomeSanctionStatus: "complete" } },
            { $count: "count" }
          ],
          fileProcessRejectStatus: [
            { $match: { fileProcessRejectStatus: "complete" } },
            { $count: "count" }
          ],
          sendToPartnerPostDisbursedStatus: [
            { $match: { sendToPartnerPostDisbursedStatus: "complete" } },
            { $count: "count" }
          ],
          sendToPartnerPreDisbursedStatus: [
            { $match: { sendToPartnerPreDisbursedStatus: "complete" } },
            { $count: "count" }
          ],
          sendToPartnerSanctionStatus: [
            { $match: { sendToPartnerSanctionStatus: "complete" } },
            { $count: "count" }
          ]
        }
      },

      // Format the final output
      {
        $project: {
          totalCases: { $arrayElemAt: ["$totalCases.total", 0] },
          fileDetails: 1,
          counts: {
            notAssignCount: { $arrayElemAt: ["$notAssignCount.count", 0] },
            selfAssignCount: { $arrayElemAt: ["$selfAssignCount.count", 0] },
            fileProcessRejectStatus: { $arrayElemAt: ["$fileProcessRejectStatus.count", 0] },
            incomeSanctionStatus: { $arrayElemAt: ["$incomeSanctionStatus.count", 0] },
            sendToPartnerPostDisbursedStatus: { $arrayElemAt: ["$sendToPartnerPostDisbursedStatus.count", 0] },
            sendToPartnerPreDisbursedStatus: { $arrayElemAt: ["$sendToPartnerPreDisbursedStatus.count", 0] },
            sendToPartnerSanctionStatus: { $arrayElemAt: ["$sendToPartnerSanctionStatus.count", 0] }
          }
        }
      },
      {
        $sort: { "createdAt": -1 }  // Sort by creation date, newest first
      },
    ];
// Execute the detailed pipeline for the filtered results
    const detailResults = await externalVendorFormModel
      .aggregate(detailPipeline)
      .allowDiskUse(true);

    // Calculate pagination metadata
    const totalRecords = detailResults[0]?.totalCases || 0;
    const currentPage = Number(pageNumber);
    const totalPages = Math.ceil(totalRecords / pageLimit);
    const hasNextPage = currentPage < totalPages;
    const hasPreviousPage = currentPage > 1;

    const {
      notAssignCount = 0,
      selfAssignCount = 0,
      incomeSanctionStatus = 0,
      fileProcessRejectStatus = 0,
      sendToPartnerPostDisbursedStatus = 0,
      sendToPartnerPreDisbursedStatus = 0,
      sendToPartnerSanctionStatus = 0,
    } = detailResults[0]?.counts || {};

    return success(res, "customerDetails", {
      totalCount: totalRecords,
      notAssignCount,
      selfAssignCount,
      incomeSanctionStatus,
      fileProcessRejectStatus,
      sendToPartnerPostDisbursedStatus,
      sendToPartnerPreDisbursedStatus,
      sendToPartnerSanctionStatus,
      fileDetails: detailResults[0]?.fileDetails || [],
      pagination: {
        totalRecords,
        currentPage,
        pageSize: Number(pageLimit),
        totalPages,
      }
    });

  } catch (error) {
    console.error(error);
    return unknownError(res, error.message);
  }
};




//finalMainDashboardMonthlyCount

const finalMainDashboardMonthlyCount = async (req, res) => {
  try {
    const {
      regionalBranch,
      branch,
      product,
      hoSelfAssign,
      branchSelfAssign,
      startDateFilter,
      endDateFilter,
      finalApproverStatus,
      fileProcessStatus,
      searchQuery,
      sanctionStage,
      year, // Optional year parameter
    } = req.query;

    const employeeId = req.Id;

    const activeVendors = await vendorTypeModel.find({ status: "active" }).select("vendorType");
    const vendorTypes = activeVendors.map(v => v.vendorType);
    
    // Basic validation
    const employeeExist = await employeModel
      .findOne({ _id: employeeId, status: "active" }, { _id: 1 })
      .lean();

    if (!employeeExist) {
      return badRequest(res, "Employee Not Found");
    }

    // Get current year as default
    const today = new Date();
    const currentYear = today.getFullYear();
    
    // Determine date range based on inputs - EXACTLY matching the first API logic
    const defaultStartDate = new Date(today.setHours(0, 0, 0, 0));
    const defaultEndDate = new Date(today.setHours(23, 59, 59, 999));

    function formatDateToISO(date) {
      return new Date(date).toISOString();
    }

    let formattedStart = startDateFilter && startDateFilter !== "all"
      ? new Date(new Date(startDateFilter).setHours(0, 0, 0, 0))
      : defaultStartDate;

    let formattedEnd = endDateFilter && endDateFilter !== "all"
      ? new Date(new Date(endDateFilter).setHours(23, 59, 59, 999))
      : defaultEndDate;

    if (startDateFilter && endDateFilter && startDateFilter === endDateFilter) {
      formattedStart = new Date(new Date(startDateFilter).setHours(0, 0, 0, 0));
      formattedEnd = new Date(new Date(startDateFilter).setHours(23, 59, 59, 999));
    }

    formattedStart = formatDateToISO(formattedStart);
    formattedEnd = formatDateToISO(formattedEnd);
    
    // Flag for determining how to display the months
    const useSpecificDateRange = startDateFilter && startDateFilter !== "all" && endDateFilter && endDateFilter !== "all";
    
    // Step 1: Get all customer IDs that match initial criteria - EXACTLY matching first API logic
    const initialPipeline = [
      // Initial basic match
      {
        $match: {
          fileStatus: "active",
          statusByCreditPd: { $in: ["complete", "approve"] }
        }
      },
      
      // Only lookup what's needed for filtering
      {
        $lookup: {
          from: "customerdetails",
          localField: "customerId",
          foreignField: "_id",
          as: "customerDetailData"
        }
      },
      { 
        $unwind: { 
          path: "$customerDetailData",
          preserveNullAndEmptyArrays: true 
        }
      },
      {
        $lookup: {
          from: "newbranches",
          localField: "customerDetailData.branch",
          foreignField: "_id",
          as: "branchDetails"
        }
      },
      {
        $unwind: {
          path: "$branchDetails",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "newbranches",
          localField: "branchDetails.regionalBranchId",
          foreignField: "_id",
          as: "regionalBranchDetails"
        }
      },
      {
        $unwind: {
          path: "$regionalBranchDetails",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "applicantdetails",
          localField: "customerId",
          foreignField: "customerId",
          as: "applicantDetails"
        }
      },
      {
        $unwind: {
          path: "$applicantDetails",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "customerId",
          foreignField: "customerId",
          as: "finalsanctionData"
        }
      },
      {
        $unwind: {
          path: "$finalsanctionData",
          preserveNullAndEmptyArrays: true
        }
      },
      
      // Apply all filters - EXACTLY matching first API's conditional logic
      {
        $match: {
          $and: [
            // Search query
            searchQuery ? {
              $or: [
                { "applicantDetails.mobileNo": { $regex: searchQuery, $options: "i" } },
                { "applicantDetails.fullName": { $regex: searchQuery, $options: "i" } },
                { "applicantDetails.fatherName": { $regex: searchQuery, $options: "i" } },
                { "customerDetailData.customerFinId": { $regex: searchQuery, $options: "i" } }
              ]
            } : {},

            // Branch filter
            branch && branch !== "all" ? {
              "branchDetails._id": {
                $in: (Array.isArray(branch) ? branch : branch.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},

            // Regional branch filter
            regionalBranch && regionalBranch !== "all" ? {
              "regionalBranchDetails._id": {
                $in: (Array.isArray(regionalBranch) ? regionalBranch : regionalBranch.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},

            // Product filter
            product && product !== "all" ? {
              "customerDetailData.productId": {
                $in: (Array.isArray(product) ? product : product.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},

            // SanctionStage filter
            sanctionStage === "partnerNotSelect" ? { "finalsanctionData.partnerId": null } : {},

            // finalApproverStatus filter
            finalApproverStatus && finalApproverStatus !== "partnerNotSelect" ? {
              $and: finalApproverStatus.split(",").map(statusKey => ({
                [`finalsanctionData.${statusKey}`]: "complete"
              }))
            } : {},

            // Special case for finalApproverStatus=partnerNotSelect
            finalApproverStatus === "partnerNotSelect" ? {
              "finalsanctionData.partnerId": null
            } : {},

            fileProcessStatus
            ? {
                $and: fileProcessStatus.split(",").map(statusKey => ({
                  [`finalsanctionData.${statusKey}`]: "complete"
                }))
              }
            : {},

            // Date filter - EXACTLY matching first API
            startDateFilter && endDateFilter && startDateFilter !== "all" && endDateFilter !== "all"? {
              creditPdCompleteDate: {
                $gte: formattedStart,
                $lt: formattedEnd,
              }
            }:{},
            
            hoSelfAssign && hoSelfAssign !=="all"?{
              "finalsanctionData.employeeId": {
                $in: (Array.isArray(hoSelfAssign) ? hoSelfAssign : hoSelfAssign.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},
            
            // Exclude specific products when no product filter
            (!product || product === "all") ? {
              "customerDetailData.productId": {
                $nin: [].map(id => new ObjectId(id))
              }
            } : {}
          ].filter(condition => Object.keys(condition).length > 0)
        }
      },
      
      // Project relevant fields
      {
        $project: {
          _id: 1,
          customerId: 1,
          creditPdCompleteDate: 1,
          pdDate: 1, 
          "finalsanctionData.employeeId": 1,
          "finalsanctionData.incomeSanctionStatus": 1,
          "finalsanctionData.fileProcessRejectStatus": 1,
          "finalsanctionData.sendToPartnerPostDisbursedStatus": 1,
          "finalsanctionData.sendToPartnerPreDisbursedStatus": 1,
          "finalsanctionData.sendToPartnerSanctionStatus": 1
        }
      }
    ];
    
    // Execute the initial pipeline
    const filteredRecords = await externalVendorFormModel
      .aggregate(initialPipeline)
      .allowDiskUse(true);
    
    // Function to parse various date formats
    function parseDate(dateStr) {
      if (!dateStr) return null;
      
      // If it's already a Date object
      if (dateStr instanceof Date) return dateStr;
      
      // If it's an ISO string
      if (typeof dateStr === 'string') {
        // Check if it has AM/PM format (like "2025-03-25T03:36:16 PM")
        const amPmRegex = /(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}) (AM|PM)/;
        const match = dateStr.match(amPmRegex);
        
        if (match) {
          // Parse the date part
          const [_, datePart, amPm] = match;
          const date = new Date(datePart);
          
          // Adjust hours for PM
          if (amPm === 'PM' && date.getHours() < 12) {
            date.setHours(date.getHours() + 12);
          }
          
          return date;
        } else {
          // Try standard ISO parsing
          const date = new Date(dateStr);
          if (!isNaN(date.getTime())) {
            return date;
          }
        }
      }
      
      return null;
    }
    
    // Total counts will be based on exactly what we got from initial pipeline
    const totalCount = filteredRecords.length;
    
    // Calculate total counts using EXACT same logic as first API
    let notAssignCount = 0;
    let selfAssignCount = 0;
    let incomeSanctionStatus = 0;
    let fileProcessRejectStatus = 0;
    let sendToPartnerPostDisbursedStatus = 0;
    let sendToPartnerPreDisbursedStatus = 0;
    let sendToPartnerSanctionStatus = 0;

    // Count directly from the filtered records, exactly like the first API would do
    filteredRecords.forEach(record => {
      if (record.finalsanctionData && record.finalsanctionData.employeeId) {
        selfAssignCount++;
      } else {
        notAssignCount++;
      }
      
      if (record.finalsanctionData) {
        if (record.finalsanctionData.incomeSanctionStatus === "complete") {
          incomeSanctionStatus++;
        }
        
        if (record.finalsanctionData.fileProcessRejectStatus === "complete") {
          fileProcessRejectStatus++;
        }
        
        if (record.finalsanctionData.sendToPartnerPostDisbursedStatus === "complete") {
          sendToPartnerPostDisbursedStatus++;
        }
        
        if (record.finalsanctionData.sendToPartnerPreDisbursedStatus === "complete") {
          sendToPartnerPreDisbursedStatus++;
        }
        
        if (record.finalsanctionData.sendToPartnerSanctionStatus === "complete") {
          sendToPartnerSanctionStatus++;
        }
      }
    });
    
    // Determine which years are covered in the date range if using specific range
    const startYear = new Date(formattedStart).getFullYear();
    const endYear = new Date(formattedEnd).getFullYear();
    
    // Initialize data structure for all years in the range
    const yearlyData = {};
    for (let year = startYear; year <= endYear; year++) {
      yearlyData[year] = new Array(12).fill(0).map((_, index) => ({
        year,
        month: index + 1,
        totalCount: 0,
        notAssignCount: 0,
        selfAssignCount: 0,
        incomeSanctionStatus: 0,
        fileProcessRejectStatus: 0,
        sendToPartnerPostDisbursedStatus: 0,
        sendToPartnerPreDisbursedStatus: 0,
        sendToPartnerSanctionStatus: 0
      }));
    }
    
    // Process each record for monthly breakdown
    for (const record of filteredRecords) {
      // Now handle monthly distribution
      // Parse the PD date - try various date fields
      const pdDateObj = parseDate(record.pdDate) || parseDate(record.creditPdCompleteDate);
      
      // Skip month assignment if can't determine PD date
      if (!pdDateObj) continue;
      
      // Get year and month
      const year = pdDateObj.getFullYear();
      const month = pdDateObj.getMonth(); // 0-based month
      
      // Skip if year isn't in our range
      if (!yearlyData[year]) continue;
      
      // Get the month data for this year/month
      const monthData = yearlyData[year][month];
      monthData.totalCount++;
      
      // Status checks for month distribution
      const hasSelfAssign = record.finalsanctionData && record.finalsanctionData.employeeId;
      if (hasSelfAssign) {
        monthData.selfAssignCount++;
      } else {
        monthData.notAssignCount++;
      }
      
      // Check other statuses for month distribution
      if (record.finalsanctionData) {
        if (record.finalsanctionData.incomeSanctionStatus === "complete") {
          monthData.incomeSanctionStatus++;
        }
        
        if (record.finalsanctionData.fileProcessRejectStatus === "complete") {
          monthData.fileProcessRejectStatus++;
        }
        
        if (record.finalsanctionData.sendToPartnerPostDisbursedStatus === "complete") {
          monthData.sendToPartnerPostDisbursedStatus++;
        }
        
        if (record.finalsanctionData.sendToPartnerPreDisbursedStatus === "complete") {
          monthData.sendToPartnerPreDisbursedStatus++;
        }
        
        if (record.finalsanctionData.sendToPartnerSanctionStatus === "complete") {
          monthData.sendToPartnerSanctionStatus++;
        }
      }
    }
    
    // Format the monthly data for response
    const monthNames = [
      "January", "February", "March", "April",
      "May", "June", "July", "August", 
      "September", "October", "November", "December"
    ];
    
    // Prepare final response data
    let formattedMonthlyData = [];
    
    // Check if date range is within the same year
    const isSameYearDateRange = startYear === endYear;
    
    if (isSameYearDateRange) {
      // Case 1: Same year - show all 12 months of that year
      formattedMonthlyData = yearlyData[startYear].map((data, index) => ({
        month: monthNames[index],
        totalCount: data.totalCount,
        notAssignCount: data.notAssignCount,
        selfAssignCount: data.selfAssignCount,
        incomeSanctionStatus: data.incomeSanctionStatus,
        fileProcessRejectStatus: data.fileProcessRejectStatus,
        sendToPartnerPostDisbursedStatus: data.sendToPartnerPostDisbursedStatus,
        sendToPartnerPreDisbursedStatus: data.sendToPartnerPreDisbursedStatus,
        sendToPartnerSanctionStatus: data.sendToPartnerSanctionStatus
      }));
    } else if (useSpecificDateRange) {
      // Case 2: Multi-year range - show months with year labels
      let allMonthsData = [];
      
      // Include all years in the range
      for (let yr = startYear; yr <= endYear; yr++) {
        // Get all months for this year
        const yearMonths = yearlyData[yr].map((data, index) => ({
          year: yr,
          month: `${monthNames[index]} ${yr}`,
          monthNumber: index + 1,
          totalCount: data.totalCount,
          notAssignCount: data.notAssignCount,
          selfAssignCount: data.selfAssignCount,
          incomeSanctionStatus: data.incomeSanctionStatus,
          fileProcessRejectStatus: data.fileProcessRejectStatus,
          sendToPartnerPostDisbursedStatus: data.sendToPartnerPostDisbursedStatus,
          sendToPartnerPreDisbursedStatus: data.sendToPartnerPreDisbursedStatus,
          sendToPartnerSanctionStatus: data.sendToPartnerSanctionStatus
        }));
        
        // Add non-zero months to result
        const nonZeroMonths = yearMonths.filter(data => data.totalCount > 0);
        allMonthsData = [...allMonthsData, ...nonZeroMonths];
      }
      
      // Sort months chronologically
      allMonthsData.sort((a, b) => {
        if (a.year !== b.year) return a.year - b.year;
        return a.monthNumber - b.monthNumber;
      });
      
      formattedMonthlyData = allMonthsData.map(data => ({
        month: data.month,
        totalCount: data.totalCount,
        notAssignCount: data.notAssignCount,
        selfAssignCount: data.selfAssignCount,
        incomeSanctionStatus: data.incomeSanctionStatus,
        fileProcessRejectStatus: data.fileProcessRejectStatus,
        sendToPartnerPostDisbursedStatus: data.sendToPartnerPostDisbursedStatus,
        sendToPartnerPreDisbursedStatus: data.sendToPartnerPreDisbursedStatus,
        sendToPartnerSanctionStatus: data.sendToPartnerSanctionStatus
      }));
    } else {
      // Case 3: No specific date range - use year from param or current year
      const selectedYear = year ? parseInt(year) : currentYear;
      
      // Make sure the year exists in our data structure
      if (!yearlyData[selectedYear]) {
        yearlyData[selectedYear] = new Array(12).fill(0).map((_, index) => ({
          year: selectedYear,
          month: index + 1,
          totalCount: 0,
          notAssignCount: 0,
          selfAssignCount: 0,
          incomeSanctionStatus: 0,
          fileProcessRejectStatus: 0,
          sendToPartnerPostDisbursedStatus: 0,
          sendToPartnerPreDisbursedStatus: 0,
          sendToPartnerSanctionStatus: 0
        }));
      }
      
      formattedMonthlyData = yearlyData[selectedYear].map((data, index) => ({
        month: monthNames[index],
        totalCount: data.totalCount,
        notAssignCount: data.notAssignCount,
        selfAssignCount: data.selfAssignCount,
        incomeSanctionStatus: data.incomeSanctionStatus,
        fileProcessRejectStatus: data.fileProcessRejectStatus,
        sendToPartnerPostDisbursedStatus: data.sendToPartnerPostDisbursedStatus,
        sendToPartnerPreDisbursedStatus: data.sendToPartnerPreDisbursedStatus,
        sendToPartnerSanctionStatus: data.sendToPartnerSanctionStatus
      }));
    }
    
    // If we have no monthly data, initialize empty months for display
    if (formattedMonthlyData.length === 0) {
      formattedMonthlyData = monthNames.map(month => ({
        month,
        totalCount: 0,
        notAssignCount: 0,
        selfAssignCount: 0,
        incomeSanctionStatus: 0,
        fileProcessRejectStatus: 0,
        sendToPartnerPostDisbursedStatus: 0,
        sendToPartnerPreDisbursedStatus: 0,
        sendToPartnerSanctionStatus: 0
      }));
    }
    
    // Double check to ensure summary counts match array sum counts
    // This is a safety check to detect any discrepancies
    let sumOfMonthlyTotal = 0;
    let sumOfMonthlySelfAssign = 0;
    
    for (let yr = startYear; yr <= endYear; yr++) {
      if (yearlyData[yr]) {
        for (const monthData of yearlyData[yr]) {
          sumOfMonthlyTotal += monthData.totalCount;
          sumOfMonthlySelfAssign += monthData.selfAssignCount;
        }
      }
    }
    
    // Adjust if there's a mismatch (this shouldn't happen with a proper implementation)
    if (sumOfMonthlyTotal !== totalCount) {
      console.warn(`Warning: Sum of monthly totals (${sumOfMonthlyTotal}) doesn't match overall total (${totalCount})`);
    }
    
    // Return the response with EXACTLY the correct total counts
    return success(res, "customerDetails", {
      totalCount,
      notAssignCount,
      selfAssignCount,
      incomeSanctionStatus,
      fileProcessRejectStatus,
      sendToPartnerPostDisbursedStatus,
      sendToPartnerPreDisbursedStatus,
      sendToPartnerSanctionStatus,
      monthlyData: formattedMonthlyData,
      fileCount: totalCount // For backward compatibility
    });

  } catch (error) {
    console.error(error);
    return unknownError(res, error.message);
  }
};


async function overAllDashboard(req, res) {
  try {
  
        // Handle pagination
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;
    
        // Basic aggregation pipeline to focus only on document data and pagination
        const aggregationPipeline = [
          // Initial match for active files with completed PD status
          {
            $match: {
              fileStatus: "active",
              statusByCreditPd: { $in: ["complete", "approve"] }
            }
          },
    
          // Lookup all collections that contain document information
          // Customer documents
          {
            $lookup: {
              from: "customerdocuments",
              localField: "customerId",
              foreignField: "customerId",
              as: "customerDocuments"
            }
          },
          {
            $unwind: {
              path: "$customerDocuments",
              preserveNullAndEmptyArrays: true
            }
          },
    
          // Credit PD data
          {
            $lookup: {
              from: "pdformdatas",
              localField: "customerId",
              foreignField: "customerId",
              as: "creditPdData"
            }
          },
          {
            $unwind: {
              path: "$creditPdData",
              preserveNullAndEmptyArrays: true
            }
          },
    
          // Guarantor PDC data
          {
            $lookup: {
              from: "gtrpdcs",
              localField: "customerId",
              foreignField: "customerId",
              as: "gtrPdcData"
            }
          },
          {
            $unwind: {
              path: "$gtrPdcData",
              preserveNullAndEmptyArrays: true
            }
          },
    
          // Applicant PDC data
          {
            $lookup: {
              from: "apppdcs",
              localField: "customerId",
              foreignField: "customerId",
              as: "appPdcData"
            }
          },
          {
            $unwind: {
              path: "$appPdcData",
              preserveNullAndEmptyArrays: true
            }
          },
    
          // Disbursement data
          {
            $lookup: {
              from: "disbursements",
              localField: "customerId",
              foreignField: "customerId",
              as: "disbursementData"
            }
          },
          {
            $unwind: {
              path: "$disbursementData",
              preserveNullAndEmptyArrays: true
            }
          },
    
          // Co-applicant data
          {
            $lookup: {
              from: "coapplicantdetails",
              localField: "customerId",
              foreignField: "customerId",
              as: "coApplicantData"
            }
          },
    
          // Applicant data
          {
            $lookup: {
              from: "applicantdetails",
              localField: "customerId",
              foreignField: "customerId",
              as: "applicantData"
            }
          },
          {
            $unwind: {
              path: "$applicantData",
              preserveNullAndEmptyArrays: true
            }
          },
    
          // Guarantor data
          {
            $lookup: {
              from: "guarantors",
              localField: "customerId",
              foreignField: "customerId",
              as: "guarantorData"
            }
          },
          {
            $unwind: {
              path: "$guarantorData",
              preserveNullAndEmptyArrays: true
            }
          },
    
          // CIBIL data
          {
            $lookup: {
              from: "cibildetails",
              localField: "customerId",
              foreignField: "customerId",
              as: "cibilData"
            }
          },
          {
            $unwind: {
              path: "$cibilData",
              preserveNullAndEmptyArrays: true
            }
          },
    
          // Loan document data
          {
            $lookup: {
              from: "loandocumentmodels",
              localField: "customerId",
              foreignField: "customerId",
              as: "loanDocumentData"
            }
          },
          {
            $unwind: {
              path: "$loanDocumentData",
              preserveNullAndEmptyArrays: true
            }
          },
    
          // SignKYC details
          {
            $lookup: {
              from: "customerdocumentdetails",
              localField: "customerId",
              foreignField: "customerId",
              as: "SignKycDetails"
            }
          },
          {
            $unwind: {
              path: "$SignKycDetails",
              preserveNullAndEmptyArrays: true
            }
          },
    
          // Final data
          {
            $lookup: {
              from: "finalsanctiondetaails",
              localField: "customerId",
              foreignField: "customerId",
              as: "finalData"
            }
          },
          {
            $unwind: {
              path: "$finalData",
              preserveNullAndEmptyArrays: true
            }
          },
    
          // Bank statement data
          {
            $lookup: {
              from: "bankstatementkycs",
              localField: "customerId",
              foreignField: "customerId",
              as: "bankStatementData"
            }
          },
          {
            $unwind: {
              path: "$bankStatementData",
              preserveNullAndEmptyArrays: true
            }
          },
    
          // Extract vendors by type from vendors array
          {
            $addFields: {
              rcuVendor: {
                $arrayElemAt: [
                  {
                    $filter: {
                      input: "$vendors",
                      as: "vendor",
                      cond: { $eq: ["$$vendor.vendorType", "rcu"] }
                    }
                  },
                  0
                ]
              },
              legalVendor: {
                $arrayElemAt: [
                  {
                    $filter: {
                      input: "$vendors",
                      as: "vendor",
                      cond: { $eq: ["$$vendor.vendorType", "legal"] }
                    }
                  },
                  0
                ]
              },
              technicalVendor: {
                $arrayElemAt: [
                  {
                    $filter: {
                      input: "$vendors",
                      as: "vendor",
                      cond: { $eq: ["$$vendor.vendorType", "technical"] }
                    }
                  },
                  0
                ]
              },
              taggingVendor: {
                $arrayElemAt: [
                  {
                    $filter: {
                      input: "$vendors",
                      as: "vendor",
                      cond: { $eq: ["$$vendor.vendorType", "tagging"] }
                    }
                  },
                  0
                ]
              },
              // Extract first and second co-applicants
              firstCoApplicant: { $arrayElemAt: ["$coApplicantData", 0] },
              secondCoApplicant: { $arrayElemAt: ["$coApplicantData", 1] },
              // Extract esign links
              esignLinks: {
                $cond: {
                  if: {
                    $and: [
                      { $ne: ["$finalData.signEsignLink", null] },
                      { $ne: ["$finalData.signEsignLink", {}] },
                      { $gt: [{ $size: { $objectToArray: { $ifNull: ["$finalData.signEsignLink", {}] } } }, 0] }
                    ]
                  },
                  then: "$finalData.signEsignLink",
                  else: "$finalData.esignLinks"
                }
              },
              // Extract latest CIBIL reports
              latestApplicantCibilReport: {
                $arrayElemAt: [
                  { $ifNull: ["$cibilData.applicantFetchHistory", []] },
                  { $subtract: [{ $size: { $ifNull: ["$cibilData.applicantFetchHistory", []] } }, 1] }
                ]
              },
              latestGuarantorCibilReport: {
                $arrayElemAt: [
                  { $ifNull: ["$cibilData.guarantorFetchHistory", []] },
                  { $subtract: [{ $size: { $ifNull: ["$cibilData.guarantorFetchHistory", []] } }, 1] }
                ]
              },
              // Extract house photos array
              housePhotos: {
                $concatArrays: [
                  { $ifNull: [{ $cond: { if: { $isArray: "$creditPdData.fourBoundaryPhotos" }, then: "$creditPdData.fourBoundaryPhotos", else: ["$creditPdData.fourBoundaryPhotos"] } }, []] },
                  { $ifNull: [{ $cond: { if: { $isArray: "$creditPdData.houseInsidePhoto" }, then: "$creditPdData.houseInsidePhoto", else: ["$creditPdData.houseInsidePhoto"] } }, []] },
                  { $ifNull: [{ $cond: { if: { $isArray: "$creditPdData.propertyOtherPhotos" }, then: "$creditPdData.propertyOtherPhotos", else: ["$creditPdData.propertyOtherPhotos"] } }, []] },
                  [
                    { $ifNull: ["$creditPdData.selfiWithCustomer", null] },
                    { $ifNull: ["$creditPdData.photoWithLatLong", null] },
                    { $ifNull: ["$creditPdData.front", null] },
                    { $ifNull: ["$creditPdData.leftSide", null] },
                    { $ifNull: ["$creditPdData.rightSide", null] },
                    { $ifNull: ["$creditPdData.approachRoad", null] },
                    { $ifNull: ["$creditPdData.mainRoad", null] },
                    { $ifNull: ["$creditPdData.interiorRoad", null] },
                    { $ifNull: ["$creditPdData.selfieWithProperty", null] },
                    { $ifNull: ["$creditPdData.landmarkPhoto", null] },
                    { $ifNull: ["$creditPdData.latLongPhoto", null] }
                  ]
                ]
              }
            }
          },
    
          // Project only the document yes/no fields
          {
            $project: {
              _id: 0,
              customerId: 1,
              SanctionCheckList: {
                // Login check list documents
                utilityBillDocument: {
                  $cond: {
                    if: { $ifNull: ["$customerDocuments.incomeDocument.utilityBillDocument", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                familyCardDocument: {
                  $cond: {
                    if: { $ifNull: ["$customerDocuments.incomeDocument.familyCardDocument", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                udyamCertificate: {
                  $cond: {
                    if: { $ifNull: ["$customerDocuments.incomeDocument.udyamCertificateDocument", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                bankStatement: {
                  $cond: {
                    if: { $ifNull: ["$customerDocuments.incomeDocument.bankStatementDocument", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                incomeDocument: {
                  $cond: {
                    if: { $ifNull: ["$customerDocuments.incomeDocument.incomeStatemenDocument", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                propertyDocument: {
                  $cond: {
                    if: { $ifNull: ["$customerDocuments.propertyDocuments.propertyDocument", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                signApplicantKyc: {
                  $cond: {
                    if: { $ifNull: ["$customerDocuments.signApplicantKyc", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                signCoApplicantKyc: {
                  $cond: {
                    if: { $ifNull: ["$customerDocuments.signCoApplicantKyc", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                signCoTwoApplicantKyc: {
                  $cond: {
                    if: { $ifNull: ["$customerDocuments.signCoTwoApplicantKyc", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                signGurantorKyc: {
                  $cond: {
                    if: { $ifNull: ["$customerDocuments.signGurantorKyc", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                // Credit PD documents
                electricityBill: {
                  $cond: {
                    if: { $ifNull: ["$creditPdData.utilityBillDocument", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                samagraIdDoc: {
                  $cond: {
                    if: { $ifNull: ["$creditPdData.samagraIdDetail.samagraIdDoc", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                // Photos
                applicantPhoto: {
                  $cond: {
                    if: { $ifNull: ["$applicantData.applicantPhoto", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                coApplicantPhoto: {
                  $cond: {
                    if: { $ifNull: ["$firstCoApplicant.coApplicantPhoto", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                coApplicantPhotoTwo: {
                  $cond: {
                    if: { $ifNull: ["$secondCoApplicant.coApplicantPhoto", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                guarantorPhoto: {
                  $cond: {
                    if: { $ifNull: ["$guarantorData.guarantorPhoto", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                // KYC documents
                signApplicantKyc: {
        $cond: {
          if: { "$gt": [{ "$size": { "$ifNull": ["$SignKycDetails.signApplicantKyc", []] } }, 0] },
          then: "Yes",
          else: "No"
        }
      },
                signCoApplicantKyc: {
                  $cond: {
                    if: { "$gt": [{ "$size": { "$ifNull": ["$SignKycDetails.signCoApplicantKyc", []] } }, 0] },
                    then: "Yes",
                    else: "No"
                  }
                },
                signCoTwoApplicantKyc: {
                  $cond: {
                    if: { "$gt": [{ "$size": { "$ifNull": ["$SignKycDetails.signCoTwoApplicantKyc", []] } }, 0] },
                    then: "Yes",
                    else: "No"
                  }
                },
                signGurantorKyc: {
                  $cond: {
                    if: { "$gt": [{ "$size": { "$ifNull": ["$SignKycDetails.signGurantorKyc", []] } }, 0] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                // Applicant KYC
                applicantKyc: {
                  $cond: {
                    if: {
                      $or: [
                        { $ifNull: ["$applicantData.kycUpload.aadharFrontImage", null] },
                        { $ifNull: ["$applicantData.kycUpload.aadharBackImage", null] },
                        { $ifNull: ["$applicantData.kycUpload.panFrontImage", null] },
                        { $ifNull: ["$applicantData.kycUpload.drivingLicenceImage", null] },
                        { $ifNull: ["$applicantData.kycUpload.voterIdImage", null] }
                      ]
                    },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                // Co-applicant KYC
                coApplicantKyc: {
                  $cond: {
                    if: {
                      $or: [
                        { $ifNull: ["$firstCoApplicant.kycUpload.aadharFrontImage", null] },
                        { $ifNull: ["$firstCoApplicant.kycUpload.aadharBackImage", null] },
                        { $ifNull: ["$firstCoApplicant.kycUpload.docImage", null] }
                      ]
                    },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                // Second co-applicant KYC
                coApplicantKycTwo: {
                  $cond: {
                    if: {
                      $or: [
                        { $ifNull: ["$secondCoApplicant.kycUpload.aadharFrontImage", null] },
                        { $ifNull: ["$secondCoApplicant.kycUpload.aadharBackImage", null] },
                        { $ifNull: ["$secondCoApplicant.kycUpload.docImage", null] }
                      ]
                    },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                // Guarantor KYC
                gurantorKyc: {
                  $cond: {
                    if: {
                      $or: [
                        { $ifNull: ["$guarantorData.kycUpload.aadharFrontImage", null] },
                        { $ifNull: ["$guarantorData.kycUpload.aadharBackImage", null] },
                        { $ifNull: ["$guarantorData.kycUpload.docImage", null] }
                      ]
                    },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                // CIBIL reports
                applicantCibilReport: {
                  $cond: {
                    if: { $ifNull: ["$latestApplicantCibilReport.cibilReport", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                // First co-applicant CIBIL
                coApplicantCibilReport: {
                  $let: {
                    vars: {
                      coAppData: { $arrayElemAt: [{ $ifNull: ["$cibilData.coApplicantData", []] }, 0] }
                    },
                    in: {
                      $cond: {
                        if: {
                          $and: [
                            { $ne: ["$$coAppData", null] },
                            { $ne: ["$$coAppData", undefined] },
                            { $isArray: "$$coAppData.coApplicantFetchHistory" },
                            { $gt: [{ $size: { $ifNull: ["$$coAppData.coApplicantFetchHistory", []] } }, 0] }
                          ]
                        },
                        then: {
                          $let: {
                            vars: {
                              lastReport: {
                                $arrayElemAt: [
                                  "$$coAppData.coApplicantFetchHistory",
                                  { $subtract: [{ $size: "$$coAppData.coApplicantFetchHistory" }, 1] }
                                ]
                              }
                            },
                            in: {
                              $cond: {
                                if: { $ifNull: ["$$lastReport.cibilReport", null] },
                                then: "Yes",
                                else: "No"
                              }
                            }
                          }
                        },
                        else: "No"
                      }
                    }
                  }
                },
                
                // Second co-applicant CIBIL
                coApplicantTwoCibilReport: {
                  $let: {
                    vars: {
                      coAppData: { $arrayElemAt: [{ $ifNull: ["$cibilData.coApplicantData", []] }, 1] }
                    },
                    in: {
                      $cond: {
                        if: {
                          $and: [
                            { $ne: ["$$coAppData", null] },
                            { $ne: ["$$coAppData", undefined] },
                            { $isArray: "$$coAppData.coApplicantFetchHistory" },
                            { $gt: [{ $size: { $ifNull: ["$$coAppData.coApplicantFetchHistory", []] } }, 0] }
                          ]
                        },
                        then: {
                          $let: {
                            vars: {
                              lastReport: {
                                $arrayElemAt: [
                                  "$$coAppData.coApplicantFetchHistory",
                                  { $subtract: [{ $size: "$$coAppData.coApplicantFetchHistory" }, 1] }
                                ]
                              }
                            },
                            in: {
                              $cond: {
                                if: { $ifNull: ["$$lastReport.cibilReport", null] },
                                then: "Yes",
                                else: "No"
                              }
                            }
                          }
                        },
                        else: "No"
                      }
                    }
                  }
                },
                
                // Guarantor CIBIL
                guarantorCibilReport: {
                  $cond: {
                    if: { $ifNull: ["$latestGuarantorCibilReport.cibilReport", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                // Other reports
                pdReport: {
                  $cond: {
                    if: { $ifNull: ["$creditPdData.pdfLink", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                rcuReport: {
                  $cond: {
                    if: { $ifNull: ["$rcuVendor.uploadProperty", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                legalReport: {
                  $cond: {
                    if: { $ifNull: ["$legalVendor.uploadProperty", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                technicalReport: {
                  $cond: {
                    if: { $ifNull: ["$technicalVendor.uploadProperty", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                technicalEstimateDocument: {
                  $cond: {
                    if: { $ifNull: ["$technicalVendor.estimateDocument", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                taggingReport: {
                  $cond: {
                    if: { $ifNull: ["$taggingVendor.uploadProperty", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                // House photos existence check
                housePhotos: {
                  $cond: {
                    if: { $gt: [{ $size: { $filter: { input: "$housePhotos", as: "photo", cond: { $ne: ["$$photo", null] } } } }, 0] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                // Work photos (income source photos) existence check
                workPhotos: {
                  $cond: {
                    if: {
                      $or: [
                        { 
                          $gt: [
                            { 
                              $size: { 
                                $filter: { 
                                  input: { $ifNull: ["$creditPdData.incomeSource", []] }, 
                                  as: "source", 
                                  cond: { 
                                    $or: [
                                      { $gt: [{ $size: { $ifNull: ["$$source.agricultureBusiness.agriculturePhotos", []] } }, 0] },
                                      { $gt: [{ $size: { $ifNull: ["$$source.milkBusiness.milkPhotos", []] } }, 0] },
                                      { $gt: [{ $size: { $ifNull: ["$$source.milkBusiness.animalPhotos", []] } }, 0] },
                                      { $gt: [{ $size: { $ifNull: ["$$source.salaryIncome.last3MonthSalarySlipPhotos", []] } }, 0] },
                                      { $gt: [{ $size: { $ifNull: ["$$source.salaryIncome.salaryPhotos", []] } }, 0] },
                                      { $ne: ["$$source.salaryIncome.bankStatementPhoto", null] },
                                      { $ne: ["$$source.salaryIncome.salaryCredited6Month", null] },
                                      { $gt: [{ $size: { $ifNull: ["$$source.other.incomeOtherImages", []] } }, 0] }
                                    ]
                                  }
                                }
                              }
                            }, 
                            0
                          ]
                        }
                      ]
                    },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                camReport: {
                  $cond: {
                    if: { $ifNull: ["$loanDocumentData.camReport", null] },
                    then: "Yes",
                    else: "No"
                  }
                }
              },
              disbursmentCheckList: {
                dualNameDeclaration: {
                  $cond: {
                    if: { $ifNull: ["$loanDocumentData.dualNameDeclaration", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                dualSignDeclaration: {
                  $cond: {
                    if: { $ifNull: ["$loanDocumentData.dualSignDeclaration", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                dualDoBDeclaration: {
                  $cond: {
                    if: { $ifNull: ["$loanDocumentData.dualDoBDeclaration", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                applicantPDC: {
                  $cond: {
                    if: { $ifNull: ["$appPdcData.applicantPdcDocument", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                guarantorPDC: {
                  $cond: {
                    if: { $ifNull: ["$gtrPdcData.guarantorPdcDocument", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                applicantBSV: {
                  $cond: {
                    if: { $ifNull: ["$loanDocumentData.applicantBSV", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                guarantorBSV: {
                  $cond: {
                    if: { $ifNull: ["$loanDocumentData.guarantorBSV", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                coOwnershipDeed: {
                  $cond: {
                    if: { $ifNull: ["$loanDocumentData.coOwnershipDeed", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                eStampUpload: {
                  $cond: {
                    if: { 
                      $gt: [
                        { 
                          $size: { 
                            $reduce: {
                              input: { $ifNull: ["$disbursementData.estampRequirement", []] },
                              initialValue: [],
                              in: { $concatArrays: ["$$value", { $ifNull: ["$$this.eStampUpload", []] }] }
                            }
                          }
                        },
                        0
                      ]
                    },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                insuranceForm: {
                  $cond: {
                    if: { $ifNull: ["$loanDocumentData.insuranceForm", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                emOrRmDeed: {
                  $cond: {
                    if: { $ifNull: ["$loanDocumentData.emOrRmDeed", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                finalLegal: {
                  $cond: {
                    if: { $ifNull: ["$legalVendor.finalLegalUpload", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                vettingReport: {
                  $cond: {
                    if: { $ifNull: ["$loanDocumentData.vettingReport", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                nachLink: {
                            $cond: {
                              if: { $ifNull: ["$bankStatementData.Nachlink", null] },
                              then: "Yes",
                              else: "No"
                  }
                },
                
                eNachLinkSignUpload: {
                  $cond: {
                    if: { $ifNull: ["$disbursementData.eNachLinkSignUpload", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                eSignatureDocuments: {
                  $cond: {
                    if: { $ifNull: ["$disbursementData.eSignatureDocuments", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                appKycDocument: {
                  $cond: {
                    if: { $ifNull: ["$loanDocumentData.appKycDocument", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                coAppKycDocument: {
                  $cond: {
                    if: { $ifNull: ["$loanDocumentData.coAppKycDocument", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                stampPdf: {
                  $cond: {
                    if: { $ifNull: ["$loanDocumentData.stampPdf", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                sanctionZipUrl: {
                  $cond: {
                    if: { $ifNull: ["$finalData.sanctionZipUrl", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                disbursementZipUrl: {
                  $cond: {
                    if: { $ifNull: ["$finalData.disbursementZipUrl", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                incomeSectionLatterUrl: {
                  $cond: {
                    if: { $ifNull: ["$finalData.incomesectionLatterUrl", null] },
                    then: "Yes",
                    else: "No"
                  }
                },
                
                esignLinks: {
                  $cond: {
                    if: { $ifNull: ["$esignLinks", null] },
                    then: "Yes",
                    else: "No"
                  }
                }
              }
            }
          },
          
          // Count total documents for pagination
          {
            $facet: {
              totalCount: [{ $count: "count" }],
              paginatedResults: [
                { $skip: skip },
                { $limit: limit }
              ]
            }
          },
          
          // Format the final output
          {
            $project: {
              data: "$paginatedResults",
              pagination: {
                currentPage: { $literal: page },
                totalPages: {
                  $ceil: {
                    $divide: [
                      { $arrayElemAt: ["$totalCount.count", 0] },
                      limit
                    ]
                  }
                },
                totalCustomers: { $arrayElemAt: ["$totalCount.count", 0] },
                limit: { $literal: limit }
              }
            }
          }
        ];
    
        // Execute the aggregation pipeline
        const results = await externalVendorFormModel.aggregate(aggregationPipeline);
        
        // Format the output and handle edge cases
        const paginationInfo = {
          currentPage: page,
          totalPages: results[0]?.pagination?.totalPages || 0,
          totalCustomers: results[0]?.pagination?.totalCustomers || 0,
          limit: limit
        };
        
        return success(res, "All Document For Dashboard Successfully", {
          data: results[0]?.data || [],
          pagination: paginationInfo
        });
        
 
  } catch (error) {
    console.error('Error in overAllDashboard:', error);
    return unknownError(res, error);
  }
}

// ------------fileStatus, hoRemark, responsibility, partnerPending  given fields updated---------------------
// async function updateStatusApi(req, res) { 
//   try {
//       const { customerId, fileStatus, responsibility, hoRemark, partnerPending } = req.body;
//       // const finalDetail = await final.findOne({customerId:customerId})
//       if (!customerId) {
//           return badRequest(res, "customerId is required");
//       }

//       // Create an update object with only provided fields
//       let update = {};
//       if (fileStatus !== undefined) update.fileStatus = fileStatus;
//       if (responsibility !== undefined) update.responsibility = responsibility;
//       if (hoRemark !== undefined) update.hoRemark = hoRemark;
//       if (partnerPending !== undefined) update.partnerPending = partnerPending;

//       const fileStageDetail = await final.findOneAndUpdate(
//           { customerId },
//           { $set: update },
//           { new: true }
//       );

//       if (!fileStageDetail) {
//           return notFound(res, "Final Sanction Detail Not Found For The Given customerId");
//       }

//       // Response with updated fields
//       const responseData = {
//           customerId: fileStageDetail.customerId,
//           fileStatus: fileStageDetail.fileStatus,
//           responsibility: fileStageDetail.responsibility,
//           hoRemark: fileStageDetail.hoRemark,
//           partnerPending: fileStageDetail.partnerPending
//       };

//       success(res, "Status updated successfully", responseData);
//   } catch (error) {
//       console.error(error);
//       unknownError(res, error);
//   }
// }
async function updateStatusApi(req, res) { 
  try {
      const { customerId, fileStatus, responsibility, hoRemark, partnerPending } = req.body;

      if (!customerId) {
          return badRequest(res, "customerId is required");
      }

      // Create an update object with only provided fields
      let update = {};
      if (fileStatus !== undefined) update.fileStatus = fileStatus;
      if (responsibility !== undefined) update.responsibility = responsibility;
      if (hoRemark !== undefined) update.hoRemark = hoRemark;
      if (partnerPending !== undefined) update.partnerPending = partnerPending;

      // Find and update OR create if not exists
      const fileStageDetail = await final.findOneAndUpdate(
          { customerId },
          { $set: update },
          { new: true, upsert: true } // `upsert: true` creates if not found
      );

      // Response with updated or newly created fields
      const responseData = {
          customerId: fileStageDetail.customerId,
          fileStatus: fileStageDetail.fileStatus,
          responsibility: fileStageDetail.responsibility,
          hoRemark: fileStageDetail.hoRemark,
          partnerPending: fileStageDetail.partnerPending
      };

      success(res, fileStageDetail.isNew ? "New entry created successfully" : "Status updated successfully", responseData);
  } catch (error) {
      console.error(error);
      unknownError(res, error);
  }
}

const camDropDown = async (req, res) => {
  try {
    const { customerId, ID, applicantType } = req.query; // Added `applicantType`

    if (!customerId) {
      return badRequest(res, "Customer ID is required");
    }

    const applicant = await applicantModel.findOne({ customerId });
    const coApplicants = await coApplicantModel.find({ customerId });
    const pdformdatasDetail = await creditPdModel.findOne({ customerId });
    const pdformdata = await creditPdModel.findOne({ customerId });
    // Construct applicant data
    let applicantData = [];
    if (applicant) {
      applicantData.push({
        fullName: applicant.fullName || "",
        fatherName: applicant.fatherName || "",
        age: applicant.age || "",
        district: applicant?.localAddress?.district || "",
        Relationship: "Self",
        _id: applicant._id,
      });
    }

    // Construct co-applicant data
    const coApplicantsData = coApplicants.map((coApp, index) => ({
      fullName: coApp.fullName,
      fatherName: coApp.fatherName,
      age: coApp.age || "",
      RelationshipWithMember: coApp.relationWithApplicant || "",
      _id: coApp._id,
    }));

    const finalModelData = await finalModel.findOne({ customerId });

    const Calculation = {
      Amount: finalModelData?.finalLoanAmount || "",
      Tenure: finalModelData?.tenureInMonth
        ? (Math.round((finalModelData.tenureInMonth / 12) * 10) / 10).toFixed(1)
        : ""
    };

    // If applicantType is passed, filter data accordingly
    let responseData = [];
    if (applicantType == "applicant") {
      responseData = applicantData; // Only applicant data
    } else if (applicantType == "coapplicant") {
      responseData = coApplicantsData; // Only co-applicant data
    } else {
      responseData = [...applicantData, ...coApplicantsData]; // Both if no filter applied
    }

    // If ID is passed, filter specific applicant or co-applicant
    if (ID) {
      const filteredPerson = responseData.find(person => person._id == ID);
      if (!filteredPerson) {
        return notFound(res, "Person details not found.");
      }
      return success(res, "Person details fetched successfully.", {
        data: [filteredPerson]
      });
    }

    return success(res, "Detailed dropdown names fetched successfully.", {
      data: responseData, // Filtered data based on applicantType
    });

  } catch (error) {
    console.error(error);
    return unknownError(res, error);
  }
};

async function getCamDetails(req, res) { 
  try {
      const { customerId } = req.query;

      if (!customerId) {
          return badRequest(res, "customerId is required");
      }

      const creditPdData = await creditPdModel.findOne({ customerId });

      let agriData;
      let milkData;
      let salaryData;
      let otherData;

      if (
        creditPdData?.incomeSource?.some(
          (src) => src?.incomeSourceType === "agricultureBusiness"
        )
      ) {
        agriData =
          creditPdData?.incomeSource?.find(
            (src) => src?.incomeSourceType === "agricultureBusiness"
          )?.agricultureBusiness ?? {};
        // console.log("Agriculture Business Data:", agriData);
      }

      if (
        creditPdData?.incomeSource?.some(
          (src) => src?.incomeSourceType === "milkBusiness"
        )
      ) {
        milkData =
          creditPdData?.incomeSource?.find(
            (src) => src?.incomeSourceType === "milkBusiness"
          )?.milkBusiness ?? {};
        // console.log("Milk Business Data:", milkData);
      }

      if (
        creditPdData?.incomeSource?.some(
          (src) => src?.incomeSourceType === "salaryIncome"
        )
      ) {
        salaryData =
          creditPdData?.incomeSource?.find(
            (src) => src?.incomeSourceType === "salaryIncome"
          )?.salaryIncome ?? {};
        // console.log("Salary Income Data:", salaryData);
      }

      if (
        creditPdData?.incomeSource?.some(
          (src) => src?.incomeSourceType === "other"
        )
      ) {
        otherData =
          creditPdData?.incomeSource?.find(
            (src) => src?.incomeSourceType === "other"
          )?.other ?? {};
        // console.log("Other Income Data:", otherData);
      }
      // Find and update OR create if not exists
      const fileStageDetail = await final.findOne({ customerId });

      // Response with updated or newly created fields
      const responseData = {
         agricultureIncomeNew:{
          ownerDetails: fileStageDetail?.agricultureIncomeNew?.ownerDetails || [],
          details: fileStageDetail?.agricultureIncomeNew?.details || [],
          totalNetAnnualIncome: fileStageDetail?.agricultureIncomeNew?.totalNetAnnualIncome || "",
          totalNetMonthlyIncome: fileStageDetail?.agricultureIncomeNew?.totalNetMonthlyIncome || "",
          noOfAgricultureOwner: fileStageDetail?.agricultureIncomeNew?.noOfAgricultureOwner || "",
          lastCropDetail: fileStageDetail?.agricultureIncomeNew?.lastCropDetail || "",
          agriDocument: fileStageDetail?.agricultureIncomeNew?.agriDocument || [],
          serveyNoAgriculture: agriData?.agriLandSurveyNo || "",
          yearOfDoingAgriculture: agriData?.agriDoingFromNoOfYears || ""
         },
         milkIncomeCalculationNew:{
          details: fileStageDetail?.milkIncomeCalculationNew?.details || [],
          averageSaleOfMilk: fileStageDetail?.milkIncomeCalculationNew?.averageSaleOfMilk || "",
          totalNetMonthlyIncomeAsPerSales: fileStageDetail?.milkIncomeCalculationNew?.totalNetMonthlyIncomeAsPerSales || "",
          totalNetAnnualIncomeAsPerSales: fileStageDetail?.milkIncomeCalculationNew?.totalNetAnnualIncomeAsPerSales || "",
          totalNetMonthlyIncomeAsPerCattle: fileStageDetail?.milkIncomeCalculationNew?.totalNetMonthlyIncomeAsPerCattle || "",
          totalNetAnnualIncomeAsPerCattle: fileStageDetail?.milkIncomeCalculationNew?.totalNetAnnualIncomeAsPerCattle || "",
          milkIncomeInTheNameOf: fileStageDetail?.milkIncomeCalculationNew?.milkIncomeInTheNameOf || "",
          milkDocument: fileStageDetail?.milkIncomeCalculationNew?.milkDocument || [],
          numberOfCattrels : milkData?.noOfMilkGivingCattles || "",
          totalMilkSupplyPerDay : milkData?.totalMilkSupplyPerDay || "",
          doingFromNoOfYears: milkData?.doingFromNoOfYears || "",
          nameOfDairy: milkData?.nameOfDairy || "",
          dairyAddress: milkData?.dairyAddress || "",
          dairyOwnerMobNo: milkData?.dairyOwnerMobNo || "",
          milkprovideFromSinceYear : milkData?.milkprovideFromSinceYear || ""
         },
         otherIncomeNew:fileStageDetail?.otherIncomeNew || {},
         netCalculationNew:fileStageDetail?.netCalculationNew || {},
      };

      success(res,"can details successfully fetched", responseData);
  } catch (error) {
      console.error(error);
      unknownError(res, error);
  }
}


async function updateCamDetails(req, res) { 
  try {
    const { customerId, agricultureIncomeNew, milkIncomeCalculationNew,otherIncomeNew,netCalculationNew } = req.body;

    if (!customerId) {
      return badRequest(res, "customerId is required");
    }

    // Find and update the agricultureBusiness inside incomeSource array
   
    if(agricultureIncomeNew && Object.keys(agricultureIncomeNew).length > 0){

      await creditPdModel.findOneAndUpdate(
        {
          customerId,
          "incomeSource.incomeSourceType": "agricultureBusiness"
        },
        {
          $set: {
            "incomeSource.$.agricultureBusiness.agriLandSurveyNo": agricultureIncomeNew?.serveyNoAgriculture || "",
            "incomeSource.$.agricultureBusiness.agriDoingFromNoOfYears": agricultureIncomeNew?.yearOfDoingAgriculture || ""
          }
        },
        { new: true }
      ).then(async (result) => {
        if (!result) {
          console.log("agricultureBusiness not found, adding new entry...");
    
          // If no document exists, push a new agricultureBusiness entry
          await creditPdModel.findOneAndUpdate(
            { customerId },
            {
              $push: {
                incomeSource: {
                  incomeSourceType: "agricultureBusiness",
                  agricultureBusiness: {
                    agriLandSurveyNo: agricultureIncomeNew?.serveyNoAgriculture || "",
                    agriDoingFromNoOfYears: agricultureIncomeNew?.yearOfDoingAgriculture || ""
                  }
                }
              }
            },
            { new: true }
          );
        }
      });
    }
   
    if(milkIncomeCalculationNew && Object.keys(milkIncomeCalculationNew).length > 0){
      console.log("in if condition<<>>><<>>")
      await creditPdModel.findOneAndUpdate(
        {
          customerId,
          "incomeSource.incomeSourceType": "milkBusiness"
        },
        {
          $set: {
            "incomeSource.$.milkBusiness.noOfMilkGivingCattles": milkIncomeCalculationNew?.numberOfCattrels,
            "incomeSource.$.milkBusiness.totalMilkSupplyPerDay": milkIncomeCalculationNew?.totalMilkSupplyPerDay,
            "incomeSource.$.milkBusiness.doingFromNoOfYears": milkIncomeCalculationNew?.doingFromNoOfYears,
            "incomeSource.$.milkBusiness.nameOfDairy": milkIncomeCalculationNew?.nameOfDairy,
            "incomeSource.$.milkBusiness.dairyAddress": milkIncomeCalculationNew?.dairyAddress,
            "incomeSource.$.milkBusiness.dairyOwnerMobNo": milkIncomeCalculationNew?.dairyOwnerMobNo,
            "incomeSource.$.milkBusiness.milkprovideFromSinceYear": milkIncomeCalculationNew?.milkprovideFromSinceYear
          }
        },
        { new: true }
      ).then(async (result) => {
        if (!result) {
          // If no matching document is found, push new milkBusiness entry
          await creditPdModel.findOneAndUpdate(
            { customerId },
            {
              $push: {
                incomeSource: {
                  incomeSourceType: "milkBusiness",
                  milkBusiness: {
                    numberOfCattrels: milkIncomeCalculationNew?.numberOfCattrels,
                    totalMilkSupplyPerDay: milkIncomeCalculationNew?.totalMilkSupplyPerDay,
                    doingFromNoOfYears: milkIncomeCalculationNew?.doingFromNoOfYears,
                    nameOfDairy: milkIncomeCalculationNew?.nameOfDairy,
                    dairyAddress: milkIncomeCalculationNew?.dairyAddress,
                    dairyOwnerMobNo: milkIncomeCalculationNew?.dairyOwnerMobNo,
                    milkprovideFromSinceYear: milkIncomeCalculationNew?.milkprovideFromSinceYear
                  }
                }
              }
            },
            { new: true }
          );
        }
      });
      
    }

    let agriData = {};
    let milkData = {};
    let salaryData = {};
    let otherData = {};

   const creditPdData = await creditPdModel.findOne({ customerId })

    if (creditPdData) {
      agriData = creditPdData.incomeSource.find(src => src.incomeSourceType === "agricultureBusiness")?.agricultureBusiness || {};
      milkData = creditPdData.incomeSource.find(src => src.incomeSourceType === "milkBusiness")?.milkBusiness || {};
      salaryData = creditPdData.incomeSource.find(src => src.incomeSourceType === "salaryIncome")?.salaryIncome || {};
      otherData = creditPdData.incomeSource.find(src => src.incomeSourceType === "other")?.other || {};
    }
    // console.log(milkData,"milkDatamilkData<><><>",creditPdData)
    // Find and update OR create if not exists
    const fileStageDetail = await final.findOneAndUpdate(
      { customerId },
      { $set: { agricultureIncomeNew,milkIncomeCalculationNew,otherIncomeNew,netCalculationNew } },
      { new: true, upsert: true }
    );

    // Response with updated or newly created fields
    const responseData = {
      agricultureIncomeNew: {
        ownerDetails: fileStageDetail?.agricultureIncomeNew?.ownerDetails || [],
        details: fileStageDetail?.agricultureIncomeNew?.details || [],
        totalNetAnnualIncome: fileStageDetail?.agricultureIncomeNew?.totalNetAnnualIncome || "",
        totalNetMonthlyIncome: fileStageDetail?.agricultureIncomeNew?.totalNetMonthlyIncome || "",
        noOfAgricultureOwner: fileStageDetail?.agricultureIncomeNew?.noOfAgricultureOwner || "",
        lastCropDetail: fileStageDetail?.agricultureIncomeNew?.lastCropDetail || "",
        agriDocument: fileStageDetail?.agricultureIncomeNew?.agriDocument || "",
        serveyNoAgriculture: agriData?.agriLandSurveyNo || "",
        yearOfDoingAgriculture: agriData?.agriDoingFromNoOfYears || ""
      },
      milkIncomeCalculationNew:{
        details: fileStageDetail?.milkIncomeCalculationNew?.details || [],
        averageSaleOfMilk: fileStageDetail?.milkIncomeCalculationNew?.averageSaleOfMilk || "",
        totalNetMonthlyIncomeAsPerSales: fileStageDetail?.milkIncomeCalculationNew?.totalNetMonthlyIncomeAsPerSales || "",
        totalNetAnnualIncomeAsPerSales: fileStageDetail?.milkIncomeCalculationNew?.totalNetAnnualIncomeAsPerSales || "",
        totalNetMonthlyIncomeAsPerCattle: fileStageDetail?.milkIncomeCalculationNew?.totalNetMonthlyIncomeAsPerCattle || "",
        totalNetAnnualIncomeAsPerCattle: fileStageDetail?.milkIncomeCalculationNew?.totalNetAnnualIncomeAsPerCattle || "",
        milkIncomeInTheNameOf: fileStageDetail?.milkIncomeCalculationNew?.milkIncomeInTheNameOf || "",
        milkDocument: fileStageDetail?.milkIncomeCalculationNew?.milkDocument || "",
        numberOfCattrels : milkData?.noOfMilkGivingCattles || "",
        totalMilkSupplyPerDay : milkData?.totalMilkSupplyPerDay || "",
        doingFromNoOfYears: milkData?.doingFromNoOfYears || "",
        nameOfDairy: milkData?.nameOfDairy || "",
        dairyAddress: milkData?.dairyAddress || "",
        dairyOwnerMobNo: milkData?.dairyOwnerMobNo || "",
        milkprovideFromSinceYear : milkData?.milkprovideFromSinceYear || ""
       },
       otherIncomeNew:fileStageDetail?.otherIncomeNew || {},
       netCalculationNew:fileStageDetail?.netCalculationNew || {},

    };

    success(res, "CAM details successfully updated", responseData);
  } catch (error) {
    console.error(error);
    unknownError(res, error);
  }
}

const newfinalMainDashboard = async (req, res) => {
  try {
    console.time();
    const empId = new mongoose.Types.ObjectId(req.Id);
    const { pageLimit, pageNumber, search, type, selfId } = req.query;
    const { offset, limit } = paginationData(pageLimit, pageNumber);

    // Build search filter
    const searchFilter = {};
    if (search) {
      searchFilter.$or = [
        { "nearestBranchData.name": { $regex: search, $options: "i" } },
        { "applicantDetail.fullName": { $regex: search, $options: "i" } },
        { customerFinId: { $regex: search, $options: "i" } },
        {
          $expr: {
            $regexMatch: {
              input: { $toString: "$mobileNo" },
              regex: search,
              options: "i",
            },
          },
        },
      ];
    }

    // Aggregation pipeline
    const userData = await customerModel.aggregate([
      {
        $lookup: {
          from: "pdformdatas",
          localField: "_id",
          foreignField: "customerId",
          as: "pdData",
        },
      },
      {
        $addFields: {
          pdData: { $arrayElemAt: ["$pdData", 0] },
        },
      },
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "_id",
          foreignField: "customerId",
          as: "finalSanctionData",
        },
      },
      {
        $addFields: {
          finalSanctionData: { $arrayElemAt: ["$finalSanctionData", 0] },
        },
      },
      {
        $match: {
          $and: [
            { "finalSanctionData.finalSenctionFileSelfAssign": true },
            type === "Ho"
              ? { "finalSanctionData.employeeId": new ObjectId(empId) }
              : { "finalSanctionData.branchSelfAssignEmpId": new ObjectId(empId) },
          ],
        },
      },
      {
        $lookup: {
          from: "products",
          localField: "productId",
          foreignField: "_id",
          as: "productData",
        },
      },
      {
        $lookup: {
          from: "employees",
          localField: "employeId",
          foreignField: "_id",
          as: "employeeDetail",
        },
      },
      {
        $lookup: {
          from: "employees",
          localField: "employeeDetail.reportingManagerId",
          foreignField: "_id",
          as: "salesManagerDetails",
        },
      },
      {
        $lookup: {
          from: "newbranches",
          localField: "employeeDetail.branchId",
          foreignField: "_id",
          as: "nearestBranchData",
        },
      },
      {
        $lookup: {
          from: "applicantdetails",
          localField: "_id",
          foreignField: "customerId",
          as: "applicantDetail",
        },
      },
      {
        $lookup: {
          from: "cibildetails",
          localField: "_id",
          foreignField: "customerId",
          as: "cibildetailDetail",
        },
      },
      {
        $addFields: {
          productData: { $arrayElemAt: ["$productData", 0] },
          employeeDetail: { $arrayElemAt: ["$employeeDetail", 0] },
          salesManagerDetails: { $arrayElemAt: ["$salesManagerDetails", 0] },
          nearestBranchData: { $arrayElemAt: ["$nearestBranchData", 0] },
          applicantDetail: { $arrayElemAt: ["$applicantDetail", 0] },
          cibildetailDetail: { $arrayElemAt: ["$cibildetailDetail", 0] },
        },
      },
      {
        $project: {
          _id: 1,
          employeId: 1,
          productId: 1,
          customerFinId: 1,
          mobileNo: 1,
          loanAmount: 1,
          roi: 1,
          tenure: 1,
          emi: 1,
          executiveName: 1,
          createdAt: 1,
          updatedAt: 1,
          "applicantDetail.fullName": 1,
          "applicantDetail.fatherName": 1,
          "applicantDetail.mobileNo": 1,
          "applicantDetail.applicantPhoto": 1,
          "applicantDetail.applicantAddress":
            "$applicantDetail.permanentAddress.addressLine1",
          "cibildetailDetail.applicantCibilScore": 1,
          "nearestBranchData.name": 1,
          "productData.productName": 1,
          "employeeDetail.employeName": 1,
          "employeeDetail.userName": 1,
          "employeeDetail.employeUniqueId": 1,
          "salesManagerDetails.employeName": 1,
          "salesManagerDetails.employeUniqueId": 1,
          "salesManagerDetails.userName": 1,
          tvrDetails: {
            income: "7%",
            propertyValue: "50L",
            foir: "30%",
            ltv: "9%",
          },
        },
      },
      { $match: searchFilter },
      {
        $facet: {
          paginatedResults: [{ $skip: offset }, { $limit: limit }],
          totalCount: [{ $count: "count" }],
        },
      },
    ]);

    const totalCount = userData[0].totalCount[0]?.count || 0;
    const paginatedResults = userData[0].paginatedResults;
    console.timeEnd();

    return success(res, "All customer details List", {
      totalCount,
      userDataLength: paginatedResults.length,
      userData: paginatedResults,
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
};

const addRatnaEsignLink = async (req,res) =>{
  try{
    const { pasteEsignDocument, customerId } = req.body
    const data = await final.findOneAndUpdate(
      {customerId },
      {
        $set:{
          pasteEsignDocument
        }
      },
      {
        new:true
      }
    )
    return success(res, "link paste successfully", {
      data:data?.pasteEsignDocument || {}
    });
  } catch (error) {
    console.log(error);
    return unknownError(res, error);
  }
}

//newFileManagementDashbord

const newFileManagementDashbord = async (req, res) => {
  try {
    const {
      regionalBranch,
      branch,
      product,
      hoSelfAssign,
      branchSelfAssign,
      startDateFilter,
      endDateFilter,
      finalApproverStatus,
      fileProcessStatus,
      pageLimit = 10000,
      pageNumber = 1,
      searchQuery,
      sanctionStage,
      status, // Status filter parameter
      responsibility, // Added responsibility filter
    } = req.query;

    const employeeId = req.Id;

    const activeVendors = await vendorTypeModel.find({ status: "active" }).select("vendorType");
    const vendorTypes = activeVendors.map(v => v.vendorType);
    // Basic validation
    const employeeExist = await employeModel
      .findOne({ _id: employeeId, status: "active" }, { _id: 1 })
      .lean();

    if (!employeeExist) {
      return badRequest(res, "Employee Not Found");
    }

    const today = new Date();
    const defaultStartDate = new Date(today.setHours(0, 0, 0, 0));
    const defaultEndDate = new Date(today.setHours(23, 59, 59, 999));

    function formatDateToISO(date) {
      return new Date(date).toISOString();
    }

    let formattedStart = startDateFilter && startDateFilter !== "all"
      ? new Date(new Date(startDateFilter).setHours(0, 0, 0, 0))
      : defaultStartDate;

    let formattedEnd = endDateFilter && endDateFilter !== "all"
      ? new Date(new Date(endDateFilter).setHours(23, 59, 59, 999))
      : defaultEndDate;

    if (startDateFilter && endDateFilter && startDateFilter === endDateFilter) {
      formattedStart = new Date(new Date(startDateFilter).setHours(0, 0, 0, 0));
      formattedEnd = new Date(new Date(startDateFilter).setHours(23, 59, 59, 999));
    }

    formattedStart = formatDateToISO(formattedStart);
    formattedEnd = formatDateToISO(formattedEnd);

    // Define status map for exact matching
    const statusMap = {
      "PD DONE": "pd done",
      "UNDER PROCESS": "under process",
      "INCOME SANCTION": "income sanction",
      "SANCTION": "sanction",
      "FINAL QUERY": "final query",
      "RTD": "rtd",
      "DISBURSED": "disbursed",
      "PARTIAL DISBURSED": "partial disbursed",
      "HOLD": "hold",
      "REJECT": "reject"
    };

    // Get normalized status for matching if provided
    let normalizedStatusFilter = null;
    if (status && status !== "all") {
      // Look for an exact match in the status keys (case insensitive)
      const statusKey = Object.keys(statusMap).find(
        key => key.toLowerCase() === status.toLowerCase()
      );
      
      if (statusKey) {
        normalizedStatusFilter = statusMap[statusKey];
      } else {
        // If not found in our mapping, just use the provided status in lowercase
        normalizedStatusFilter = status.toLowerCase();
      }
    }

    // Normalize responsibility for case-insensitive matching
    let normalizedResponsibility = null;
    if (responsibility && responsibility !== "all") {
      normalizedResponsibility = responsibility.toLowerCase();
    }

    const initialPipeline = [
      // Initial basic match
      {
        $match: {
          fileStatus: "active",
          statusByCreditPd: { $in: ["complete", "approve"] }
        }
      },
      
      // Only lookup what's needed for filtering
      {
        $lookup: {
          from: "customerdetails",
          localField: "customerId",
          foreignField: "_id",
          as: "customerDetailData"
        }
      },
      { 
        $unwind: { 
          path: "$customerDetailData",
          preserveNullAndEmptyArrays: true 
        }
      },
      {
        $lookup: {
          from: "products",
          localField: "customerDetailData.productId",
          foreignField: "_id",
          as: "productData"
        }
      },
      {
        $unwind: {
          path: "$productData",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "newbranches",
          localField: "customerDetailData.branch",
          foreignField: "_id",
          as: "newbranchesData"
        }
      },
      {
        $unwind: {
          path: "$newbranchesData",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "newbranches",
          localField: "branchDetails.regionalBranchId",
          foreignField: "_id",
          as: "regionalBranchDetails"
        }
      },
      {
        $unwind: {
          path: "$regionalBranchDetails",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "applicantdetails",
          localField: "customerId",
          foreignField: "customerId",
          as: "applicantDetails"
        }
      },
      {
        $unwind: {
          path: "$applicantDetails",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "finalsanctiondetaails",
          localField: "customerId",
          foreignField: "customerId",
          as: "finalsanctionData"
        }
      },
      {
        $unwind: {
          path: "$finalsanctionData",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "lenders",
          localField: "finalsanctionData.partnerId",
          foreignField: "_id",
          as: "partnerDetailData"
        }
      },
      {
        $unwind: {
          path: "$partnerDetailData",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "internallegals",
          localField: "customerId",
          foreignField: "customerId",
          as: "loanTypeDetail"
        }
      },
      {
        $unwind: {
          path: "$loanTypeDetail",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "pdformdatas",
          localField: "customerId",
          foreignField: "customerId",
          as: "creditPdData"
        }
      },
      {
        $unwind: {
          path: "$creditPdData",
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: "externalvendordynamics",
          localField: "customerId",
          foreignField: "customerId",
          as: "externalvendordynamicData"
        }
      },
      {
        $unwind: {
          path: "$externalvendordynamicData",
          preserveNullAndEmptyArrays: true
        }
      },
      // Apply all filters 
      {
        $match: {
          $and: [
            // Search query
            searchQuery ? {
              $or: [
                { "applicantDetails.mobileNo": { $regex: searchQuery, $options: "i" } },
                { "applicantDetails.fullName": { $regex: searchQuery, $options: "i" } },
                { "applicantDetails.fatherName": { $regex: searchQuery, $options: "i" } },
                { "customerDetailData.customerFinId": { $regex: searchQuery, $options: "i" } }
              ]
            } : {},

            // Branch filter - FIXED
            branch && branch !== "all" ? {
              "customerDetailData.branch": new ObjectId(branch)
            } : {},

            // Regional branch filter
            regionalBranch && regionalBranch !== "all" ? {
              "regionalBranchDetails._id": {
                $in: (Array.isArray(regionalBranch) ? regionalBranch : regionalBranch.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},

            // Product filter
            product && product !== "all" ? {
              "customerDetailData.productId": {
                $in: (Array.isArray(product) ? product : product.split(","))
                  .map(id => new ObjectId(id))
              }
            } : {},
            // File Status filter - UPDATED for exact matching
            normalizedStatusFilter
            ? {
                $expr: {
                  $eq: [
                    { $toLower: "$finalsanctionData.fileStatus" },
                    normalizedStatusFilter
                  ]
                }
              }
            : {},

            // Responsibility filter
            normalizedResponsibility
            ? {
                $expr: {
                  $eq: [
                    { $toLower: "$finalsanctionData.responsibility" },
                    normalizedResponsibility
                  ]
                }
              }
            : {},

            startDateFilter && endDateFilter && startDateFilter !== "all" && endDateFilter !== "all"? {
              creditPdCompleteDate: {
                $gte: formattedStart,
                $lt: formattedEnd,
              }
            }:{},
                        
            // Exclude specific products when no product filter
            (!product || product === "all") ? {
              "customerDetailData.productId": {
                $nin: [].map(id => new ObjectId(id))
              }
            } : {}
          ].filter(condition => Object.keys(condition).length > 0)
        }
      },

      {
        $addFields: {
          customerFinId: "$customerDetailData.customerFinId",
          loginDate: "$customerDetailData.paymentDate",
          loginTat: {
            $let: {
              vars: {
                caDate: { $toDate: "$customerDetailData.paymentDate" },
                today: { $toDate: "$$NOW" }
              },
              in: {
                $cond: {
                  if: { $not: ["$$caDate"] },
                  then: null,
                  else: {
                    $ceil: {
                      $divide: [
                        {
                          $subtract: [
                            { $dateTrunc: { date: "$$today", unit: "day" } },
                            { $dateTrunc: { date: "$$caDate", unit: "day" } }
                          ]
                        },
                        86400000
                      ]
                    }
                  }
                }
              }
            }
          },
          productId: "$productData._id",
          productName: "$productData.productName",
          branchId: "$newbranchesData._id",
          branchName: "$newbranchesData.name",
          fileStatus: "$finalsanctionData.fileStatus",
          responsibility: "$finalsanctionData.responsibility",
          hoRemark: "$finalsanctionData.hoRemark",
          esignLinks: {
            $cond: {
              if: {
                $and: [
                  { $ne: ["$finalsanctionData.signEsignLink", null] },
                  { $ne: ["$finalsanctionData.signEsignLink", {}] },
                  { $gt: [{ $size: { $objectToArray: { $ifNull: ["$finalsanctionData.signEsignLink", {}] } } }, 0] }
                ]
              },
              then: "$finalsanctionData.signEsignLink",
              else: "$finalsanctionData.esignLinks"
            }
          },
          partnerName: "$partnerDetailData.fullName",
          partnerPending: "$finalsanctionData.partnerPending",
          loanType: { $ifNull: ["$loanTypeDetail.LoanType", ""] },
          emiAmount: { $ifNull: ["$loanTypeDetail.emiAmount", ""] },
          roi: { $ifNull: ["$loanTypeDetail.roi", ""] },
          tenure: { $ifNull: ["$loanTypeDetail.tenureInMonth", ""] },
          finalLoanAmount: { $ifNull: ["$loanTypeDetail.finalLoanAmount", ""] },
          mobileNo: { $ifNull: ["$applicantDetails.mobileNo", ""] },
          fatherName: { $ifNull: ["$applicantDetails.fatherName", ""] },
          fullName: { $ifNull: ["$applicantDetails.fullName", ""] }, //creditPdData
          cibilOkDate: { $ifNull: ["$externalvendordynamicData.createdAt", ""] },
          pdTat: {
            $let: {
              vars: {
                caDate: { $toDate: "$externalvendordynamicData.createdAt" },
                today: { $toDate: "$$NOW" }
              },
              in: {
                $cond: {
                  if: { $not: ["$$caDate"] },
                  then: null,
                  else: {
                    $ceil: {
                      $divide: [
                        {
                          $subtract: [
                            { $dateTrunc: { date: "$$today", unit: "day" } },
                            { $dateTrunc: { date: "$$caDate", unit: "day" } }
                          ]
                        },
                        86400000
                      ]
                    }
                  }
                }
              }
            }
          },
          
        }
      },
    
      // Project needed fields
      {
        $project: {
          _id: 1,
          customerId: 1,
          customerFinId: 1,
          loginDate: 1,
          loginTat:1,
          productId: 1,
          productName: 1,
          branchName: 1,
          branchId: 1,
          fileStatus: 1,
          responsibility: 1,
          hoRemark: 1,
          partnerPending:1,
          loanType:1,
          fullName:1,
          fatherName:1,
          mobileNo:1,
          cibilOkDate:1,
          pdTat:1,
          partnerName:1,
          esignLinks: {
            $cond: {
              if: { $ifNull: ["$esignLinks", null] },
              then: "Yes",
              else: "No"
            }
          },
          emiAmount:1,
          roi:1,
          tenure:1,
          finalLoanAmount:1
        }
      }
    ];

    //lead management 
  //  add product setup - feature
    // Execute the initial pipeline to get filtered customer IDs
    const filteredCustomers = await externalVendorFormModel
      .aggregate(initialPipeline)
      .allowDiskUse(true);

    // For counting, we'll use the updated statusMap format
    const statusCounts = {};
    Object.keys(statusMap).forEach(status => {
      statusCounts[status] = 0;
    });

    // Count files by status (case-insensitive with exact matching)
    filteredCustomers.forEach(customer => {
      if (customer.fileStatus) {
        const normalizedStatus = customer.fileStatus.toLowerCase();
        
        for (const [statusKey, normalizedKey] of Object.entries(statusMap)) {
          if (normalizedStatus === normalizedKey) {
            statusCounts[statusKey]++;
            break;
          }
        }
      }
    });

    // Capturing any other statuses not explicitly defined
    const otherStatuses = {};
    filteredCustomers.forEach(customer => {
      if (customer.fileStatus) {
        const normalizedStatus = customer.fileStatus.toLowerCase();
        let matched = false;
        
        for (const normalizedKey of Object.values(statusMap)) {
          if (normalizedStatus === normalizedKey) {
            matched = true;
            break;
          }
        }
        
        if (!matched) {
          // This is a status we didn't account for
          const originalStatus = customer.fileStatus;
          otherStatuses[originalStatus] = (otherStatuses[originalStatus] || 0) + 1;
        }
      }
    });

    // Count by responsibility
    const responsibilityCounts = {
      "HO": 0,
      "Branch": 0,
      "Other": 0
    };

    filteredCustomers.forEach(customer => {
      if (customer.responsibility) {
        const normalizedResp = customer.responsibility.toLowerCase();
        if (normalizedResp === "ho") {
          responsibilityCounts["HO"]++;
        } else if (normalizedResp === "branch") {
          responsibilityCounts["Branch"]++;
        } else {
          responsibilityCounts["Other"]++;
        }
      }
    });

    return success(res, "customerDetails", {
      totalCount: filteredCustomers.length,
      statusCounts: statusCounts,
      otherStatusCounts: otherStatuses,
      responsibilityCounts: responsibilityCounts,
      filteredCustomers: filteredCustomers,
    });

  } catch (error) {
    console.error(error);
    return unknownError(res, error.message);
  }
};

module.exports = {
  customerLoanType,
  customerDetailsList,
  customerDetails,
  dealSummaryType,
  customerApplicantDetail,
  customerCoApplicantDetail,
  customerCoApplicantDetailold,
  customerGuarantorDetail,
  customerReferenceDetail,
  customerCibilDetail,
  customerbankDetail,
  customercollateralDetail,
  customerloanAgreementDetail,
  customercreditAndPdReportDetail,
  customerdueDiligenceReportDetail,
  partnerNameDetails,
  branchPendencyDetails,
  sanctionDetails,
  disbursementDetails,
  inventoryManagement,
  sendToPartner,
  addCibilDetails,
  updateCibilDetails,
  growMonetSendToPartner,
  excelSheetData,
  ratnaFinSendToPartner,
  ratnaFinGenerateEsign,
  growMoneySendToPartner,
  growMoneyGenerateEsign,
  allDocuments,
  getAllDocumentDashboard,
  uploadDocuments,
  addLoanDocuments,
  partnerDocumentRequest,
  uploadRequestDocument,
  requestDocumentList,
  addDocumetsList,
  uploadkycDocument,
  ratnaFinSendEmail,
  sanctionPendency,
  sanctionPendencyDetails,
  updateDocument,
  downloadSanctionDocument,
  sendToPartnernew,
  sendEmailToPartner,
  sendEmailToPartnerForEsign,
  sendEmailToCustomerForEsign,
  eSignGenerate,
  addOrUpdateGoogleSheetData,
  selectPartner,
  getPartnerDetails,
  addQuery,
  getQuery,
  addCoAppCibilDetails,
  // createCamReport,
  downloadCamReport,
  SelectSelection,
  IncomeSanctionsendToPartner,
  IncomeSanctionSendEmail,
  allLegalPdfs,
  dobsignnew,
  addSelfAssign,
  disbursementFormAdd,
  slefAssignList, 
  getAllEstampReq,
  eStampUploadApi,
  getPartnerDetailByCustomerId,
  eStampUploadApi,
  getPartnerDetailByCustomerId,
  getCustomerEsignDocument,
  getCustomerEsignUrl,
  updatePropertyDetails,
  RejectByHo,
  updateStatusByHo,
  dashbordCountUser,
  customerListFileProcess,
  testecustomerDetailsList,
  getDissionBox,
  DissionBox,
  getDissionBox,
  getEstampReq,
  signEsignDocument,
  signEsignDocumentDetails,
  deedpdfs,
  updateStatus,
  statusList,
  newUploadDocuments,
  generateLegalityDocument,
  webhookMethod,
  finalApprovalDashbord,
  secondWebhookMethod,
  documentLeegilatyDetails,
  getDashboardTableByEmployee,
  getDashboardDataByProduct,
  // sendToPartnernew1,
  disbursementEstampDelete,
  finalApprovalDashboardUpdate,
  finalApprovalFilterApi,
  testDigioApi,
  sendToBranch,
  sendToPartnerSanction,
  addDistanceOfMap,
  testDigioApi_done,
  uploadDocument,
  documentList,
  docGenerate,
  fileStageStatusUpdate,
  getFileStageForAllCustomers,
  addMortgageDetails,
  getMortgageDetails,
  reUploadDocument,
  customerAllData,
  updateLenderProduct,
  customerPolicyCheck,
  customerDocumentCheck,
  generateDocumentZip,
  finalMainDashboard,
  overAllDashboard,
  updateStatusApi,
  getCamDetails,
  updateCamDetails,
  camDropDown,
  newfinalMainDashboard,
  // createNewCamReport,
  PartnerValidation,
  uploadDocumentList,
  addRatnaEsignLink,
  finalMainDashboardMonthlyCount,
  newFileManagementDashbord
};
